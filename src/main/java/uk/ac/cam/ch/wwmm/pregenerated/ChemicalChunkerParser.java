// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-04-07 14:52:21

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DT-THE'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PRP$'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=31;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=30;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__215=215;
    public static final int NounPhrase=6;
    public static final int T__216=216;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int T__219=219;
    public static final int TempPhrase=18;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=28;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int MOLECULE=27;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__210=210;
    public static final int T__212=212;
    public static final int T__211=211;
    public static final int Unmatched=5;
    public static final int RolePrepPhrase=16;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int MIXTURE=13;
    public static final int VOLUME=22;
    public static final int Sentence=4;
    public static final int MASS=20;
    public static final int DissolvePhrase=8;
    public static final int QUANTITY=29;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=24;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int AtmospherePhrase=17;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=25;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__199=199;
    public static final int T__58=58;
    public static final int T__198=198;
    public static final int T__51=51;
    public static final int T__197=197;
    public static final int T__52=52;
    public static final int T__196=196;
    public static final int T__53=53;
    public static final int T__195=195;
    public static final int T__54=54;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;
    public static final int OSCARCM=26;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[841+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:49:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:49:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:49:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:49:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document178_static.FOLLOW_sentences_in_document178);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 49:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:49:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences199_static.FOLLOW_sentenceStructure_in_sentences199);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences201_static.FOLLOW_unmatchedPhrase_in_sentences201);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 129:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences205_static.FOLLOW_stop_in_sentences205);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure215_static.FOLLOW_nounphrase_in_sentenceStructure215);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure217_static.FOLLOW_verbphrase_in_sentenceStructure217);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure219_static.FOLLOW_prepphrase_in_sentenceStructure219);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure221_static.FOLLOW_prepphraseAfter_in_sentenceStructure221);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure226_static.FOLLOW_advAdj_in_sentenceStructure226);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure228_static.FOLLOW_colon_in_sentenceStructure228);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure233_static.FOLLOW_conjunction_in_sentenceStructure233);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure235_static.FOLLOW_rbconj_in_sentenceStructure235);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure237_static.FOLLOW_comma_in_sentenceStructure237);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:56:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase250_static.FOLLOW_unmatchedToken_in_unmatchedPhrase250);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 57:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:1: unmatchedToken : ( number | advAdj | oscaront | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | abl | abn | abx | ap | at | be | bed | bedz | beg | bem | ben | ber | bez | cc | cs | dotok | dod | doz | dt | dtTHE | dti | dts | dtx | fw | fwin | hv | hvd | hvg | hvn | md | nc | nn | nn_poss | nns | nns_poss | np | nnp | np_poss | nps | nps_poss | nr | pn | pn_poss | pp_poss | pp_poss_poss | ppl | ppls | prp | prp_poss | ppo | pps | ppss | ql | qlp | rbconj | rn | sym | uh | clause | comma ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.oscaront_return oscaront17 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode18 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode19 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp20 = null;

        ChemicalChunkerParser.inAll_return inAll21 = null;

        ChemicalChunkerParser.nnexample_return nnexample22 = null;

        ChemicalChunkerParser.nnstate_return nnstate23 = null;

        ChemicalChunkerParser.nntime_return nntime24 = null;

        ChemicalChunkerParser.nnmass_return nnmass25 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar26 = null;

        ChemicalChunkerParser.nnamount_return nnamount27 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere28 = null;

        ChemicalChunkerParser.nneq_return nneq29 = null;

        ChemicalChunkerParser.nnvol_return nnvol30 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity31 = null;

        ChemicalChunkerParser.nntemp_return nntemp32 = null;

        ChemicalChunkerParser.nnflash_return nnflash33 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral34 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod35 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure36 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn37 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography38 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum39 = null;

        ChemicalChunkerParser.nncycle_return nncycle40 = null;

        ChemicalChunkerParser.nntimes_return nntimes41 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm42 = null;

        ChemicalChunkerParser.verb_return verb43 = null;

        ChemicalChunkerParser.nnadd_return nnadd44 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture45 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus46 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate47 = null;

        ChemicalChunkerParser.nndry_return nndry48 = null;

        ChemicalChunkerParser.nnextract_return nnextract49 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter50 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate51 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify52 = null;

        ChemicalChunkerParser.nnremove_return nnremove53 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize54 = null;

        ChemicalChunkerParser.nnyield_return nnyield55 = null;

        ChemicalChunkerParser.colon_return colon56 = null;

        ChemicalChunkerParser.apost_return apost57 = null;

        ChemicalChunkerParser.neg_return neg58 = null;

        ChemicalChunkerParser.dash_return dash59 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent60 = null;

        ChemicalChunkerParser.lsqb_return lsqb61 = null;

        ChemicalChunkerParser.rsqb_return rsqb62 = null;

        ChemicalChunkerParser.lrb_return lrb63 = null;

        ChemicalChunkerParser.rrb_return rrb64 = null;

        ChemicalChunkerParser.abl_return abl65 = null;

        ChemicalChunkerParser.abn_return abn66 = null;

        ChemicalChunkerParser.abx_return abx67 = null;

        ChemicalChunkerParser.ap_return ap68 = null;

        ChemicalChunkerParser.at_return at69 = null;

        ChemicalChunkerParser.be_return be70 = null;

        ChemicalChunkerParser.bed_return bed71 = null;

        ChemicalChunkerParser.bedz_return bedz72 = null;

        ChemicalChunkerParser.beg_return beg73 = null;

        ChemicalChunkerParser.bem_return bem74 = null;

        ChemicalChunkerParser.ben_return ben75 = null;

        ChemicalChunkerParser.ber_return ber76 = null;

        ChemicalChunkerParser.bez_return bez77 = null;

        ChemicalChunkerParser.cc_return cc78 = null;

        ChemicalChunkerParser.cs_return cs79 = null;

        ChemicalChunkerParser.dotok_return dotok80 = null;

        ChemicalChunkerParser.dod_return dod81 = null;

        ChemicalChunkerParser.doz_return doz82 = null;

        ChemicalChunkerParser.dt_return dt83 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE84 = null;

        ChemicalChunkerParser.dti_return dti85 = null;

        ChemicalChunkerParser.dts_return dts86 = null;

        ChemicalChunkerParser.dtx_return dtx87 = null;

        ChemicalChunkerParser.fw_return fw88 = null;

        ChemicalChunkerParser.fwin_return fwin89 = null;

        ChemicalChunkerParser.hv_return hv90 = null;

        ChemicalChunkerParser.hvd_return hvd91 = null;

        ChemicalChunkerParser.hvg_return hvg92 = null;

        ChemicalChunkerParser.hvn_return hvn93 = null;

        ChemicalChunkerParser.md_return md94 = null;

        ChemicalChunkerParser.nc_return nc95 = null;

        ChemicalChunkerParser.nn_return nn96 = null;

        ChemicalChunkerParser.nn_poss_return nn_poss97 = null;

        ChemicalChunkerParser.nns_return nns98 = null;

        ChemicalChunkerParser.nns_poss_return nns_poss99 = null;

        ChemicalChunkerParser.np_return np100 = null;

        ChemicalChunkerParser.nnp_return nnp101 = null;

        ChemicalChunkerParser.np_poss_return np_poss102 = null;

        ChemicalChunkerParser.nps_return nps103 = null;

        ChemicalChunkerParser.nps_poss_return nps_poss104 = null;

        ChemicalChunkerParser.nr_return nr105 = null;

        ChemicalChunkerParser.pn_return pn106 = null;

        ChemicalChunkerParser.pn_poss_return pn_poss107 = null;

        ChemicalChunkerParser.pp_poss_return pp_poss108 = null;

        ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss109 = null;

        ChemicalChunkerParser.ppl_return ppl110 = null;

        ChemicalChunkerParser.ppls_return ppls111 = null;

        ChemicalChunkerParser.prp_return prp112 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss113 = null;

        ChemicalChunkerParser.ppo_return ppo114 = null;

        ChemicalChunkerParser.pps_return pps115 = null;

        ChemicalChunkerParser.ppss_return ppss116 = null;

        ChemicalChunkerParser.ql_return ql117 = null;

        ChemicalChunkerParser.qlp_return qlp118 = null;

        ChemicalChunkerParser.rbconj_return rbconj119 = null;

        ChemicalChunkerParser.rn_return rn120 = null;

        ChemicalChunkerParser.sym_return sym121 = null;

        ChemicalChunkerParser.uh_return uh122 = null;

        ChemicalChunkerParser.clause_return clause123 = null;

        ChemicalChunkerParser.comma_return comma124 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:2: ( ( number | advAdj | oscaront | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | abl | abn | abx | ap | at | be | bed | bedz | beg | bem | ben | ber | bez | cc | cs | dotok | dod | doz | dt | dtTHE | dti | dts | dtx | fw | fwin | hv | hvd | hvg | hvn | md | nc | nn | nn_poss | nns | nns_poss | np | nnp | np_poss | nps | nps_poss | nr | pn | pn_poss | pp_poss | pp_poss_poss | ppl | ppls | prp | prp_poss | ppo | pps | ppss | ql | qlp | rbconj | rn | sym | uh | clause | comma ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:4: ( number | advAdj | oscaront | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | abl | abn | abx | ap | at | be | bed | bedz | beg | bem | ben | ber | bez | cc | cs | dotok | dod | doz | dt | dtTHE | dti | dts | dtx | fw | fwin | hv | hvd | hvg | hvn | md | nc | nn | nn_poss | nns | nns_poss | np | nnp | np_poss | nps | nps_poss | nr | pn | pn_poss | pp_poss | pp_poss_poss | ppl | ppls | prp | prp_poss | ppo | pps | ppss | ql | qlp | rbconj | rn | sym | uh | clause | comma )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:4: ( number | advAdj | oscaront | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | abl | abn | abx | ap | at | be | bed | bedz | beg | bem | ben | ber | bez | cc | cs | dotok | dod | doz | dt | dtTHE | dti | dts | dtx | fw | fwin | hv | hvd | hvg | hvn | md | nc | nn | nn_poss | nns | nns_poss | np | nnp | np_poss | nps | nps_poss | nr | pn | pn_poss | pp_poss | pp_poss_poss | ppl | ppls | prp | prp_poss | ppo | pps | ppss | ql | qlp | rbconj | rn | sym | uh | clause | comma )
            int alt7=110;
            switch ( input.LA(1) ) {
            case 32:
            case 35:
            case 149:
            case 183:
                {
                alt7=1;
                }
                break;
            case 33:
            case 34:
            case 39:
            case 167:
            case 168:
            case 169:
            case 170:
            case 197:
            case 198:
            case 200:
            case 201:
            case 203:
                {
                alt7=2;
                }
                break;
            case 36:
                {
                alt7=3;
                }
                break;
            case 37:
                {
                alt7=4;
                }
                break;
            case 38:
                {
                alt7=5;
                }
                break;
            case 40:
                {
                alt7=6;
                }
                break;
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 166:
            case 205:
                {
                alt7=7;
                }
                break;
            case 57:
                {
                alt7=8;
                }
                break;
            case 58:
                {
                alt7=9;
                }
                break;
            case 59:
                {
                alt7=10;
                }
                break;
            case 60:
                {
                alt7=11;
                }
                break;
            case 61:
                {
                alt7=12;
                }
                break;
            case 62:
                {
                alt7=13;
                }
                break;
            case 63:
                {
                alt7=14;
                }
                break;
            case 64:
                {
                alt7=15;
                }
                break;
            case 65:
                {
                alt7=16;
                }
                break;
            case 66:
                {
                alt7=17;
                }
                break;
            case 67:
                {
                alt7=18;
                }
                break;
            case 68:
                {
                alt7=19;
                }
                break;
            case 69:
                {
                alt7=20;
                }
                break;
            case 70:
                {
                alt7=21;
                }
                break;
            case 71:
                {
                alt7=22;
                }
                break;
            case 72:
                {
                alt7=23;
                }
                break;
            case 73:
                {
                alt7=24;
                }
                break;
            case 74:
                {
                alt7=25;
                }
                break;
            case 75:
                {
                alt7=26;
                }
                break;
            case 76:
                {
                alt7=27;
                }
                break;
            case 77:
                {
                alt7=28;
                }
                break;
            case 78:
            case 79:
            case 80:
            case 81:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 111:
            case 113:
            case 114:
            case 115:
            case 117:
            case 118:
            case 120:
            case 121:
            case 122:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
                {
                alt7=29;
                }
                break;
            case 82:
                {
                alt7=30;
                }
                break;
            case 83:
                {
                alt7=31;
                }
                break;
            case 93:
                {
                alt7=32;
                }
                break;
            case 95:
                {
                alt7=33;
                }
                break;
            case 100:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 104:
                {
                alt7=36;
                }
                break;
            case 110:
                {
                alt7=37;
                }
                break;
            case 112:
                {
                alt7=38;
                }
                break;
            case 116:
                {
                alt7=39;
                }
                break;
            case 119:
                {
                alt7=40;
                }
                break;
            case 123:
                {
                alt7=41;
                }
                break;
            case 124:
                {
                alt7=42;
                }
                break;
            case 126:
                {
                alt7=43;
                }
                break;
            case 127:
                {
                alt7=44;
                }
                break;
            case 128:
                {
                alt7=45;
                }
                break;
            case 130:
                {
                alt7=46;
                }
                break;
            case 131:
                {
                alt7=47;
                }
                break;
            case 132:
                {
                alt7=48;
                }
                break;
            case 133:
                {
                alt7=49;
                }
                break;
            case 134:
                {
                alt7=50;
                }
                break;
            case 135:
                {
                alt7=51;
                }
                break;
            case 136:
                {
                alt7=52;
                }
                break;
            case 137:
                {
                alt7=53;
                }
                break;
            case 138:
                {
                alt7=54;
                }
                break;
            case 139:
                {
                alt7=55;
                }
                break;
            case 140:
                {
                alt7=56;
                }
                break;
            case 141:
                {
                alt7=57;
                }
                break;
            case 142:
                {
                alt7=58;
                }
                break;
            case 143:
                {
                alt7=59;
                }
                break;
            case 144:
                {
                alt7=60;
                }
                break;
            case 145:
                {
                alt7=61;
                }
                break;
            case 146:
                {
                alt7=62;
                }
                break;
            case 147:
                {
                alt7=63;
                }
                break;
            case 148:
                {
                alt7=64;
                }
                break;
            case 150:
                {
                alt7=65;
                }
                break;
            case 151:
                {
                alt7=66;
                }
                break;
            case 152:
                {
                alt7=67;
                }
                break;
            case 153:
                {
                alt7=68;
                }
                break;
            case 154:
                {
                alt7=69;
                }
                break;
            case 155:
                {
                alt7=70;
                }
                break;
            case 156:
                {
                alt7=71;
                }
                break;
            case 157:
                {
                alt7=72;
                }
                break;
            case 158:
                {
                alt7=73;
                }
                break;
            case 160:
                {
                alt7=74;
                }
                break;
            case 161:
                {
                alt7=75;
                }
                break;
            case 162:
                {
                alt7=76;
                }
                break;
            case 163:
                {
                alt7=77;
                }
                break;
            case 164:
                {
                alt7=78;
                }
                break;
            case 165:
                {
                alt7=79;
                }
                break;
            case 171:
                {
                alt7=80;
                }
                break;
            case 172:
                {
                alt7=81;
                }
                break;
            case 173:
                {
                alt7=82;
                }
                break;
            case 174:
                {
                alt7=83;
                }
                break;
            case 175:
                {
                alt7=84;
                }
                break;
            case 176:
                {
                alt7=85;
                }
                break;
            case 177:
                {
                alt7=86;
                }
                break;
            case 178:
                {
                alt7=87;
                }
                break;
            case 179:
                {
                alt7=88;
                }
                break;
            case 180:
                {
                alt7=89;
                }
                break;
            case 181:
                {
                alt7=90;
                }
                break;
            case 182:
                {
                alt7=91;
                }
                break;
            case 184:
                {
                alt7=92;
                }
                break;
            case 185:
                {
                alt7=93;
                }
                break;
            case 186:
                {
                alt7=94;
                }
                break;
            case 187:
                {
                alt7=95;
                }
                break;
            case 188:
                {
                alt7=96;
                }
                break;
            case 189:
                {
                alt7=97;
                }
                break;
            case 190:
                {
                alt7=98;
                }
                break;
            case 191:
                {
                alt7=99;
                }
                break;
            case 192:
                {
                alt7=100;
                }
                break;
            case 193:
                {
                alt7=101;
                }
                break;
            case 194:
                {
                alt7=102;
                }
                break;
            case 195:
                {
                alt7=103;
                }
                break;
            case 196:
                {
                alt7=104;
                }
                break;
            case 199:
                {
                alt7=105;
                }
                break;
            case 202:
                {
                alt7=106;
                }
                break;
            case 204:
                {
                alt7=107;
                }
                break;
            case 206:
                {
                alt7=108;
                }
                break;
            case 159:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
                {
                alt7=109;
                }
                break;
            case 125:
                {
                alt7=110;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:5: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedToken270_static.FOLLOW_number_in_unmatchedToken270);
                    number15=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:12: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken272_static.FOLLOW_advAdj_in_unmatchedToken272);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:19: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedToken274_static.FOLLOW_oscaront_in_unmatchedToken274);
                    oscaront17=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:28: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken276_static.FOLLOW_tmunicode_in_unmatchedToken276);
                    tmunicode18=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:38: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken278_static.FOLLOW_cdunicode_in_unmatchedToken278);
                    cdunicode19=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:48: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken280_static.FOLLOW_jjcomp_in_unmatchedToken280);
                    jjcomp20=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:60:55: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken282_static.FOLLOW_inAll_in_unmatchedToken282);
                    inAll21=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken286_static.FOLLOW_nnexample_in_unmatchedToken286);
                    nnexample22=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken288_static.FOLLOW_nnstate_in_unmatchedToken288);
                    nnstate23=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken290_static.FOLLOW_nntime_in_unmatchedToken290);
                    nntime24=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken292_static.FOLLOW_nnmass_in_unmatchedToken292);
                    nnmass25=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken294_static.FOLLOW_nnmolar_in_unmatchedToken294);
                    nnmolar26=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken296_static.FOLLOW_nnamount_in_unmatchedToken296);
                    nnamount27=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken298_static.FOLLOW_nnatmosphere_in_unmatchedToken298);
                    nnatmosphere28=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken300_static.FOLLOW_nneq_in_unmatchedToken300);
                    nneq29=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken302_static.FOLLOW_nnvol_in_unmatchedToken302);
                    nnvol30=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken304_static.FOLLOW_nnchementity_in_unmatchedToken304);
                    nnchementity31=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken306_static.FOLLOW_nntemp_in_unmatchedToken306);
                    nntemp32=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:95: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken308_static.FOLLOW_nnflash_in_unmatchedToken308);
                    nnflash33=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:103: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken310_static.FOLLOW_nngeneral_in_unmatchedToken310);
                    nngeneral34=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:113: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken312_static.FOLLOW_nnmethod_in_unmatchedToken312);
                    nnmethod35=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:122: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken314_static.FOLLOW_nnpressure_in_unmatchedToken314);
                    nnpressure36=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:133: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken316_static.FOLLOW_nncolumn_in_unmatchedToken316);
                    nncolumn37=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:142: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken318_static.FOLLOW_nnchromatography_in_unmatchedToken318);
                    nnchromatography38=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:159: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken320_static.FOLLOW_nnvacuum_in_unmatchedToken320);
                    nnvacuum39=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:168: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken322_static.FOLLOW_nncycle_in_unmatchedToken322);
                    nncycle40=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:176: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken324_static.FOLLOW_nntimes_in_unmatchedToken324);
                    nntimes41=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken328_static.FOLLOW_oscarcm_in_unmatchedToken328);
                    oscarcm42=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:10: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken330_static.FOLLOW_verb_in_unmatchedToken330);
                    verb43=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:15: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken332_static.FOLLOW_nnadd_in_unmatchedToken332);
                    nnadd44=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:21: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken334_static.FOLLOW_nnmixture_in_unmatchedToken334);
                    nnmixture45=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:31: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken336_static.FOLLOW_nnapparatus_in_unmatchedToken336);
                    nnapparatus46=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:43: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken338_static.FOLLOW_nnconcentrate_in_unmatchedToken338);
                    nnconcentrate47=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:57: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken340_static.FOLLOW_nndry_in_unmatchedToken340);
                    nndry48=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:63: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken342_static.FOLLOW_nnextract_in_unmatchedToken342);
                    nnextract49=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:73: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken344_static.FOLLOW_nnfilter_in_unmatchedToken344);
                    nnfilter50=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:82: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken346_static.FOLLOW_nnprecipitate_in_unmatchedToken346);
                    nnprecipitate51=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:96: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken348_static.FOLLOW_nnpurify_in_unmatchedToken348);
                    nnpurify52=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:105: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken350_static.FOLLOW_nnremove_in_unmatchedToken350);
                    nnremove53=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:114: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken352_static.FOLLOW_nnsynthesize_in_unmatchedToken352);
                    nnsynthesize54=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:127: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken354_static.FOLLOW_nnyield_in_unmatchedToken354);
                    nnyield55=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:135: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken356_static.FOLLOW_colon_in_unmatchedToken356);
                    colon56=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:141: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken358_static.FOLLOW_apost_in_unmatchedToken358);
                    apost57=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:147: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken360_static.FOLLOW_neg_in_unmatchedToken360);
                    neg58=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:151: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken362_static.FOLLOW_dash_in_unmatchedToken362);
                    dash59=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:156: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken364_static.FOLLOW_nnpercent_in_unmatchedToken364);
                    nnpercent60=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:166: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken366_static.FOLLOW_lsqb_in_unmatchedToken366);
                    lsqb61=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:171: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken368_static.FOLLOW_rsqb_in_unmatchedToken368);
                    rsqb62=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:176: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken370_static.FOLLOW_lrb_in_unmatchedToken370);
                    lrb63=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:180: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken372_static.FOLLOW_rrb_in_unmatchedToken372);
                    rrb64=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:2: abl
                    {
                    pushFollow(FOLLOW_abl_in_unmatchedToken376_static.FOLLOW_abl_in_unmatchedToken376);
                    abl65=abl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abl65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:6: abn
                    {
                    pushFollow(FOLLOW_abn_in_unmatchedToken378_static.FOLLOW_abn_in_unmatchedToken378);
                    abn66=abn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abn66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:10: abx
                    {
                    pushFollow(FOLLOW_abx_in_unmatchedToken380_static.FOLLOW_abx_in_unmatchedToken380);
                    abx67=abx();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abx67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:14: ap
                    {
                    pushFollow(FOLLOW_ap_in_unmatchedToken382_static.FOLLOW_ap_in_unmatchedToken382);
                    ap68=ap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ap68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:17: at
                    {
                    pushFollow(FOLLOW_at_in_unmatchedToken384_static.FOLLOW_at_in_unmatchedToken384);
                    at69=at();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, at69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:20: be
                    {
                    pushFollow(FOLLOW_be_in_unmatchedToken386_static.FOLLOW_be_in_unmatchedToken386);
                    be70=be();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, be70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:23: bed
                    {
                    pushFollow(FOLLOW_bed_in_unmatchedToken388_static.FOLLOW_bed_in_unmatchedToken388);
                    bed71=bed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bed71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:27: bedz
                    {
                    pushFollow(FOLLOW_bedz_in_unmatchedToken390_static.FOLLOW_bedz_in_unmatchedToken390);
                    bedz72=bedz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bedz72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:32: beg
                    {
                    pushFollow(FOLLOW_beg_in_unmatchedToken392_static.FOLLOW_beg_in_unmatchedToken392);
                    beg73=beg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, beg73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:36: bem
                    {
                    pushFollow(FOLLOW_bem_in_unmatchedToken394_static.FOLLOW_bem_in_unmatchedToken394);
                    bem74=bem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bem74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:40: ben
                    {
                    pushFollow(FOLLOW_ben_in_unmatchedToken396_static.FOLLOW_ben_in_unmatchedToken396);
                    ben75=ben();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ben75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:44: ber
                    {
                    pushFollow(FOLLOW_ber_in_unmatchedToken398_static.FOLLOW_ber_in_unmatchedToken398);
                    ber76=ber();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ber76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:48: bez
                    {
                    pushFollow(FOLLOW_bez_in_unmatchedToken400_static.FOLLOW_bez_in_unmatchedToken400);
                    bez77=bez();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bez77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:52: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken402_static.FOLLOW_cc_in_unmatchedToken402);
                    cc78=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:55: cs
                    {
                    pushFollow(FOLLOW_cs_in_unmatchedToken404_static.FOLLOW_cs_in_unmatchedToken404);
                    cs79=cs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:58: dotok
                    {
                    pushFollow(FOLLOW_dotok_in_unmatchedToken406_static.FOLLOW_dotok_in_unmatchedToken406);
                    dotok80=dotok();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dotok80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:64: dod
                    {
                    pushFollow(FOLLOW_dod_in_unmatchedToken408_static.FOLLOW_dod_in_unmatchedToken408);
                    dod81=dod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dod81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:68: doz
                    {
                    pushFollow(FOLLOW_doz_in_unmatchedToken410_static.FOLLOW_doz_in_unmatchedToken410);
                    doz82=doz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doz82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:72: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken412_static.FOLLOW_dt_in_unmatchedToken412);
                    dt83=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt83.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:75: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken414_static.FOLLOW_dtTHE_in_unmatchedToken414);
                    dtTHE84=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE84.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:81: dti
                    {
                    pushFollow(FOLLOW_dti_in_unmatchedToken416_static.FOLLOW_dti_in_unmatchedToken416);
                    dti85=dti();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dti85.getTree());

                    }
                    break;
                case 72 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:85: dts
                    {
                    pushFollow(FOLLOW_dts_in_unmatchedToken418_static.FOLLOW_dts_in_unmatchedToken418);
                    dts86=dts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dts86.getTree());

                    }
                    break;
                case 73 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:89: dtx
                    {
                    pushFollow(FOLLOW_dtx_in_unmatchedToken420_static.FOLLOW_dtx_in_unmatchedToken420);
                    dtx87=dtx();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtx87.getTree());

                    }
                    break;
                case 74 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:93: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken422_static.FOLLOW_fw_in_unmatchedToken422);
                    fw88=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw88.getTree());

                    }
                    break;
                case 75 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:96: fwin
                    {
                    pushFollow(FOLLOW_fwin_in_unmatchedToken424_static.FOLLOW_fwin_in_unmatchedToken424);
                    fwin89=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin89.getTree());

                    }
                    break;
                case 76 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:101: hv
                    {
                    pushFollow(FOLLOW_hv_in_unmatchedToken426_static.FOLLOW_hv_in_unmatchedToken426);
                    hv90=hv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hv90.getTree());

                    }
                    break;
                case 77 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:104: hvd
                    {
                    pushFollow(FOLLOW_hvd_in_unmatchedToken428_static.FOLLOW_hvd_in_unmatchedToken428);
                    hvd91=hvd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hvd91.getTree());

                    }
                    break;
                case 78 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:108: hvg
                    {
                    pushFollow(FOLLOW_hvg_in_unmatchedToken430_static.FOLLOW_hvg_in_unmatchedToken430);
                    hvg92=hvg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hvg92.getTree());

                    }
                    break;
                case 79 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:112: hvn
                    {
                    pushFollow(FOLLOW_hvn_in_unmatchedToken432_static.FOLLOW_hvn_in_unmatchedToken432);
                    hvn93=hvn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hvn93.getTree());

                    }
                    break;
                case 80 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:116: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken434_static.FOLLOW_md_in_unmatchedToken434);
                    md94=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md94.getTree());

                    }
                    break;
                case 81 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:119: nc
                    {
                    pushFollow(FOLLOW_nc_in_unmatchedToken436_static.FOLLOW_nc_in_unmatchedToken436);
                    nc95=nc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nc95.getTree());

                    }
                    break;
                case 82 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:122: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken438_static.FOLLOW_nn_in_unmatchedToken438);
                    nn96=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn96.getTree());

                    }
                    break;
                case 83 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:125: nn_poss
                    {
                    pushFollow(FOLLOW_nn_poss_in_unmatchedToken440_static.FOLLOW_nn_poss_in_unmatchedToken440);
                    nn_poss97=nn_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn_poss97.getTree());

                    }
                    break;
                case 84 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:133: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken442_static.FOLLOW_nns_in_unmatchedToken442);
                    nns98=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns98.getTree());

                    }
                    break;
                case 85 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:137: nns_poss
                    {
                    pushFollow(FOLLOW_nns_poss_in_unmatchedToken444_static.FOLLOW_nns_poss_in_unmatchedToken444);
                    nns_poss99=nns_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns_poss99.getTree());

                    }
                    break;
                case 86 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:146: np
                    {
                    pushFollow(FOLLOW_np_in_unmatchedToken446_static.FOLLOW_np_in_unmatchedToken446);
                    np100=np();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, np100.getTree());

                    }
                    break;
                case 87 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:149: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken448_static.FOLLOW_nnp_in_unmatchedToken448);
                    nnp101=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp101.getTree());

                    }
                    break;
                case 88 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:153: np_poss
                    {
                    pushFollow(FOLLOW_np_poss_in_unmatchedToken450_static.FOLLOW_np_poss_in_unmatchedToken450);
                    np_poss102=np_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, np_poss102.getTree());

                    }
                    break;
                case 89 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:161: nps
                    {
                    pushFollow(FOLLOW_nps_in_unmatchedToken452_static.FOLLOW_nps_in_unmatchedToken452);
                    nps103=nps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nps103.getTree());

                    }
                    break;
                case 90 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:165: nps_poss
                    {
                    pushFollow(FOLLOW_nps_poss_in_unmatchedToken454_static.FOLLOW_nps_poss_in_unmatchedToken454);
                    nps_poss104=nps_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nps_poss104.getTree());

                    }
                    break;
                case 91 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:174: nr
                    {
                    pushFollow(FOLLOW_nr_in_unmatchedToken456_static.FOLLOW_nr_in_unmatchedToken456);
                    nr105=nr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nr105.getTree());

                    }
                    break;
                case 92 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:177: pn
                    {
                    pushFollow(FOLLOW_pn_in_unmatchedToken458_static.FOLLOW_pn_in_unmatchedToken458);
                    pn106=pn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pn106.getTree());

                    }
                    break;
                case 93 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:63:180: pn_poss
                    {
                    pushFollow(FOLLOW_pn_poss_in_unmatchedToken460_static.FOLLOW_pn_poss_in_unmatchedToken460);
                    pn_poss107=pn_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pn_poss107.getTree());

                    }
                    break;
                case 94 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:2: pp_poss
                    {
                    pushFollow(FOLLOW_pp_poss_in_unmatchedToken464_static.FOLLOW_pp_poss_in_unmatchedToken464);
                    pp_poss108=pp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pp_poss108.getTree());

                    }
                    break;
                case 95 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:10: pp_poss_poss
                    {
                    pushFollow(FOLLOW_pp_poss_poss_in_unmatchedToken466_static.FOLLOW_pp_poss_poss_in_unmatchedToken466);
                    pp_poss_poss109=pp_poss_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pp_poss_poss109.getTree());

                    }
                    break;
                case 96 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:23: ppl
                    {
                    pushFollow(FOLLOW_ppl_in_unmatchedToken468_static.FOLLOW_ppl_in_unmatchedToken468);
                    ppl110=ppl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ppl110.getTree());

                    }
                    break;
                case 97 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:27: ppls
                    {
                    pushFollow(FOLLOW_ppls_in_unmatchedToken470_static.FOLLOW_ppls_in_unmatchedToken470);
                    ppls111=ppls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ppls111.getTree());

                    }
                    break;
                case 98 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:32: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken472_static.FOLLOW_prp_in_unmatchedToken472);
                    prp112=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp112.getTree());

                    }
                    break;
                case 99 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:36: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken474_static.FOLLOW_prp_poss_in_unmatchedToken474);
                    prp_poss113=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss113.getTree());

                    }
                    break;
                case 100 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:45: ppo
                    {
                    pushFollow(FOLLOW_ppo_in_unmatchedToken476_static.FOLLOW_ppo_in_unmatchedToken476);
                    ppo114=ppo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ppo114.getTree());

                    }
                    break;
                case 101 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:49: pps
                    {
                    pushFollow(FOLLOW_pps_in_unmatchedToken478_static.FOLLOW_pps_in_unmatchedToken478);
                    pps115=pps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pps115.getTree());

                    }
                    break;
                case 102 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:53: ppss
                    {
                    pushFollow(FOLLOW_ppss_in_unmatchedToken480_static.FOLLOW_ppss_in_unmatchedToken480);
                    ppss116=ppss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ppss116.getTree());

                    }
                    break;
                case 103 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:58: ql
                    {
                    pushFollow(FOLLOW_ql_in_unmatchedToken482_static.FOLLOW_ql_in_unmatchedToken482);
                    ql117=ql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ql117.getTree());

                    }
                    break;
                case 104 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:61: qlp
                    {
                    pushFollow(FOLLOW_qlp_in_unmatchedToken484_static.FOLLOW_qlp_in_unmatchedToken484);
                    qlp118=qlp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qlp118.getTree());

                    }
                    break;
                case 105 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:65: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken486_static.FOLLOW_rbconj_in_unmatchedToken486);
                    rbconj119=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj119.getTree());

                    }
                    break;
                case 106 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:72: rn
                    {
                    pushFollow(FOLLOW_rn_in_unmatchedToken488_static.FOLLOW_rn_in_unmatchedToken488);
                    rn120=rn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rn120.getTree());

                    }
                    break;
                case 107 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:75: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken490_static.FOLLOW_sym_in_unmatchedToken490);
                    sym121=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym121.getTree());

                    }
                    break;
                case 108 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:79: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken492_static.FOLLOW_uh_in_unmatchedToken492);
                    uh122=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh122.getTree());

                    }
                    break;
                case 109 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:82: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken494_static.FOLLOW_clause_in_unmatchedToken494);
                    clause123=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause123.getTree());

                    }
                    break;
                case 110 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:89: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken496_static.FOLLOW_comma_in_unmatchedToken496);
                    comma124=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma124.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure125 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase507_static.FOLLOW_nounphraseStructure_in_nounphrase507);
            nounphraseStructure125=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure125.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 67:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1126 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2127 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure530_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure530);
                    nounphraseStructure1126=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1126.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure532_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure532);
                    nounphraseStructure2127=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2127.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:72:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus128 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:73:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:73:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1541_static.FOLLOW_multiApparatus_in_nounphraseStructure1541);
            multiApparatus128=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus128.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 73:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:73:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE129 = null;

        ChemicalChunkerParser.dt_return dt130 = null;

        ChemicalChunkerParser.advAdj_return advAdj131 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase132 = null;

        ChemicalChunkerParser.noun_return noun133 = null;

        ChemicalChunkerParser.number_return number134 = null;

        ChemicalChunkerParser.ratio_return ratio135 = null;

        ChemicalChunkerParser.conjunction_return conjunction136 = null;

        ChemicalChunkerParser.advAdj_return advAdj137 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase138 = null;

        ChemicalChunkerParser.noun_return noun139 = null;

        ChemicalChunkerParser.number_return number140 = null;

        ChemicalChunkerParser.ratio_return ratio141 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf142 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN143 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase144 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 155:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2561_static.FOLLOW_dtTHE_in_nounphraseStructure2561);
                    dtTHE129=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE129.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred125_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2564_static.FOLLOW_dt_in_nounphraseStructure2564);
                    dt130=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt130.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2567_static.FOLLOW_advAdj_in_nounphraseStructure2567);
            	    advAdj131=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj131.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:24: ( dissolvePhrase | noun | number | ratio )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2572_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2572);
            	    dissolvePhrase132=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase132.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2574_static.FOLLOW_noun_in_nounphraseStructure2574);
            	    noun133=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun133.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2576_static.FOLLOW_number_in_nounphraseStructure2576);
            	    number134=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number134.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2578_static.FOLLOW_ratio_in_nounphraseStructure2578);
            	    ratio135=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio135.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2586_static.FOLLOW_conjunction_in_nounphraseStructure2586);
            	    	    conjunction136=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction136.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2589_static.FOLLOW_advAdj_in_nounphraseStructure2589);
            	    	    advAdj137=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj137.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:85: ( dissolvePhrase | noun | number | ratio )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2593_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2593);
            	            dissolvePhrase138=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase138.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:101: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2595_static.FOLLOW_noun_in_nounphraseStructure2595);
            	            noun139=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun139.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:106: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2597_static.FOLLOW_number_in_nounphraseStructure2597);
            	            number140=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number140.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:113: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2599_static.FOLLOW_ratio_in_nounphraseStructure2599);
            	            ratio141=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio141.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred139_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 50:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred139_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 50:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 44:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2609_static.FOLLOW_prepphraseOf_in_nounphraseStructure2609);
            	            prepphraseOf142=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf142.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2612_static.FOLLOW_prepphraseIN_in_nounphraseStructure2612);
            	            prepphraseIN143=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN143.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2615_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2615);
            	            dissolvePhrase144=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase144.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1145 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2146 = null;

        ChemicalChunkerParser.dissolveStructure3_return dissolveStructure3147 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure3=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure3");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:2: ( ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            int alt20=3;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase630_static.FOLLOW_dissolveStructure1_in_dissolvePhrase630);
                    dissolveStructure1145=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure1145.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase632_static.FOLLOW_dissolveStructure2_in_dissolvePhrase632);
                    dissolveStructure2146=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure2146.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:43: dissolveStructure3
                    {
                    pushFollow(FOLLOW_dissolveStructure3_in_dissolvePhrase634_static.FOLLOW_dissolveStructure3_in_dissolvePhrase634);
                    dissolveStructure3147=dissolveStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure3.add(dissolveStructure3147.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure3, dissolveStructure2, dissolveStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 77:63: -> ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:67: ^( DissolvePhrase ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:84: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:104: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:124: ( dissolveStructure3 )?
                if ( stream_dissolveStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure3.nextTree());

                }
                stream_dissolveStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:1: dissolveStructure1 : lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);
        int dissolveStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb148 = null;

        ChemicalChunkerParser.adj_return adj149 = null;

        ChemicalChunkerParser.nnp_return nnp150 = null;

        ChemicalChunkerParser.molecule_return molecule151 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule152 = null;

        ChemicalChunkerParser.inin_return inin153 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE154 = null;

        ChemicalChunkerParser.adj_return adj155 = null;

        ChemicalChunkerParser.nnp_return nnp156 = null;

        ChemicalChunkerParser.molecule_return molecule157 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule158 = null;

        ChemicalChunkerParser.conjunction_return conjunction159 = null;

        ChemicalChunkerParser.molecule_return molecule160 = null;

        ChemicalChunkerParser.rrb_return rrb161 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:2: ( lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:4: lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1660_static.FOLLOW_lrb_in_dissolveStructure1660);
            lrb148=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb148.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:8: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure1662_static.FOLLOW_adj_in_dissolveStructure1662);
                    adj149=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj149.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:13: ( nnp )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 178:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure1665_static.FOLLOW_nnp_in_dissolveStructure1665);
                    nnp150=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp150.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:18: ( molecule | unnamedmolecule )
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:19: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure1669_static.FOLLOW_molecule_in_dissolveStructure1669);
                    molecule151=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule151.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:28: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1671_static.FOLLOW_unnamedmolecule_in_dissolveStructure1671);
                    unnamedmolecule152=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule152.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:45: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    alt29=1;
                    }
                    break;

                }

                switch (alt29) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:46: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1675_static.FOLLOW_inin_in_dissolveStructure1675);
            	    inin153=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin153.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:51: ( dtTHE )?
            	    int alt24=2;
            	    switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt24=1;
            	            }
            	            break;
            	    }

            	    switch (alt24) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure1677_static.FOLLOW_dtTHE_in_dissolveStructure1677);
            	            dtTHE154=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE154.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:58: ( adj )?
            	    int alt25=2;
            	    alt25 = dfa25.predict(input);
            	    switch (alt25) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure1680_static.FOLLOW_adj_in_dissolveStructure1680);
            	            adj155=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj155.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:63: ( nnp )?
            	    int alt26=2;
            	    switch ( input.LA(1) ) {
            	        case 178:
            	            {
            	            alt26=1;
            	            }
            	            break;
            	    }

            	    switch (alt26) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure1683_static.FOLLOW_nnp_in_dissolveStructure1683);
            	            nnp156=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp156.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:68: ( molecule | unnamedmolecule )
            	    int alt27=2;
            	    alt27 = dfa27.predict(input);
            	    switch (alt27) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:69: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure1687_static.FOLLOW_molecule_in_dissolveStructure1687);
            	            molecule157=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule157.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:78: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1689_static.FOLLOW_unnamedmolecule_in_dissolveStructure1689);
            	            unnamedmolecule158=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule158.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:95: ( conjunction molecule )*
            	    loop28:
            	    do {
            	        int alt28=2;
            	        switch ( input.LA(1) ) {
            	        case 125:
            	        case 148:
            	            {
            	            alt28=1;
            	            }
            	            break;

            	        }

            	        switch (alt28) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:96: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure1693_static.FOLLOW_conjunction_in_dissolveStructure1693);
            	    	    conjunction159=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction159.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure1695_static.FOLLOW_molecule_in_dissolveStructure1695);
            	    	    molecule160=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule160.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1701_static.FOLLOW_rrb_in_dissolveStructure1701);
            rrb161=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb161.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolveStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:1: dissolveStructure2 : ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);
        int dissolveStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj162 = null;

        ChemicalChunkerParser.nnp_return nnp163 = null;

        ChemicalChunkerParser.molecule_return molecule164 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule165 = null;

        ChemicalChunkerParser.inin_return inin166 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE167 = null;

        ChemicalChunkerParser.adj_return adj168 = null;

        ChemicalChunkerParser.nnp_return nnp169 = null;

        ChemicalChunkerParser.molecule_return molecule170 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule171 = null;

        ChemicalChunkerParser.conjunction_return conjunction172 = null;

        ChemicalChunkerParser.molecule_return molecule173 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:2: ( ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:4: ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:4: ( adj )?
            int alt30=2;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure2710_static.FOLLOW_adj_in_dissolveStructure2710);
                    adj162=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj162.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:9: ( nnp )?
            int alt31=2;
            switch ( input.LA(1) ) {
                case 178:
                    {
                    alt31=1;
                    }
                    break;
            }

            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure2713_static.FOLLOW_nnp_in_dissolveStructure2713);
                    nnp163=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp163.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:14: ( molecule | unnamedmolecule )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:15: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure2717_static.FOLLOW_molecule_in_dissolveStructure2717);
                    molecule164=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule164.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:24: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2719_static.FOLLOW_unnamedmolecule_in_dissolveStructure2719);
                    unnamedmolecule165=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule165.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:41: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt38=0;
            loop38:
            do {
                int alt38=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA38_2 = input.LA(2);

                    if ( (synpred159_ChemicalChunker()) ) {
                        alt38=1;
                    }


                    }
                    break;

                }

                switch (alt38) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2723_static.FOLLOW_inin_in_dissolveStructure2723);
            	    inin166=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin166.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:47: ( dtTHE )?
            	    int alt33=2;
            	    switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt33=1;
            	            }
            	            break;
            	    }

            	    switch (alt33) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure2725_static.FOLLOW_dtTHE_in_dissolveStructure2725);
            	            dtTHE167=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE167.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:54: ( adj )?
            	    int alt34=2;
            	    alt34 = dfa34.predict(input);
            	    switch (alt34) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure2728_static.FOLLOW_adj_in_dissolveStructure2728);
            	            adj168=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj168.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:59: ( nnp )?
            	    int alt35=2;
            	    switch ( input.LA(1) ) {
            	        case 178:
            	            {
            	            alt35=1;
            	            }
            	            break;
            	    }

            	    switch (alt35) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure2731_static.FOLLOW_nnp_in_dissolveStructure2731);
            	            nnp169=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp169.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:64: ( molecule | unnamedmolecule )
            	    int alt36=2;
            	    alt36 = dfa36.predict(input);
            	    switch (alt36) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:65: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure2735_static.FOLLOW_molecule_in_dissolveStructure2735);
            	            molecule170=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule170.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:74: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2737_static.FOLLOW_unnamedmolecule_in_dissolveStructure2737);
            	            unnamedmolecule171=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule171.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:91: ( conjunction molecule )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        switch ( input.LA(1) ) {
            	        case 148:
            	            {
            	            int LA37_1 = input.LA(2);

            	            if ( (synpred158_ChemicalChunker()) ) {
            	                alt37=1;
            	            }


            	            }
            	            break;
            	        case 125:
            	            {
            	            int LA37_2 = input.LA(2);

            	            if ( (synpred158_ChemicalChunker()) ) {
            	                alt37=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:92: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure2741_static.FOLLOW_conjunction_in_dissolveStructure2741);
            	    	    conjunction172=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction172.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure2743_static.FOLLOW_molecule_in_dissolveStructure2743);
            	    	    molecule173=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule173.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt38 >= 1 ) break loop38;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(38, input);
                        throw eee;
                }
                cnt38++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, dissolveStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class dissolveStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:84:1: dissolveStructure3 : ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure3_return dissolveStructure3() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure3_return retval = new ChemicalChunkerParser.dissolveStructure3_return();
        retval.start = input.LT(1);
        int dissolveStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj174 = null;

        ChemicalChunkerParser.nnp_return nnp175 = null;

        ChemicalChunkerParser.molecule_return molecule176 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule177 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity178 = null;

        ChemicalChunkerParser.inin_return inin179 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE180 = null;

        ChemicalChunkerParser.adj_return adj181 = null;

        ChemicalChunkerParser.nnp_return nnp182 = null;

        ChemicalChunkerParser.molecule_return molecule183 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule184 = null;

        ChemicalChunkerParser.conjunction_return conjunction185 = null;

        ChemicalChunkerParser.molecule_return molecule186 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:2: ( ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:4: ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:4: ( adj )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 167:
                case 168:
                case 169:
                case 170:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure3757_static.FOLLOW_adj_in_dissolveStructure3757);
                    adj174=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj174.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnp_in_dissolveStructure3760_static.FOLLOW_nnp_in_dissolveStructure3760);
            nnp175=nnp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp175.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:13: ( molecule | unnamedmolecule | nnchementity )
            int alt40=3;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:14: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure3763_static.FOLLOW_molecule_in_dissolveStructure3763);
                    molecule176=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule176.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:23: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3765_static.FOLLOW_unnamedmolecule_in_dissolveStructure3765);
                    unnamedmolecule177=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule177.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:39: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure3767_static.FOLLOW_nnchementity_in_dissolveStructure3767);
                    nnchementity178=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity178.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:53: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA46_2 = input.LA(2);

                    if ( (synpred168_ChemicalChunker()) ) {
                        alt46=1;
                    }


                    }
                    break;

                }

                switch (alt46) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure3771_static.FOLLOW_inin_in_dissolveStructure3771);
            	    inin179=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin179.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:59: ( dtTHE )?
            	    int alt41=2;
            	    switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt41=1;
            	            }
            	            break;
            	    }

            	    switch (alt41) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure3773_static.FOLLOW_dtTHE_in_dissolveStructure3773);
            	            dtTHE180=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE180.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:66: ( adj )?
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure3776_static.FOLLOW_adj_in_dissolveStructure3776);
            	            adj181=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj181.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:71: ( nnp )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 178:
            	            {
            	            alt43=1;
            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure3779_static.FOLLOW_nnp_in_dissolveStructure3779);
            	            nnp182=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp182.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:76: ( molecule | unnamedmolecule )
            	    int alt44=2;
            	    alt44 = dfa44.predict(input);
            	    switch (alt44) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:77: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure3783_static.FOLLOW_molecule_in_dissolveStructure3783);
            	            molecule183=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule183.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:86: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3785_static.FOLLOW_unnamedmolecule_in_dissolveStructure3785);
            	            unnamedmolecule184=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule184.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:103: ( conjunction molecule )*
            	    loop45:
            	    do {
            	        int alt45=2;
            	        switch ( input.LA(1) ) {
            	        case 148:
            	            {
            	            int LA45_1 = input.LA(2);

            	            if ( (synpred167_ChemicalChunker()) ) {
            	                alt45=1;
            	            }


            	            }
            	            break;
            	        case 125:
            	            {
            	            int LA45_2 = input.LA(2);

            	            if ( (synpred167_ChemicalChunker()) ) {
            	                alt45=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt45) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:104: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure3789_static.FOLLOW_conjunction_in_dissolveStructure3789);
            	    	    conjunction185=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction185.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure3791_static.FOLLOW_molecule_in_dissolveStructure3791);
            	    	    molecule186=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule186.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop45;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, dissolveStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure3"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc187 = null;

        ChemicalChunkerParser.comma_return comma188 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:2: ( cc | comma )
            int alt47=2;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt47=1;
                }
                break;
            case 125:
                {
                alt47=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction808_static.FOLLOW_cc_in_conjunction808);
                    cc187=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc187.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction810_static.FOLLOW_comma_in_conjunction810);
                    comma188=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma188.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure189 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase822_static.FOLLOW_verbphraseStructure_in_verbphrase822);
            verbphraseStructure189=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure189.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 95:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt190 = null;

        ChemicalChunkerParser.to_return to191 = null;

        ChemicalChunkerParser.inAll_return inAll192 = null;

        ChemicalChunkerParser.inafter_return inafter193 = null;

        ChemicalChunkerParser.md_return md194 = null;

        ChemicalChunkerParser.rbconj_return rbconj195 = null;

        ChemicalChunkerParser.adv_return adv196 = null;

        ChemicalChunkerParser.adj_return adj197 = null;

        ChemicalChunkerParser.verb_return verb198 = null;

        ChemicalChunkerParser.md_return md199 = null;

        ChemicalChunkerParser.adv_return adv200 = null;

        ChemicalChunkerParser.adj_return adj201 = null;

        ChemicalChunkerParser.neg_return neg202 = null;

        ChemicalChunkerParser.inoff_return inoff203 = null;

        ChemicalChunkerParser.cc_return cc204 = null;

        ChemicalChunkerParser.comma_return comma205 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase206 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:24: ( dt )?
            int alt48=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt48=1;
                    }
                    break;
            }

            switch (alt48) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure840_static.FOLLOW_dt_in_verbphraseStructure840);
                    dt190=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt190.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:28: ( to )?
            int alt49=2;
            switch ( input.LA(1) ) {
                case 205:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA49_3 = input.LA(3);

                            if ( (synpred171_ChemicalChunker()) ) {
                                alt49=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt49) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure843_static.FOLLOW_to_in_verbphraseStructure843);
                    to191=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to191.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:32: ( inAll )?
            int alt50=2;
            switch ( input.LA(1) ) {
                case 41:
                case 42:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 166:
                case 205:
                    {
                    alt50=1;
                    }
                    break;
                case 43:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA50_4 = input.LA(3);

                            if ( (synpred172_ChemicalChunker()) ) {
                                alt50=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure846_static.FOLLOW_inAll_in_verbphraseStructure846);
                    inAll192=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll192.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:39: ( inafter )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 43:
                    {
                    alt51=1;
                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure849_static.FOLLOW_inafter_in_verbphraseStructure849);
                    inafter193=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter193.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                alt61 = dfa61.predict(input);
                switch (alt61) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:49: ( md )*
            	    loop52:
            	    do {
            	        int alt52=2;
            	        switch ( input.LA(1) ) {
            	        case 171:
            	            {
            	            alt52=1;
            	            }
            	            break;

            	        }

            	        switch (alt52) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure853_static.FOLLOW_md_in_verbphraseStructure853);
            	    	    md194=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md194.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop52;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:53: ( rbconj )?
            	    int alt53=2;
            	    switch ( input.LA(1) ) {
            	        case 199:
            	            {
            	            alt53=1;
            	            }
            	            break;
            	    }

            	    switch (alt53) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure856_static.FOLLOW_rbconj_in_verbphraseStructure856);
            	            rbconj195=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj195.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:61: ( adv )*
            	    loop54:
            	    do {
            	        int alt54=2;
            	        switch ( input.LA(1) ) {
            	        case 197:
            	        case 198:
            	        case 200:
            	        case 201:
            	        case 203:
            	            {
            	            alt54=1;
            	            }
            	            break;

            	        }

            	        switch (alt54) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure859_static.FOLLOW_adv_in_verbphraseStructure859);
            	    	    adv196=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv196.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop54;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:66: ( adj )?
            	    int alt55=2;
            	    switch ( input.LA(1) ) {
            	        case 33:
            	        case 34:
            	        case 39:
            	        case 167:
            	        case 168:
            	        case 169:
            	        case 170:
            	            {
            	            alt55=1;
            	            }
            	            break;
            	    }

            	    switch (alt55) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure862_static.FOLLOW_adj_in_verbphraseStructure862);
            	            adj197=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj197.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:71: ( verb )+
            	    int cnt56=0;
            	    loop56:
            	    do {
            	        int alt56=2;
            	        alt56 = dfa56.predict(input);
            	        switch (alt56) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure865_static.FOLLOW_verb_in_verbphraseStructure865);
            	    	    verb198=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb198.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt56 >= 1 ) break loop56;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(56, input);
            	                throw eee;
            	        }
            	        cnt56++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:77: ( md )*
            	    loop57:
            	    do {
            	        int alt57=2;
            	        switch ( input.LA(1) ) {
            	        case 171:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA57_3 = input.LA(3);

            	                if ( (synpred179_ChemicalChunker()) ) {
            	                    alt57=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt57) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure868_static.FOLLOW_md_in_verbphraseStructure868);
            	    	    md199=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md199.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop57;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:81: ( adv )*
            	    loop58:
            	    do {
            	        int alt58=2;
            	        alt58 = dfa58.predict(input);
            	        switch (alt58) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure871_static.FOLLOW_adv_in_verbphraseStructure871);
            	    	    adv200=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv200.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop58;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:86: ( adj )?
            	    int alt59=2;
            	    alt59 = dfa59.predict(input);
            	    switch (alt59) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure874_static.FOLLOW_adj_in_verbphraseStructure874);
            	            adj201=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj201.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:91: ( neg )?
            	    int alt60=2;
            	    switch ( input.LA(1) ) {
            	        case 127:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA60_3 = input.LA(3);

            	                    if ( (synpred182_ChemicalChunker()) ) {
            	                        alt60=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure877_static.FOLLOW_neg_in_verbphraseStructure877);
            	            neg202=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg202.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:99: ( inoff )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA62_3 = input.LA(3);

                            if ( (synpred184_ChemicalChunker()) ) {
                                alt62=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure883_static.FOLLOW_inoff_in_verbphraseStructure883);
                    inoff203=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff203.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:106: ( ( cc )? ( comma )? prepphrase )*
            loop65:
            do {
                int alt65=2;
                alt65 = dfa65.predict(input);
                switch (alt65) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:107: ( cc )?
            	    int alt63=2;
            	    switch ( input.LA(1) ) {
            	        case 148:
            	            {
            	            alt63=1;
            	            }
            	            break;
            	    }

            	    switch (alt63) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure887_static.FOLLOW_cc_in_verbphraseStructure887);
            	            cc204=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc204.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:111: ( comma )?
            	    int alt64=2;
            	    switch ( input.LA(1) ) {
            	        case 125:
            	            {
            	            alt64=1;
            	            }
            	            break;
            	    }

            	    switch (alt64) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure890_static.FOLLOW_comma_in_verbphraseStructure890);
            	            comma205=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma205.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure893_static.FOLLOW_prepphrase_in_verbphraseStructure893);
            	    prepphrase206=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase206.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb207 = null;

        ChemicalChunkerParser.vbp_return vbp208 = null;

        ChemicalChunkerParser.vbg_return vbg209 = null;

        ChemicalChunkerParser.vbd_return vbd210 = null;

        ChemicalChunkerParser.vbz_return vbz211 = null;

        ChemicalChunkerParser.vbn_return vbn212 = null;

        ChemicalChunkerParser.vbuse_return vbuse213 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge214 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse215 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb216 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject217 = null;

        ChemicalChunkerParser.vbadd_return vbadd218 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute219 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge220 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain221 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop222 = null;

        ChemicalChunkerParser.vbfill_return vbfill223 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend224 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat225 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus226 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate227 = null;

        ChemicalChunkerParser.vbcool_return vbcool228 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass229 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve230 = null;

        ChemicalChunkerParser.vbdry_return vbdry231 = null;

        ChemicalChunkerParser.vbextract_return vbextract232 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter233 = null;

        ChemicalChunkerParser.vbheat_return vbheat234 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease235 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition236 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate237 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify238 = null;

        ChemicalChunkerParser.vbquench_return vbquench239 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover240 = null;

        ChemicalChunkerParser.vbremove_return vbremove241 = null;

        ChemicalChunkerParser.vbstir_return vbstir242 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize243 = null;

        ChemicalChunkerParser.vbwait_return vbwait244 = null;

        ChemicalChunkerParser.vbwash_return vbwash245 = null;

        ChemicalChunkerParser.vbyield_return vbyield246 = null;

        ChemicalChunkerParser.vbchange_return vbchange247 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt66=41;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb905_static.FOLLOW_vb_in_verb905);
                    vb207=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb207.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb907_static.FOLLOW_vbp_in_verb907);
                    vbp208=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp208.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb909_static.FOLLOW_vbg_in_verb909);
                    vbg209=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg209.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb911_static.FOLLOW_vbd_in_verb911);
                    vbd210=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd210.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb913_static.FOLLOW_vbz_in_verb913);
                    vbz211=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz211.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb915_static.FOLLOW_vbn_in_verb915);
                    vbn212=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn212.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb917_static.FOLLOW_vbuse_in_verb917);
                    vbuse213=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse213.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb919_static.FOLLOW_vbsubmerge_in_verb919);
                    vbsubmerge214=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge214.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb921_static.FOLLOW_vbimmerse_in_verb921);
                    vbimmerse215=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse215.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb923_static.FOLLOW_degassMultiVerb_in_verb923);
                    degassMultiVerb216=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb216.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb925_static.FOLLOW_vbsubject_in_verb925);
                    vbsubject217=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject217.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb927_static.FOLLOW_vbadd_in_verb927);
                    vbadd218=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd218.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb929_static.FOLLOW_vbdilute_in_verb929);
                    vbdilute219=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute219.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb931_static.FOLLOW_vbcharge_in_verb931);
                    vbcharge220=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge220.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb933_static.FOLLOW_vbcontain_in_verb933);
                    vbcontain221=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain221.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb935_static.FOLLOW_vbdrop_in_verb935);
                    vbdrop222=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop222.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb937_static.FOLLOW_vbfill_in_verb937);
                    vbfill223=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill223.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb939_static.FOLLOW_vbsuspend_in_verb939);
                    vbsuspend224=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend224.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb941_static.FOLLOW_vbtreat_in_verb941);
                    vbtreat225=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat225.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb943_static.FOLLOW_vbapparatus_in_verb943);
                    vbapparatus226=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus226.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb945_static.FOLLOW_vbconcentrate_in_verb945);
                    vbconcentrate227=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate227.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb947_static.FOLLOW_vbcool_in_verb947);
                    vbcool228=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool228.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb949_static.FOLLOW_vbdegass_in_verb949);
                    vbdegass229=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass229.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb951_static.FOLLOW_vbdissolve_in_verb951);
                    vbdissolve230=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve230.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb953_static.FOLLOW_vbdry_in_verb953);
                    vbdry231=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry231.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb955_static.FOLLOW_vbextract_in_verb955);
                    vbextract232=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract232.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb957_static.FOLLOW_vbfilter_in_verb957);
                    vbfilter233=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter233.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb960_static.FOLLOW_vbheat_in_verb960);
                    vbheat234=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat234.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb962_static.FOLLOW_vbincrease_in_verb962);
                    vbincrease235=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease235.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb964_static.FOLLOW_vbpartition_in_verb964);
                    vbpartition236=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition236.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb966_static.FOLLOW_vbprecipitate_in_verb966);
                    vbprecipitate237=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate237.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb968_static.FOLLOW_vbpurify_in_verb968);
                    vbpurify238=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify238.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb970_static.FOLLOW_vbquench_in_verb970);
                    vbquench239=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench239.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb972_static.FOLLOW_vbrecover_in_verb972);
                    vbrecover240=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover240.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb974_static.FOLLOW_vbremove_in_verb974);
                    vbremove241=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove241.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb976_static.FOLLOW_vbstir_in_verb976);
                    vbstir242=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir242.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb978_static.FOLLOW_vbsynthesize_in_verb978);
                    vbsynthesize243=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize243.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb980_static.FOLLOW_vbwait_in_verb980);
                    vbwait244=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait244.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb982_static.FOLLOW_vbwash_in_verb982);
                    vbwash245=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash245.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb984_static.FOLLOW_vbyield_in_verb984);
                    vbyield246=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield246.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb986_static.FOLLOW_vbchange_in_verb986);
                    vbchange247=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange247.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass248 = null;

        ChemicalChunkerParser.cc_return cc249 = null;

        ChemicalChunkerParser.vbfill_return vbfill250 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb995_static.FOLLOW_vbdegass_in_degassMultiVerb995);
            vbdegass248=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass248.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb997_static.FOLLOW_cc_in_degassMultiVerb997);
            cc249=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc249.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb999_static.FOLLOW_vbfill_in_degassMultiVerb999);
            vbfill250=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill250.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:1: number : ( cd | cdAlphanum | oscarcpr | od );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);
        int number_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd251 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum252 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr253 = null;

        ChemicalChunkerParser.od_return od254 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:8: ( cd | cdAlphanum | oscarcpr | od )
            int alt67=4;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt67=1;
                }
                break;
            case 32:
                {
                alt67=2;
                }
                break;
            case 35:
                {
                alt67=3;
                }
                break;
            case 183:
                {
                alt67=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number1006_static.FOLLOW_cd_in_number1006);
                    cd251=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd251.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:13: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_number1008_static.FOLLOW_cdAlphanum_in_number1008);
                    cdAlphanum252=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum252.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:24: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_number1010_static.FOLLOW_oscarcpr_in_number1010);
                    oscarcpr253=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr253.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:33: od
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_od_in_number1012_static.FOLLOW_od_in_number1012);
                    od254=od();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, od254.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, number_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:1: clause : ( wdt | wp_poss | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt255 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss256 = null;

        ChemicalChunkerParser.wpo_return wpo257 = null;

        ChemicalChunkerParser.wps_return wps258 = null;

        ChemicalChunkerParser.wql_return wql259 = null;

        ChemicalChunkerParser.wrb_return wrb260 = null;

        ChemicalChunkerParser.ex_return ex261 = null;

        ChemicalChunkerParser.pdt_return pdt262 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:8: ( wdt | wp_poss | wpo | wps | wql | wrb | ex | pdt )
            int alt68=8;
            switch ( input.LA(1) ) {
            case 213:
                {
                alt68=1;
                }
                break;
            case 214:
                {
                alt68=2;
                }
                break;
            case 215:
                {
                alt68=3;
                }
                break;
            case 216:
                {
                alt68=4;
                }
                break;
            case 217:
                {
                alt68=5;
                }
                break;
            case 218:
                {
                alt68=6;
                }
                break;
            case 159:
                {
                alt68=7;
                }
                break;
            case 219:
                {
                alt68=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause1020_static.FOLLOW_wdt_in_clause1020);
                    wdt255=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt255.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause1022_static.FOLLOW_wp_poss_in_clause1022);
                    wp_poss256=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss256.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause1024_static.FOLLOW_wpo_in_clause1024);
                    wpo257=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo257.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:26: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause1026_static.FOLLOW_wps_in_clause1026);
                    wps258=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps258.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:30: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause1028_static.FOLLOW_wql_in_clause1028);
                    wql259=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql259.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:34: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause1030_static.FOLLOW_wrb_in_clause1030);
                    wrb260=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb260.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:38: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause1032_static.FOLLOW_ex_in_clause1032);
                    ex261=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex261.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:41: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause1034_static.FOLLOW_pdt_in_clause1034);
                    pdt262=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt262.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure263 = null;

        ChemicalChunkerParser.dash_return dash264 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure265 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun1042_static.FOLLOW_nounStructure_in_noun1042);
            nounStructure263=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure263.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:23: ( dash nounStructure )*
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred238_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun1045_static.FOLLOW_dash_in_noun1045);
            	    dash264=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash264.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun1047_static.FOLLOW_nounStructure_in_noun1047);
            	    nounStructure265=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure265.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp266 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss267 = null;

        ChemicalChunkerParser.citation_return citation268 = null;

        ChemicalChunkerParser.cycles_return cycles269 = null;

        ChemicalChunkerParser.molecule_return molecule270 = null;

        ChemicalChunkerParser.apparatus_return apparatus271 = null;

        ChemicalChunkerParser.mixture_return mixture272 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule273 = null;

        ChemicalChunkerParser.nnyield_return nnyield274 = null;

        ChemicalChunkerParser.nnstate_return nnstate275 = null;

        ChemicalChunkerParser.nn_return nn276 = null;

        ChemicalChunkerParser.nns_return nns277 = null;

        ChemicalChunkerParser.nnp_return nnp278 = null;

        ChemicalChunkerParser.nnadd_return nnadd279 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase280 = null;

        ChemicalChunkerParser.nnexample_return nnexample281 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr282 = null;

        ChemicalChunkerParser.range_return range283 = null;

        ChemicalChunkerParser.amount_return amount284 = null;

        ChemicalChunkerParser.nntime_return nntime285 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere286 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode287 = null;

        ChemicalChunkerParser.nneq_return nneq288 = null;

        ChemicalChunkerParser.quantity_return quantity289 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity290 = null;

        ChemicalChunkerParser.measurements_return measurements291 = null;

        ChemicalChunkerParser.nntemp_return nntemp292 = null;

        ChemicalChunkerParser.nnflash_return nnflash293 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral294 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod295 = null;

        ChemicalChunkerParser.nnamount_return nnamount296 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure297 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn298 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography299 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum300 = null;

        ChemicalChunkerParser.nncycle_return nncycle301 = null;

        ChemicalChunkerParser.nntimes_return nntimes302 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate303 = null;

        ChemicalChunkerParser.nnvol_return nnvol304 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify305 = null;

        ChemicalChunkerParser.wdt_return wdt306 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss307 = null;

        ChemicalChunkerParser.wpo_return wpo308 = null;

        ChemicalChunkerParser.wps_return wps309 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize310 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture311 = null;

        ChemicalChunkerParser.reference_return reference312 = null;

        ChemicalChunkerParser.oscaront_return oscaront313 = null;

        ChemicalChunkerParser.nndry_return nndry314 = null;

        ChemicalChunkerParser.number_return number315 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound316 = null;

        ChemicalChunkerParser.nnextract_return nnextract317 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter318 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate319 = null;

        ChemicalChunkerParser.nnremove_return nnremove320 = null;

        ChemicalChunkerParser.fw_return fw321 = null;

        ChemicalChunkerParser.fwin_return fwin322 = null;

        ChemicalChunkerParser.sym_return sym323 = null;

        ChemicalChunkerParser.clause_return clause324 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt70=59;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure1058_static.FOLLOW_prp_in_nounStructure1058);
                    prp266=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp266.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure1060_static.FOLLOW_prp_poss_in_nounStructure1060);
                    prp_poss267=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss267.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure1062_static.FOLLOW_citation_in_nounStructure1062);
                    citation268=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation268.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure1064_static.FOLLOW_cycles_in_nounStructure1064);
                    cycles269=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles269.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure1066_static.FOLLOW_molecule_in_nounStructure1066);
                    molecule270=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule270.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure1068_static.FOLLOW_apparatus_in_nounStructure1068);
                    apparatus271=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus271.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure1070_static.FOLLOW_mixture_in_nounStructure1070);
                    mixture272=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture272.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure1072_static.FOLLOW_unnamedmolecule_in_nounStructure1072);
                    unnamedmolecule273=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule273.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1074_static.FOLLOW_nnyield_in_nounStructure1074);
                    nnyield274=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield274.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure1076_static.FOLLOW_nnstate_in_nounStructure1076);
                    nnstate275=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate275.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:106: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure1078_static.FOLLOW_nn_in_nounStructure1078);
                    nn276=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn276.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:109: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure1080_static.FOLLOW_nns_in_nounStructure1080);
                    nns277=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns277.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:113: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure1082_static.FOLLOW_nnp_in_nounStructure1082);
                    nnp278=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp278.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:117: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure1084_static.FOLLOW_nnadd_in_nounStructure1084);
                    nnadd279=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd279.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:123: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure1086_static.FOLLOW_preparationphrase_in_nounStructure1086);
                    preparationphrase280=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase280.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:141: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure1088_static.FOLLOW_nnexample_in_nounStructure1088);
                    nnexample281=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample281.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:151: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_nounStructure1090_static.FOLLOW_oscarcpr_in_nounStructure1090);
                    oscarcpr282=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr282.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:160: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure1092_static.FOLLOW_range_in_nounStructure1092);
                    range283=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range283.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:166: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_nounStructure1094_static.FOLLOW_amount_in_nounStructure1094);
                    amount284=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount284.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:173: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure1096_static.FOLLOW_nntime_in_nounStructure1096);
                    nntime285=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime285.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:180: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure1098_static.FOLLOW_nnatmosphere_in_nounStructure1098);
                    nnatmosphere286=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere286.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:193: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure1100_static.FOLLOW_tmunicode_in_nounStructure1100);
                    tmunicode287=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode287.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:203: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1102_static.FOLLOW_nneq_in_nounStructure1102);
                    nneq288=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq288.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:208: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1104_static.FOLLOW_quantity_in_nounStructure1104);
                    quantity289=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity289.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:217: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1106_static.FOLLOW_nnchementity_in_nounStructure1106);
                    nnchementity290=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity290.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:230: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_nounStructure1108_static.FOLLOW_measurements_in_nounStructure1108);
                    measurements291=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements291.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:243: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1110_static.FOLLOW_nntemp_in_nounStructure1110);
                    nntemp292=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp292.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:250: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1112_static.FOLLOW_nnflash_in_nounStructure1112);
                    nnflash293=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash293.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:258: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1114_static.FOLLOW_nngeneral_in_nounStructure1114);
                    nngeneral294=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral294.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:268: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure1116_static.FOLLOW_nnmethod_in_nounStructure1116);
                    nnmethod295=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod295.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:277: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1118_static.FOLLOW_nnamount_in_nounStructure1118);
                    nnamount296=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount296.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:286: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1120_static.FOLLOW_nnpressure_in_nounStructure1120);
                    nnpressure297=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure297.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:297: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1122_static.FOLLOW_nncolumn_in_nounStructure1122);
                    nncolumn298=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn298.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:306: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1124_static.FOLLOW_nnchromatography_in_nounStructure1124);
                    nnchromatography299=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography299.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:323: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1126_static.FOLLOW_nnvacuum_in_nounStructure1126);
                    nnvacuum300=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum300.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:332: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1128_static.FOLLOW_nncycle_in_nounStructure1128);
                    nncycle301=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle301.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:340: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1130_static.FOLLOW_nntimes_in_nounStructure1130);
                    nntimes302=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes302.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:348: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1132_static.FOLLOW_nnconcentrate_in_nounStructure1132);
                    nnconcentrate303=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate303.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:362: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1134_static.FOLLOW_nnvol_in_nounStructure1134);
                    nnvol304=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol304.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:368: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1136_static.FOLLOW_nnpurify_in_nounStructure1136);
                    nnpurify305=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify305.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:377: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_nounStructure1138_static.FOLLOW_wdt_in_nounStructure1138);
                    wdt306=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt306.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:381: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_nounStructure1140_static.FOLLOW_wp_poss_in_nounStructure1140);
                    wp_poss307=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss307.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:389: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_nounStructure1142_static.FOLLOW_wpo_in_nounStructure1142);
                    wpo308=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo308.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:393: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_nounStructure1144_static.FOLLOW_wps_in_nounStructure1144);
                    wps309=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps309.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:397: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1146_static.FOLLOW_nnsynthesize_in_nounStructure1146);
                    nnsynthesize310=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize310.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:410: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1148_static.FOLLOW_nnmixture_in_nounStructure1148);
                    nnmixture311=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture311.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:420: reference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_reference_in_nounStructure1150_static.FOLLOW_reference_in_nounStructure1150);
                    reference312=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference312.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:430: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_nounStructure1152_static.FOLLOW_oscaront_in_nounStructure1152);
                    oscaront313=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront313.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:439: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1154_static.FOLLOW_nndry_in_nounStructure1154);
                    nndry314=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry314.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:445: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure1156_static.FOLLOW_number_in_nounStructure1156);
                    number315=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number315.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:452: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure1158_static.FOLLOW_oscarCompound_in_nounStructure1158);
                    oscarCompound316=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound316.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:466: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1160_static.FOLLOW_nnextract_in_nounStructure1160);
                    nnextract317=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract317.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:476: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1162_static.FOLLOW_nnfilter_in_nounStructure1162);
                    nnfilter318=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter318.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:485: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1164_static.FOLLOW_nnprecipitate_in_nounStructure1164);
                    nnprecipitate319=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate319.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:499: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1166_static.FOLLOW_nnremove_in_nounStructure1166);
                    nnremove320=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove320.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:508: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1168_static.FOLLOW_fw_in_nounStructure1168);
                    fw321=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw321.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:511: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_nounStructure1170_static.FOLLOW_fwin_in_nounStructure1170);
                    fwin322=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin322.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:516: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1172_static.FOLLOW_sym_in_nounStructure1172);
                    sym323=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym323.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:520: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1174_static.FOLLOW_clause_in_nounStructure1174);
                    clause324=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause324.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:1: range : number dash number ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number325 = null;

        ChemicalChunkerParser.dash_return dash326 = null;

        ChemicalChunkerParser.number_return number327 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:6: ( number dash number )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:8: number dash number
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_number_in_range1181_static.FOLLOW_number_in_range1181);
            number325=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number325.getTree());
            pushFollow(FOLLOW_dash_in_range1183_static.FOLLOW_dash_in_range1183);
            dash326=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash326.getTree());
            pushFollow(FOLLOW_number_in_range1185_static.FOLLOW_number_in_range1185);
            number327=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number327.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure328 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles1192_static.FOLLOW_cycleStructure_in_cycles1192);
            cycleStructure328=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure328.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd329 = null;

        ChemicalChunkerParser.dashNN_return dashNN330 = null;

        ChemicalChunkerParser.nncycle_return nncycle331 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure1209_static.FOLLOW_cd_in_cycleStructure1209);
            cd329=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd329.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:21: ( dashNN )?
            int alt71=2;
            switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 149:
                case 167:
                case 168:
                case 169:
                case 170:
                case 173:
                    {
                    alt71=1;
                    }
                    break;
            }

            switch (alt71) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure1211_static.FOLLOW_dashNN_in_cycleStructure1211);
                    dashNN330=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN330.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure1214_static.FOLLOW_nncycle_in_cycleStructure1214);
            nncycle331=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle331.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj332 = null;

        ChemicalChunkerParser.nn_return nn333 = null;

        ChemicalChunkerParser.cd_return cd334 = null;

        ChemicalChunkerParser.dash_return dash335 = null;

        ChemicalChunkerParser.adj_return adj336 = null;

        ChemicalChunkerParser.nn_return nn337 = null;

        ChemicalChunkerParser.cd_return cd338 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:10: ( adj | nn | cd )
            int alt72=3;
            switch ( input.LA(1) ) {
            case 33:
            case 34:
            case 39:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt72=1;
                }
                break;
            case 173:
                {
                alt72=2;
                }
                break;
            case 149:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN1224_static.FOLLOW_adj_in_dashNN1224);
                    adj332=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj332.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN1226_static.FOLLOW_nn_in_dashNN1226);
                    nn333=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn333.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN1228_static.FOLLOW_cd_in_dashNN1228);
                    cd334=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd334.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:22: ( dash ( adj | nn | cd ) )*
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    alt74=1;
                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN1232_static.FOLLOW_dash_in_dashNN1232);
            	    dash335=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash335.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:28: ( adj | nn | cd )
            	    int alt73=3;
            	    switch ( input.LA(1) ) {
            	    case 33:
            	    case 34:
            	    case 39:
            	    case 167:
            	    case 168:
            	    case 169:
            	    case 170:
            	        {
            	        alt73=1;
            	        }
            	        break;
            	    case 173:
            	        {
            	        alt73=2;
            	        }
            	        break;
            	    case 149:
            	        {
            	        alt73=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 73, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt73) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN1235_static.FOLLOW_adj_in_dashNN1235);
            	            adj336=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj336.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN1237_static.FOLLOW_nn_in_dashNN1237);
            	            nn337=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn337.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN1239_static.FOLLOW_cd_in_dashNN1239);
            	            cd338=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd338.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:1: ratio : ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio339 = null;

        ChemicalChunkerParser.nounratio_return nounratio340 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:7: ( ( numberratio | nounratio ) -> ^( RATIO ( numberratio )? ( nounratio )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:9: ( numberratio | nounratio )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:9: ( numberratio | nounratio )
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio1252_static.FOLLOW_numberratio_in_ratio1252);
                    numberratio339=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio339.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio1254_static.FOLLOW_nounratio_in_ratio1254);
                    nounratio340=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio340.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 111:33: -> ^( RATIO ( numberratio )? ( nounratio )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:36: ^( RATIO ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:44: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:57: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:1: numberratio : cd ( colon cdAlphanum | cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);
        int numberratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd341 = null;

        ChemicalChunkerParser.colon_return colon342 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum343 = null;

        ChemicalChunkerParser.cd_return cd344 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:13: ( cd ( colon cdAlphanum | cd )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:16: cd ( colon cdAlphanum | cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio1277_static.FOLLOW_cd_in_numberratio1277);
            cd341=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd341.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:19: ( colon cdAlphanum | cd )+
            int cnt76=0;
            loop76:
            do {
                int alt76=3;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:20: colon cdAlphanum
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio1280_static.FOLLOW_colon_in_numberratio1280);
            	    colon342=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon342.getTree());
            	    pushFollow(FOLLOW_cdAlphanum_in_numberratio1282_static.FOLLOW_cdAlphanum_in_numberratio1282);
            	    cdAlphanum343=cdAlphanum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum343.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:37: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_numberratio1284_static.FOLLOW_cd_in_numberratio1284);
            	    cd344=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd344.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, numberratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun345 = null;

        ChemicalChunkerParser.colon_return colon346 = null;

        ChemicalChunkerParser.noun_return noun347 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio1297_static.FOLLOW_noun_in_nounratio1297);
            noun345=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun345.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:11: ( colon noun )+
            int cnt77=0;
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 124:
                    {
                    int LA77_2 = input.LA(2);

                    if ( (synpred306_ChemicalChunker()) ) {
                        alt77=1;
                    }


                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio1301_static.FOLLOW_colon_in_nounratio1301);
            	    colon346=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon346.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio1303_static.FOLLOW_noun_in_nounratio1303);
            	    noun347=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun347.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:1: reference : lsqb cd rsqb ;
    public final ChemicalChunkerParser.reference_return reference() throws RecognitionException {
        ChemicalChunkerParser.reference_return retval = new ChemicalChunkerParser.reference_return();
        retval.start = input.LT(1);
        int reference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb348 = null;

        ChemicalChunkerParser.cd_return cd349 = null;

        ChemicalChunkerParser.rsqb_return rsqb350 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:2: ( lsqb cd rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:4: lsqb cd rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_reference1317_static.FOLLOW_lsqb_in_reference1317);
            lsqb348=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb348.getTree());
            pushFollow(FOLLOW_cd_in_reference1319_static.FOLLOW_cd_in_reference1319);
            cd349=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd349.getTree());
            pushFollow(FOLLOW_rsqb_in_reference1321_static.FOLLOW_rsqb_in_reference1321);
            rsqb350=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1351 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2352 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:9: ( ( citationStructure1 | citationStructure2 ) -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:11: ( citationStructure1 | citationStructure2 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:11: ( citationStructure1 | citationStructure2 )
            int alt78=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt78=1;
                }
                break;
            case 125:
                {
                alt78=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation1328_static.FOLLOW_citationStructure1_in_citation1328);
                    citationStructure1351=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1351.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation1330_static.FOLLOW_citationStructure2_in_citation1330);
                    citationStructure2352=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2352.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure1, citationStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:51: -> ^( CITATION ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:54: ^( CITATION ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:66: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:86: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);
        int citationStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb353 = null;

        ChemicalChunkerParser.citationContent_return citationContent354 = null;

        ChemicalChunkerParser.rrb_return rrb355 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:19: ( lrb citationContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure11352_static.FOLLOW_lrb_in_citationStructure11352);
            lrb353=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb353.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure11354_static.FOLLOW_citationContent_in_citationStructure11354);
            citationContent354=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent354.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure11356_static.FOLLOW_rrb_in_citationStructure11356);
            rrb355=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb355.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, citationStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);
        int citationStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma356 = null;

        ChemicalChunkerParser.lrb_return lrb357 = null;

        ChemicalChunkerParser.citationContent_return citationContent358 = null;

        ChemicalChunkerParser.rrb_return rrb359 = null;

        ChemicalChunkerParser.comma_return comma360 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:19: ( comma lrb citationContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure21362_static.FOLLOW_comma_in_citationStructure21362);
            comma356=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma356.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure21364_static.FOLLOW_lrb_in_citationStructure21364);
            lrb357=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb357.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure21366_static.FOLLOW_citationContent_in_citationStructure21366);
            citationContent358=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent358.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure21368_static.FOLLOW_rrb_in_citationStructure21368);
            rrb359=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb359.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure21370_static.FOLLOW_comma_in_citationStructure21370);
            comma360=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma360.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, citationStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp361 = null;

        ChemicalChunkerParser.fw_return fw362 = null;

        ChemicalChunkerParser.cd_return cd363 = null;

        ChemicalChunkerParser.conjunction_return conjunction364 = null;

        ChemicalChunkerParser.nnp_return nnp365 = null;

        ChemicalChunkerParser.fw_return fw366 = null;

        ChemicalChunkerParser.cd_return cd367 = null;

        ChemicalChunkerParser.conjunction_return conjunction368 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:20: ( nnp | fw | cd | conjunction )
            int alt79=4;
            switch ( input.LA(1) ) {
            case 178:
                {
                alt79=1;
                }
                break;
            case 160:
                {
                alt79=2;
                }
                break;
            case 149:
                {
                alt79=3;
                }
                break;
            case 125:
            case 148:
                {
                alt79=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent1379_static.FOLLOW_nnp_in_citationContent1379);
                    nnp361=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp361.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent1381_static.FOLLOW_fw_in_citationContent1381);
                    fw362=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw362.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent1383_static.FOLLOW_cd_in_citationContent1383);
                    cd363=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd363.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent1385_static.FOLLOW_conjunction_in_citationContent1385);
                    conjunction364=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction364.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:44: ( nnp | fw | cd | conjunction )+
            int cnt80=0;
            loop80:
            do {
                int alt80=5;
                switch ( input.LA(1) ) {
                case 178:
                    {
                    alt80=1;
                    }
                    break;
                case 160:
                    {
                    alt80=2;
                    }
                    break;
                case 149:
                    {
                    alt80=3;
                    }
                    break;
                case 125:
                case 148:
                    {
                    alt80=4;
                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent1389_static.FOLLOW_nnp_in_citationContent1389);
            	    nnp365=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp365.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent1391_static.FOLLOW_fw_in_citationContent1391);
            	    fw366=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw366.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent1393_static.FOLLOW_cd_in_citationContent1393);
            	    cd367=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd367.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent1395_static.FOLLOW_conjunction_in_citationContent1395);
            	    conjunction368=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction368.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio369 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3370 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2371 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1372 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:10: ( mixtureRatio )?
            int alt81=2;
            switch ( input.LA(1) ) {
                case 149:
                    {
                    alt81=1;
                    }
                    break;
            }

            switch (alt81) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture1405_static.FOLLOW_mixtureRatio_in_mixture1405);
                    mixtureRatio369=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio369.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt82=3;
            switch ( input.LA(1) ) {
            case 133:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 130:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 134:
                                {
                                alt82=1;
                                }
                                break;
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 133:
                            case 149:
                            case 154:
                            case 159:
                            case 160:
                            case 161:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 173:
                            case 175:
                            case 178:
                            case 183:
                            case 190:
                            case 191:
                            case 204:
                            case 205:
                            case 207:
                            case 208:
                            case 209:
                            case 210:
                            case 211:
                            case 212:
                            case 213:
                            case 214:
                            case 215:
                            case 216:
                            case 217:
                            case 218:
                            case 219:
                                {
                                alt82=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 82, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 128:
                    case 129:
                    case 131:
                    case 133:
                    case 149:
                    case 154:
                    case 159:
                    case 160:
                    case 161:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 173:
                    case 175:
                    case 178:
                    case 183:
                    case 190:
                    case 191:
                    case 204:
                    case 205:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                    case 216:
                    case 217:
                    case 218:
                    case 219:
                        {
                        alt82=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;
                }

                }
                break;
            case 125:
                {
                alt82=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture1410_static.FOLLOW_mixtureStructure3_in_mixture1410);
                    mixtureStructure3370=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3370.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture1412_static.FOLLOW_mixtureStructure2_in_mixture1412);
                    mixtureStructure2371=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2371.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture1414_static.FOLLOW_mixtureStructure1_in_mixture1414);
                    mixtureStructure1372=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1372.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureRatio, mixtureStructure2, mixtureStructure3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 124:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma373 = null;

        ChemicalChunkerParser.lrb_return lrb374 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent375 = null;

        ChemicalChunkerParser.rrb_return rrb376 = null;

        ChemicalChunkerParser.comma_return comma377 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure21441_static.FOLLOW_comma_in_mixtureStructure21441);
            comma373=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma373.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure21443_static.FOLLOW_lrb_in_mixtureStructure21443);
            lrb374=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb374.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure21445_static.FOLLOW_mixtureContent_in_mixtureStructure21445);
            mixtureContent375=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent375.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure21447_static.FOLLOW_rrb_in_mixtureStructure21447);
            rrb376=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb376.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21449_static.FOLLOW_comma_in_mixtureStructure21449);
            comma377=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma377.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb378 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent379 = null;

        ChemicalChunkerParser.rrb_return rrb380 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11455_static.FOLLOW_lrb_in_mixtureStructure11455);
            lrb378=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb378.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11457_static.FOLLOW_mixtureContent_in_mixtureStructure11457);
            mixtureContent379=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent379.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11459_static.FOLLOW_rrb_in_mixtureStructure11459);
            rrb380=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb380.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb381 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent382 = null;

        ChemicalChunkerParser.rrb_return rrb383 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure31467_static.FOLLOW_lrb_in_mixtureStructure31467);
            lrb381=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb381.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure31470_static.FOLLOW_nnpercent_in_mixtureStructure31470);
            nnpercent382=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent382.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure31472_static.FOLLOW_rrb_in_mixtureStructure31472);
            rrb383=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:1: mixtureRatio : cd colon ( cd | cdAlphanum ) ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);
        int mixtureRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd384 = null;

        ChemicalChunkerParser.colon_return colon385 = null;

        ChemicalChunkerParser.cd_return cd386 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum387 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:2: ( cd colon ( cd | cdAlphanum ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:4: cd colon ( cd | cdAlphanum )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio1483_static.FOLLOW_cd_in_mixtureRatio1483);
            cd384=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd384.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio1485_static.FOLLOW_colon_in_mixtureRatio1485);
            colon385=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon385.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:13: ( cd | cdAlphanum )
            int alt83=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt83=1;
                }
                break;
            case 32:
                {
                alt83=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:14: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureRatio1488_static.FOLLOW_cd_in_mixtureRatio1488);
                    cd386=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd386.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:17: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_mixtureRatio1490_static.FOLLOW_cdAlphanum_in_mixtureRatio1490);
                    cdAlphanum387=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum387.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, mixtureRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:1: mixtureContent : ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw388 = null;

        ChemicalChunkerParser.verb_return verb389 = null;

        ChemicalChunkerParser.nn_return nn390 = null;

        ChemicalChunkerParser.measurements_return measurements391 = null;

        ChemicalChunkerParser.md_return md392 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent393 = null;

        ChemicalChunkerParser.stop_return stop394 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound395 = null;

        ChemicalChunkerParser.molecule_return molecule396 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule397 = null;

        ChemicalChunkerParser.dash_return dash398 = null;

        ChemicalChunkerParser.sym_return sym399 = null;

        ChemicalChunkerParser.cd_return cd400 = null;

        ChemicalChunkerParser.noun_return noun401 = null;

        ChemicalChunkerParser.inof_return inof402 = null;

        ChemicalChunkerParser.inAll_return inAll403 = null;

        ChemicalChunkerParser.cd_return cd404 = null;

        ChemicalChunkerParser.comma_return comma405 = null;

        ChemicalChunkerParser.adj_return adj406 = null;

        ChemicalChunkerParser.colon_return colon407 = null;

        ChemicalChunkerParser.stop_return stop408 = null;

        ChemicalChunkerParser.minimixture_return minimixture409 = null;

        ChemicalChunkerParser.fw_return fw410 = null;

        ChemicalChunkerParser.verb_return verb411 = null;

        ChemicalChunkerParser.measurements_return measurements412 = null;

        ChemicalChunkerParser.nnyield_return nnyield413 = null;

        ChemicalChunkerParser.md_return md414 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent415 = null;

        ChemicalChunkerParser.stop_return stop416 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound417 = null;

        ChemicalChunkerParser.molecule_return molecule418 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule419 = null;

        ChemicalChunkerParser.dash_return dash420 = null;

        ChemicalChunkerParser.sym_return sym421 = null;

        ChemicalChunkerParser.cd_return cd422 = null;

        ChemicalChunkerParser.noun_return noun423 = null;

        ChemicalChunkerParser.inof_return inof424 = null;

        ChemicalChunkerParser.inAll_return inAll425 = null;

        ChemicalChunkerParser.cd_return cd426 = null;

        ChemicalChunkerParser.comma_return comma427 = null;

        ChemicalChunkerParser.adj_return adj428 = null;

        ChemicalChunkerParser.colon_return colon429 = null;

        ChemicalChunkerParser.stop_return stop430 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:15: ( ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt84=21;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1500_static.FOLLOW_fw_in_mixtureContent1500);
                    fw388=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw388.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1502_static.FOLLOW_verb_in_mixtureContent1502);
                    verb389=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb389.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent1504_static.FOLLOW_nn_in_mixtureContent1504);
                    nn390=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn390.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:31: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1506_static.FOLLOW_measurements_in_mixtureContent1506);
                    measurements391=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements391.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:44: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1508_static.FOLLOW_md_in_mixtureContent1508);
                    md392=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md392.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:47: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent1510_static.FOLLOW_nnpercent_in_mixtureContent1510);
                    nnpercent393=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent393.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:57: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1512_static.FOLLOW_stop_in_mixtureContent1512);
                    stop394=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop394.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:62: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1514_static.FOLLOW_oscarCompound_in_mixtureContent1514);
                    oscarCompound395=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound395.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:76: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1516_static.FOLLOW_molecule_in_mixtureContent1516);
                    molecule396=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule396.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:85: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1518_static.FOLLOW_unnamedmolecule_in_mixtureContent1518);
                    unnamedmolecule397=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule397.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:101: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1520_static.FOLLOW_dash_in_mixtureContent1520);
                    dash398=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash398.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:106: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1522_static.FOLLOW_sym_in_mixtureContent1522);
                    sym399=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym399.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:110: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1524_static.FOLLOW_cd_in_mixtureContent1524);
                    cd400=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd400.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:113: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1526_static.FOLLOW_noun_in_mixtureContent1526);
                    noun401=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun401.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:118: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1528_static.FOLLOW_inof_in_mixtureContent1528);
                    inof402=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof402.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:123: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1530_static.FOLLOW_inAll_in_mixtureContent1530);
                    inAll403=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll403.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:129: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1532_static.FOLLOW_cd_in_mixtureContent1532);
                    cd404=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd404.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:132: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1534_static.FOLLOW_comma_in_mixtureContent1534);
                    comma405=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma405.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:138: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1536_static.FOLLOW_adj_in_mixtureContent1536);
                    adj406=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj406.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:142: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1538_static.FOLLOW_colon_in_mixtureContent1538);
                    colon407=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon407.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:148: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1540_static.FOLLOW_stop_in_mixtureContent1540);
                    stop408=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop408.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt85=0;
            loop85:
            do {
                int alt85=23;
                alt85 = dfa85.predict(input);
                switch (alt85) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:155: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent1544_static.FOLLOW_minimixture_in_mixtureContent1544);
            	    minimixture409=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture409.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:167: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1546_static.FOLLOW_fw_in_mixtureContent1546);
            	    fw410=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw410.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:170: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1548_static.FOLLOW_verb_in_mixtureContent1548);
            	    verb411=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb411.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:175: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1550_static.FOLLOW_measurements_in_mixtureContent1550);
            	    measurements412=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements412.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:188: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent1552_static.FOLLOW_nnyield_in_mixtureContent1552);
            	    nnyield413=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield413.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:196: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1554_static.FOLLOW_md_in_mixtureContent1554);
            	    md414=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md414.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:199: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent1556_static.FOLLOW_nnpercent_in_mixtureContent1556);
            	    nnpercent415=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent415.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:209: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1558_static.FOLLOW_stop_in_mixtureContent1558);
            	    stop416=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop416.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:214: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1560_static.FOLLOW_oscarCompound_in_mixtureContent1560);
            	    oscarCompound417=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound417.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:228: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1562_static.FOLLOW_molecule_in_mixtureContent1562);
            	    molecule418=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule418.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:237: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1564_static.FOLLOW_unnamedmolecule_in_mixtureContent1564);
            	    unnamedmolecule419=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule419.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:253: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1566_static.FOLLOW_dash_in_mixtureContent1566);
            	    dash420=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash420.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:258: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1568_static.FOLLOW_sym_in_mixtureContent1568);
            	    sym421=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym421.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:262: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1570_static.FOLLOW_cd_in_mixtureContent1570);
            	    cd422=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd422.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:265: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1572_static.FOLLOW_noun_in_mixtureContent1572);
            	    noun423=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun423.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:270: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1574_static.FOLLOW_inof_in_mixtureContent1574);
            	    inof424=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof424.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:275: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1576_static.FOLLOW_inAll_in_mixtureContent1576);
            	    inAll425=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll425.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:281: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1578_static.FOLLOW_cd_in_mixtureContent1578);
            	    cd426=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd426.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:284: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1580_static.FOLLOW_comma_in_mixtureContent1580);
            	    comma427=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma427.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:290: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1582_static.FOLLOW_adj_in_mixtureContent1582);
            	    adj428=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj428.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:294: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1584_static.FOLLOW_colon_in_mixtureContent1584);
            	    colon429=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon429.getTree());

            	    }
            	    break;
            	case 22 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:300: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1586_static.FOLLOW_stop_in_mixtureContent1586);
            	    stop430=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop430.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt85 >= 1 ) break loop85;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(85, input);
                        throw eee;
                }
                cnt85++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2431 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1432 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt86=2;
            switch ( input.LA(1) ) {
            case 125:
                {
                alt86=1;
                }
                break;
            case 133:
                {
                alt86=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture1597_static.FOLLOW_mixtureStructure2_in_minimixture1597);
                    mixtureStructure2431=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2431.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture1599_static.FOLLOW_mixtureStructure1_in_minimixture1599);
                    mixtureStructure1432=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1432.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 134:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);
        int minimixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma433 = null;

        ChemicalChunkerParser.lrb_return lrb434 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent435 = null;

        ChemicalChunkerParser.rrb_return rrb436 = null;

        ChemicalChunkerParser.comma_return comma437 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:22: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure21619_static.FOLLOW_comma_in_minimixtureStructure21619);
            comma433=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma433.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure21621_static.FOLLOW_lrb_in_minimixtureStructure21621);
            lrb434=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb434.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure21623_static.FOLLOW_mixtureContent_in_minimixtureStructure21623);
            mixtureContent435=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent435.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure21625_static.FOLLOW_rrb_in_minimixtureStructure21625);
            rrb436=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb436.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure21627_static.FOLLOW_comma_in_minimixtureStructure21627);
            comma437=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma437.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, minimixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);
        int minimixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb438 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent439 = null;

        ChemicalChunkerParser.rrb_return rrb440 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:22: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure11634_static.FOLLOW_lrb_in_minimixtureStructure11634);
            lrb438=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb438.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure11636_static.FOLLOW_mixtureContent_in_minimixtureStructure11636);
            mixtureContent439=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent439.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure11638_static.FOLLOW_rrb_in_minimixtureStructure11638);
            rrb440=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb440.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, minimixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:1: minimixtureContent : ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);
        int minimixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw441 = null;

        ChemicalChunkerParser.nn_return nn442 = null;

        ChemicalChunkerParser.verb_return verb443 = null;

        ChemicalChunkerParser.measurements_return measurements444 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent445 = null;

        ChemicalChunkerParser.md_return md446 = null;

        ChemicalChunkerParser.stop_return stop447 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound448 = null;

        ChemicalChunkerParser.molecule_return molecule449 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule450 = null;

        ChemicalChunkerParser.dash_return dash451 = null;

        ChemicalChunkerParser.sym_return sym452 = null;

        ChemicalChunkerParser.cd_return cd453 = null;

        ChemicalChunkerParser.noun_return noun454 = null;

        ChemicalChunkerParser.inof_return inof455 = null;

        ChemicalChunkerParser.inAll_return inAll456 = null;

        ChemicalChunkerParser.cd_return cd457 = null;

        ChemicalChunkerParser.comma_return comma458 = null;

        ChemicalChunkerParser.adj_return adj459 = null;

        ChemicalChunkerParser.colon_return colon460 = null;

        ChemicalChunkerParser.stop_return stop461 = null;

        ChemicalChunkerParser.fw_return fw462 = null;

        ChemicalChunkerParser.verb_return verb463 = null;

        ChemicalChunkerParser.measurements_return measurements464 = null;

        ChemicalChunkerParser.nnyield_return nnyield465 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent466 = null;

        ChemicalChunkerParser.md_return md467 = null;

        ChemicalChunkerParser.stop_return stop468 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound469 = null;

        ChemicalChunkerParser.molecule_return molecule470 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule471 = null;

        ChemicalChunkerParser.dash_return dash472 = null;

        ChemicalChunkerParser.sym_return sym473 = null;

        ChemicalChunkerParser.cd_return cd474 = null;

        ChemicalChunkerParser.noun_return noun475 = null;

        ChemicalChunkerParser.inof_return inof476 = null;

        ChemicalChunkerParser.inAll_return inAll477 = null;

        ChemicalChunkerParser.cd_return cd478 = null;

        ChemicalChunkerParser.comma_return comma479 = null;

        ChemicalChunkerParser.adj_return adj480 = null;

        ChemicalChunkerParser.colon_return colon481 = null;

        ChemicalChunkerParser.stop_return stop482 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:19: ( ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt87=21;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent1647_static.FOLLOW_fw_in_minimixtureContent1647);
                    fw441=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw441.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:27: nn
                    {
                    pushFollow(FOLLOW_nn_in_minimixtureContent1649_static.FOLLOW_nn_in_minimixtureContent1649);
                    nn442=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn442.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:30: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent1651_static.FOLLOW_verb_in_minimixtureContent1651);
                    verb443=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb443.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:35: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_minimixtureContent1653_static.FOLLOW_measurements_in_minimixtureContent1653);
                    measurements444=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements444.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1655_static.FOLLOW_nnpercent_in_minimixtureContent1655);
                    nnpercent445=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent445.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:58: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent1657_static.FOLLOW_md_in_minimixtureContent1657);
                    md446=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md446.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:61: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1659_static.FOLLOW_stop_in_minimixtureContent1659);
                    stop447=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop447.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:66: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1661_static.FOLLOW_oscarCompound_in_minimixtureContent1661);
                    oscarCompound448=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound448.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:80: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent1663_static.FOLLOW_molecule_in_minimixtureContent1663);
                    molecule449=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule449.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:89: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1665_static.FOLLOW_unnamedmolecule_in_minimixtureContent1665);
                    unnamedmolecule450=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule450.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:105: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent1667_static.FOLLOW_dash_in_minimixtureContent1667);
                    dash451=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash451.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:110: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent1669_static.FOLLOW_sym_in_minimixtureContent1669);
                    sym452=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym452.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:114: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1671_static.FOLLOW_cd_in_minimixtureContent1671);
                    cd453=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd453.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:117: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent1673_static.FOLLOW_noun_in_minimixtureContent1673);
                    noun454=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun454.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:122: inof
                    {
                    pushFollow(FOLLOW_inof_in_minimixtureContent1675_static.FOLLOW_inof_in_minimixtureContent1675);
                    inof455=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof455.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:127: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent1677_static.FOLLOW_inAll_in_minimixtureContent1677);
                    inAll456=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll456.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:133: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1679_static.FOLLOW_cd_in_minimixtureContent1679);
                    cd457=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd457.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:136: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent1681_static.FOLLOW_comma_in_minimixtureContent1681);
                    comma458=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma458.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:142: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent1683_static.FOLLOW_adj_in_minimixtureContent1683);
                    adj459=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj459.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:146: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent1685_static.FOLLOW_colon_in_minimixtureContent1685);
                    colon460=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon460.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:152: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1687_static.FOLLOW_stop_in_minimixtureContent1687);
                    stop461=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop461.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt88=0;
            loop88:
            do {
                int alt88=22;
                alt88 = dfa88.predict(input);
                switch (alt88) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:159: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent1691_static.FOLLOW_fw_in_minimixtureContent1691);
            	    fw462=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw462.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:162: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent1693_static.FOLLOW_verb_in_minimixtureContent1693);
            	    verb463=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb463.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:167: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_minimixtureContent1695_static.FOLLOW_measurements_in_minimixtureContent1695);
            	    measurements464=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements464.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:180: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent1697_static.FOLLOW_nnyield_in_minimixtureContent1697);
            	    nnyield465=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield465.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1699_static.FOLLOW_nnpercent_in_minimixtureContent1699);
            	    nnpercent466=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent466.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:198: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent1701_static.FOLLOW_md_in_minimixtureContent1701);
            	    md467=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md467.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:201: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1703_static.FOLLOW_stop_in_minimixtureContent1703);
            	    stop468=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop468.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:206: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1705_static.FOLLOW_oscarCompound_in_minimixtureContent1705);
            	    oscarCompound469=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound469.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:220: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent1707_static.FOLLOW_molecule_in_minimixtureContent1707);
            	    molecule470=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule470.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:229: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1709_static.FOLLOW_unnamedmolecule_in_minimixtureContent1709);
            	    unnamedmolecule471=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule471.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:245: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent1711_static.FOLLOW_dash_in_minimixtureContent1711);
            	    dash472=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash472.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:250: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent1713_static.FOLLOW_sym_in_minimixtureContent1713);
            	    sym473=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym473.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:254: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1715_static.FOLLOW_cd_in_minimixtureContent1715);
            	    cd474=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd474.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:257: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent1717_static.FOLLOW_noun_in_minimixtureContent1717);
            	    noun475=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun475.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:262: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_minimixtureContent1719_static.FOLLOW_inof_in_minimixtureContent1719);
            	    inof476=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof476.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:267: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent1721_static.FOLLOW_inAll_in_minimixtureContent1721);
            	    inAll477=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll477.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:273: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1723_static.FOLLOW_cd_in_minimixtureContent1723);
            	    cd478=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd478.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:276: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent1725_static.FOLLOW_comma_in_minimixtureContent1725);
            	    comma479=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma479.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:282: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent1727_static.FOLLOW_adj_in_minimixtureContent1727);
            	    adj480=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj480.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:286: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent1729_static.FOLLOW_colon_in_minimixtureContent1729);
            	    colon481=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon481.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:292: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1731_static.FOLLOW_stop_in_minimixtureContent1731);
            	    stop482=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop482.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, minimixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:1: adj : ( jj | jjr | jjs | jjt | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj483 = null;

        ChemicalChunkerParser.jjr_return jjr484 = null;

        ChemicalChunkerParser.jjs_return jjs485 = null;

        ChemicalChunkerParser.jjt_return jjt486 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj487 = null;

        ChemicalChunkerParser.jjchem_return jjchem488 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn489 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:5: ( jj | jjr | jjs | jjt | oscarcj | jjchem | oscarrn )
            int alt89=7;
            switch ( input.LA(1) ) {
            case 167:
                {
                alt89=1;
                }
                break;
            case 168:
                {
                alt89=2;
                }
                break;
            case 169:
                {
                alt89=3;
                }
                break;
            case 170:
                {
                alt89=4;
                }
                break;
            case 33:
                {
                alt89=5;
                }
                break;
            case 39:
                {
                alt89=6;
                }
                break;
            case 34:
                {
                alt89=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1742_static.FOLLOW_jj_in_adj1742);
                    jj483=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj483.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1744_static.FOLLOW_jjr_in_adj1744);
                    jjr484=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr484.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1746_static.FOLLOW_jjs_in_adj1746);
                    jjs485=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs485.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1748_static.FOLLOW_jjt_in_adj1748);
                    jjt486=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt486.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1750_static.FOLLOW_oscarcj_in_adj1750);
                    oscarcj487=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj487.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:30: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj1752_static.FOLLOW_jjchem_in_adj1752);
                    jjchem488=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem488.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:37: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1754_static.FOLLOW_oscarrn_in_adj1754);
                    oscarrn489=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn489.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:1: adv : ( rb | rbr | rbt | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb490 = null;

        ChemicalChunkerParser.rbr_return rbr491 = null;

        ChemicalChunkerParser.rbt_return rbt492 = null;

        ChemicalChunkerParser.rp_return rp493 = null;

        ChemicalChunkerParser.rbs_return rbs494 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:5: ( rb | rbr | rbt | rp | rbs )
            int alt90=5;
            switch ( input.LA(1) ) {
            case 197:
                {
                alt90=1;
                }
                break;
            case 198:
                {
                alt90=2;
                }
                break;
            case 200:
                {
                alt90=3;
                }
                break;
            case 203:
                {
                alt90=4;
                }
                break;
            case 201:
                {
                alt90=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1761_static.FOLLOW_rb_in_adv1761);
                    rb490=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb490.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1763_static.FOLLOW_rbr_in_adv1763);
                    rbr491=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr491.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1765_static.FOLLOW_rbt_in_adv1765);
                    rbt492=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt492.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1767_static.FOLLOW_rp_in_adv1767);
                    rp493=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp493.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1769_static.FOLLOW_rbs_in_adv1769);
                    rbs494=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs494.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg495 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere496 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime497 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp498 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN499 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole500 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther501 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:5: ( neg )?
            int alt91=2;
            switch ( input.LA(1) ) {
                case 127:
                    {
                    alt91=1;
                    }
                    break;
            }

            switch (alt91) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1782_static.FOLLOW_neg_in_prepphrase1782);
                    neg495=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg495.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt92=6;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1786_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1786);
                    prepphraseAtmosphere496=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere496.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1788_static.FOLLOW_prepphraseTime_in_prepphrase1788);
                    prepphraseTime497=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime497.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1790_static.FOLLOW_prepphraseTemp_in_prepphrase1790);
                    prepphraseTemp498=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp498.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1792_static.FOLLOW_prepphraseIN_in_prepphrase1792);
                    prepphraseIN499=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN499.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1794_static.FOLLOW_prepphraseRole_in_prepphrase1794);
                    prepphraseRole500=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole500.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1796_static.FOLLOW_prepphraseOther_in_prepphrase1796);
                    prepphraseOther501=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther501.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv502 = null;

        ChemicalChunkerParser.adj_return adj503 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:2: ( adv | adj )
            int alt93=2;
            switch ( input.LA(1) ) {
            case 197:
            case 198:
            case 200:
            case 201:
            case 203:
                {
                alt93=1;
                }
                break;
            case 33:
            case 34:
            case 39:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt93=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1810_static.FOLLOW_adv_in_advAdj1810);
                    adv502=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv502.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1812_static.FOLLOW_adj_in_advAdj1812);
                    adj503=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj503.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj504 = null;

        ChemicalChunkerParser.inMost_return inMost505 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase506 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:4: ( advAdj )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 167:
                case 168:
                case 169:
                case 170:
                case 197:
                case 198:
                case 200:
                case 201:
                case 203:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1821_static.FOLLOW_advAdj_in_prepphraseOther1821);
            	    advAdj504=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj504.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:12: ( inMost )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                switch ( input.LA(1) ) {
                case 41:
                case 42:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 166:
                case 205:
                    {
                    alt95=1;
                    }
                    break;

                }

                switch (alt95) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1824_static.FOLLOW_inMost_in_prepphraseOther1824);
            	    inMost505=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost505.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1828_static.FOLLOW_nounphrase_in_prepphraseOther1828);
            nounphrase506=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase506.getTree());


            // AST REWRITE
            // elements: advAdj, nounphrase, inMost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof507 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase508 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1854_static.FOLLOW_inof_in_prepphraseOf1854);
            inof507=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof507.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1857_static.FOLLOW_nounphrase_in_prepphraseOf1857);
            nounphrase508=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase508.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure509 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1878_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1878);
            prepPhraseTimeStructure509=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure509.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 155:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:156:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj510 = null;

        ChemicalChunkerParser.inAll_return inAll511 = null;

        ChemicalChunkerParser.dt_return dt512 = null;

        ChemicalChunkerParser.advAdj_return advAdj513 = null;

        ChemicalChunkerParser.cd_return cd514 = null;

        ChemicalChunkerParser.nntime_return nntime515 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:3: ( advAdj )*
            loop96:
            do {
                int alt96=2;
                alt96 = dfa96.predict(input);
                switch (alt96) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1895_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1895);
            	    advAdj510=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj510.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:11: ( inAll )?
            int alt97=2;
            switch ( input.LA(1) ) {
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 166:
                case 205:
                    {
                    alt97=1;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1898_static.FOLLOW_inAll_in_prepPhraseTimeStructure1898);
                    inAll511=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll511.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:19: ( dt )?
            int alt98=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt98=1;
                    }
                    break;
            }

            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1902_static.FOLLOW_dt_in_prepPhraseTimeStructure1902);
                    dt512=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt512.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:23: ( advAdj )*
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 167:
                case 168:
                case 169:
                case 170:
                case 197:
                case 198:
                case 200:
                case 201:
                case 203:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1905_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1905);
            	    advAdj513=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj513.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:31: ( cd )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 149:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1908_static.FOLLOW_cd_in_prepPhraseTimeStructure1908);
                    cd514=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd514.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:35: ( nntime )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 59:
                    {
                    int LA101_2 = input.LA(2);

                    if ( (synpred427_ChemicalChunker()) ) {
                        alt101=1;
                    }


                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1911_static.FOLLOW_nntime_in_prepPhraseTimeStructure1911);
            	    nntime515=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime515.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin516 = null;

        ChemicalChunkerParser.molecule_return molecule517 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1923_static.FOLLOW_inin_in_prepphraseIN1923);
            inin516=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin516.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1925_static.FOLLOW_molecule_in_prepphraseIN1925);
            molecule517=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule517.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 160:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas518 = null;

        ChemicalChunkerParser.dt_return dt519 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity520 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1946_static.FOLLOW_inas_in_prepphraseRole1946);
            inas518=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas518.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:8: ( dt )?
            int alt102=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt102=1;
                    }
                    break;
            }

            switch (alt102) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1948_static.FOLLOW_dt_in_prepphraseRole1948);
                    dt519=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt519.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1951_static.FOLLOW_nnchementity_in_prepphraseRole1951);
            nnchementity520=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity520.getTree());


            // AST REWRITE
            // elements: inas, dt, nnchementity
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 163:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent521 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1974_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1974);
            prepphraseAtmosphereContent521=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent521.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 165:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder522 = null;

        ChemicalChunkerParser.dt_return dt523 = null;

        ChemicalChunkerParser.advAdj_return advAdj524 = null;

        ChemicalChunkerParser.molecule_return molecule525 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere526 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1993_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1993);
            inunder522=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder522.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:12: ( dt )?
            int alt103=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt103=1;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1996_static.FOLLOW_dt_in_prepphraseAtmosphereContent1996);
                    dt523=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt523.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:16: ( advAdj )*
            loop104:
            do {
                int alt104=2;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1999_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1999);
            	    advAdj524=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj524.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent2002_static.FOLLOW_molecule_in_prepphraseAtmosphereContent2002);
            molecule525=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule525.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:33: ( nnatmosphere )?
            int alt105=2;
            switch ( input.LA(1) ) {
                case 63:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA105_3 = input.LA(3);

                            if ( (synpred431_ChemicalChunker()) ) {
                                alt105=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent2004_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent2004);
                    nnatmosphere526=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere526.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in527 = null;

        ChemicalChunkerParser.inas_return inas528 = null;

        ChemicalChunkerParser.inbefore_return inbefore529 = null;

        ChemicalChunkerParser.inby_return inby530 = null;

        ChemicalChunkerParser.infor_return infor531 = null;

        ChemicalChunkerParser.infrom_return infrom532 = null;

        ChemicalChunkerParser.inin_return inin533 = null;

        ChemicalChunkerParser.ininto_return ininto534 = null;

        ChemicalChunkerParser.inof_return inof535 = null;

        ChemicalChunkerParser.inoff_return inoff536 = null;

        ChemicalChunkerParser.inon_return inon537 = null;

        ChemicalChunkerParser.inover_return inover538 = null;

        ChemicalChunkerParser.inunder_return inunder539 = null;

        ChemicalChunkerParser.invia_return invia540 = null;

        ChemicalChunkerParser.inwith_return inwith541 = null;

        ChemicalChunkerParser.inwithout_return inwithout542 = null;

        ChemicalChunkerParser.to_return to543 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt106=17;
            switch ( input.LA(1) ) {
            case 166:
                {
                alt106=1;
                }
                break;
            case 41:
                {
                alt106=2;
                }
                break;
            case 42:
                {
                alt106=3;
                }
                break;
            case 48:
                {
                alt106=4;
                }
                break;
            case 52:
                {
                alt106=5;
                }
                break;
            case 53:
                {
                alt106=6;
                }
                break;
            case 44:
                {
                alt106=7;
                }
                break;
            case 45:
                {
                alt106=8;
                }
                break;
            case 50:
                {
                alt106=9;
                }
                break;
            case 56:
                {
                alt106=10;
                }
                break;
            case 51:
                {
                alt106=11;
                }
                break;
            case 55:
                {
                alt106=12;
                }
                break;
            case 54:
                {
                alt106=13;
                }
                break;
            case 49:
                {
                alt106=14;
                }
                break;
            case 46:
                {
                alt106=15;
                }
                break;
            case 47:
                {
                alt106=16;
                }
                break;
            case 205:
                {
                alt106=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost2015_static.FOLLOW_in_in_inMost2015);
                    in527=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in527.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost2017_static.FOLLOW_inas_in_inMost2017);
                    inas528=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas528.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost2019_static.FOLLOW_inbefore_in_inMost2019);
                    inbefore529=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore529.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost2021_static.FOLLOW_inby_in_inMost2021);
                    inby530=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby530.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost2023_static.FOLLOW_infor_in_inMost2023);
                    infor531=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor531.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost2025_static.FOLLOW_infrom_in_inMost2025);
                    infrom532=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom532.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost2027_static.FOLLOW_inin_in_inMost2027);
                    inin533=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin533.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost2029_static.FOLLOW_ininto_in_inMost2029);
                    ininto534=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto534.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost2031_static.FOLLOW_inof_in_inMost2031);
                    inof535=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof535.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost2033_static.FOLLOW_inoff_in_inMost2033);
                    inoff536=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff536.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost2035_static.FOLLOW_inon_in_inMost2035);
                    inon537=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon537.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost2037_static.FOLLOW_inover_in_inMost2037);
                    inover538=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover538.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost2039_static.FOLLOW_inunder_in_inMost2039);
                    inunder539=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder539.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost2041_static.FOLLOW_invia_in_inMost2041);
                    invia540=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia540.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost2043_static.FOLLOW_inwith_in_inMost2043);
                    inwith541=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith541.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost2045_static.FOLLOW_inwithout_in_inMost2045);
                    inwithout542=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout542.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost2047_static.FOLLOW_to_in_inMost2047);
                    to543=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in544 = null;

        ChemicalChunkerParser.inafter_return inafter545 = null;

        ChemicalChunkerParser.inas_return inas546 = null;

        ChemicalChunkerParser.inbefore_return inbefore547 = null;

        ChemicalChunkerParser.inby_return inby548 = null;

        ChemicalChunkerParser.infor_return infor549 = null;

        ChemicalChunkerParser.infrom_return infrom550 = null;

        ChemicalChunkerParser.inin_return inin551 = null;

        ChemicalChunkerParser.ininto_return ininto552 = null;

        ChemicalChunkerParser.inof_return inof553 = null;

        ChemicalChunkerParser.inoff_return inoff554 = null;

        ChemicalChunkerParser.inon_return inon555 = null;

        ChemicalChunkerParser.inover_return inover556 = null;

        ChemicalChunkerParser.inunder_return inunder557 = null;

        ChemicalChunkerParser.invia_return invia558 = null;

        ChemicalChunkerParser.inwith_return inwith559 = null;

        ChemicalChunkerParser.inwithout_return inwithout560 = null;

        ChemicalChunkerParser.to_return to561 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt107=18;
            switch ( input.LA(1) ) {
            case 166:
                {
                alt107=1;
                }
                break;
            case 43:
                {
                alt107=2;
                }
                break;
            case 41:
                {
                alt107=3;
                }
                break;
            case 42:
                {
                alt107=4;
                }
                break;
            case 48:
                {
                alt107=5;
                }
                break;
            case 52:
                {
                alt107=6;
                }
                break;
            case 53:
                {
                alt107=7;
                }
                break;
            case 44:
                {
                alt107=8;
                }
                break;
            case 45:
                {
                alt107=9;
                }
                break;
            case 50:
                {
                alt107=10;
                }
                break;
            case 56:
                {
                alt107=11;
                }
                break;
            case 51:
                {
                alt107=12;
                }
                break;
            case 55:
                {
                alt107=13;
                }
                break;
            case 54:
                {
                alt107=14;
                }
                break;
            case 49:
                {
                alt107=15;
                }
                break;
            case 46:
                {
                alt107=16;
                }
                break;
            case 47:
                {
                alt107=17;
                }
                break;
            case 205:
                {
                alt107=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll2055_static.FOLLOW_in_in_inAll2055);
                    in544=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in544.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll2057_static.FOLLOW_inafter_in_inAll2057);
                    inafter545=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter545.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll2059_static.FOLLOW_inas_in_inAll2059);
                    inas546=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas546.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll2061_static.FOLLOW_inbefore_in_inAll2061);
                    inbefore547=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore547.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll2063_static.FOLLOW_inby_in_inAll2063);
                    inby548=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby548.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll2065_static.FOLLOW_infor_in_inAll2065);
                    infor549=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor549.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll2067_static.FOLLOW_infrom_in_inAll2067);
                    infrom550=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom550.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll2069_static.FOLLOW_inin_in_inAll2069);
                    inin551=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin551.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll2071_static.FOLLOW_ininto_in_inAll2071);
                    ininto552=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto552.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll2073_static.FOLLOW_inof_in_inAll2073);
                    inof553=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof553.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll2075_static.FOLLOW_inoff_in_inAll2075);
                    inoff554=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff554.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll2077_static.FOLLOW_inon_in_inAll2077);
                    inon555=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon555.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll2079_static.FOLLOW_inover_in_inAll2079);
                    inover556=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover556.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll2081_static.FOLLOW_inunder_in_inAll2081);
                    inunder557=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder557.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll2083_static.FOLLOW_invia_in_inAll2083);
                    invia558=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia558.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll2085_static.FOLLOW_inwith_in_inAll2085);
                    inwith559=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith559.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll2087_static.FOLLOW_inwithout_in_inAll2087);
                    inwithout560=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout560.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll2089_static.FOLLOW_to_in_inAll2089);
                    to561=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to561.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent562 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp2096_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp2096);
            prepphraseTempContent562=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent562.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 172:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj563 = null;

        ChemicalChunkerParser.inAll_return inAll564 = null;

        ChemicalChunkerParser.dt_return dt565 = null;

        ChemicalChunkerParser.advAdj_return advAdj566 = null;

        ChemicalChunkerParser.cd_return cd567 = null;

        ChemicalChunkerParser.nntemp_return nntemp568 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: ( advAdj )?
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent2117_static.FOLLOW_advAdj_in_prepphraseTempContent2117);
                    advAdj563=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj563.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:13: ( inAll )?
            int alt109=2;
            switch ( input.LA(1) ) {
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 166:
                case 205:
                    {
                    alt109=1;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent2120_static.FOLLOW_inAll_in_prepphraseTempContent2120);
                    inAll564=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll564.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:20: ( dt )?
            int alt110=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt110=1;
                    }
                    break;
            }

            switch (alt110) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent2123_static.FOLLOW_dt_in_prepphraseTempContent2123);
                    dt565=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt565.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:24: ( advAdj )?
            int alt111=2;
            switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 167:
                case 168:
                case 169:
                case 170:
                case 197:
                case 198:
                case 200:
                case 201:
                case 203:
                    {
                    alt111=1;
                    }
                    break;
            }

            switch (alt111) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent2126_static.FOLLOW_advAdj_in_prepphraseTempContent2126);
                    advAdj566=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj566.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:32: ( cd )?
            int alt112=2;
            switch ( input.LA(1) ) {
                case 149:
                    {
                    alt112=1;
                    }
                    break;
            }

            switch (alt112) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent2129_static.FOLLOW_cd_in_prepphraseTempContent2129);
                    cd567=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd567.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:36: ( nntemp )+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                switch ( input.LA(1) ) {
                case 67:
                    {
                    int LA113_2 = input.LA(2);

                    if ( (synpred470_ChemicalChunker()) ) {
                        alt113=1;
                    }


                    }
                    break;

                }

                switch (alt113) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent2132_static.FOLLOW_nntemp_in_prepphraseTempContent2132);
            	    nntemp568=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp568.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj569 = null;

        ChemicalChunkerParser.inafter_return inafter570 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase571 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:5: ( advAdj )?
            int alt114=2;
            switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 167:
                case 168:
                case 169:
                case 170:
                case 197:
                case 198:
                case 200:
                case 201:
                case 203:
                    {
                    alt114=1;
                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter2145_static.FOLLOW_advAdj_in_prepphraseAfter2145);
                    advAdj569=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj569.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter2148_static.FOLLOW_inafter_in_prepphraseAfter2148);
            inafter570=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter570.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter2151_static.FOLLOW_nounphrase_in_prepphraseAfter2151);
            nounphrase571=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase571.getTree());


            // AST REWRITE
            // elements: advAdj, inafter, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd572 = null;

        ChemicalChunkerParser.nnamount_return nnamount573 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:10: ( cd )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt115=1;
                    }
                    break;

                }

                switch (alt115) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2181_static.FOLLOW_cd_in_amount2181);
            	    cd572=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd572.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2184_static.FOLLOW_nnamount_in_amount2184);
            nnamount573=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount573.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 181:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd574 = null;

        ChemicalChunkerParser.nnmass_return nnmass575 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:8: ( cd )+
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt116=1;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2205_static.FOLLOW_cd_in_mass2205);
            	    cd574=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd574.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2208_static.FOLLOW_nnmass_in_mass2208);
            nnmass575=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass575.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:1: percent : number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.number_return number576 = null;

        ChemicalChunkerParser.nn_return nn577 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent578 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:9: ( number ( nn )? nnpercent -> ^( PERCENT number ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:11: number ( nn )? nnpercent
            {
            pushFollow(FOLLOW_number_in_percent2229_static.FOLLOW_number_in_percent2229);
            number576=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number576.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:18: ( nn )?
            int alt117=2;
            switch ( input.LA(1) ) {
                case 173:
                    {
                    alt117=1;
                    }
                    break;
            }

            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2231_static.FOLLOW_nn_in_percent2231);
                    nn577=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn577.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2234_static.FOLLOW_nnpercent_in_percent2234);
            nnpercent578=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent578.getTree());


            // AST REWRITE
            // elements: nn, nnpercent, number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:32: -> ^( PERCENT number ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:35: ^( PERCENT number ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_number.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd579 = null;

        ChemicalChunkerParser.nnvol_return nnvol580 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:10: ( cd )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt118=1;
                    }
                    break;

                }

                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2257_static.FOLLOW_cd_in_volume2257);
            	    cd579=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd579.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2260_static.FOLLOW_nnvol_in_volume2260);
            nnvol580=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol580.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: molar : ( cd )* nnmolar -> ^( MOLAR ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd581 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar582 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:7: ( ( cd )* nnmolar -> ^( MOLAR ( cd )* nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:9: ( cd )* nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:9: ( cd )*
            loop119:
            do {
                int alt119=2;
                switch ( input.LA(1) ) {
                case 149:
                    {
                    alt119=1;
                    }
                    break;

                }

                switch (alt119) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2281_static.FOLLOW_cd_in_molar2281);
            	    cd581=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd581.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2284_static.FOLLOW_nnmolar_in_molar2284);
            nnmolar582=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar582.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:21: -> ^( MOLAR ( cd )* nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:24: ^( MOLAR ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:34: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize583 = null;

        ChemicalChunkerParser.inas_return inas584 = null;

        ChemicalChunkerParser.nnexample_return nnexample585 = null;

        ChemicalChunkerParser.cd_return cd586 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase587 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase2307_static.FOLLOW_vbsynthesize_in_preparationphrase2307);
            vbsynthesize583=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize583.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase2309_static.FOLLOW_inas_in_preparationphrase2309);
            inas584=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas584.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:22: ( nnexample cd | prepphrase )
            int alt120=2;
            switch ( input.LA(1) ) {
            case 57:
                {
                alt120=1;
                }
                break;
            case 33:
            case 34:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 59:
            case 67:
            case 127:
            case 149:
            case 154:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 197:
            case 198:
            case 200:
            case 201:
            case 203:
            case 205:
                {
                alt120=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase2312_static.FOLLOW_nnexample_in_preparationphrase2312);
                    nnexample585=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample585.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase2314_static.FOLLOW_cd_in_preparationphrase2314);
                    cd586=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd586.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase2317_static.FOLLOW_prepphrase_in_preparationphrase2317);
                    prepphrase587=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase587.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus588 = null;

        ChemicalChunkerParser.conjunction_return conjunction589 = null;

        ChemicalChunkerParser.apparatus_return apparatus590 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus2330_static.FOLLOW_apparatus_in_multiApparatus2330);
            apparatus588=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus588.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:14: ( ( conjunction )* apparatus )*
            loop122:
            do {
                int alt122=2;
                alt122 = dfa122.predict(input);
                switch (alt122) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: ( conjunction )*
            	    loop121:
            	    do {
            	        int alt121=2;
            	        alt121 = dfa121.predict(input);
            	        switch (alt121) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus2333_static.FOLLOW_conjunction_in_multiApparatus2333);
            	    	    conjunction589=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction589.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop121;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus2336_static.FOLLOW_apparatus_in_multiApparatus2336);
            	    apparatus590=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus590.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt591 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus592 = null;

        ChemicalChunkerParser.nnApp_return nnApp593 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: ( dt )?
            int alt123=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    alt123=1;
                    }
                    break;
            }

            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus2348_static.FOLLOW_dt_in_apparatus2348);
                    dt591=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt591.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:8: ( preapparatus )*
            loop124:
            do {
                int alt124=2;
                switch ( input.LA(1) ) {
                case 32:
                case 33:
                case 34:
                case 35:
                case 39:
                case 58:
                case 61:
                case 66:
                case 71:
                case 77:
                case 82:
                case 125:
                case 133:
                case 149:
                case 167:
                case 168:
                case 169:
                case 170:
                case 173:
                case 183:
                    {
                    alt124=1;
                    }
                    break;

                }

                switch (alt124) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus2351_static.FOLLOW_preapparatus_in_apparatus2351);
            	    preapparatus592=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus592.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:22: ( nnApp )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                switch ( input.LA(1) ) {
                case 93:
                    {
                    int LA125_2 = input.LA(2);

                    if ( (synpred482_ChemicalChunker()) ) {
                        alt125=1;
                    }


                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus2354_static.FOLLOW_nnApp_in_apparatus2354);
            	    nnApp593=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp593.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, nnApp, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 193:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus594 = null;

        ChemicalChunkerParser.dash_return dash595 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus596 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: ( nnapparatus )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                switch ( input.LA(1) ) {
                case 93:
                    {
                    int LA126_2 = input.LA(2);

                    if ( (synpred483_ChemicalChunker()) ) {
                        alt126=1;
                    }


                    }
                    break;

                }

                switch (alt126) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2382_static.FOLLOW_nnapparatus_in_nnApp2382);
            	    nnapparatus594=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus594.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:17: ( dash nnapparatus )*
            loop127:
            do {
                int alt127=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 93:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA127_5 = input.LA(5);

                                if ( (synpred484_ChemicalChunker()) ) {
                                    alt127=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp2386_static.FOLLOW_dash_in_nnApp2386);
            	    dash595=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash595.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2388_static.FOLLOW_nnapparatus_in_nnApp2388);
            	    nnapparatus596=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus596.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity597 = null;

        ChemicalChunkerParser.adj_return adj598 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure599 = null;

        ChemicalChunkerParser.nnadd_return nnadd600 = null;

        ChemicalChunkerParser.molecule_return molecule601 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity602 = null;

        ChemicalChunkerParser.nnstate_return nnstate603 = null;

        ChemicalChunkerParser.nn_return nn604 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt128=0;
            loop128:
            do {
                int alt128=9;
                alt128 = dfa128.predict(input);
                switch (alt128) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus2402_static.FOLLOW_quantity_in_preapparatus2402);
            	    quantity597=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity597.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus2404_static.FOLLOW_adj_in_preapparatus2404);
            	    adj598=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj598.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus2406_static.FOLLOW_nnpressure_in_preapparatus2406);
            	    nnpressure599=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure599.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus2408_static.FOLLOW_nnadd_in_preapparatus2408);
            	    nnadd600=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd600.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus2410_static.FOLLOW_molecule_in_preapparatus2410);
            	    molecule601=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule601.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus2412_static.FOLLOW_nnchementity_in_preapparatus2412);
            	    nnchementity602=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity602.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus2414_static.FOLLOW_nnstate_in_preapparatus2414);
            	    nnstate603=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate603.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus2416_static.FOLLOW_nn_in_preapparatus2416);
            	    nn604=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn604.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd605 = null;

        ChemicalChunkerParser.nn_return nn606 = null;

        ChemicalChunkerParser.multiple_return multiple607 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes608 = null;

        ChemicalChunkerParser.dt_return dt609 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:3: ( cd nn )?
            int alt129=2;
            switch ( input.LA(1) ) {
                case 149:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 173:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 32:
                                                case 35:
                                                case 61:
                                                case 149:
                                                case 183:
                                                    {
                                                    alt129=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2427_static.FOLLOW_cd_in_measurements2427);
                    cd605=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd605.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2429_static.FOLLOW_nn_in_measurements2429);
                    nn606=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn606.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:12: ( multiple | measurementtypes )
            int alt130=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 60:
                    case 61:
                    case 62:
                    case 65:
                    case 130:
                    case 149:
                    case 173:
                        {
                        alt130=2;
                        }
                        break;
                    case 38:
                        {
                        alt130=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }

                }
                break;
            case 32:
            case 35:
            case 61:
            case 183:
                {
                alt130=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2434_static.FOLLOW_multiple_in_measurements2434);
                    multiple607=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple607.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2436_static.FOLLOW_measurementtypes_in_measurements2436);
                    measurementtypes608=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes608.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:43: ( dt )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 154:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA131_3 = input.LA(3);

                            if ( (synpred495_ChemicalChunker()) ) {
                                alt131=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2442_static.FOLLOW_dt_in_measurements2442);
                    dt609=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt609.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd610 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode611 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes612 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2450_static.FOLLOW_cd_in_multiple2450);
            cd610=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd610.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2452_static.FOLLOW_cdunicode_in_multiple2452);
            cdunicode611=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode611.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:25: ( measurementtypes )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2454_static.FOLLOW_measurementtypes_in_multiple2454);
                    measurementtypes612=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes612.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: measurementtypes, cdunicode, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 201:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar613 = null;

        ChemicalChunkerParser.amount_return amount614 = null;

        ChemicalChunkerParser.mass_return mass615 = null;

        ChemicalChunkerParser.percent_return percent616 = null;

        ChemicalChunkerParser.volume_return volume617 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:2: ( molar | amount | mass | percent | volume )
            int alt133=5;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2481_static.FOLLOW_molar_in_measurementtypes2481);
                    molar613=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar613.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2483_static.FOLLOW_amount_in_measurementtypes2483);
                    amount614=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount614.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2485_static.FOLLOW_mass_in_measurementtypes2485);
                    mass615=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass615.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2487_static.FOLLOW_percent_in_measurementtypes2487);
                    percent616=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent616.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2489_static.FOLLOW_volume_in_measurementtypes2489);
                    volume617=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume617.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj618 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1619 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2620 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3621 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4622 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm623 = null;

        ChemicalChunkerParser.adj_return adj624 = null;

        ChemicalChunkerParser.reference_return reference625 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:18: ( adj )*
            loop134:
            do {
                int alt134=2;
                switch ( input.LA(1) ) {
                case 33:
                case 34:
                case 39:
                case 167:
                case 168:
                case 169:
                case 170:
                    {
                    alt134=1;
                    }
                    break;

                }

                switch (alt134) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound2501_static.FOLLOW_adj_in_oscarCompound2501);
            	    adj618=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj618.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt135=5;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound2505_static.FOLLOW_oscarCompound1_in_oscarCompound2505);
                    oscarCompound1619=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1619.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound2507_static.FOLLOW_oscarCompound2_in_oscarCompound2507);
                    oscarCompound2620=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2620.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound2509_static.FOLLOW_oscarCompound3_in_oscarCompound2509);
                    oscarCompound3621=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3621.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound2511_static.FOLLOW_oscarCompound4_in_oscarCompound2511);
                    oscarCompound4622=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4622.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound2513_static.FOLLOW_oscarcm_in_oscarCompound2513);
                    oscarcm623=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm623.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:93: ( adj )?
            int alt136=2;
            alt136 = dfa136.predict(input);
            switch (alt136) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound2516_static.FOLLOW_adj_in_oscarCompound2516);
                    adj624=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj624.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:98: ( reference )?
            int alt137=2;
            switch ( input.LA(1) ) {
                case 131:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 149:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 132:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA137_7 = input.LA(7);

                                                            if ( (synpred507_ChemicalChunker()) ) {
                                                                alt137=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt137) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: reference
                    {
                    pushFollow(FOLLOW_reference_in_oscarCompound2519_static.FOLLOW_reference_in_oscarCompound2519);
                    reference625=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference625.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:1: oscarCompound4 : lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);
        int oscarCompound4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb626 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm627 = null;

        ChemicalChunkerParser.rrb_return rrb628 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:16: ( lrb oscarcm rrb -> ^( OSCARCM lrb oscarcm rrb ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound42528_static.FOLLOW_lrb_in_oscarCompound42528);
            lrb626=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb626.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound42531_static.FOLLOW_oscarcm_in_oscarCompound42531);
            oscarcm627=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm627.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound42533_static.FOLLOW_rrb_in_oscarCompound42533);
            rrb628=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb628.getTree());


            // AST REWRITE
            // elements: lrb, oscarcm, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 208:35: -> ^( OSCARCM lrb oscarcm rrb )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:38: ^( OSCARCM lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, oscarCompound4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: oscarCompound3 : oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);
        int oscarCompound3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure629 = null;


        RewriteRuleSubtreeStream stream_oscarCompound3Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound3Structure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:16: ( oscarCompound3Structure -> ^( OSCARCM oscarCompound3Structure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:18: oscarCompound3Structure
            {
            pushFollow(FOLLOW_oscarCompound3Structure_in_oscarCompound32556_static.FOLLOW_oscarCompound3Structure_in_oscarCompound32556);
            oscarCompound3Structure629=oscarCompound3Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound3Structure.add(oscarCompound3Structure629.getTree());


            // AST REWRITE
            // elements: oscarCompound3Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 209:42: -> ^( OSCARCM oscarCompound3Structure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:45: ^( OSCARCM oscarCompound3Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound3Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, oscarCompound3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:1: oscarCompound2 : oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);
        int oscarCompound2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure630 = null;


        RewriteRuleSubtreeStream stream_oscarCompound2Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound2Structure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:16: ( oscarCompound2Structure -> ^( OSCARCM oscarCompound2Structure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:18: oscarCompound2Structure
            {
            pushFollow(FOLLOW_oscarCompound2Structure_in_oscarCompound22574_static.FOLLOW_oscarCompound2Structure_in_oscarCompound22574);
            oscarCompound2Structure630=oscarCompound2Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound2Structure.add(oscarCompound2Structure630.getTree());


            // AST REWRITE
            // elements: oscarCompound2Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:42: -> ^( OSCARCM oscarCompound2Structure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:45: ^( OSCARCM oscarCompound2Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound2Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, oscarCompound2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);
        int oscarCompound1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm631 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm632 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:16: ( oscarcm ( oscarcm )+ -> ^( OSCARCM oscarcm ( oscarcm )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound12592_static.FOLLOW_oscarcm_in_oscarCompound12592);
            oscarcm631=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm631.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:26: ( oscarcm )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                switch ( input.LA(1) ) {
                case 77:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA138_3 = input.LA(3);

                        if ( (synpred508_ChemicalChunker()) ) {
                            alt138=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt138) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound12594_static.FOLLOW_oscarcm_in_oscarCompound12594);
            	    oscarcm632=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm632.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 211:35: -> ^( OSCARCM oscarcm ( oscarcm )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:38: ^( OSCARCM oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, oscarCompound1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class oscarCompound3Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3Structure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: oscarCompound3Structure : oscarcm ( dash | apost )+ ;
    public final ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3Structure_return retval = new ChemicalChunkerParser.oscarCompound3Structure_return();
        retval.start = input.LT(1);
        int oscarCompound3Structure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm633 = null;

        ChemicalChunkerParser.dash_return dash634 = null;

        ChemicalChunkerParser.apost_return apost635 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:2: ( oscarcm ( dash | apost )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:5: oscarcm ( dash | apost )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound3Structure2619_static.FOLLOW_oscarcm_in_oscarCompound3Structure2619);
            oscarcm633=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm633.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:13: ( dash | apost )+
            int cnt139=0;
            loop139:
            do {
                int alt139=3;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA139_4 = input.LA(3);

                        if ( (synpred509_ChemicalChunker()) ) {
                            alt139=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 126:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA139_5 = input.LA(3);

                        if ( (synpred510_ChemicalChunker()) ) {
                            alt139=2;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt139) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:14: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound3Structure2622_static.FOLLOW_dash_in_oscarCompound3Structure2622);
            	    dash634=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash634.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:19: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound3Structure2624_static.FOLLOW_apost_in_oscarCompound3Structure2624);
            	    apost635=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost635.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, oscarCompound3Structure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3Structure"

    public static class oscarCompound2Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2Structure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:1: oscarCompound2Structure : oscarcm ( dash oscarcm )+ ( dash )? ;
    public final ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2Structure_return retval = new ChemicalChunkerParser.oscarCompound2Structure_return();
        retval.start = input.LT(1);
        int oscarCompound2Structure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm636 = null;

        ChemicalChunkerParser.dash_return dash637 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm638 = null;

        ChemicalChunkerParser.dash_return dash639 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:2: ( oscarcm ( dash oscarcm )+ ( dash )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:5: oscarcm ( dash oscarcm )+ ( dash )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2638_static.FOLLOW_oscarcm_in_oscarCompound2Structure2638);
            oscarcm636=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm636.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:13: ( dash oscarcm )+
            int cnt140=0;
            loop140:
            do {
                int alt140=2;
                switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 77:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA140_5 = input.LA(5);

                                if ( (synpred511_ChemicalChunker()) ) {
                                    alt140=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:14: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2641_static.FOLLOW_dash_in_oscarCompound2Structure2641);
            	    dash637=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash637.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2643_static.FOLLOW_oscarcm_in_oscarCompound2Structure2643);
            	    oscarcm638=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm638.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt140 >= 1 ) break loop140;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(140, input);
                        throw eee;
                }
                cnt140++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:30: ( dash )?
            int alt141=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA141_3 = input.LA(3);

                            if ( (synpred512_ChemicalChunker()) ) {
                                alt141=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt141) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2648_static.FOLLOW_dash_in_oscarCompound2Structure2648);
                    dash639=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash639.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, oscarCompound2Structure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2Structure"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ( mixture )? ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity640 = null;

        ChemicalChunkerParser.mixture_return mixture641 = null;

        ChemicalChunkerParser.inof_return inof642 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound643 = null;

        ChemicalChunkerParser.mixture_return mixture644 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:2: ( ( quantity | mixture )+ inof oscarCompound ( mixture )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:3: ( quantity | mixture )+ inof oscarCompound ( mixture )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:3: ( quantity | mixture )+
            int cnt142=0;
            loop142:
            do {
                int alt142=3;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    int LA142_2 = input.LA(2);

                    if ( (synpred513_ChemicalChunker()) ) {
                        alt142=1;
                    }
                    else if ( (synpred514_ChemicalChunker()) ) {
                        alt142=2;
                    }


                    }
                    break;
                case 149:
                    {
                    int LA142_3 = input.LA(2);

                    if ( (synpred513_ChemicalChunker()) ) {
                        alt142=1;
                    }
                    else if ( (synpred514_ChemicalChunker()) ) {
                        alt142=2;
                    }


                    }
                    break;
                case 32:
                case 35:
                case 61:
                case 183:
                    {
                    alt142=1;
                    }
                    break;
                case 125:
                    {
                    alt142=2;
                    }
                    break;

                }

                switch (alt142) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount12662_static.FOLLOW_quantity_in_moleculeamount12662);
            	    quantity640=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity640.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount12664_static.FOLLOW_mixture_in_moleculeamount12664);
            	    mixture641=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture641.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount12668_static.FOLLOW_inof_in_moleculeamount12668);
            inof642=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof642.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount12670_static.FOLLOW_oscarCompound_in_moleculeamount12670);
            oscarCompound643=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound643.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:42: ( mixture )?
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount12672_static.FOLLOW_mixture_in_moleculeamount12672);
                    mixture644=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture644.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity645 = null;

        ChemicalChunkerParser.mixture_return mixture646 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound647 = null;

        ChemicalChunkerParser.citation_return citation648 = null;

        ChemicalChunkerParser.quantity_return quantity649 = null;

        ChemicalChunkerParser.mixture_return mixture650 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:3: ( quantity | mixture )*
            loop144:
            do {
                int alt144=3;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22683_static.FOLLOW_quantity_in_moleculeamount22683);
            	    quantity645=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity645.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22685_static.FOLLOW_mixture_in_moleculeamount22685);
            	    mixture646=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture646.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:23: ( oscarCompound )+
            int cnt145=0;
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount22689_static.FOLLOW_oscarCompound_in_moleculeamount22689);
            	    oscarCompound647=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound647.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt145 >= 1 ) break loop145;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(145, input);
                        throw eee;
                }
                cnt145++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:39: ( citation | quantity | mixture )*
            loop146:
            do {
                int alt146=4;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount22694_static.FOLLOW_citation_in_moleculeamount22694);
            	    citation648=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation648.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22696_static.FOLLOW_quantity_in_moleculeamount22696);
            	    quantity649=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity649.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22698_static.FOLLOW_mixture_in_moleculeamount22698);
            	    mixture650=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture650.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:1: moleculeamount3 : ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity651 = null;

        ChemicalChunkerParser.mixture_return mixture652 = null;

        ChemicalChunkerParser.inof_return inof653 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio654 = null;

        ChemicalChunkerParser.mixture_return mixture655 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound656 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:2: ( ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:3: ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:3: ( quantity | mixture )
            int alt147=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                int LA147_1 = input.LA(2);

                if ( (synpred522_ChemicalChunker()) ) {
                    alt147=1;
                }
                else if ( (true) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }
                }
                break;
            case 149:
                {
                int LA147_2 = input.LA(2);

                if ( (synpred522_ChemicalChunker()) ) {
                    alt147=1;
                }
                else if ( (true) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 2, input);

                    throw nvae;
                }
                }
                break;
            case 32:
            case 35:
            case 61:
            case 183:
                {
                alt147=1;
                }
                break;
            case 125:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount32712_static.FOLLOW_quantity_in_moleculeamount32712);
                    quantity651=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity651.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32714_static.FOLLOW_mixture_in_moleculeamount32714);
                    mixture652=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture652.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount32717_static.FOLLOW_inof_in_moleculeamount32717);
            inof653=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof653.getTree());
            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount32719_static.FOLLOW_mixtureRatio_in_moleculeamount32719);
            mixtureRatio654=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio654.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:40: ( mixture )?
            int alt148=2;
            switch ( input.LA(1) ) {
                case 125:
                case 149:
                    {
                    alt148=1;
                    }
                    break;
                case 133:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 77:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 32:
                                                case 33:
                                                case 34:
                                                case 35:
                                                case 36:
                                                case 37:
                                                case 39:
                                                case 40:
                                                case 41:
                                                case 42:
                                                case 43:
                                                case 44:
                                                case 45:
                                                case 46:
                                                case 47:
                                                case 48:
                                                case 49:
                                                case 50:
                                                case 51:
                                                case 52:
                                                case 53:
                                                case 54:
                                                case 55:
                                                case 56:
                                                case 57:
                                                case 58:
                                                case 59:
                                                case 61:
                                                case 62:
                                                case 63:
                                                case 64:
                                                case 65:
                                                case 66:
                                                case 67:
                                                case 68:
                                                case 69:
                                                case 70:
                                                case 71:
                                                case 72:
                                                case 73:
                                                case 74:
                                                case 75:
                                                case 76:
                                                case 77:
                                                case 78:
                                                case 79:
                                                case 80:
                                                case 81:
                                                case 82:
                                                case 83:
                                                case 84:
                                                case 85:
                                                case 86:
                                                case 87:
                                                case 88:
                                                case 89:
                                                case 90:
                                                case 91:
                                                case 92:
                                                case 93:
                                                case 94:
                                                case 95:
                                                case 96:
                                                case 97:
                                                case 98:
                                                case 99:
                                                case 100:
                                                case 101:
                                                case 102:
                                                case 103:
                                                case 104:
                                                case 105:
                                                case 106:
                                                case 107:
                                                case 108:
                                                case 109:
                                                case 110:
                                                case 111:
                                                case 112:
                                                case 113:
                                                case 114:
                                                case 115:
                                                case 116:
                                                case 117:
                                                case 118:
                                                case 119:
                                                case 120:
                                                case 121:
                                                case 122:
                                                case 123:
                                                case 124:
                                                case 125:
                                                case 126:
                                                case 128:
                                                case 129:
                                                case 130:
                                                case 131:
                                                case 133:
                                                case 149:
                                                case 154:
                                                case 159:
                                                case 160:
                                                case 161:
                                                case 166:
                                                case 167:
                                                case 168:
                                                case 169:
                                                case 170:
                                                case 171:
                                                case 173:
                                                case 175:
                                                case 178:
                                                case 183:
                                                case 190:
                                                case 191:
                                                case 204:
                                                case 205:
                                                case 207:
                                                case 208:
                                                case 209:
                                                case 210:
                                                case 211:
                                                case 212:
                                                case 213:
                                                case 214:
                                                case 215:
                                                case 216:
                                                case 217:
                                                case 218:
                                                case 219:
                                                    {
                                                    alt148=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 104:
                                case 105:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 110:
                                case 111:
                                case 112:
                                case 113:
                                case 114:
                                case 115:
                                case 116:
                                case 117:
                                case 118:
                                case 119:
                                case 120:
                                case 121:
                                case 122:
                                case 123:
                                case 124:
                                case 125:
                                case 128:
                                case 129:
                                case 130:
                                case 131:
                                case 133:
                                case 149:
                                case 154:
                                case 159:
                                case 160:
                                case 161:
                                case 166:
                                case 167:
                                case 168:
                                case 169:
                                case 170:
                                case 171:
                                case 173:
                                case 175:
                                case 178:
                                case 183:
                                case 190:
                                case 191:
                                case 204:
                                case 205:
                                case 207:
                                case 208:
                                case 209:
                                case 210:
                                case 211:
                                case 212:
                                case 213:
                                case 214:
                                case 215:
                                case 216:
                                case 217:
                                case 218:
                                case 219:
                                    {
                                    alt148=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32721_static.FOLLOW_mixture_in_moleculeamount32721);
                    mixture655=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture655.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount32724_static.FOLLOW_oscarCompound_in_moleculeamount32724);
            oscarCompound656=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3657 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1658 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2659 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:16: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:18: moleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount2734_static.FOLLOW_moleculeamount3_in_moleculeamount2734);
                    moleculeamount3657=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3657.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount2736_static.FOLLOW_moleculeamount1_in_moleculeamount2736);
                    moleculeamount1658=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1658.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:52: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount2740_static.FOLLOW_moleculeamount2_in_moleculeamount2740);
                    moleculeamount2659=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2659.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount660 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule2761_static.FOLLOW_moleculeamount_in_molecule2761);
            moleculeamount660=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount660.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 232:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class cdAlphanumType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanumType"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:1: cdAlphanumType : lrb ( cdAlphanum | cd ) rrb ;
    public final ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanumType_return retval = new ChemicalChunkerParser.cdAlphanumType_return();
        retval.start = input.LT(1);
        int cdAlphanumType_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb661 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum662 = null;

        ChemicalChunkerParser.cd_return cd663 = null;

        ChemicalChunkerParser.rrb_return rrb664 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:16: ( lrb ( cdAlphanum | cd ) rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:19: lrb ( cdAlphanum | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_cdAlphanumType2783_static.FOLLOW_lrb_in_cdAlphanumType2783);
            lrb661=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb661.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:23: ( cdAlphanum | cd )
            int alt150=2;
            switch ( input.LA(1) ) {
            case 32:
                {
                alt150=1;
                }
                break;
            case 149:
                {
                alt150=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:24: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_cdAlphanumType2786_static.FOLLOW_cdAlphanum_in_cdAlphanumType2786);
                    cdAlphanum662=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum662.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:35: cd
                    {
                    pushFollow(FOLLOW_cd_in_cdAlphanumType2788_static.FOLLOW_cd_in_cdAlphanumType2788);
                    cd663=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd663.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_cdAlphanumType2791_static.FOLLOW_rrb_in_cdAlphanumType2791);
            rrb664=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb664.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, cdAlphanumType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanumType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:1: unnamedmoleculeamount1 : quantity inof ( cdAlphanum | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity665 = null;

        ChemicalChunkerParser.inof_return inof666 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum667 = null;

        ChemicalChunkerParser.cd_return cd668 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:2: ( quantity inof ( cdAlphanum | cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: quantity inof ( cdAlphanum | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12800_static.FOLLOW_quantity_in_unnamedmoleculeamount12800);
            quantity665=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity665.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12802_static.FOLLOW_inof_in_unnamedmoleculeamount12802);
            inof666=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof666.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:18: ( cdAlphanum | cd )
            int alt151=2;
            switch ( input.LA(1) ) {
            case 32:
                {
                alt151=1;
                }
                break;
            case 149:
                {
                alt151=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:19: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount12805_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount12805);
                    cdAlphanum667=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum667.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:30: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12807_static.FOLLOW_cd_in_unnamedmoleculeamount12807);
                    cd668=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd668.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:1: unnamedmoleculeamount2 : ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum669 = null;

        ChemicalChunkerParser.cdAlphanumType_return cdAlphanumType670 = null;

        ChemicalChunkerParser.citation_return citation671 = null;

        ChemicalChunkerParser.quantity_return quantity672 = null;

        ChemicalChunkerParser.mixture_return mixture673 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:2: ( ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:3: ( cdAlphanum | cdAlphanumType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:3: ( cdAlphanum | cdAlphanumType )
            int alt152=2;
            switch ( input.LA(1) ) {
            case 32:
                {
                alt152=1;
                }
                break;
            case 133:
                {
                alt152=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:4: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount22816_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount22816);
                    cdAlphanum669=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum669.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:15: cdAlphanumType
                    {
                    pushFollow(FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22818_static.FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22818);
                    cdAlphanumType670=cdAlphanumType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanumType670.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:31: ( citation | quantity | mixture )*
            loop153:
            do {
                int alt153=4;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:32: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22822_static.FOLLOW_citation_in_unnamedmoleculeamount22822);
            	    citation671=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation671.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:41: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22824_static.FOLLOW_quantity_in_unnamedmoleculeamount22824);
            	    quantity672=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity672.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:50: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22826_static.FOLLOW_mixture_in_unnamedmoleculeamount22826);
            	    mixture673=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture673.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity674 = null;

        ChemicalChunkerParser.inof_return inof675 = null;

        ChemicalChunkerParser.jj_return jj676 = null;

        ChemicalChunkerParser.noun_return noun677 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:2: ( quantity inof ( ( jj )? noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32842_static.FOLLOW_quantity_in_unnamedmoleculeamount32842);
            quantity674=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity674.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32844_static.FOLLOW_inof_in_unnamedmoleculeamount32844);
            inof675=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof675.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:17: ( ( jj )? noun )+
            int cnt155=0;
            loop155:
            do {
                int alt155=2;
                alt155 = dfa155.predict(input);
                switch (alt155) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: ( jj )? noun
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: ( jj )?
            	    int alt154=2;
            	    switch ( input.LA(1) ) {
            	        case 167:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA154_3 = input.LA(3);

            	                    if ( (synpred532_ChemicalChunker()) ) {
            	                        alt154=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt154) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32847_static.FOLLOW_jj_in_unnamedmoleculeamount32847);
            	            jj676=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj676.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32850_static.FOLLOW_noun_in_unnamedmoleculeamount32850);
            	    noun677=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun677.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt155 >= 1 ) break loop155;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(155, input);
                        throw eee;
                }
                cnt155++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity678 = null;

        ChemicalChunkerParser.mixture_return mixture679 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity680 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:2: ( ( quantity | mixture ) nnchementity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:3: ( quantity | mixture )
            int alt156=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                int LA156_1 = input.LA(2);

                if ( (synpred534_ChemicalChunker()) ) {
                    alt156=1;
                }
                else if ( (true) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }
                }
                break;
            case 149:
                {
                int LA156_2 = input.LA(2);

                if ( (synpred534_ChemicalChunker()) ) {
                    alt156=1;
                }
                else if ( (true) ) {
                    alt156=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 2, input);

                    throw nvae;
                }
                }
                break;
            case 32:
            case 35:
            case 61:
            case 183:
                {
                alt156=1;
                }
                break;
            case 125:
                {
                alt156=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount42863_static.FOLLOW_quantity_in_unnamedmoleculeamount42863);
                    quantity678=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity678.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount42865_static.FOLLOW_mixture_in_unnamedmoleculeamount42865);
                    mixture679=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture679.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount42868_static.FOLLOW_nnchementity_in_unnamedmoleculeamount42868);
            nnchementity680=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity680.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: unnamedmoleculeamount5 : jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp681 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity682 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum683 = null;

        ChemicalChunkerParser.quantity_return quantity684 = null;

        ChemicalChunkerParser.mixture_return mixture685 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:24: ( jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:11: jjcomp nnchementity ( cdAlphanum )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount52887_static.FOLLOW_jjcomp_in_unnamedmoleculeamount52887);
            jjcomp681=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp681.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount52889_static.FOLLOW_nnchementity_in_unnamedmoleculeamount52889);
            nnchementity682=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity682.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:31: ( cdAlphanum )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 32:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA157_3 = input.LA(3);

                            if ( (synpred535_ChemicalChunker()) ) {
                                alt157=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_unnamedmoleculeamount52891_static.FOLLOW_cdAlphanum_in_unnamedmoleculeamount52891);
                    cdAlphanum683=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum683.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:43: ( quantity | mixture )*
            loop158:
            do {
                int alt158=3;
                alt158 = dfa158.predict(input);
                switch (alt158) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount52895_static.FOLLOW_quantity_in_unnamedmoleculeamount52895);
            	    quantity684=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity684.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount52897_static.FOLLOW_mixture_in_unnamedmoleculeamount52897);
            	    mixture685=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture685.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: unnamedmoleculeamount : ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5686 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1687 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2688 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3689 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4690 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt159=5;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2911_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2911);
                    unnamedmoleculeamount5686=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5686.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:27: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2913_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2913);
                    unnamedmoleculeamount1687=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1687.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:52: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2917_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2917);
                    unnamedmoleculeamount2688=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2688.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:77: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2921_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2921);
                    unnamedmoleculeamount3689=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3689.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:100: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2923_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2923);
                    unnamedmoleculeamount4690=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4690.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, unnamedmoleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:258:1: unnamedmolecule : unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount691 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:2: ( unnamedmoleculeamount -> ^( UNNAMEDMOLECULE unnamedmoleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2934_static.FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2934);
            unnamedmoleculeamount691=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount691.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 259:26: -> ^( UNNAMEDMOLECULE unnamedmoleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:29: ^( UNNAMEDMOLECULE unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:1: quantity : ( quantity1 | quantity2 ) -> ^( QUANTITY ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1692 = null;

        ChemicalChunkerParser.quantity2_return quantity2693 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:11: ( ( quantity1 | quantity2 ) -> ^( QUANTITY ( quantity1 )? ( quantity2 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:14: ( quantity1 | quantity2 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:14: ( quantity1 | quantity2 )
            int alt160=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt160=1;
                }
                break;
            case 32:
            case 35:
            case 61:
            case 149:
            case 183:
                {
                alt160=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2956_static.FOLLOW_quantity1_in_quantity2956);
                    quantity1692=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1692.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2958_static.FOLLOW_quantity2_in_quantity2958);
                    quantity2693=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2693.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity1, quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:36: -> ^( QUANTITY ( quantity1 )? ( quantity2 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:41: ^( QUANTITY ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:53: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:64: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb694 = null;

        ChemicalChunkerParser.measurements_return measurements695 = null;

        ChemicalChunkerParser.comma_return comma696 = null;

        ChemicalChunkerParser.measurements_return measurements697 = null;

        ChemicalChunkerParser.comma_return comma698 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase699 = null;

        ChemicalChunkerParser.stop_return stop700 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase701 = null;

        ChemicalChunkerParser.rrb_return rrb702 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12983_static.FOLLOW_lrb_in_quantity12983);
            lrb694=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb694.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12985_static.FOLLOW_measurements_in_quantity12985);
            measurements695=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements695.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:21: ( comma measurements )*
            loop161:
            do {
                int alt161=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 32:
                        case 35:
                        case 61:
                        case 149:
                        case 183:
                            {
                            alt161=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt161) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12988_static.FOLLOW_comma_in_quantity12988);
            	    comma696=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma696.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12991_static.FOLLOW_measurements_in_quantity12991);
            	    measurements697=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements697.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:44: ( comma preparationphrase )*
            loop162:
            do {
                int alt162=2;
                switch ( input.LA(1) ) {
                case 125:
                    {
                    alt162=1;
                    }
                    break;

                }

                switch (alt162) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12996_static.FOLLOW_comma_in_quantity12996);
            	    comma698=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma698.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12998_static.FOLLOW_preparationphrase_in_quantity12998);
            	    preparationphrase699=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase699.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:71: ( stop preparationphrase )*
            loop163:
            do {
                int alt163=2;
                switch ( input.LA(1) ) {
                case 129:
                    {
                    alt163=1;
                    }
                    break;

                }

                switch (alt163) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity13003_static.FOLLOW_stop_in_quantity13003);
            	    stop700=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop700.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity13005_static.FOLLOW_preparationphrase_in_quantity13005);
            	    preparationphrase701=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase701.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity13010_static.FOLLOW_rrb_in_quantity13010);
            rrb702=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb702.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements703 = null;

        ChemicalChunkerParser.comma_return comma704 = null;

        ChemicalChunkerParser.measurements_return measurements705 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity23022_static.FOLLOW_measurements_in_quantity23022);
            measurements703=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements703.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:18: ( comma measurements )*
            loop164:
            do {
                int alt164=2;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity23025_static.FOLLOW_comma_in_quantity23025);
            	    comma704=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma704.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity23028_static.FOLLOW_measurements_in_quantity23028);
            	    measurements705=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements705.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: method : ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral706 = null;

        ChemicalChunkerParser.nn_return nn707 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod708 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum709 = null;

        ChemicalChunkerParser.cd_return cd710 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:7: ( ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:5: ( nngeneral | nn )? nnmethod ( cdAlphanum | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:5: ( nngeneral | nn )?
            int alt165=3;
            switch ( input.LA(1) ) {
                case 69:
                    {
                    alt165=1;
                    }
                    break;
                case 173:
                    {
                    alt165=2;
                    }
                    break;
            }

            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method3043_static.FOLLOW_nngeneral_in_method3043);
                    nngeneral706=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral706.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method3045_static.FOLLOW_nn_in_method3045);
                    nn707=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn707.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method3049_static.FOLLOW_nnmethod_in_method3049);
            nnmethod708=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod708.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:30: ( cdAlphanum | cd )?
            int alt166=3;
            switch ( input.LA(1) ) {
                case 32:
                    {
                    alt166=1;
                    }
                    break;
                case 149:
                    {
                    alt166=2;
                    }
                    break;
            }

            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:31: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_method3052_static.FOLLOW_cdAlphanum_in_method3052);
                    cdAlphanum709=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum709.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:42: cd
                    {
                    pushFollow(FOLLOW_cd_in_method3054_static.FOLLOW_cd_in_method3054);
                    cd710=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd710.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);
        int brackets_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb711 = null;

        ChemicalChunkerParser.rrb_return rrb712 = null;

        ChemicalChunkerParser.lsqb_return lsqb713 = null;

        ChemicalChunkerParser.rsqb_return rsqb714 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt167=0;
            loop167:
            do {
                int alt167=5;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt167=1;
                    }
                    break;
                case 134:
                    {
                    alt167=2;
                    }
                    break;
                case 131:
                    {
                    alt167=3;
                    }
                    break;
                case 132:
                    {
                    alt167=4;
                    }
                    break;

                }

                switch (alt167) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets3076_static.FOLLOW_lrb_in_brackets3076);
            	    lrb711=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb711.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets3078_static.FOLLOW_rrb_in_brackets3078);
            	    rrb712=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb712.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets3080_static.FOLLOW_lsqb_in_brackets3080);
            	    lsqb713=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb713.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets3082_static.FOLLOW_rsqb_in_brackets3082);
            	    rsqb714=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb714.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, brackets_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;
        RewriteRuleTokenStream stream_32=new RewriteRuleTokenStream(adaptor,"token 32");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal715=(Token)match(input,32,FOLLOW_32_in_cdAlphanum3095_static.FOLLOW_32_in_cdAlphanum3095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_32.add(string_literal715);

            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3097_static.FOLLOW_TOKEN_in_cdAlphanum3097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN716);



            // AST REWRITE
            // elements: 32, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_32.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;
        RewriteRuleTokenStream stream_33=new RewriteRuleTokenStream(adaptor,"token 33");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:9: 'OSCAR-CJ' TOKEN
            {
            string_literal717=(Token)match(input,33,FOLLOW_33_in_oscarcj3110_static.FOLLOW_33_in_oscarcj3110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_33.add(string_literal717);

            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3112_static.FOLLOW_TOKEN_in_oscarcj3112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN718);



            // AST REWRITE
            // elements: TOKEN, 33
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 279:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_33.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;
        RewriteRuleTokenStream stream_34=new RewriteRuleTokenStream(adaptor,"token 34");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:9: 'OSCAR-RN' TOKEN
            {
            string_literal719=(Token)match(input,34,FOLLOW_34_in_oscarrn3125_static.FOLLOW_34_in_oscarrn3125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_34.add(string_literal719);

            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3127_static.FOLLOW_TOKEN_in_oscarrn3127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN720);



            // AST REWRITE
            // elements: TOKEN, 34
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_34.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: oscarcpr : 'OSCAR-CPR' TOKEN -> ^( 'OSCAR-CPR' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);
        int oscarcpr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;
        RewriteRuleTokenStream stream_35=new RewriteRuleTokenStream(adaptor,"token 35");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:9: ( 'OSCAR-CPR' TOKEN -> ^( 'OSCAR-CPR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:10: 'OSCAR-CPR' TOKEN
            {
            string_literal721=(Token)match(input,35,FOLLOW_35_in_oscarcpr3140_static.FOLLOW_35_in_oscarcpr3140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_35.add(string_literal721);

            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr3142_static.FOLLOW_TOKEN_in_oscarcpr3142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN722);



            // AST REWRITE
            // elements: 35, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:28: -> ^( 'OSCAR-CPR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:31: ^( 'OSCAR-CPR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_35.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, oscarcpr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;
        RewriteRuleTokenStream stream_36=new RewriteRuleTokenStream(adaptor,"token 36");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:10: 'OSCAR-ONT' TOKEN
            {
            string_literal723=(Token)match(input,36,FOLLOW_36_in_oscaront3155_static.FOLLOW_36_in_oscaront3155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_36.add(string_literal723);

            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3157_static.FOLLOW_TOKEN_in_oscaront3157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN724);



            // AST REWRITE
            // elements: TOKEN, 36
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 282:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_36.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;
        RewriteRuleTokenStream stream_37=new RewriteRuleTokenStream(adaptor,"token 37");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:11: 'TM-UNICODE' TOKEN
            {
            string_literal725=(Token)match(input,37,FOLLOW_37_in_tmunicode3170_static.FOLLOW_37_in_tmunicode3170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_37.add(string_literal725);

            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3172_static.FOLLOW_TOKEN_in_tmunicode3172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN726);



            // AST REWRITE
            // elements: TOKEN, 37
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 283:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_37.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:11: 'CD-UNICODE' TOKEN
            {
            string_literal727=(Token)match(input,38,FOLLOW_38_in_cdunicode3185_static.FOLLOW_38_in_cdunicode3185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal727);

            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3187_static.FOLLOW_TOKEN_in_cdunicode3187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN728);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:8: 'JJ-CHEM' TOKEN
            {
            string_literal729=(Token)match(input,39,FOLLOW_39_in_jjchem3200_static.FOLLOW_39_in_jjchem3200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal729);

            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3202_static.FOLLOW_TOKEN_in_jjchem3202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN730);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 285:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal731=(Token)match(input,40,FOLLOW_40_in_jjcomp3215_static.FOLLOW_40_in_jjcomp3215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal731);

            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3217_static.FOLLOW_TOKEN_in_jjcomp3217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN732);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:6: 'IN-AS' TOKEN
            {
            string_literal733=(Token)match(input,41,FOLLOW_41_in_inas3231_static.FOLLOW_41_in_inas3231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal733);

            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3233_static.FOLLOW_TOKEN_in_inas3233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN734);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:10: 'IN-BEFORE' TOKEN
            {
            string_literal735=(Token)match(input,42,FOLLOW_42_in_inbefore3246_static.FOLLOW_42_in_inbefore3246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal735);

            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3248_static.FOLLOW_TOKEN_in_inbefore3248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN736);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:9: 'IN-AFTER' TOKEN
            {
            string_literal737=(Token)match(input,43,FOLLOW_43_in_inafter3261_static.FOLLOW_43_in_inafter3261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal737);

            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3263_static.FOLLOW_TOKEN_in_inafter3263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN738);



            // AST REWRITE
            // elements: 43, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:6: 'IN-IN' TOKEN
            {
            string_literal739=(Token)match(input,44,FOLLOW_44_in_inin3276_static.FOLLOW_44_in_inin3276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal739);

            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3278_static.FOLLOW_TOKEN_in_inin3278); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN740);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:8: 'IN-INTO' TOKEN
            {
            string_literal741=(Token)match(input,45,FOLLOW_45_in_ininto3291_static.FOLLOW_45_in_ininto3291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal741);

            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3293_static.FOLLOW_TOKEN_in_ininto3293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN742);



            // AST REWRITE
            // elements: 45, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:8: 'IN-WITH' TOKEN
            {
            string_literal743=(Token)match(input,46,FOLLOW_46_in_inwith3306_static.FOLLOW_46_in_inwith3306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal743);

            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3308_static.FOLLOW_TOKEN_in_inwith3308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN744);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:11: 'IN-WITHOUT' TOKEN
            {
            string_literal745=(Token)match(input,47,FOLLOW_47_in_inwithout3321_static.FOLLOW_47_in_inwithout3321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3323_static.FOLLOW_TOKEN_in_inwithout3323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: 47, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:6: 'IN-BY' TOKEN
            {
            string_literal747=(Token)match(input,48,FOLLOW_48_in_inby3336_static.FOLLOW_48_in_inby3336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3338_static.FOLLOW_TOKEN_in_inby3338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:7: 'IN-VIA' TOKEN
            {
            string_literal749=(Token)match(input,49,FOLLOW_49_in_invia3351_static.FOLLOW_49_in_invia3351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3353_static.FOLLOW_TOKEN_in_invia3353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: 49, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:6: 'IN-OF' TOKEN
            {
            string_literal751=(Token)match(input,50,FOLLOW_50_in_inof3366_static.FOLLOW_50_in_inof3366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3368_static.FOLLOW_TOKEN_in_inof3368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: 50, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:6: 'IN-ON' TOKEN
            {
            string_literal753=(Token)match(input,51,FOLLOW_51_in_inon3381_static.FOLLOW_51_in_inon3381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3383_static.FOLLOW_TOKEN_in_inon3383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:7: 'IN-FOR' TOKEN
            {
            string_literal755=(Token)match(input,52,FOLLOW_52_in_infor3396_static.FOLLOW_52_in_infor3396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3398_static.FOLLOW_TOKEN_in_infor3398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:8: 'IN-FROM' TOKEN
            {
            string_literal757=(Token)match(input,53,FOLLOW_53_in_infrom3411_static.FOLLOW_53_in_infrom3411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3413_static.FOLLOW_TOKEN_in_infrom3413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: TOKEN, 53
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:9: 'IN-UNDER' TOKEN
            {
            string_literal759=(Token)match(input,54,FOLLOW_54_in_inunder3426_static.FOLLOW_54_in_inunder3426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3428_static.FOLLOW_TOKEN_in_inunder3428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:8: 'IN-OVER' TOKEN
            {
            string_literal761=(Token)match(input,55,FOLLOW_55_in_inover3441_static.FOLLOW_55_in_inover3441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3443_static.FOLLOW_TOKEN_in_inover3443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:7: 'IN-OFF' TOKEN
            {
            string_literal763=(Token)match(input,56,FOLLOW_56_in_inoff3456_static.FOLLOW_56_in_inoff3456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3458_static.FOLLOW_TOKEN_in_inoff3458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 303:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal765=(Token)match(input,57,FOLLOW_57_in_nnexample3473_static.FOLLOW_57_in_nnexample3473); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3475_static.FOLLOW_TOKEN_in_nnexample3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:9: 'NN-STATE' TOKEN
            {
            string_literal767=(Token)match(input,58,FOLLOW_58_in_nnstate3488_static.FOLLOW_58_in_nnstate3488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3490_static.FOLLOW_TOKEN_in_nnstate3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 307:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:8: 'NN-TIME' TOKEN
            {
            string_literal769=(Token)match(input,59,FOLLOW_59_in_nntime3503_static.FOLLOW_59_in_nntime3503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3505_static.FOLLOW_TOKEN_in_nntime3505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: TOKEN, 59
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:8: 'NN-MASS' TOKEN
            {
            string_literal771=(Token)match(input,60,FOLLOW_60_in_nnmass3518_static.FOLLOW_60_in_nnmass3518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3520_static.FOLLOW_TOKEN_in_nnmass3520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:9: 'NN-MOLAR' TOKEN
            {
            string_literal773=(Token)match(input,61,FOLLOW_61_in_nnmolar3533_static.FOLLOW_61_in_nnmolar3533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3535_static.FOLLOW_TOKEN_in_nnmolar3535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: 61, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:10: 'NN-AMOUNT' TOKEN
            {
            string_literal775=(Token)match(input,62,FOLLOW_62_in_nnamount3548_static.FOLLOW_62_in_nnamount3548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3550_static.FOLLOW_TOKEN_in_nnamount3550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal777=(Token)match(input,63,FOLLOW_63_in_nnatmosphere3563_static.FOLLOW_63_in_nnatmosphere3563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3565_static.FOLLOW_TOKEN_in_nnatmosphere3565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:6: 'NN-EQ' TOKEN
            {
            string_literal779=(Token)match(input,64,FOLLOW_64_in_nneq3578_static.FOLLOW_64_in_nneq3578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3580_static.FOLLOW_TOKEN_in_nneq3580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:7: 'NN-VOL' TOKEN
            {
            string_literal781=(Token)match(input,65,FOLLOW_65_in_nnvol3593_static.FOLLOW_65_in_nnvol3593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3595_static.FOLLOW_TOKEN_in_nnvol3595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: TOKEN, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal783=(Token)match(input,66,FOLLOW_66_in_nnchementity3608_static.FOLLOW_66_in_nnchementity3608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3610_static.FOLLOW_TOKEN_in_nnchementity3610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: 66, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:8: 'NN-TEMP' TOKEN
            {
            string_literal785=(Token)match(input,67,FOLLOW_67_in_nntemp3623_static.FOLLOW_67_in_nntemp3623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3625_static.FOLLOW_TOKEN_in_nntemp3625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:9: 'NN-FLASH' TOKEN
            {
            string_literal787=(Token)match(input,68,FOLLOW_68_in_nnflash3638_static.FOLLOW_68_in_nnflash3638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3640_static.FOLLOW_TOKEN_in_nnflash3640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:11: 'NN-GENERAL' TOKEN
            {
            string_literal789=(Token)match(input,69,FOLLOW_69_in_nngeneral3653_static.FOLLOW_69_in_nngeneral3653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3655_static.FOLLOW_TOKEN_in_nngeneral3655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:10: 'NN-METHOD' TOKEN
            {
            string_literal791=(Token)match(input,70,FOLLOW_70_in_nnmethod3668_static.FOLLOW_70_in_nnmethod3668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3670_static.FOLLOW_TOKEN_in_nnmethod3670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: 70, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:12: 'NN-PRESSURE' TOKEN
            {
            string_literal793=(Token)match(input,71,FOLLOW_71_in_nnpressure3683_static.FOLLOW_71_in_nnpressure3683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3685_static.FOLLOW_TOKEN_in_nnpressure3685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:10: 'NN-COLUMN' TOKEN
            {
            string_literal795=(Token)match(input,72,FOLLOW_72_in_nncolumn3698_static.FOLLOW_72_in_nncolumn3698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3700_static.FOLLOW_TOKEN_in_nncolumn3700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: TOKEN, 72
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal797=(Token)match(input,73,FOLLOW_73_in_nnchromatography3713_static.FOLLOW_73_in_nnchromatography3713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3715_static.FOLLOW_TOKEN_in_nnchromatography3715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: 73, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:10: 'NN-VACUUM' TOKEN
            {
            string_literal799=(Token)match(input,74,FOLLOW_74_in_nnvacuum3728_static.FOLLOW_74_in_nnvacuum3728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3730_static.FOLLOW_TOKEN_in_nnvacuum3730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:9: 'NN-CYCLE' TOKEN
            {
            string_literal801=(Token)match(input,75,FOLLOW_75_in_nncycle3743_static.FOLLOW_75_in_nncycle3743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3745_static.FOLLOW_TOKEN_in_nncycle3745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: 75, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:9: 'NN-TIMES' TOKEN
            {
            string_literal803=(Token)match(input,76,FOLLOW_76_in_nntimes3758_static.FOLLOW_76_in_nntimes3758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3760_static.FOLLOW_TOKEN_in_nntimes3760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:9: 'OSCAR-CM' TOKEN
            {
            string_literal805=(Token)match(input,77,FOLLOW_77_in_oscarcm3775_static.FOLLOW_77_in_oscarcm3775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3777_static.FOLLOW_TOKEN_in_oscarcm3777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:7: 'VB-USE' TOKEN
            {
            string_literal807=(Token)match(input,78,FOLLOW_78_in_vbuse3792_static.FOLLOW_78_in_vbuse3792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3794_static.FOLLOW_TOKEN_in_vbuse3794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:10: 'VB-CHANGE' TOKEN
            {
            string_literal809=(Token)match(input,79,FOLLOW_79_in_vbchange3807_static.FOLLOW_79_in_vbchange3807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3809_static.FOLLOW_TOKEN_in_vbchange3809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal811=(Token)match(input,80,FOLLOW_80_in_vbsubmerge3822_static.FOLLOW_80_in_vbsubmerge3822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3824_static.FOLLOW_TOKEN_in_vbsubmerge3824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:11: 'VB-SUBJECT' TOKEN
            {
            string_literal813=(Token)match(input,81,FOLLOW_81_in_vbsubject3837_static.FOLLOW_81_in_vbsubject3837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3839_static.FOLLOW_TOKEN_in_vbsubject3839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:7: 'NN-ADD' TOKEN
            {
            string_literal815=(Token)match(input,82,FOLLOW_82_in_nnadd3854_static.FOLLOW_82_in_nnadd3854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3856_static.FOLLOW_TOKEN_in_nnadd3856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:11: 'NN-MIXTURE' TOKEN
            {
            string_literal817=(Token)match(input,83,FOLLOW_83_in_nnmixture3869_static.FOLLOW_83_in_nnmixture3869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3871_static.FOLLOW_TOKEN_in_nnmixture3871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: 83, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:10: 'VB-DILUTE' TOKEN
            {
            string_literal819=(Token)match(input,84,FOLLOW_84_in_vbdilute3884_static.FOLLOW_84_in_vbdilute3884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3886_static.FOLLOW_TOKEN_in_vbdilute3886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: 84, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:7: 'VB-ADD' TOKEN
            {
            string_literal821=(Token)match(input,85,FOLLOW_85_in_vbadd3900_static.FOLLOW_85_in_vbadd3900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3902_static.FOLLOW_TOKEN_in_vbadd3902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: 85, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:10: 'VB-CHARGE' TOKEN
            {
            string_literal823=(Token)match(input,86,FOLLOW_86_in_vbcharge3915_static.FOLLOW_86_in_vbcharge3915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3917_static.FOLLOW_TOKEN_in_vbcharge3917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:11: 'VB-CONTAIN' TOKEN
            {
            string_literal825=(Token)match(input,87,FOLLOW_87_in_vbcontain3930_static.FOLLOW_87_in_vbcontain3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3932_static.FOLLOW_TOKEN_in_vbcontain3932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:8: 'VB-DROP' TOKEN
            {
            string_literal827=(Token)match(input,88,FOLLOW_88_in_vbdrop3945_static.FOLLOW_88_in_vbdrop3945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3947_static.FOLLOW_TOKEN_in_vbdrop3947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:8: 'VB-FILL' TOKEN
            {
            string_literal829=(Token)match(input,89,FOLLOW_89_in_vbfill3960_static.FOLLOW_89_in_vbfill3960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3962_static.FOLLOW_TOKEN_in_vbfill3962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:11: 'VB-SUSPEND' TOKEN
            {
            string_literal831=(Token)match(input,90,FOLLOW_90_in_vbsuspend3975_static.FOLLOW_90_in_vbsuspend3975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3977_static.FOLLOW_TOKEN_in_vbsuspend3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:9: 'VB-TREAT' TOKEN
            {
            string_literal833=(Token)match(input,91,FOLLOW_91_in_vbtreat3990_static.FOLLOW_91_in_vbtreat3990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3992_static.FOLLOW_TOKEN_in_vbtreat3992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: 91, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:13: 'VB-APPARATUS' TOKEN
            {
            string_literal835=(Token)match(input,92,FOLLOW_92_in_vbapparatus4007_static.FOLLOW_92_in_vbapparatus4007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4009_static.FOLLOW_TOKEN_in_vbapparatus4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:13: 'NN-APPARATUS' TOKEN
            {
            string_literal837=(Token)match(input,93,FOLLOW_93_in_nnapparatus4022_static.FOLLOW_93_in_nnapparatus4022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4024_static.FOLLOW_TOKEN_in_nnapparatus4024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal839=(Token)match(input,94,FOLLOW_94_in_vbconcentrate4039_static.FOLLOW_94_in_vbconcentrate4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4041_static.FOLLOW_TOKEN_in_vbconcentrate4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: TOKEN, 94
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal841=(Token)match(input,95,FOLLOW_95_in_nnconcentrate4054_static.FOLLOW_95_in_nnconcentrate4054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4056_static.FOLLOW_TOKEN_in_nnconcentrate4056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: 95, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:8: 'VB-COOL' TOKEN
            {
            string_literal843=(Token)match(input,96,FOLLOW_96_in_vbcool4071_static.FOLLOW_96_in_vbcool4071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4073_static.FOLLOW_TOKEN_in_vbcool4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:10: 'VB-DEGASS' TOKEN
            {
            string_literal845=(Token)match(input,97,FOLLOW_97_in_vbdegass4088_static.FOLLOW_97_in_vbdegass4088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4090_static.FOLLOW_TOKEN_in_vbdegass4090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal847=(Token)match(input,98,FOLLOW_98_in_vbdissolve4105_static.FOLLOW_98_in_vbdissolve4105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4107_static.FOLLOW_TOKEN_in_vbdissolve4107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: TOKEN, 98
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:7: 'VB-DRY' TOKEN
            {
            string_literal849=(Token)match(input,99,FOLLOW_99_in_vbdry4122_static.FOLLOW_99_in_vbdry4122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4124_static.FOLLOW_TOKEN_in_vbdry4124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:7: 'NN-DRY' TOKEN
            {
            string_literal851=(Token)match(input,100,FOLLOW_100_in_nndry4137_static.FOLLOW_100_in_nndry4137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4139_static.FOLLOW_TOKEN_in_nndry4139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:11: 'VB-EXTRACT' TOKEN
            {
            string_literal853=(Token)match(input,101,FOLLOW_101_in_vbextract4154_static.FOLLOW_101_in_vbextract4154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4156_static.FOLLOW_TOKEN_in_vbextract4156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: 101, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:11: 'NN-EXTRACT' TOKEN
            {
            string_literal855=(Token)match(input,102,FOLLOW_102_in_nnextract4169_static.FOLLOW_102_in_nnextract4169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4171_static.FOLLOW_TOKEN_in_nnextract4171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: 102, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:10: 'VB-FILTER' TOKEN
            {
            string_literal857=(Token)match(input,103,FOLLOW_103_in_vbfilter4186_static.FOLLOW_103_in_vbfilter4186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4188_static.FOLLOW_TOKEN_in_vbfilter4188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: TOKEN, 103
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:10: 'NN-FILTER' TOKEN
            {
            string_literal859=(Token)match(input,104,FOLLOW_104_in_nnfilter4201_static.FOLLOW_104_in_nnfilter4201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4203_static.FOLLOW_TOKEN_in_nnfilter4203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:8: 'VB-HEAT' TOKEN
            {
            string_literal861=(Token)match(input,105,FOLLOW_105_in_vbheat4218_static.FOLLOW_105_in_vbheat4218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4220_static.FOLLOW_TOKEN_in_vbheat4220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:12: 'VB-INCREASE' TOKEN
            {
            string_literal863=(Token)match(input,106,FOLLOW_106_in_vbincrease4233_static.FOLLOW_106_in_vbincrease4233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4235_static.FOLLOW_TOKEN_in_vbincrease4235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:11: 'VB-IMMERSE' TOKEN
            {
            string_literal865=(Token)match(input,107,FOLLOW_107_in_vbimmerse4250_static.FOLLOW_107_in_vbimmerse4250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4252_static.FOLLOW_TOKEN_in_vbimmerse4252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: 107, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:13: 'VB-PARTITION' TOKEN
            {
            string_literal867=(Token)match(input,108,FOLLOW_108_in_vbpartition4266_static.FOLLOW_108_in_vbpartition4266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4268_static.FOLLOW_TOKEN_in_vbpartition4268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal869=(Token)match(input,109,FOLLOW_109_in_vbprecipitate4283_static.FOLLOW_109_in_vbprecipitate4283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4285_static.FOLLOW_TOKEN_in_vbprecipitate4285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 109, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal871=(Token)match(input,110,FOLLOW_110_in_nnprecipitate4298_static.FOLLOW_110_in_nnprecipitate4298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4300_static.FOLLOW_TOKEN_in_nnprecipitate4300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:10: 'VB-PURIFY' TOKEN
            {
            string_literal873=(Token)match(input,111,FOLLOW_111_in_vbpurify4315_static.FOLLOW_111_in_vbpurify4315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4317_static.FOLLOW_TOKEN_in_vbpurify4317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:10: 'NN-PURIFY' TOKEN
            {
            string_literal875=(Token)match(input,112,FOLLOW_112_in_nnpurify4330_static.FOLLOW_112_in_nnpurify4330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4332_static.FOLLOW_TOKEN_in_nnpurify4332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: 112, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:10: 'VB-QUENCH' TOKEN
            {
            string_literal877=(Token)match(input,113,FOLLOW_113_in_vbquench4347_static.FOLLOW_113_in_vbquench4347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4349_static.FOLLOW_TOKEN_in_vbquench4349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:11: 'VB-RECOVER' TOKEN
            {
            string_literal879=(Token)match(input,114,FOLLOW_114_in_vbrecover4364_static.FOLLOW_114_in_vbrecover4364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4366_static.FOLLOW_TOKEN_in_vbrecover4366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: TOKEN, 114
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:10: 'VB-REMOVE' TOKEN
            {
            string_literal881=(Token)match(input,115,FOLLOW_115_in_vbremove4381_static.FOLLOW_115_in_vbremove4381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4383_static.FOLLOW_TOKEN_in_vbremove4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:10: 'NN-REMOVE' TOKEN
            {
            string_literal883=(Token)match(input,116,FOLLOW_116_in_nnremove4396_static.FOLLOW_116_in_nnremove4396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4398_static.FOLLOW_TOKEN_in_nnremove4398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:8: 'VB-STIR' TOKEN
            {
            string_literal885=(Token)match(input,117,FOLLOW_117_in_vbstir4413_static.FOLLOW_117_in_vbstir4413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4415_static.FOLLOW_TOKEN_in_vbstir4415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal887=(Token)match(input,118,FOLLOW_118_in_vbsynthesize4430_static.FOLLOW_118_in_vbsynthesize4430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4432_static.FOLLOW_TOKEN_in_vbsynthesize4432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal889=(Token)match(input,119,FOLLOW_119_in_nnsynthesize4445_static.FOLLOW_119_in_nnsynthesize4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4447_static.FOLLOW_TOKEN_in_nnsynthesize4447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: TOKEN, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:8: 'VB-WAIT' TOKEN
            {
            string_literal891=(Token)match(input,120,FOLLOW_120_in_vbwait4462_static.FOLLOW_120_in_vbwait4462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4464_static.FOLLOW_TOKEN_in_vbwait4464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:8: 'VB-WASH' TOKEN
            {
            string_literal893=(Token)match(input,121,FOLLOW_121_in_vbwash4479_static.FOLLOW_121_in_vbwash4479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4481_static.FOLLOW_TOKEN_in_vbwash4481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: 121, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:9: 'VB-YIELD' TOKEN
            {
            string_literal895=(Token)match(input,122,FOLLOW_122_in_vbyield4496_static.FOLLOW_122_in_vbyield4496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4498_static.FOLLOW_TOKEN_in_vbyield4498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:9: 'NN-YIELD' TOKEN
            {
            string_literal897=(Token)match(input,123,FOLLOW_123_in_nnyield4513_static.FOLLOW_123_in_nnyield4513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4515_static.FOLLOW_TOKEN_in_nnyield4515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:7: 'COLON' TOKEN
            {
            string_literal899=(Token)match(input,124,FOLLOW_124_in_colon4529_static.FOLLOW_124_in_colon4529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4531_static.FOLLOW_TOKEN_in_colon4531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:7: 'COMMA' TOKEN
            {
            string_literal901=(Token)match(input,125,FOLLOW_125_in_comma4544_static.FOLLOW_125_in_comma4544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4546_static.FOLLOW_TOKEN_in_comma4546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:7: 'APOST' TOKEN
            {
            string_literal903=(Token)match(input,126,FOLLOW_126_in_apost4559_static.FOLLOW_126_in_apost4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4561_static.FOLLOW_TOKEN_in_apost4561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:5: 'NEG' TOKEN
            {
            string_literal905=(Token)match(input,127,FOLLOW_127_in_neg4574_static.FOLLOW_127_in_neg4574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4576_static.FOLLOW_TOKEN_in_neg4576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:6: 'DASH' TOKEN
            {
            string_literal907=(Token)match(input,128,FOLLOW_128_in_dash4589_static.FOLLOW_128_in_dash4589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4591_static.FOLLOW_TOKEN_in_dash4591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: 128, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:6: 'STOP' TOKEN
            {
            string_literal909=(Token)match(input,129,FOLLOW_129_in_stop4604_static.FOLLOW_129_in_stop4604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4606_static.FOLLOW_TOKEN_in_stop4606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:11: 'NN-PERCENT' TOKEN
            {
            string_literal911=(Token)match(input,130,FOLLOW_130_in_nnpercent4619_static.FOLLOW_130_in_nnpercent4619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4621_static.FOLLOW_TOKEN_in_nnpercent4621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: TOKEN, 130
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:6: 'LSQB' TOKEN
            {
            string_literal913=(Token)match(input,131,FOLLOW_131_in_lsqb4634_static.FOLLOW_131_in_lsqb4634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4636_static.FOLLOW_TOKEN_in_lsqb4636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:430:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:6: 'RSQB' TOKEN
            {
            string_literal915=(Token)match(input,132,FOLLOW_132_in_rsqb4649_static.FOLLOW_132_in_rsqb4649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4651_static.FOLLOW_TOKEN_in_rsqb4651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:5: '-LRB-' TOKEN
            {
            string_literal917=(Token)match(input,133,FOLLOW_133_in_lrb4665_static.FOLLOW_133_in_lrb4665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4667_static.FOLLOW_TOKEN_in_lrb4667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:5: '-RRB-' TOKEN
            {
            string_literal919=(Token)match(input,134,FOLLOW_134_in_rrb4680_static.FOLLOW_134_in_rrb4680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4682_static.FOLLOW_TOKEN_in_rrb4682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:434:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: abl : 'ABL' TOKEN -> ^( 'ABL' TOKEN ) ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);
        int abl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:4: ( 'ABL' TOKEN -> ^( 'ABL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:5: 'ABL' TOKEN
            {
            string_literal921=(Token)match(input,135,FOLLOW_135_in_abl4699_static.FOLLOW_135_in_abl4699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl4701_static.FOLLOW_TOKEN_in_abl4701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: TOKEN, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:17: -> ^( 'ABL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:20: ^( 'ABL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, abl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: abn : 'ABN' TOKEN -> ^( 'ABN' TOKEN ) ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);
        int abn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:4: ( 'ABN' TOKEN -> ^( 'ABN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:5: 'ABN' TOKEN
            {
            string_literal923=(Token)match(input,136,FOLLOW_136_in_abn4716_static.FOLLOW_136_in_abn4716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn4718_static.FOLLOW_TOKEN_in_abn4718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:17: -> ^( 'ABN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:20: ^( 'ABN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, abn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:1: abx : 'ABX' TOKEN -> ^( 'ABX' TOKEN ) ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);
        int abx_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:4: ( 'ABX' TOKEN -> ^( 'ABX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:5: 'ABX' TOKEN
            {
            string_literal925=(Token)match(input,137,FOLLOW_137_in_abx4733_static.FOLLOW_137_in_abx4733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx4735_static.FOLLOW_TOKEN_in_abx4735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:17: -> ^( 'ABX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:20: ^( 'ABX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, abx_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:1: ap : 'AP' TOKEN -> ^( 'AP' TOKEN ) ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);
        int ap_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:3: ( 'AP' TOKEN -> ^( 'AP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:4: 'AP' TOKEN
            {
            string_literal927=(Token)match(input,138,FOLLOW_138_in_ap4750_static.FOLLOW_138_in_ap4750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap4752_static.FOLLOW_TOKEN_in_ap4752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: TOKEN, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:15: -> ^( 'AP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:448:18: ^( 'AP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, ap_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: at : 'AT' TOKEN -> ^( 'AT' TOKEN ) ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);
        int at_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal929=null;
        Token TOKEN930=null;

        Object string_literal929_tree=null;
        Object TOKEN930_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:3: ( 'AT' TOKEN -> ^( 'AT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:4: 'AT' TOKEN
            {
            string_literal929=(Token)match(input,139,FOLLOW_139_in_at4767_static.FOLLOW_139_in_at4767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal929);

            TOKEN930=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at4769_static.FOLLOW_TOKEN_in_at4769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN930);



            // AST REWRITE
            // elements: 139, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:15: -> ^( 'AT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:18: ^( 'AT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, at_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: be : 'BE' TOKEN -> ^( 'BE' TOKEN ) ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);
        int be_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal931=null;
        Token TOKEN932=null;

        Object string_literal931_tree=null;
        Object TOKEN932_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:3: ( 'BE' TOKEN -> ^( 'BE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:4: 'BE' TOKEN
            {
            string_literal931=(Token)match(input,140,FOLLOW_140_in_be4784_static.FOLLOW_140_in_be4784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal931);

            TOKEN932=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be4786_static.FOLLOW_TOKEN_in_be4786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN932);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:15: -> ^( 'BE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:18: ^( 'BE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, be_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: bed : 'BED' TOKEN -> ^( 'BED' TOKEN ) ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);
        int bed_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal933=null;
        Token TOKEN934=null;

        Object string_literal933_tree=null;
        Object TOKEN934_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:4: ( 'BED' TOKEN -> ^( 'BED' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:5: 'BED' TOKEN
            {
            string_literal933=(Token)match(input,141,FOLLOW_141_in_bed4801_static.FOLLOW_141_in_bed4801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal933);

            TOKEN934=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed4803_static.FOLLOW_TOKEN_in_bed4803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN934);



            // AST REWRITE
            // elements: 141, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:17: -> ^( 'BED' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:20: ^( 'BED' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, bed_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: bedz : 'BEDZ' TOKEN -> ^( 'BEDZ' TOKEN ) ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);
        int bedz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token TOKEN936=null;

        Object string_literal935_tree=null;
        Object TOKEN936_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:5: ( 'BEDZ' TOKEN -> ^( 'BEDZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:6: 'BEDZ' TOKEN
            {
            string_literal935=(Token)match(input,142,FOLLOW_142_in_bedz4818_static.FOLLOW_142_in_bedz4818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal935);

            TOKEN936=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz4820_static.FOLLOW_TOKEN_in_bedz4820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN936);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:19: -> ^( 'BEDZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:22: ^( 'BEDZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, bedz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:1: beg : 'BEG' TOKEN -> ^( 'BEG' TOKEN ) ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);
        int beg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal937=null;
        Token TOKEN938=null;

        Object string_literal937_tree=null;
        Object TOKEN938_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:4: ( 'BEG' TOKEN -> ^( 'BEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:5: 'BEG' TOKEN
            {
            string_literal937=(Token)match(input,143,FOLLOW_143_in_beg4835_static.FOLLOW_143_in_beg4835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal937);

            TOKEN938=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg4837_static.FOLLOW_TOKEN_in_beg4837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN938);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:17: -> ^( 'BEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:463:20: ^( 'BEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, beg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:1: bem : 'BEM' TOKEN -> ^( 'BEM' TOKEN ) ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);
        int bem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal939=null;
        Token TOKEN940=null;

        Object string_literal939_tree=null;
        Object TOKEN940_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:4: ( 'BEM' TOKEN -> ^( 'BEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:5: 'BEM' TOKEN
            {
            string_literal939=(Token)match(input,144,FOLLOW_144_in_bem4852_static.FOLLOW_144_in_bem4852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal939);

            TOKEN940=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem4854_static.FOLLOW_TOKEN_in_bem4854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN940);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:17: -> ^( 'BEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:466:20: ^( 'BEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, bem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: ben : 'BEN' TOKEN -> ^( 'BEN' TOKEN ) ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);
        int ben_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal941=null;
        Token TOKEN942=null;

        Object string_literal941_tree=null;
        Object TOKEN942_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:4: ( 'BEN' TOKEN -> ^( 'BEN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:5: 'BEN' TOKEN
            {
            string_literal941=(Token)match(input,145,FOLLOW_145_in_ben4869_static.FOLLOW_145_in_ben4869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal941);

            TOKEN942=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben4871_static.FOLLOW_TOKEN_in_ben4871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN942);



            // AST REWRITE
            // elements: 145, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:17: -> ^( 'BEN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:20: ^( 'BEN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, ben_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: ber : 'BER' TOKEN -> ^( 'BER' TOKEN ) ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);
        int ber_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal943=null;
        Token TOKEN944=null;

        Object string_literal943_tree=null;
        Object TOKEN944_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:4: ( 'BER' TOKEN -> ^( 'BER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:5: 'BER' TOKEN
            {
            string_literal943=(Token)match(input,146,FOLLOW_146_in_ber4886_static.FOLLOW_146_in_ber4886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal943);

            TOKEN944=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber4888_static.FOLLOW_TOKEN_in_ber4888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN944);



            // AST REWRITE
            // elements: 146, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:17: -> ^( 'BER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:20: ^( 'BER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, ber_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: bez : 'BEZ' TOKEN -> ^( 'BEZ' TOKEN ) ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);
        int bez_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal945=null;
        Token TOKEN946=null;

        Object string_literal945_tree=null;
        Object TOKEN946_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:4: ( 'BEZ' TOKEN -> ^( 'BEZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:5: 'BEZ' TOKEN
            {
            string_literal945=(Token)match(input,147,FOLLOW_147_in_bez4903_static.FOLLOW_147_in_bez4903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal945);

            TOKEN946=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez4905_static.FOLLOW_TOKEN_in_bez4905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN946);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:17: -> ^( 'BEZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:20: ^( 'BEZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, bez_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal947=null;
        Token TOKEN948=null;

        Object string_literal947_tree=null;
        Object TOKEN948_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:4: 'CC' TOKEN
            {
            string_literal947=(Token)match(input,148,FOLLOW_148_in_cc4920_static.FOLLOW_148_in_cc4920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal947);

            TOKEN948=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4922_static.FOLLOW_TOKEN_in_cc4922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN948);



            // AST REWRITE
            // elements: 148, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal949=null;
        Token TOKEN950=null;

        Object string_literal949_tree=null;
        Object TOKEN950_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:4: 'CD' TOKEN
            {
            string_literal949=(Token)match(input,149,FOLLOW_149_in_cd4937_static.FOLLOW_149_in_cd4937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal949);

            TOKEN950=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4939_static.FOLLOW_TOKEN_in_cd4939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN950);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:481:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:1: cs : 'CS' TOKEN -> ^( 'CS' TOKEN ) ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);
        int cs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal951=null;
        Token TOKEN952=null;

        Object string_literal951_tree=null;
        Object TOKEN952_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:3: ( 'CS' TOKEN -> ^( 'CS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:4: 'CS' TOKEN
            {
            string_literal951=(Token)match(input,150,FOLLOW_150_in_cs4954_static.FOLLOW_150_in_cs4954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal951);

            TOKEN952=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs4956_static.FOLLOW_TOKEN_in_cs4956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN952);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:15: -> ^( 'CS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:18: ^( 'CS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, cs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:1: dotok : 'DO' TOKEN -> ^( 'DO' TOKEN ) ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);
        int dotok_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal953=null;
        Token TOKEN954=null;

        Object string_literal953_tree=null;
        Object TOKEN954_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:6: ( 'DO' TOKEN -> ^( 'DO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:7: 'DO' TOKEN
            {
            string_literal953=(Token)match(input,151,FOLLOW_151_in_dotok4971_static.FOLLOW_151_in_dotok4971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal953);

            TOKEN954=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok4973_static.FOLLOW_TOKEN_in_dotok4973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN954);



            // AST REWRITE
            // elements: 151, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:18: -> ^( 'DO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:21: ^( 'DO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, dotok_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: dod : 'DOD' TOKEN -> ^( 'DOD' TOKEN ) ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);
        int dod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal955=null;
        Token TOKEN956=null;

        Object string_literal955_tree=null;
        Object TOKEN956_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:4: ( 'DOD' TOKEN -> ^( 'DOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:5: 'DOD' TOKEN
            {
            string_literal955=(Token)match(input,152,FOLLOW_152_in_dod4988_static.FOLLOW_152_in_dod4988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal955);

            TOKEN956=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod4990_static.FOLLOW_TOKEN_in_dod4990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN956);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:17: -> ^( 'DOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:20: ^( 'DOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, dod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: doz : 'DOZ' TOKEN -> ^( 'DOZ' TOKEN ) ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);
        int doz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal957=null;
        Token TOKEN958=null;

        Object string_literal957_tree=null;
        Object TOKEN958_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:4: ( 'DOZ' TOKEN -> ^( 'DOZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:5: 'DOZ' TOKEN
            {
            string_literal957=(Token)match(input,153,FOLLOW_153_in_doz5005_static.FOLLOW_153_in_doz5005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal957);

            TOKEN958=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz5007_static.FOLLOW_TOKEN_in_doz5007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN958);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:17: -> ^( 'DOZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:20: ^( 'DOZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, doz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal959=null;
        Token TOKEN960=null;

        Object string_literal959_tree=null;
        Object TOKEN960_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:4: 'DT' TOKEN
            {
            string_literal959=(Token)match(input,154,FOLLOW_154_in_dt5022_static.FOLLOW_154_in_dt5022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal959);

            TOKEN960=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5024_static.FOLLOW_TOKEN_in_dt5024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN960);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal961=null;
        Token TOKEN962=null;

        Object string_literal961_tree=null;
        Object TOKEN962_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:7: 'DT-THE' TOKEN
            {
            string_literal961=(Token)match(input,155,FOLLOW_155_in_dtTHE5040_static.FOLLOW_155_in_dtTHE5040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal961);

            TOKEN962=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE5042_static.FOLLOW_TOKEN_in_dtTHE5042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN962);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:1: dti : 'DTI' TOKEN -> ^( 'DTI' TOKEN ) ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);
        int dti_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal963=null;
        Token TOKEN964=null;

        Object string_literal963_tree=null;
        Object TOKEN964_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:4: ( 'DTI' TOKEN -> ^( 'DTI' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:5: 'DTI' TOKEN
            {
            string_literal963=(Token)match(input,156,FOLLOW_156_in_dti5056_static.FOLLOW_156_in_dti5056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal963);

            TOKEN964=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti5058_static.FOLLOW_TOKEN_in_dti5058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN964);



            // AST REWRITE
            // elements: TOKEN, 156
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:17: -> ^( 'DTI' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:20: ^( 'DTI' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, dti_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:1: dts : 'DTS' TOKEN -> ^( 'DTS' TOKEN ) ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);
        int dts_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal965=null;
        Token TOKEN966=null;

        Object string_literal965_tree=null;
        Object TOKEN966_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:4: ( 'DTS' TOKEN -> ^( 'DTS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:5: 'DTS' TOKEN
            {
            string_literal965=(Token)match(input,157,FOLLOW_157_in_dts5073_static.FOLLOW_157_in_dts5073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal965);

            TOKEN966=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts5075_static.FOLLOW_TOKEN_in_dts5075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN966);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 505:17: -> ^( 'DTS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:20: ^( 'DTS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, dts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:1: dtx : 'DTX' TOKEN -> ^( 'DTX' TOKEN ) ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);
        int dtx_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal967=null;
        Token TOKEN968=null;

        Object string_literal967_tree=null;
        Object TOKEN968_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:4: ( 'DTX' TOKEN -> ^( 'DTX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:5: 'DTX' TOKEN
            {
            string_literal967=(Token)match(input,158,FOLLOW_158_in_dtx5090_static.FOLLOW_158_in_dtx5090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal967);

            TOKEN968=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx5092_static.FOLLOW_TOKEN_in_dtx5092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN968);



            // AST REWRITE
            // elements: TOKEN, 158
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:17: -> ^( 'DTX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:508:20: ^( 'DTX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, dtx_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal969=null;
        Token TOKEN970=null;

        Object string_literal969_tree=null;
        Object TOKEN970_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:4: 'EX' TOKEN
            {
            string_literal969=(Token)match(input,159,FOLLOW_159_in_ex5107_static.FOLLOW_159_in_ex5107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal969);

            TOKEN970=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5109_static.FOLLOW_TOKEN_in_ex5109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN970);



            // AST REWRITE
            // elements: TOKEN, 159
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal971=null;
        Token TOKEN972=null;

        Object string_literal971_tree=null;
        Object TOKEN972_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:4: 'FW' TOKEN
            {
            string_literal971=(Token)match(input,160,FOLLOW_160_in_fw5124_static.FOLLOW_160_in_fw5124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal971);

            TOKEN972=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5126_static.FOLLOW_TOKEN_in_fw5126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN972);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:1: fwin : 'FW-IN' TOKEN -> ^( 'FW-IN' TOKEN ) ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);
        int fwin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal973=null;
        Token TOKEN974=null;

        Object string_literal973_tree=null;
        Object TOKEN974_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:5: ( 'FW-IN' TOKEN -> ^( 'FW-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:6: 'FW-IN' TOKEN
            {
            string_literal973=(Token)match(input,161,FOLLOW_161_in_fwin5141_static.FOLLOW_161_in_fwin5141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal973);

            TOKEN974=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin5143_static.FOLLOW_TOKEN_in_fwin5143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN974);



            // AST REWRITE
            // elements: 161, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:20: -> ^( 'FW-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:23: ^( 'FW-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, fwin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:1: hv : 'HV' TOKEN -> ^( 'HV' TOKEN ) ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);
        int hv_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal975=null;
        Token TOKEN976=null;

        Object string_literal975_tree=null;
        Object TOKEN976_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:3: ( 'HV' TOKEN -> ^( 'HV' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:4: 'HV' TOKEN
            {
            string_literal975=(Token)match(input,162,FOLLOW_162_in_hv5158_static.FOLLOW_162_in_hv5158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal975);

            TOKEN976=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv5160_static.FOLLOW_TOKEN_in_hv5160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN976);



            // AST REWRITE
            // elements: 162, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:15: -> ^( 'HV' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:18: ^( 'HV' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, hv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:1: hvd : 'HVD' TOKEN -> ^( 'HVD' TOKEN ) ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);
        int hvd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal977=null;
        Token TOKEN978=null;

        Object string_literal977_tree=null;
        Object TOKEN978_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:4: ( 'HVD' TOKEN -> ^( 'HVD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:5: 'HVD' TOKEN
            {
            string_literal977=(Token)match(input,163,FOLLOW_163_in_hvd5175_static.FOLLOW_163_in_hvd5175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal977);

            TOKEN978=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd5177_static.FOLLOW_TOKEN_in_hvd5177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN978);



            // AST REWRITE
            // elements: 163, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:17: -> ^( 'HVD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:20: ^( 'HVD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, hvd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:1: hvg : 'HVG' TOKEN -> ^( 'HVG' TOKEN ) ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);
        int hvg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal979=null;
        Token TOKEN980=null;

        Object string_literal979_tree=null;
        Object TOKEN980_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:4: ( 'HVG' TOKEN -> ^( 'HVG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:5: 'HVG' TOKEN
            {
            string_literal979=(Token)match(input,164,FOLLOW_164_in_hvg5192_static.FOLLOW_164_in_hvg5192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal979);

            TOKEN980=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg5194_static.FOLLOW_TOKEN_in_hvg5194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN980);



            // AST REWRITE
            // elements: 164, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:17: -> ^( 'HVG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:20: ^( 'HVG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, hvg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:1: hvn : 'HVN' TOKEN -> ^( 'HVN' TOKEN ) ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);
        int hvn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal981=null;
        Token TOKEN982=null;

        Object string_literal981_tree=null;
        Object TOKEN982_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:4: ( 'HVN' TOKEN -> ^( 'HVN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:5: 'HVN' TOKEN
            {
            string_literal981=(Token)match(input,165,FOLLOW_165_in_hvn5209_static.FOLLOW_165_in_hvn5209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal981);

            TOKEN982=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn5211_static.FOLLOW_TOKEN_in_hvn5211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN982);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:17: -> ^( 'HVN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:529:20: ^( 'HVN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, hvn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal983=null;
        Token TOKEN984=null;

        Object string_literal983_tree=null;
        Object TOKEN984_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:4: 'IN' TOKEN
            {
            string_literal983=(Token)match(input,166,FOLLOW_166_in_in5226_static.FOLLOW_166_in_in5226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal983);

            TOKEN984=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5228_static.FOLLOW_TOKEN_in_in5228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN984);



            // AST REWRITE
            // elements: TOKEN, 166
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:532:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal985=null;
        Token TOKEN986=null;

        Object string_literal985_tree=null;
        Object TOKEN986_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:4: 'JJ' TOKEN
            {
            string_literal985=(Token)match(input,167,FOLLOW_167_in_jj5243_static.FOLLOW_167_in_jj5243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal985);

            TOKEN986=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5245_static.FOLLOW_TOKEN_in_jj5245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN986);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 535:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:535:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal987=null;
        Token TOKEN988=null;

        Object string_literal987_tree=null;
        Object TOKEN988_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:5: 'JJR' TOKEN
            {
            string_literal987=(Token)match(input,168,FOLLOW_168_in_jjr5260_static.FOLLOW_168_in_jjr5260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal987);

            TOKEN988=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5262_static.FOLLOW_TOKEN_in_jjr5262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN988);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:538:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal989=null;
        Token TOKEN990=null;

        Object string_literal989_tree=null;
        Object TOKEN990_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:5: 'JJS' TOKEN
            {
            string_literal989=(Token)match(input,169,FOLLOW_169_in_jjs5277_static.FOLLOW_169_in_jjs5277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal989);

            TOKEN990=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5279_static.FOLLOW_TOKEN_in_jjs5279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN990);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:541:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:1: jjt : 'JJT' TOKEN -> ^( 'JJT' TOKEN ) ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);
        int jjt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal991=null;
        Token TOKEN992=null;

        Object string_literal991_tree=null;
        Object TOKEN992_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:4: ( 'JJT' TOKEN -> ^( 'JJT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:5: 'JJT' TOKEN
            {
            string_literal991=(Token)match(input,170,FOLLOW_170_in_jjt5294_static.FOLLOW_170_in_jjt5294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal991);

            TOKEN992=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt5296_static.FOLLOW_TOKEN_in_jjt5296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN992);



            // AST REWRITE
            // elements: TOKEN, 170
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:17: -> ^( 'JJT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:544:20: ^( 'JJT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, jjt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal993=null;
        Token TOKEN994=null;

        Object string_literal993_tree=null;
        Object TOKEN994_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:4: 'MD' TOKEN
            {
            string_literal993=(Token)match(input,171,FOLLOW_171_in_md5311_static.FOLLOW_171_in_md5311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal993);

            TOKEN994=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5313_static.FOLLOW_TOKEN_in_md5313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN994);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:547:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:1: nc : 'NC' TOKEN -> ^( 'NC' TOKEN ) ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);
        int nc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal995=null;
        Token TOKEN996=null;

        Object string_literal995_tree=null;
        Object TOKEN996_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:3: ( 'NC' TOKEN -> ^( 'NC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:4: 'NC' TOKEN
            {
            string_literal995=(Token)match(input,172,FOLLOW_172_in_nc5328_static.FOLLOW_172_in_nc5328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal995);

            TOKEN996=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc5330_static.FOLLOW_TOKEN_in_nc5330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN996);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:15: -> ^( 'NC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:550:18: ^( 'NC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, nc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal997=null;
        Token TOKEN998=null;

        Object string_literal997_tree=null;
        Object TOKEN998_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:4: 'NN' TOKEN
            {
            string_literal997=(Token)match(input,173,FOLLOW_173_in_nn5345_static.FOLLOW_173_in_nn5345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal997);

            TOKEN998=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5347_static.FOLLOW_TOKEN_in_nn5347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN998);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 553:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:553:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:556:1: nn_poss : 'NN$' TOKEN -> ^( 'NN$' TOKEN ) ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);
        int nn_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal999=null;
        Token TOKEN1000=null;

        Object string_literal999_tree=null;
        Object TOKEN1000_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:556:8: ( 'NN$' TOKEN -> ^( 'NN$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:556:9: 'NN$' TOKEN
            {
            string_literal999=(Token)match(input,174,FOLLOW_174_in_nn_poss5362_static.FOLLOW_174_in_nn_poss5362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal999);

            TOKEN1000=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss5364_static.FOLLOW_TOKEN_in_nn_poss5364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1000);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 556:21: -> ^( 'NN$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:556:24: ^( 'NN$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, nn_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:559:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1001=null;
        Token TOKEN1002=null;

        Object string_literal1001_tree=null;
        Object TOKEN1002_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:559:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:559:5: 'NNS' TOKEN
            {
            string_literal1001=(Token)match(input,175,FOLLOW_175_in_nns5379_static.FOLLOW_175_in_nns5379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal1001);

            TOKEN1002=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5381_static.FOLLOW_TOKEN_in_nns5381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1002);



            // AST REWRITE
            // elements: TOKEN, 175
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 559:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:559:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:562:1: nns_poss : 'NNS$' TOKEN -> ^( 'NNS$' TOKEN ) ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);
        int nns_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1003=null;
        Token TOKEN1004=null;

        Object string_literal1003_tree=null;
        Object TOKEN1004_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:562:9: ( 'NNS$' TOKEN -> ^( 'NNS$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:562:10: 'NNS$' TOKEN
            {
            string_literal1003=(Token)match(input,176,FOLLOW_176_in_nns_poss5396_static.FOLLOW_176_in_nns_poss5396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal1003);

            TOKEN1004=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss5398_static.FOLLOW_TOKEN_in_nns_poss5398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1004);



            // AST REWRITE
            // elements: 176, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 562:23: -> ^( 'NNS$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:562:26: ^( 'NNS$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, nns_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:1: np : 'NP' TOKEN -> ^( 'NP' TOKEN ) ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);
        int np_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1005=null;
        Token TOKEN1006=null;

        Object string_literal1005_tree=null;
        Object TOKEN1006_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:3: ( 'NP' TOKEN -> ^( 'NP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:4: 'NP' TOKEN
            {
            string_literal1005=(Token)match(input,177,FOLLOW_177_in_np5413_static.FOLLOW_177_in_np5413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal1005);

            TOKEN1006=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np5415_static.FOLLOW_TOKEN_in_np5415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1006);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 565:15: -> ^( 'NP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:565:18: ^( 'NP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, np_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1007=null;
        Token TOKEN1008=null;

        Object string_literal1007_tree=null;
        Object TOKEN1008_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:5: 'NNP' TOKEN
            {
            string_literal1007=(Token)match(input,178,FOLLOW_178_in_nnp5431_static.FOLLOW_178_in_nnp5431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal1007);

            TOKEN1008=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5433_static.FOLLOW_TOKEN_in_nnp5433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1008);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:1: np_poss : 'NP$' TOKEN -> ^( 'NP$' TOKEN ) ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);
        int np_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1009=null;
        Token TOKEN1010=null;

        Object string_literal1009_tree=null;
        Object TOKEN1010_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:8: ( 'NP$' TOKEN -> ^( 'NP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:9: 'NP$' TOKEN
            {
            string_literal1009=(Token)match(input,179,FOLLOW_179_in_np_poss5449_static.FOLLOW_179_in_np_poss5449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal1009);

            TOKEN1010=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss5451_static.FOLLOW_TOKEN_in_np_poss5451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1010);



            // AST REWRITE
            // elements: 179, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:21: -> ^( 'NP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:24: ^( 'NP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, np_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:1: nps : 'NPS' TOKEN -> ^( 'NPS' TOKEN ) ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);
        int nps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1011=null;
        Token TOKEN1012=null;

        Object string_literal1011_tree=null;
        Object TOKEN1012_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:4: ( 'NPS' TOKEN -> ^( 'NPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:5: 'NPS' TOKEN
            {
            string_literal1011=(Token)match(input,180,FOLLOW_180_in_nps5466_static.FOLLOW_180_in_nps5466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal1011);

            TOKEN1012=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps5468_static.FOLLOW_TOKEN_in_nps5468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1012);



            // AST REWRITE
            // elements: 180, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:17: -> ^( 'NPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:20: ^( 'NPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, nps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:1: nps_poss : 'NPS$' TOKEN -> ^( 'NPS$' TOKEN ) ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);
        int nps_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1013=null;
        Token TOKEN1014=null;

        Object string_literal1013_tree=null;
        Object TOKEN1014_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:9: ( 'NPS$' TOKEN -> ^( 'NPS$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:10: 'NPS$' TOKEN
            {
            string_literal1013=(Token)match(input,181,FOLLOW_181_in_nps_poss5483_static.FOLLOW_181_in_nps_poss5483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal1013);

            TOKEN1014=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss5485_static.FOLLOW_TOKEN_in_nps_poss5485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1014);



            // AST REWRITE
            // elements: TOKEN, 181
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:23: -> ^( 'NPS$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:26: ^( 'NPS$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_181.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, nps_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:1: nr : 'NR' TOKEN -> ^( 'NR' TOKEN ) ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);
        int nr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1015=null;
        Token TOKEN1016=null;

        Object string_literal1015_tree=null;
        Object TOKEN1016_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:3: ( 'NR' TOKEN -> ^( 'NR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:4: 'NR' TOKEN
            {
            string_literal1015=(Token)match(input,182,FOLLOW_182_in_nr5500_static.FOLLOW_182_in_nr5500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal1015);

            TOKEN1016=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr5502_static.FOLLOW_TOKEN_in_nr5502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1016);



            // AST REWRITE
            // elements: 182, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:15: -> ^( 'NR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:18: ^( 'NR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_182.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, nr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: od : 'OD' TOKEN -> ^( 'OD' TOKEN ) ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);
        int od_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1017=null;
        Token TOKEN1018=null;

        Object string_literal1017_tree=null;
        Object TOKEN1018_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:3: ( 'OD' TOKEN -> ^( 'OD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:4: 'OD' TOKEN
            {
            string_literal1017=(Token)match(input,183,FOLLOW_183_in_od5517_static.FOLLOW_183_in_od5517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal1017);

            TOKEN1018=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od5519_static.FOLLOW_TOKEN_in_od5519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1018);



            // AST REWRITE
            // elements: 183, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:15: -> ^( 'OD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:18: ^( 'OD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_183.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, od_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: pn : 'PN' TOKEN -> ^( 'PN' TOKEN ) ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);
        int pn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1019=null;
        Token TOKEN1020=null;

        Object string_literal1019_tree=null;
        Object TOKEN1020_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:3: ( 'PN' TOKEN -> ^( 'PN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:4: 'PN' TOKEN
            {
            string_literal1019=(Token)match(input,184,FOLLOW_184_in_pn5534_static.FOLLOW_184_in_pn5534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal1019);

            TOKEN1020=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn5536_static.FOLLOW_TOKEN_in_pn5536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1020);



            // AST REWRITE
            // elements: TOKEN, 184
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:15: -> ^( 'PN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:18: ^( 'PN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_184.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, pn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:1: pn_poss : 'PN$' TOKEN -> ^( 'PN$' TOKEN ) ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);
        int pn_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1021=null;
        Token TOKEN1022=null;

        Object string_literal1021_tree=null;
        Object TOKEN1022_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:8: ( 'PN$' TOKEN -> ^( 'PN$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:9: 'PN$' TOKEN
            {
            string_literal1021=(Token)match(input,185,FOLLOW_185_in_pn_poss5551_static.FOLLOW_185_in_pn_poss5551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal1021);

            TOKEN1022=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss5553_static.FOLLOW_TOKEN_in_pn_poss5553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1022);



            // AST REWRITE
            // elements: TOKEN, 185
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:21: -> ^( 'PN$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:24: ^( 'PN$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_185.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, pn_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:1: pp_poss : 'PP$' TOKEN -> ^( 'PP$' TOKEN ) ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);
        int pp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1023=null;
        Token TOKEN1024=null;

        Object string_literal1023_tree=null;
        Object TOKEN1024_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:8: ( 'PP$' TOKEN -> ^( 'PP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:9: 'PP$' TOKEN
            {
            string_literal1023=(Token)match(input,186,FOLLOW_186_in_pp_poss5568_static.FOLLOW_186_in_pp_poss5568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal1023);

            TOKEN1024=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss5570_static.FOLLOW_TOKEN_in_pp_poss5570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1024);



            // AST REWRITE
            // elements: TOKEN, 186
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:21: -> ^( 'PP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:24: ^( 'PP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_186.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, pp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:1: pp_poss_poss : 'PP$$' TOKEN -> ^( 'PP$$' TOKEN ) ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);
        int pp_poss_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1025=null;
        Token TOKEN1026=null;

        Object string_literal1025_tree=null;
        Object TOKEN1026_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:13: ( 'PP$$' TOKEN -> ^( 'PP$$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:14: 'PP$$' TOKEN
            {
            string_literal1025=(Token)match(input,187,FOLLOW_187_in_pp_poss_poss5585_static.FOLLOW_187_in_pp_poss_poss5585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal1025);

            TOKEN1026=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss5587_static.FOLLOW_TOKEN_in_pp_poss_poss5587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1026);



            // AST REWRITE
            // elements: 187, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:27: -> ^( 'PP$$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:30: ^( 'PP$$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_187.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, pp_poss_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:1: ppl : 'PPL' TOKEN -> ^( 'PPL' TOKEN ) ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);
        int ppl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1027=null;
        Token TOKEN1028=null;

        Object string_literal1027_tree=null;
        Object TOKEN1028_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:4: ( 'PPL' TOKEN -> ^( 'PPL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:5: 'PPL' TOKEN
            {
            string_literal1027=(Token)match(input,188,FOLLOW_188_in_ppl5602_static.FOLLOW_188_in_ppl5602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_188.add(string_literal1027);

            TOKEN1028=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl5604_static.FOLLOW_TOKEN_in_ppl5604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1028);



            // AST REWRITE
            // elements: TOKEN, 188
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:17: -> ^( 'PPL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:20: ^( 'PPL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_188.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, ppl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:1: ppls : 'PPLS' TOKEN -> ^( 'PPLS' TOKEN ) ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);
        int ppls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1029=null;
        Token TOKEN1030=null;

        Object string_literal1029_tree=null;
        Object TOKEN1030_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:5: ( 'PPLS' TOKEN -> ^( 'PPLS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:6: 'PPLS' TOKEN
            {
            string_literal1029=(Token)match(input,189,FOLLOW_189_in_ppls5619_static.FOLLOW_189_in_ppls5619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal1029);

            TOKEN1030=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls5621_static.FOLLOW_TOKEN_in_ppls5621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1030);



            // AST REWRITE
            // elements: TOKEN, 189
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:19: -> ^( 'PPLS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:22: ^( 'PPLS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_189.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, ppls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1031=null;
        Token TOKEN1032=null;

        Object string_literal1031_tree=null;
        Object TOKEN1032_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:5: 'PRP' TOKEN
            {
            string_literal1031=(Token)match(input,190,FOLLOW_190_in_prp5635_static.FOLLOW_190_in_prp5635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal1031);

            TOKEN1032=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5637_static.FOLLOW_TOKEN_in_prp5637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1032);



            // AST REWRITE
            // elements: TOKEN, 190
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_190.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1033=null;
        Token TOKEN1034=null;

        Object string_literal1033_tree=null;
        Object TOKEN1034_tree=null;
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:10: 'PRP$' TOKEN
            {
            string_literal1033=(Token)match(input,191,FOLLOW_191_in_prp_poss5652_static.FOLLOW_191_in_prp_poss5652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal1033);

            TOKEN1034=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5654_static.FOLLOW_TOKEN_in_prp_poss5654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1034);



            // AST REWRITE
            // elements: 191, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_191.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:610:1: ppo : 'PPO' TOKEN -> ^( 'PPO' TOKEN ) ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);
        int ppo_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1035=null;
        Token TOKEN1036=null;

        Object string_literal1035_tree=null;
        Object TOKEN1036_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:610:4: ( 'PPO' TOKEN -> ^( 'PPO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:610:5: 'PPO' TOKEN
            {
            string_literal1035=(Token)match(input,192,FOLLOW_192_in_ppo5668_static.FOLLOW_192_in_ppo5668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal1035);

            TOKEN1036=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo5670_static.FOLLOW_TOKEN_in_ppo5670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1036);



            // AST REWRITE
            // elements: TOKEN, 192
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 610:17: -> ^( 'PPO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:610:20: ^( 'PPO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_192.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, ppo_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:613:1: pps : 'PPS' TOKEN -> ^( 'PPS' TOKEN ) ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);
        int pps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1037=null;
        Token TOKEN1038=null;

        Object string_literal1037_tree=null;
        Object TOKEN1038_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:613:4: ( 'PPS' TOKEN -> ^( 'PPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:613:5: 'PPS' TOKEN
            {
            string_literal1037=(Token)match(input,193,FOLLOW_193_in_pps5685_static.FOLLOW_193_in_pps5685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal1037);

            TOKEN1038=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps5687_static.FOLLOW_TOKEN_in_pps5687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1038);



            // AST REWRITE
            // elements: TOKEN, 193
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 613:17: -> ^( 'PPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:613:20: ^( 'PPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_193.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, pps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:616:1: ppss : 'PPSS' TOKEN -> ^( 'PPSS' TOKEN ) ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);
        int ppss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1039=null;
        Token TOKEN1040=null;

        Object string_literal1039_tree=null;
        Object TOKEN1040_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:616:5: ( 'PPSS' TOKEN -> ^( 'PPSS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:616:6: 'PPSS' TOKEN
            {
            string_literal1039=(Token)match(input,194,FOLLOW_194_in_ppss5702_static.FOLLOW_194_in_ppss5702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_194.add(string_literal1039);

            TOKEN1040=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss5704_static.FOLLOW_TOKEN_in_ppss5704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1040);



            // AST REWRITE
            // elements: TOKEN, 194
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:19: -> ^( 'PPSS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:616:22: ^( 'PPSS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_194.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, ppss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:619:1: ql : 'QL' TOKEN -> ^( 'QL' TOKEN ) ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);
        int ql_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1041=null;
        Token TOKEN1042=null;

        Object string_literal1041_tree=null;
        Object TOKEN1042_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:619:3: ( 'QL' TOKEN -> ^( 'QL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:619:4: 'QL' TOKEN
            {
            string_literal1041=(Token)match(input,195,FOLLOW_195_in_ql5719_static.FOLLOW_195_in_ql5719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_195.add(string_literal1041);

            TOKEN1042=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql5721_static.FOLLOW_TOKEN_in_ql5721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1042);



            // AST REWRITE
            // elements: TOKEN, 195
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 619:15: -> ^( 'QL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:619:18: ^( 'QL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_195.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, ql_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:622:1: qlp : 'QLP' TOKEN -> ^( 'QLP' TOKEN ) ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);
        int qlp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1043=null;
        Token TOKEN1044=null;

        Object string_literal1043_tree=null;
        Object TOKEN1044_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:622:4: ( 'QLP' TOKEN -> ^( 'QLP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:622:5: 'QLP' TOKEN
            {
            string_literal1043=(Token)match(input,196,FOLLOW_196_in_qlp5736_static.FOLLOW_196_in_qlp5736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal1043);

            TOKEN1044=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp5738_static.FOLLOW_TOKEN_in_qlp5738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1044);



            // AST REWRITE
            // elements: TOKEN, 196
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 622:17: -> ^( 'QLP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:622:20: ^( 'QLP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_196.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, qlp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:625:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1045=null;
        Token TOKEN1046=null;

        Object string_literal1045_tree=null;
        Object TOKEN1046_tree=null;
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:625:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:625:4: 'RB' TOKEN
            {
            string_literal1045=(Token)match(input,197,FOLLOW_197_in_rb5753_static.FOLLOW_197_in_rb5753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(string_literal1045);

            TOKEN1046=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5755_static.FOLLOW_TOKEN_in_rb5755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1046);



            // AST REWRITE
            // elements: TOKEN, 197
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 625:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:625:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_197.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:628:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1047=null;
        Token TOKEN1048=null;

        Object string_literal1047_tree=null;
        Object TOKEN1048_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:628:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:628:5: 'RBR' TOKEN
            {
            string_literal1047=(Token)match(input,198,FOLLOW_198_in_rbr5770_static.FOLLOW_198_in_rbr5770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal1047);

            TOKEN1048=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5772_static.FOLLOW_TOKEN_in_rbr5772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1048);



            // AST REWRITE
            // elements: TOKEN, 198
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:628:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_198.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:631:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1049=null;
        Token TOKEN1050=null;

        Object string_literal1049_tree=null;
        Object TOKEN1050_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:631:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:631:8: 'RB-CONJ' TOKEN
            {
            string_literal1049=(Token)match(input,199,FOLLOW_199_in_rbconj5787_static.FOLLOW_199_in_rbconj5787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_199.add(string_literal1049);

            TOKEN1050=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj5789_static.FOLLOW_TOKEN_in_rbconj5789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1050);



            // AST REWRITE
            // elements: 199, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:631:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_199.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:634:1: rbt : 'RBT' TOKEN -> ^( 'RBT' TOKEN ) ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);
        int rbt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1051=null;
        Token TOKEN1052=null;

        Object string_literal1051_tree=null;
        Object TOKEN1052_tree=null;
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:634:4: ( 'RBT' TOKEN -> ^( 'RBT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:634:5: 'RBT' TOKEN
            {
            string_literal1051=(Token)match(input,200,FOLLOW_200_in_rbt5804_static.FOLLOW_200_in_rbt5804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_200.add(string_literal1051);

            TOKEN1052=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt5806_static.FOLLOW_TOKEN_in_rbt5806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1052);



            // AST REWRITE
            // elements: 200, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:17: -> ^( 'RBT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:634:20: ^( 'RBT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_200.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, rbt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:637:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1053=null;
        Token TOKEN1054=null;

        Object string_literal1053_tree=null;
        Object TOKEN1054_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:637:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:637:5: 'RBS' TOKEN
            {
            string_literal1053=(Token)match(input,201,FOLLOW_201_in_rbs5821_static.FOLLOW_201_in_rbs5821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_201.add(string_literal1053);

            TOKEN1054=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5823_static.FOLLOW_TOKEN_in_rbs5823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1054);



            // AST REWRITE
            // elements: TOKEN, 201
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 637:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:637:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_201.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:1: rn : 'RN' TOKEN -> ^( 'RN' TOKEN ) ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);
        int rn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1055=null;
        Token TOKEN1056=null;

        Object string_literal1055_tree=null;
        Object TOKEN1056_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:3: ( 'RN' TOKEN -> ^( 'RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:4: 'RN' TOKEN
            {
            string_literal1055=(Token)match(input,202,FOLLOW_202_in_rn5839_static.FOLLOW_202_in_rn5839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_202.add(string_literal1055);

            TOKEN1056=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn5841_static.FOLLOW_TOKEN_in_rn5841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1056);



            // AST REWRITE
            // elements: TOKEN, 202
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 641:15: -> ^( 'RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:641:18: ^( 'RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_202.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, rn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1057=null;
        Token TOKEN1058=null;

        Object string_literal1057_tree=null;
        Object TOKEN1058_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:4: 'RP' TOKEN
            {
            string_literal1057=(Token)match(input,203,FOLLOW_203_in_rp5856_static.FOLLOW_203_in_rp5856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(string_literal1057);

            TOKEN1058=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5858_static.FOLLOW_TOKEN_in_rp5858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1058);



            // AST REWRITE
            // elements: 203, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 644:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:644:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_203.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1059=null;
        Token TOKEN1060=null;

        Object string_literal1059_tree=null;
        Object TOKEN1060_tree=null;
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:5: 'SYM' TOKEN
            {
            string_literal1059=(Token)match(input,204,FOLLOW_204_in_sym5873_static.FOLLOW_204_in_sym5873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_204.add(string_literal1059);

            TOKEN1060=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5875_static.FOLLOW_TOKEN_in_sym5875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1060);



            // AST REWRITE
            // elements: 204, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 647:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:647:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_204.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1061=null;
        Token TOKEN1062=null;

        Object string_literal1061_tree=null;
        Object TOKEN1062_tree=null;
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:4: 'TO' TOKEN
            {
            string_literal1061=(Token)match(input,205,FOLLOW_205_in_to5890_static.FOLLOW_205_in_to5890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_205.add(string_literal1061);

            TOKEN1062=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5892_static.FOLLOW_TOKEN_in_to5892); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1062);



            // AST REWRITE
            // elements: TOKEN, 205
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:650:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_205.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1063=null;
        Token TOKEN1064=null;

        Object string_literal1063_tree=null;
        Object TOKEN1064_tree=null;
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:4: 'UH' TOKEN
            {
            string_literal1063=(Token)match(input,206,FOLLOW_206_in_uh5907_static.FOLLOW_206_in_uh5907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_206.add(string_literal1063);

            TOKEN1064=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5909_static.FOLLOW_TOKEN_in_uh5909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1064);



            // AST REWRITE
            // elements: TOKEN, 206
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 653:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:653:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_206.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1065=null;
        Token TOKEN1066=null;

        Object string_literal1065_tree=null;
        Object TOKEN1066_tree=null;
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:4: 'VB' TOKEN
            {
            string_literal1065=(Token)match(input,207,FOLLOW_207_in_vb5924_static.FOLLOW_207_in_vb5924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_207.add(string_literal1065);

            TOKEN1066=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5926_static.FOLLOW_TOKEN_in_vb5926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1066);



            // AST REWRITE
            // elements: TOKEN, 207
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:656:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_207.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 275, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:658:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1067=null;
        Token TOKEN1068=null;

        Object string_literal1067_tree=null;
        Object TOKEN1068_tree=null;
        RewriteRuleTokenStream stream_208=new RewriteRuleTokenStream(adaptor,"token 208");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:658:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:658:5: 'VBP' TOKEN
            {
            string_literal1067=(Token)match(input,208,FOLLOW_208_in_vbp5940_static.FOLLOW_208_in_vbp5940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_208.add(string_literal1067);

            TOKEN1068=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5942_static.FOLLOW_TOKEN_in_vbp5942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1068);



            // AST REWRITE
            // elements: TOKEN, 208
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 658:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:658:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_208.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 276, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:661:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1069=null;
        Token TOKEN1070=null;

        Object string_literal1069_tree=null;
        Object TOKEN1070_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:661:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:661:5: 'VBD' TOKEN
            {
            string_literal1069=(Token)match(input,209,FOLLOW_209_in_vbd5957_static.FOLLOW_209_in_vbd5957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_209.add(string_literal1069);

            TOKEN1070=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5959_static.FOLLOW_TOKEN_in_vbd5959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1070);



            // AST REWRITE
            // elements: TOKEN, 209
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 661:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:661:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_209.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 277, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:664:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1071=null;
        Token TOKEN1072=null;

        Object string_literal1071_tree=null;
        Object TOKEN1072_tree=null;
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:664:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:664:5: 'VBG' TOKEN
            {
            string_literal1071=(Token)match(input,210,FOLLOW_210_in_vbg5974_static.FOLLOW_210_in_vbg5974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_210.add(string_literal1071);

            TOKEN1072=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5976_static.FOLLOW_TOKEN_in_vbg5976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1072);



            // AST REWRITE
            // elements: 210, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 664:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:664:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_210.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 278, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:667:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1073=null;
        Token TOKEN1074=null;

        Object string_literal1073_tree=null;
        Object TOKEN1074_tree=null;
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:667:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:667:5: 'VBN' TOKEN
            {
            string_literal1073=(Token)match(input,211,FOLLOW_211_in_vbn5991_static.FOLLOW_211_in_vbn5991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_211.add(string_literal1073);

            TOKEN1074=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5993_static.FOLLOW_TOKEN_in_vbn5993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1074);



            // AST REWRITE
            // elements: TOKEN, 211
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 667:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:667:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_211.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 279, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:670:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1075=null;
        Token TOKEN1076=null;

        Object string_literal1075_tree=null;
        Object TOKEN1076_tree=null;
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:670:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:670:5: 'VBZ' TOKEN
            {
            string_literal1075=(Token)match(input,212,FOLLOW_212_in_vbz6008_static.FOLLOW_212_in_vbz6008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_212.add(string_literal1075);

            TOKEN1076=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz6010_static.FOLLOW_TOKEN_in_vbz6010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1076);



            // AST REWRITE
            // elements: TOKEN, 212
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 670:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:670:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_212.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 280, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:673:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1077=null;
        Token TOKEN1078=null;

        Object string_literal1077_tree=null;
        Object TOKEN1078_tree=null;
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:673:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:673:5: 'WDT' TOKEN
            {
            string_literal1077=(Token)match(input,213,FOLLOW_213_in_wdt6025_static.FOLLOW_213_in_wdt6025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_213.add(string_literal1077);

            TOKEN1078=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt6027_static.FOLLOW_TOKEN_in_wdt6027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1078);



            // AST REWRITE
            // elements: TOKEN, 213
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:673:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_213.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 281, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:676:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1079=null;
        Token TOKEN1080=null;

        Object string_literal1079_tree=null;
        Object TOKEN1080_tree=null;
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:676:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:676:9: 'WP$' TOKEN
            {
            string_literal1079=(Token)match(input,214,FOLLOW_214_in_wp_poss6042_static.FOLLOW_214_in_wp_poss6042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_214.add(string_literal1079);

            TOKEN1080=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss6044_static.FOLLOW_TOKEN_in_wp_poss6044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1080);



            // AST REWRITE
            // elements: 214, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:676:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_214.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 282, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:1: wpo : 'WPO' TOKEN -> ^( 'WPO' TOKEN ) ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);
        int wpo_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1081=null;
        Token TOKEN1082=null;

        Object string_literal1081_tree=null;
        Object TOKEN1082_tree=null;
        RewriteRuleTokenStream stream_215=new RewriteRuleTokenStream(adaptor,"token 215");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:4: ( 'WPO' TOKEN -> ^( 'WPO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:5: 'WPO' TOKEN
            {
            string_literal1081=(Token)match(input,215,FOLLOW_215_in_wpo6060_static.FOLLOW_215_in_wpo6060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_215.add(string_literal1081);

            TOKEN1082=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo6062_static.FOLLOW_TOKEN_in_wpo6062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1082);



            // AST REWRITE
            // elements: 215, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 680:17: -> ^( 'WPO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:680:20: ^( 'WPO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_215.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 283, wpo_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:1: wps : 'WPS' TOKEN -> ^( 'WPS' TOKEN ) ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);
        int wps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1083=null;
        Token TOKEN1084=null;

        Object string_literal1083_tree=null;
        Object TOKEN1084_tree=null;
        RewriteRuleTokenStream stream_216=new RewriteRuleTokenStream(adaptor,"token 216");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:4: ( 'WPS' TOKEN -> ^( 'WPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:5: 'WPS' TOKEN
            {
            string_literal1083=(Token)match(input,216,FOLLOW_216_in_wps6077_static.FOLLOW_216_in_wps6077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_216.add(string_literal1083);

            TOKEN1084=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps6079_static.FOLLOW_TOKEN_in_wps6079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1084);



            // AST REWRITE
            // elements: TOKEN, 216
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 683:17: -> ^( 'WPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:683:20: ^( 'WPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_216.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 284, wps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:1: wql : 'WQL' TOKEN -> ^( 'WQL' TOKEN ) ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);
        int wql_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1085=null;
        Token TOKEN1086=null;

        Object string_literal1085_tree=null;
        Object TOKEN1086_tree=null;
        RewriteRuleTokenStream stream_217=new RewriteRuleTokenStream(adaptor,"token 217");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:4: ( 'WQL' TOKEN -> ^( 'WQL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:5: 'WQL' TOKEN
            {
            string_literal1085=(Token)match(input,217,FOLLOW_217_in_wql6094_static.FOLLOW_217_in_wql6094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_217.add(string_literal1085);

            TOKEN1086=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql6096_static.FOLLOW_TOKEN_in_wql6096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1086);



            // AST REWRITE
            // elements: 217, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 686:17: -> ^( 'WQL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:686:20: ^( 'WQL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_217.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 285, wql_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1087=null;
        Token TOKEN1088=null;

        Object string_literal1087_tree=null;
        Object TOKEN1088_tree=null;
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:5: 'WRB' TOKEN
            {
            string_literal1087=(Token)match(input,218,FOLLOW_218_in_wrb6111_static.FOLLOW_218_in_wrb6111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_218.add(string_literal1087);

            TOKEN1088=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb6113_static.FOLLOW_TOKEN_in_wrb6113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1088);



            // AST REWRITE
            // elements: 218, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 689:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:689:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_218.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 286, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:691:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1089=null;
        Token TOKEN1090=null;

        Object string_literal1089_tree=null;
        Object TOKEN1090_tree=null;
        RewriteRuleTokenStream stream_219=new RewriteRuleTokenStream(adaptor,"token 219");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:691:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:691:5: 'PDT' TOKEN
            {
            string_literal1089=(Token)match(input,219,FOLLOW_219_in_pdt6127_static.FOLLOW_219_in_pdt6127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_219.add(string_literal1089);

            TOKEN1090=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt6129_static.FOLLOW_TOKEN_in_pdt6129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN1090);



            // AST REWRITE
            // elements: 219, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 691:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:691:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_219.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 287, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker199_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker199);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:51:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker201_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker201);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker215_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker215);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker217_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker217);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker219_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker219);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker221_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker221);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker226_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker226);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker228_static.FOLLOW_colon_in_synpred10_ChemicalChunker228);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker233_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker233);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker235_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker235);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:53:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker237_static.FOLLOW_comma_in_synpred13_ChemicalChunker237);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred123_ChemicalChunker530_static.FOLLOW_nounphraseStructure1_in_synpred123_ChemicalChunker530);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred125_ChemicalChunker564_static.FOLLOW_dt_in_synpred125_ChemicalChunker564);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:15: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred126_ChemicalChunker567_static.FOLLOW_advAdj_in_synpred126_ChemicalChunker567);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:25: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred127_ChemicalChunker572_static.FOLLOW_dissolvePhrase_in_synpred127_ChemicalChunker572);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:40: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred128_ChemicalChunker574_static.FOLLOW_noun_in_synpred128_ChemicalChunker574);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:45: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:45: number
        {
        pushFollow(FOLLOW_number_in_synpred129_ChemicalChunker576_static.FOLLOW_number_in_synpred129_ChemicalChunker576);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred130_ChemicalChunker
    public final void synpred130_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:52: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred130_ChemicalChunker578_static.FOLLOW_ratio_in_synpred130_ChemicalChunker578);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred130_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred131_ChemicalChunker586_static.FOLLOW_conjunction_in_synpred131_ChemicalChunker586);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred132_ChemicalChunker
    public final void synpred132_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:77: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred132_ChemicalChunker589_static.FOLLOW_advAdj_in_synpred132_ChemicalChunker589);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:86: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred133_ChemicalChunker593_static.FOLLOW_dissolvePhrase_in_synpred133_ChemicalChunker593);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred134_ChemicalChunker
    public final void synpred134_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:101: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:101: noun
        {
        pushFollow(FOLLOW_noun_in_synpred134_ChemicalChunker595_static.FOLLOW_noun_in_synpred134_ChemicalChunker595);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_ChemicalChunker

    // $ANTLR start synpred135_ChemicalChunker
    public final void synpred135_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:106: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:106: number
        {
        pushFollow(FOLLOW_number_in_synpred135_ChemicalChunker597_static.FOLLOW_number_in_synpred135_ChemicalChunker597);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_ChemicalChunker

    // $ANTLR start synpred136_ChemicalChunker
    public final void synpred136_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:64: ( conjunction )*
        loop168:
        do {
            int alt168=2;
            alt168 = dfa168.predict(input);
            switch (alt168) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred136_ChemicalChunker586_static.FOLLOW_conjunction_in_synpred136_ChemicalChunker586);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop168;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:77: ( advAdj )*
        loop169:
        do {
            int alt169=2;
            alt169 = dfa169.predict(input);
            switch (alt169) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred136_ChemicalChunker589_static.FOLLOW_advAdj_in_synpred136_ChemicalChunker589);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop169;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:85: ( dissolvePhrase | noun | number | ratio )
        int alt170=4;
        alt170 = dfa170.predict(input);
        switch (alt170) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred136_ChemicalChunker593_static.FOLLOW_dissolvePhrase_in_synpred136_ChemicalChunker593);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:101: noun
                {
                pushFollow(FOLLOW_noun_in_synpred136_ChemicalChunker595_static.FOLLOW_noun_in_synpred136_ChemicalChunker595);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:106: number
                {
                pushFollow(FOLLOW_number_in_synpred136_ChemicalChunker597_static.FOLLOW_number_in_synpred136_ChemicalChunker597);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:113: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred136_ChemicalChunker599_static.FOLLOW_ratio_in_synpred136_ChemicalChunker599);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred136_ChemicalChunker

    // $ANTLR start synpred138_ChemicalChunker
    public final void synpred138_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:155: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred138_ChemicalChunker615_static.FOLLOW_dissolvePhrase_in_synpred138_ChemicalChunker615);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_ChemicalChunker

    // $ANTLR start synpred139_ChemicalChunker
    public final void synpred139_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:126: ( prepphraseOf | prepphraseIN )
        int alt171=2;
        switch ( input.LA(1) ) {
        case 50:
            {
            alt171=1;
            }
            break;
        case 44:
            {
            alt171=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 171, 0, input);

            throw nvae;
        }

        switch (alt171) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred139_ChemicalChunker609_static.FOLLOW_prepphraseOf_in_synpred139_ChemicalChunker609);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred139_ChemicalChunker612_static.FOLLOW_prepphraseIN_in_synpred139_ChemicalChunker612);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:155: ( dissolvePhrase )?
        int alt172=2;
        switch ( input.LA(1) ) {
            case 32:
            case 33:
            case 34:
            case 35:
            case 39:
            case 40:
            case 61:
            case 77:
            case 125:
            case 133:
            case 149:
            case 167:
            case 168:
            case 169:
            case 170:
            case 178:
            case 183:
                {
                alt172=1;
                }
                break;
        }

        switch (alt172) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred139_ChemicalChunker615_static.FOLLOW_dissolvePhrase_in_synpred139_ChemicalChunker615);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred139_ChemicalChunker

    // $ANTLR start synpred140_ChemicalChunker
    public final void synpred140_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:5: ( dissolveStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred140_ChemicalChunker630_static.FOLLOW_dissolveStructure1_in_synpred140_ChemicalChunker630);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_ChemicalChunker

    // $ANTLR start synpred141_ChemicalChunker
    public final void synpred141_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:24: ( dissolveStructure2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:24: dissolveStructure2
        {
        pushFollow(FOLLOW_dissolveStructure2_in_synpred141_ChemicalChunker632_static.FOLLOW_dissolveStructure2_in_synpred141_ChemicalChunker632);
        dissolveStructure2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:8: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:8: adj
        {
        pushFollow(FOLLOW_adj_in_synpred142_ChemicalChunker662_static.FOLLOW_adj_in_synpred142_ChemicalChunker662);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:19: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:19: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred144_ChemicalChunker669_static.FOLLOW_molecule_in_synpred144_ChemicalChunker669);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred146_ChemicalChunker
    public final void synpred146_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:58: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:58: adj
        {
        pushFollow(FOLLOW_adj_in_synpred146_ChemicalChunker680_static.FOLLOW_adj_in_synpred146_ChemicalChunker680);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_ChemicalChunker

    // $ANTLR start synpred148_ChemicalChunker
    public final void synpred148_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:69: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:69: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred148_ChemicalChunker687_static.FOLLOW_molecule_in_synpred148_ChemicalChunker687);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred151_ChemicalChunker710_static.FOLLOW_adj_in_synpred151_ChemicalChunker710);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred153_ChemicalChunker
    public final void synpred153_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:15: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred153_ChemicalChunker717_static.FOLLOW_molecule_in_synpred153_ChemicalChunker717);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_ChemicalChunker

    // $ANTLR start synpred155_ChemicalChunker
    public final void synpred155_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:54: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:54: adj
        {
        pushFollow(FOLLOW_adj_in_synpred155_ChemicalChunker728_static.FOLLOW_adj_in_synpred155_ChemicalChunker728);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_ChemicalChunker

    // $ANTLR start synpred157_ChemicalChunker
    public final void synpred157_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:65: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:65: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred157_ChemicalChunker735_static.FOLLOW_molecule_in_synpred157_ChemicalChunker735);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_ChemicalChunker

    // $ANTLR start synpred158_ChemicalChunker
    public final void synpred158_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:92: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:92: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred158_ChemicalChunker741_static.FOLLOW_conjunction_in_synpred158_ChemicalChunker741);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred158_ChemicalChunker743_static.FOLLOW_molecule_in_synpred158_ChemicalChunker743);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:42: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred159_ChemicalChunker723_static.FOLLOW_inin_in_synpred159_ChemicalChunker723);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:47: ( dtTHE )?
        int alt178=2;
        switch ( input.LA(1) ) {
            case 155:
                {
                alt178=1;
                }
                break;
        }

        switch (alt178) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred159_ChemicalChunker725_static.FOLLOW_dtTHE_in_synpred159_ChemicalChunker725);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:54: ( adj )?
        int alt179=2;
        alt179 = dfa179.predict(input);
        switch (alt179) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred159_ChemicalChunker728_static.FOLLOW_adj_in_synpred159_ChemicalChunker728);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:59: ( nnp )?
        int alt180=2;
        switch ( input.LA(1) ) {
            case 178:
                {
                alt180=1;
                }
                break;
        }

        switch (alt180) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred159_ChemicalChunker731_static.FOLLOW_nnp_in_synpred159_ChemicalChunker731);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:64: ( molecule | unnamedmolecule )
        int alt181=2;
        alt181 = dfa181.predict(input);
        switch (alt181) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:65: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred159_ChemicalChunker735_static.FOLLOW_molecule_in_synpred159_ChemicalChunker735);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:74: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred159_ChemicalChunker737_static.FOLLOW_unnamedmolecule_in_synpred159_ChemicalChunker737);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:91: ( conjunction molecule )*
        loop182:
        do {
            int alt182=2;
            switch ( input.LA(1) ) {
            case 125:
            case 148:
                {
                alt182=1;
                }
                break;

            }

            switch (alt182) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:92: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred159_ChemicalChunker741_static.FOLLOW_conjunction_in_synpred159_ChemicalChunker741);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred159_ChemicalChunker743_static.FOLLOW_molecule_in_synpred159_ChemicalChunker743);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop182;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred161_ChemicalChunker
    public final void synpred161_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:14: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:14: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred161_ChemicalChunker763_static.FOLLOW_molecule_in_synpred161_ChemicalChunker763);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:23: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:23: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred162_ChemicalChunker765_static.FOLLOW_unnamedmolecule_in_synpred162_ChemicalChunker765);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:66: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:66: adj
        {
        pushFollow(FOLLOW_adj_in_synpred164_ChemicalChunker776_static.FOLLOW_adj_in_synpred164_ChemicalChunker776);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:77: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:77: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred166_ChemicalChunker783_static.FOLLOW_molecule_in_synpred166_ChemicalChunker783);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:104: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:104: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred167_ChemicalChunker789_static.FOLLOW_conjunction_in_synpred167_ChemicalChunker789);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred167_ChemicalChunker791_static.FOLLOW_molecule_in_synpred167_ChemicalChunker791);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:54: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred168_ChemicalChunker771_static.FOLLOW_inin_in_synpred168_ChemicalChunker771);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:59: ( dtTHE )?
        int alt183=2;
        switch ( input.LA(1) ) {
            case 155:
                {
                alt183=1;
                }
                break;
        }

        switch (alt183) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred168_ChemicalChunker773_static.FOLLOW_dtTHE_in_synpred168_ChemicalChunker773);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:66: ( adj )?
        int alt184=2;
        alt184 = dfa184.predict(input);
        switch (alt184) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred168_ChemicalChunker776_static.FOLLOW_adj_in_synpred168_ChemicalChunker776);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:71: ( nnp )?
        int alt185=2;
        switch ( input.LA(1) ) {
            case 178:
                {
                alt185=1;
                }
                break;
        }

        switch (alt185) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred168_ChemicalChunker779_static.FOLLOW_nnp_in_synpred168_ChemicalChunker779);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:76: ( molecule | unnamedmolecule )
        int alt186=2;
        alt186 = dfa186.predict(input);
        switch (alt186) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:77: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred168_ChemicalChunker783_static.FOLLOW_molecule_in_synpred168_ChemicalChunker783);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:86: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred168_ChemicalChunker785_static.FOLLOW_unnamedmolecule_in_synpred168_ChemicalChunker785);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:103: ( conjunction molecule )*
        loop187:
        do {
            int alt187=2;
            switch ( input.LA(1) ) {
            case 125:
            case 148:
                {
                alt187=1;
                }
                break;

            }

            switch (alt187) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:104: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred168_ChemicalChunker789_static.FOLLOW_conjunction_in_synpred168_ChemicalChunker789);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred168_ChemicalChunker791_static.FOLLOW_molecule_in_synpred168_ChemicalChunker791);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop187;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred171_ChemicalChunker
    public final void synpred171_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:28: to
        {
        pushFollow(FOLLOW_to_in_synpred171_ChemicalChunker843_static.FOLLOW_to_in_synpred171_ChemicalChunker843);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred172_ChemicalChunker846_static.FOLLOW_inAll_in_synpred172_ChemicalChunker846);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred178_ChemicalChunker865_static.FOLLOW_verb_in_synpred178_ChemicalChunker865);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:77: md
        {
        pushFollow(FOLLOW_md_in_synpred179_ChemicalChunker868_static.FOLLOW_md_in_synpred179_ChemicalChunker868);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred180_ChemicalChunker871_static.FOLLOW_adv_in_synpred180_ChemicalChunker871);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred181_ChemicalChunker874_static.FOLLOW_adj_in_synpred181_ChemicalChunker874);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred182_ChemicalChunker877_static.FOLLOW_neg_in_synpred182_ChemicalChunker877);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:49: ( md )*
        loop188:
        do {
            int alt188=2;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt188=1;
                }
                break;

            }

            switch (alt188) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred183_ChemicalChunker853_static.FOLLOW_md_in_synpred183_ChemicalChunker853);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop188;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:53: ( rbconj )?
        int alt189=2;
        switch ( input.LA(1) ) {
            case 199:
                {
                alt189=1;
                }
                break;
        }

        switch (alt189) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred183_ChemicalChunker856_static.FOLLOW_rbconj_in_synpred183_ChemicalChunker856);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:61: ( adv )*
        loop190:
        do {
            int alt190=2;
            switch ( input.LA(1) ) {
            case 197:
            case 198:
            case 200:
            case 201:
            case 203:
                {
                alt190=1;
                }
                break;

            }

            switch (alt190) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred183_ChemicalChunker859_static.FOLLOW_adv_in_synpred183_ChemicalChunker859);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop190;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:66: ( adj )?
        int alt191=2;
        switch ( input.LA(1) ) {
            case 33:
            case 34:
            case 39:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt191=1;
                }
                break;
        }

        switch (alt191) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred183_ChemicalChunker862_static.FOLLOW_adj_in_synpred183_ChemicalChunker862);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:71: ( verb )+
        int cnt192=0;
        loop192:
        do {
            int alt192=2;
            switch ( input.LA(1) ) {
            case 78:
            case 79:
            case 80:
            case 81:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 111:
            case 113:
            case 114:
            case 115:
            case 117:
            case 118:
            case 120:
            case 121:
            case 122:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
                {
                alt192=1;
                }
                break;

            }

            switch (alt192) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred183_ChemicalChunker865_static.FOLLOW_verb_in_synpred183_ChemicalChunker865);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt192 >= 1 ) break loop192;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(192, input);
                    throw eee;
            }
            cnt192++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:77: ( md )*
        loop193:
        do {
            int alt193=2;
            switch ( input.LA(1) ) {
            case 171:
                {
                alt193=1;
                }
                break;

            }

            switch (alt193) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred183_ChemicalChunker868_static.FOLLOW_md_in_synpred183_ChemicalChunker868);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop193;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:81: ( adv )*
        loop194:
        do {
            int alt194=2;
            switch ( input.LA(1) ) {
            case 197:
            case 198:
            case 200:
            case 201:
            case 203:
                {
                alt194=1;
                }
                break;

            }

            switch (alt194) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred183_ChemicalChunker871_static.FOLLOW_adv_in_synpred183_ChemicalChunker871);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop194;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:86: ( adj )?
        int alt195=2;
        switch ( input.LA(1) ) {
            case 33:
            case 34:
            case 39:
            case 167:
            case 168:
            case 169:
            case 170:
                {
                alt195=1;
                }
                break;
        }

        switch (alt195) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred183_ChemicalChunker874_static.FOLLOW_adj_in_synpred183_ChemicalChunker874);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:91: ( neg )?
        int alt196=2;
        switch ( input.LA(1) ) {
            case 127:
                {
                alt196=1;
                }
                break;
        }

        switch (alt196) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred183_ChemicalChunker877_static.FOLLOW_neg_in_synpred183_ChemicalChunker877);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred184_ChemicalChunker883_static.FOLLOW_inoff_in_synpred184_ChemicalChunker883);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:107: ( cc )?
        int alt197=2;
        switch ( input.LA(1) ) {
            case 148:
                {
                alt197=1;
                }
                break;
        }

        switch (alt197) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred187_ChemicalChunker887_static.FOLLOW_cc_in_synpred187_ChemicalChunker887);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:111: ( comma )?
        int alt198=2;
        switch ( input.LA(1) ) {
            case 125:
                {
                alt198=1;
                }
                break;
        }

        switch (alt198) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred187_ChemicalChunker890_static.FOLLOW_comma_in_synpred187_ChemicalChunker890);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred187_ChemicalChunker893_static.FOLLOW_prepphrase_in_synpred187_ChemicalChunker893);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred197_ChemicalChunker923_static.FOLLOW_degassMultiVerb_in_synpred197_ChemicalChunker923);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred210_ChemicalChunker
    public final void synpred210_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred210_ChemicalChunker949_static.FOLLOW_vbdegass_in_synpred210_ChemicalChunker949);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred238_ChemicalChunker1045_static.FOLLOW_dash_in_synpred238_ChemicalChunker1045);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred238_ChemicalChunker1047_static.FOLLOW_nounStructure_in_synpred238_ChemicalChunker1047);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred241_ChemicalChunker1062_static.FOLLOW_citation_in_synpred241_ChemicalChunker1062);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred242_ChemicalChunker1064_static.FOLLOW_cycles_in_synpred242_ChemicalChunker1064);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred243_ChemicalChunker1066_static.FOLLOW_molecule_in_synpred243_ChemicalChunker1066);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred244_ChemicalChunker1068_static.FOLLOW_apparatus_in_synpred244_ChemicalChunker1068);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred245_ChemicalChunker1070_static.FOLLOW_mixture_in_synpred245_ChemicalChunker1070);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred246_ChemicalChunker1072_static.FOLLOW_unnamedmolecule_in_synpred246_ChemicalChunker1072);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred248_ChemicalChunker
    public final void synpred248_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:98: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred248_ChemicalChunker1076_static.FOLLOW_nnstate_in_synpred248_ChemicalChunker1076);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:106: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:106: nn
        {
        pushFollow(FOLLOW_nn_in_synpred249_ChemicalChunker1078_static.FOLLOW_nn_in_synpred249_ChemicalChunker1078);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:117: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:117: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred252_ChemicalChunker1084_static.FOLLOW_nnadd_in_synpred252_ChemicalChunker1084);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:151: ( oscarcpr )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:151: oscarcpr
        {
        pushFollow(FOLLOW_oscarcpr_in_synpred255_ChemicalChunker1090_static.FOLLOW_oscarcpr_in_synpred255_ChemicalChunker1090);
        oscarcpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:160: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:160: range
        {
        pushFollow(FOLLOW_range_in_synpred256_ChemicalChunker1092_static.FOLLOW_range_in_synpred256_ChemicalChunker1092);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:166: ( amount )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:166: amount
        {
        pushFollow(FOLLOW_amount_in_synpred257_ChemicalChunker1094_static.FOLLOW_amount_in_synpred257_ChemicalChunker1094);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:208: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:208: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred262_ChemicalChunker1104_static.FOLLOW_quantity_in_synpred262_ChemicalChunker1104);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:217: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:217: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred263_ChemicalChunker1106_static.FOLLOW_nnchementity_in_synpred263_ChemicalChunker1106);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:230: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:230: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred264_ChemicalChunker1108_static.FOLLOW_measurements_in_synpred264_ChemicalChunker1108);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:286: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:286: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred270_ChemicalChunker1120_static.FOLLOW_nnpressure_in_synpred270_ChemicalChunker1120);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:377: ( wdt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:377: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred279_ChemicalChunker1138_static.FOLLOW_wdt_in_synpred279_ChemicalChunker1138);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:381: ( wp_poss )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:381: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred280_ChemicalChunker1140_static.FOLLOW_wp_poss_in_synpred280_ChemicalChunker1140);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:389: ( wpo )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:389: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred281_ChemicalChunker1142_static.FOLLOW_wpo_in_synpred281_ChemicalChunker1142);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:393: ( wps )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:393: wps
        {
        pushFollow(FOLLOW_wps_in_synpred282_ChemicalChunker1144_static.FOLLOW_wps_in_synpred282_ChemicalChunker1144);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:445: ( number )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:445: number
        {
        pushFollow(FOLLOW_number_in_synpred288_ChemicalChunker1156_static.FOLLOW_number_in_synpred288_ChemicalChunker1156);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:452: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:452: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1158_static.FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1158);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:10: ( numberratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred303_ChemicalChunker1252_static.FOLLOW_numberratio_in_synpred303_ChemicalChunker1252);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:20: ( colon cdAlphanum )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:20: colon cdAlphanum
        {
        pushFollow(FOLLOW_colon_in_synpred304_ChemicalChunker1280_static.FOLLOW_colon_in_synpred304_ChemicalChunker1280);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cdAlphanum_in_synpred304_ChemicalChunker1282_static.FOLLOW_cdAlphanum_in_synpred304_ChemicalChunker1282);
        cdAlphanum();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:37: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:37: cd
        {
        pushFollow(FOLLOW_cd_in_synpred305_ChemicalChunker1284_static.FOLLOW_cd_in_synpred305_ChemicalChunker1284);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred306_ChemicalChunker1301_static.FOLLOW_colon_in_synpred306_ChemicalChunker1301);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred306_ChemicalChunker1303_static.FOLLOW_noun_in_synpred306_ChemicalChunker1303);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred319_ChemicalChunker1500_static.FOLLOW_fw_in_synpred319_ChemicalChunker1500);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred320_ChemicalChunker1502_static.FOLLOW_verb_in_synpred320_ChemicalChunker1502);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred321_ChemicalChunker1504_static.FOLLOW_nn_in_synpred321_ChemicalChunker1504);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred322_ChemicalChunker
    public final void synpred322_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:31: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:31: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred322_ChemicalChunker1506_static.FOLLOW_measurements_in_synpred322_ChemicalChunker1506);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:57: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:57: stop
        {
        pushFollow(FOLLOW_stop_in_synpred325_ChemicalChunker1512_static.FOLLOW_stop_in_synpred325_ChemicalChunker1512);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:62: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:62: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1514_static.FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1514);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:76: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:76: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred327_ChemicalChunker1516_static.FOLLOW_molecule_in_synpred327_ChemicalChunker1516);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:85: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:85: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred328_ChemicalChunker1518_static.FOLLOW_unnamedmolecule_in_synpred328_ChemicalChunker1518);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred330_ChemicalChunker
    public final void synpred330_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:106: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:106: sym
        {
        pushFollow(FOLLOW_sym_in_synpred330_ChemicalChunker1522_static.FOLLOW_sym_in_synpred330_ChemicalChunker1522);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_ChemicalChunker

    // $ANTLR start synpred331_ChemicalChunker
    public final void synpred331_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:110: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:110: cd
        {
        pushFollow(FOLLOW_cd_in_synpred331_ChemicalChunker1524_static.FOLLOW_cd_in_synpred331_ChemicalChunker1524);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:113: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:113: noun
        {
        pushFollow(FOLLOW_noun_in_synpred332_ChemicalChunker1526_static.FOLLOW_noun_in_synpred332_ChemicalChunker1526);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:118: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:118: inof
        {
        pushFollow(FOLLOW_inof_in_synpred333_ChemicalChunker1528_static.FOLLOW_inof_in_synpred333_ChemicalChunker1528);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:123: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:123: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred334_ChemicalChunker1530_static.FOLLOW_inAll_in_synpred334_ChemicalChunker1530);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:129: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:129: cd
        {
        pushFollow(FOLLOW_cd_in_synpred335_ChemicalChunker1532_static.FOLLOW_cd_in_synpred335_ChemicalChunker1532);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:132: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:132: comma
        {
        pushFollow(FOLLOW_comma_in_synpred336_ChemicalChunker1534_static.FOLLOW_comma_in_synpred336_ChemicalChunker1534);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:138: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:138: adj
        {
        pushFollow(FOLLOW_adj_in_synpred337_ChemicalChunker1536_static.FOLLOW_adj_in_synpred337_ChemicalChunker1536);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:155: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:155: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred339_ChemicalChunker1544_static.FOLLOW_minimixture_in_synpred339_ChemicalChunker1544);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:167: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:167: fw
        {
        pushFollow(FOLLOW_fw_in_synpred340_ChemicalChunker1546_static.FOLLOW_fw_in_synpred340_ChemicalChunker1546);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:170: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:170: verb
        {
        pushFollow(FOLLOW_verb_in_synpred341_ChemicalChunker1548_static.FOLLOW_verb_in_synpred341_ChemicalChunker1548);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred342_ChemicalChunker
    public final void synpred342_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:175: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:175: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred342_ChemicalChunker1550_static.FOLLOW_measurements_in_synpred342_ChemicalChunker1550);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_ChemicalChunker

    // $ANTLR start synpred343_ChemicalChunker
    public final void synpred343_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:188: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:188: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred343_ChemicalChunker1552_static.FOLLOW_nnyield_in_synpred343_ChemicalChunker1552);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_ChemicalChunker

    // $ANTLR start synpred346_ChemicalChunker
    public final void synpred346_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:209: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:209: stop
        {
        pushFollow(FOLLOW_stop_in_synpred346_ChemicalChunker1558_static.FOLLOW_stop_in_synpred346_ChemicalChunker1558);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_ChemicalChunker

    // $ANTLR start synpred347_ChemicalChunker
    public final void synpred347_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:214: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:214: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred347_ChemicalChunker1560_static.FOLLOW_oscarCompound_in_synpred347_ChemicalChunker1560);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:228: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:228: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred348_ChemicalChunker1562_static.FOLLOW_molecule_in_synpred348_ChemicalChunker1562);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:237: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:237: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred349_ChemicalChunker1564_static.FOLLOW_unnamedmolecule_in_synpred349_ChemicalChunker1564);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred351_ChemicalChunker
    public final void synpred351_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:258: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:258: sym
        {
        pushFollow(FOLLOW_sym_in_synpred351_ChemicalChunker1568_static.FOLLOW_sym_in_synpred351_ChemicalChunker1568);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_ChemicalChunker

    // $ANTLR start synpred352_ChemicalChunker
    public final void synpred352_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:262: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:262: cd
        {
        pushFollow(FOLLOW_cd_in_synpred352_ChemicalChunker1570_static.FOLLOW_cd_in_synpred352_ChemicalChunker1570);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_ChemicalChunker

    // $ANTLR start synpred353_ChemicalChunker
    public final void synpred353_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:265: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:265: noun
        {
        pushFollow(FOLLOW_noun_in_synpred353_ChemicalChunker1572_static.FOLLOW_noun_in_synpred353_ChemicalChunker1572);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:270: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:270: inof
        {
        pushFollow(FOLLOW_inof_in_synpred354_ChemicalChunker1574_static.FOLLOW_inof_in_synpred354_ChemicalChunker1574);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred355_ChemicalChunker
    public final void synpred355_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:275: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:275: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred355_ChemicalChunker1576_static.FOLLOW_inAll_in_synpred355_ChemicalChunker1576);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:281: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:281: cd
        {
        pushFollow(FOLLOW_cd_in_synpred356_ChemicalChunker1578_static.FOLLOW_cd_in_synpred356_ChemicalChunker1578);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:284: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:284: comma
        {
        pushFollow(FOLLOW_comma_in_synpred357_ChemicalChunker1580_static.FOLLOW_comma_in_synpred357_ChemicalChunker1580);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred358_ChemicalChunker
    public final void synpred358_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:290: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:290: adj
        {
        pushFollow(FOLLOW_adj_in_synpred358_ChemicalChunker1582_static.FOLLOW_adj_in_synpred358_ChemicalChunker1582);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_ChemicalChunker

    // $ANTLR start synpred360_ChemicalChunker
    public final void synpred360_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:300: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:300: stop
        {
        pushFollow(FOLLOW_stop_in_synpred360_ChemicalChunker1586_static.FOLLOW_stop_in_synpred360_ChemicalChunker1586);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:24: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred362_ChemicalChunker1647_static.FOLLOW_fw_in_synpred362_ChemicalChunker1647);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred363_ChemicalChunker
    public final void synpred363_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:27: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:27: nn
        {
        pushFollow(FOLLOW_nn_in_synpred363_ChemicalChunker1649_static.FOLLOW_nn_in_synpred363_ChemicalChunker1649);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:30: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:30: verb
        {
        pushFollow(FOLLOW_verb_in_synpred364_ChemicalChunker1651_static.FOLLOW_verb_in_synpred364_ChemicalChunker1651);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred365_ChemicalChunker
    public final void synpred365_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:35: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:35: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred365_ChemicalChunker1653_static.FOLLOW_measurements_in_synpred365_ChemicalChunker1653);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:61: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:61: stop
        {
        pushFollow(FOLLOW_stop_in_synpred368_ChemicalChunker1659_static.FOLLOW_stop_in_synpred368_ChemicalChunker1659);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred369_ChemicalChunker
    public final void synpred369_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:66: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:66: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred369_ChemicalChunker1661_static.FOLLOW_oscarCompound_in_synpred369_ChemicalChunker1661);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred369_ChemicalChunker

    // $ANTLR start synpred370_ChemicalChunker
    public final void synpred370_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:80: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:80: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred370_ChemicalChunker1663_static.FOLLOW_molecule_in_synpred370_ChemicalChunker1663);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:89: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:89: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred371_ChemicalChunker1665_static.FOLLOW_unnamedmolecule_in_synpred371_ChemicalChunker1665);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred373_ChemicalChunker
    public final void synpred373_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:110: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:110: sym
        {
        pushFollow(FOLLOW_sym_in_synpred373_ChemicalChunker1669_static.FOLLOW_sym_in_synpred373_ChemicalChunker1669);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_ChemicalChunker

    // $ANTLR start synpred374_ChemicalChunker
    public final void synpred374_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:114: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:114: cd
        {
        pushFollow(FOLLOW_cd_in_synpred374_ChemicalChunker1671_static.FOLLOW_cd_in_synpred374_ChemicalChunker1671);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:117: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:117: noun
        {
        pushFollow(FOLLOW_noun_in_synpred375_ChemicalChunker1673_static.FOLLOW_noun_in_synpred375_ChemicalChunker1673);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:122: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:122: inof
        {
        pushFollow(FOLLOW_inof_in_synpred376_ChemicalChunker1675_static.FOLLOW_inof_in_synpred376_ChemicalChunker1675);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred377_ChemicalChunker
    public final void synpred377_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:127: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:127: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred377_ChemicalChunker1677_static.FOLLOW_inAll_in_synpred377_ChemicalChunker1677);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_ChemicalChunker

    // $ANTLR start synpred378_ChemicalChunker
    public final void synpred378_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:133: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:133: cd
        {
        pushFollow(FOLLOW_cd_in_synpred378_ChemicalChunker1679_static.FOLLOW_cd_in_synpred378_ChemicalChunker1679);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:136: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:136: comma
        {
        pushFollow(FOLLOW_comma_in_synpred379_ChemicalChunker1681_static.FOLLOW_comma_in_synpred379_ChemicalChunker1681);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred380_ChemicalChunker
    public final void synpred380_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:142: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:142: adj
        {
        pushFollow(FOLLOW_adj_in_synpred380_ChemicalChunker1683_static.FOLLOW_adj_in_synpred380_ChemicalChunker1683);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:159: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:159: fw
        {
        pushFollow(FOLLOW_fw_in_synpred382_ChemicalChunker1691_static.FOLLOW_fw_in_synpred382_ChemicalChunker1691);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:162: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:162: verb
        {
        pushFollow(FOLLOW_verb_in_synpred383_ChemicalChunker1693_static.FOLLOW_verb_in_synpred383_ChemicalChunker1693);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:167: ( measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:167: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred384_ChemicalChunker1695_static.FOLLOW_measurements_in_synpred384_ChemicalChunker1695);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:180: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:180: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred385_ChemicalChunker1697_static.FOLLOW_nnyield_in_synpred385_ChemicalChunker1697);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:201: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:201: stop
        {
        pushFollow(FOLLOW_stop_in_synpred388_ChemicalChunker1703_static.FOLLOW_stop_in_synpred388_ChemicalChunker1703);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:206: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:206: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred389_ChemicalChunker1705_static.FOLLOW_oscarCompound_in_synpred389_ChemicalChunker1705);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:220: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:220: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred390_ChemicalChunker1707_static.FOLLOW_molecule_in_synpred390_ChemicalChunker1707);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred391_ChemicalChunker
    public final void synpred391_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:229: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:229: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred391_ChemicalChunker1709_static.FOLLOW_unnamedmolecule_in_synpred391_ChemicalChunker1709);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:250: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:250: sym
        {
        pushFollow(FOLLOW_sym_in_synpred393_ChemicalChunker1713_static.FOLLOW_sym_in_synpred393_ChemicalChunker1713);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:254: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:254: cd
        {
        pushFollow(FOLLOW_cd_in_synpred394_ChemicalChunker1715_static.FOLLOW_cd_in_synpred394_ChemicalChunker1715);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:257: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:257: noun
        {
        pushFollow(FOLLOW_noun_in_synpred395_ChemicalChunker1717_static.FOLLOW_noun_in_synpred395_ChemicalChunker1717);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:262: ( inof )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:262: inof
        {
        pushFollow(FOLLOW_inof_in_synpred396_ChemicalChunker1719_static.FOLLOW_inof_in_synpred396_ChemicalChunker1719);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:267: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:267: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred397_ChemicalChunker1721_static.FOLLOW_inAll_in_synpred397_ChemicalChunker1721);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:273: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:273: cd
        {
        pushFollow(FOLLOW_cd_in_synpred398_ChemicalChunker1723_static.FOLLOW_cd_in_synpred398_ChemicalChunker1723);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:276: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:276: comma
        {
        pushFollow(FOLLOW_comma_in_synpred399_ChemicalChunker1725_static.FOLLOW_comma_in_synpred399_ChemicalChunker1725);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:282: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:282: adj
        {
        pushFollow(FOLLOW_adj_in_synpred400_ChemicalChunker1727_static.FOLLOW_adj_in_synpred400_ChemicalChunker1727);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:292: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:292: stop
        {
        pushFollow(FOLLOW_stop_in_synpred402_ChemicalChunker1731_static.FOLLOW_stop_in_synpred402_ChemicalChunker1731);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred414_ChemicalChunker
    public final void synpred414_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred414_ChemicalChunker1786_static.FOLLOW_prepphraseAtmosphere_in_synpred414_ChemicalChunker1786);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred415_ChemicalChunker1788_static.FOLLOW_prepphraseTime_in_synpred415_ChemicalChunker1788);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred416_ChemicalChunker1790_static.FOLLOW_prepphraseTemp_in_synpred416_ChemicalChunker1790);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred417_ChemicalChunker1792_static.FOLLOW_prepphraseIN_in_synpred417_ChemicalChunker1792);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred418_ChemicalChunker1794_static.FOLLOW_prepphraseRole_in_synpred418_ChemicalChunker1794);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred422_ChemicalChunker1895_static.FOLLOW_advAdj_in_synpred422_ChemicalChunker1895);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred427_ChemicalChunker
    public final void synpred427_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred427_ChemicalChunker1911_static.FOLLOW_nntime_in_synpred427_ChemicalChunker1911);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_ChemicalChunker

    // $ANTLR start synpred430_ChemicalChunker
    public final void synpred430_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred430_ChemicalChunker1999_static.FOLLOW_advAdj_in_synpred430_ChemicalChunker1999);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred430_ChemicalChunker

    // $ANTLR start synpred431_ChemicalChunker
    public final void synpred431_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred431_ChemicalChunker2004_static.FOLLOW_nnatmosphere_in_synpred431_ChemicalChunker2004);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_ChemicalChunker

    // $ANTLR start synpred465_ChemicalChunker
    public final void synpred465_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred465_ChemicalChunker2117_static.FOLLOW_advAdj_in_synpred465_ChemicalChunker2117);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred465_ChemicalChunker

    // $ANTLR start synpred470_ChemicalChunker
    public final void synpred470_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred470_ChemicalChunker2132_static.FOLLOW_nntemp_in_synpred470_ChemicalChunker2132);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred470_ChemicalChunker

    // $ANTLR start synpred478_ChemicalChunker
    public final void synpred478_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred478_ChemicalChunker2333_static.FOLLOW_conjunction_in_synpred478_ChemicalChunker2333);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred478_ChemicalChunker

    // $ANTLR start synpred479_ChemicalChunker
    public final void synpred479_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:15: ( conjunction )*
        loop200:
        do {
            int alt200=2;
            alt200 = dfa200.predict(input);
            switch (alt200) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred479_ChemicalChunker2333_static.FOLLOW_conjunction_in_synpred479_ChemicalChunker2333);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop200;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred479_ChemicalChunker2336_static.FOLLOW_apparatus_in_synpred479_ChemicalChunker2336);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred479_ChemicalChunker

    // $ANTLR start synpred482_ChemicalChunker
    public final void synpred482_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred482_ChemicalChunker2354_static.FOLLOW_nnApp_in_synpred482_ChemicalChunker2354);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred482_ChemicalChunker

    // $ANTLR start synpred483_ChemicalChunker
    public final void synpred483_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred483_ChemicalChunker2382_static.FOLLOW_nnapparatus_in_synpred483_ChemicalChunker2382);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred483_ChemicalChunker

    // $ANTLR start synpred484_ChemicalChunker
    public final void synpred484_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred484_ChemicalChunker2386_static.FOLLOW_dash_in_synpred484_ChemicalChunker2386);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred484_ChemicalChunker2388_static.FOLLOW_nnapparatus_in_synpred484_ChemicalChunker2388);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred484_ChemicalChunker

    // $ANTLR start synpred485_ChemicalChunker
    public final void synpred485_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred485_ChemicalChunker2402_static.FOLLOW_quantity_in_synpred485_ChemicalChunker2402);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred485_ChemicalChunker

    // $ANTLR start synpred486_ChemicalChunker
    public final void synpred486_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred486_ChemicalChunker2404_static.FOLLOW_adj_in_synpred486_ChemicalChunker2404);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred486_ChemicalChunker

    // $ANTLR start synpred487_ChemicalChunker
    public final void synpred487_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred487_ChemicalChunker2406_static.FOLLOW_nnpressure_in_synpred487_ChemicalChunker2406);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred487_ChemicalChunker

    // $ANTLR start synpred488_ChemicalChunker
    public final void synpred488_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred488_ChemicalChunker2408_static.FOLLOW_nnadd_in_synpred488_ChemicalChunker2408);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred488_ChemicalChunker

    // $ANTLR start synpred489_ChemicalChunker
    public final void synpred489_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred489_ChemicalChunker2410_static.FOLLOW_molecule_in_synpred489_ChemicalChunker2410);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred489_ChemicalChunker

    // $ANTLR start synpred490_ChemicalChunker
    public final void synpred490_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred490_ChemicalChunker2412_static.FOLLOW_nnchementity_in_synpred490_ChemicalChunker2412);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred490_ChemicalChunker

    // $ANTLR start synpred491_ChemicalChunker
    public final void synpred491_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred491_ChemicalChunker2414_static.FOLLOW_nnstate_in_synpred491_ChemicalChunker2414);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred491_ChemicalChunker

    // $ANTLR start synpred492_ChemicalChunker
    public final void synpred492_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred492_ChemicalChunker2416_static.FOLLOW_nn_in_synpred492_ChemicalChunker2416);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred492_ChemicalChunker

    // $ANTLR start synpred495_ChemicalChunker
    public final void synpred495_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:43: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred495_ChemicalChunker2442_static.FOLLOW_dt_in_synpred495_ChemicalChunker2442);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred495_ChemicalChunker

    // $ANTLR start synpred496_ChemicalChunker
    public final void synpred496_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred496_ChemicalChunker2454_static.FOLLOW_measurementtypes_in_synpred496_ChemicalChunker2454);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred496_ChemicalChunker

    // $ANTLR start synpred502_ChemicalChunker
    public final void synpred502_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:24: ( oscarCompound1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred502_ChemicalChunker2505_static.FOLLOW_oscarCompound1_in_synpred502_ChemicalChunker2505);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred502_ChemicalChunker

    // $ANTLR start synpred504_ChemicalChunker
    public final void synpred504_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:54: ( oscarCompound3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred504_ChemicalChunker2509_static.FOLLOW_oscarCompound3_in_synpred504_ChemicalChunker2509);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred504_ChemicalChunker

    // $ANTLR start synpred506_ChemicalChunker
    public final void synpred506_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:93: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:93: adj
        {
        pushFollow(FOLLOW_adj_in_synpred506_ChemicalChunker2516_static.FOLLOW_adj_in_synpred506_ChemicalChunker2516);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred506_ChemicalChunker

    // $ANTLR start synpred507_ChemicalChunker
    public final void synpred507_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:98: ( reference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:98: reference
        {
        pushFollow(FOLLOW_reference_in_synpred507_ChemicalChunker2519_static.FOLLOW_reference_in_synpred507_ChemicalChunker2519);
        reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred507_ChemicalChunker

    // $ANTLR start synpred508_ChemicalChunker
    public final void synpred508_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:26: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred508_ChemicalChunker2594_static.FOLLOW_oscarcm_in_synpred508_ChemicalChunker2594);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred508_ChemicalChunker

    // $ANTLR start synpred509_ChemicalChunker
    public final void synpred509_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:14: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:14: dash
        {
        pushFollow(FOLLOW_dash_in_synpred509_ChemicalChunker2622_static.FOLLOW_dash_in_synpred509_ChemicalChunker2622);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred509_ChemicalChunker

    // $ANTLR start synpred510_ChemicalChunker
    public final void synpred510_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:19: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:19: apost
        {
        pushFollow(FOLLOW_apost_in_synpred510_ChemicalChunker2624_static.FOLLOW_apost_in_synpred510_ChemicalChunker2624);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred510_ChemicalChunker

    // $ANTLR start synpred511_ChemicalChunker
    public final void synpred511_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:14: ( dash oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:14: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred511_ChemicalChunker2641_static.FOLLOW_dash_in_synpred511_ChemicalChunker2641);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred511_ChemicalChunker2643_static.FOLLOW_oscarcm_in_synpred511_ChemicalChunker2643);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred511_ChemicalChunker

    // $ANTLR start synpred512_ChemicalChunker
    public final void synpred512_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:30: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:30: dash
        {
        pushFollow(FOLLOW_dash_in_synpred512_ChemicalChunker2648_static.FOLLOW_dash_in_synpred512_ChemicalChunker2648);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred512_ChemicalChunker

    // $ANTLR start synpred513_ChemicalChunker
    public final void synpred513_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred513_ChemicalChunker2662_static.FOLLOW_quantity_in_synpred513_ChemicalChunker2662);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred513_ChemicalChunker

    // $ANTLR start synpred514_ChemicalChunker
    public final void synpred514_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred514_ChemicalChunker2664_static.FOLLOW_mixture_in_synpred514_ChemicalChunker2664);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred514_ChemicalChunker

    // $ANTLR start synpred515_ChemicalChunker
    public final void synpred515_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:42: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:42: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred515_ChemicalChunker2672_static.FOLLOW_mixture_in_synpred515_ChemicalChunker2672);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred515_ChemicalChunker

    // $ANTLR start synpred516_ChemicalChunker
    public final void synpred516_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred516_ChemicalChunker2683_static.FOLLOW_quantity_in_synpred516_ChemicalChunker2683);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred516_ChemicalChunker

    // $ANTLR start synpred517_ChemicalChunker
    public final void synpred517_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred517_ChemicalChunker2685_static.FOLLOW_mixture_in_synpred517_ChemicalChunker2685);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred517_ChemicalChunker

    // $ANTLR start synpred518_ChemicalChunker
    public final void synpred518_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred518_ChemicalChunker2689_static.FOLLOW_oscarCompound_in_synpred518_ChemicalChunker2689);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred518_ChemicalChunker

    // $ANTLR start synpred519_ChemicalChunker
    public final void synpred519_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:40: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred519_ChemicalChunker2694_static.FOLLOW_citation_in_synpred519_ChemicalChunker2694);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred519_ChemicalChunker

    // $ANTLR start synpred520_ChemicalChunker
    public final void synpred520_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:49: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred520_ChemicalChunker2696_static.FOLLOW_quantity_in_synpred520_ChemicalChunker2696);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred520_ChemicalChunker

    // $ANTLR start synpred521_ChemicalChunker
    public final void synpred521_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:58: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred521_ChemicalChunker2698_static.FOLLOW_mixture_in_synpred521_ChemicalChunker2698);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred521_ChemicalChunker

    // $ANTLR start synpred522_ChemicalChunker
    public final void synpred522_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred522_ChemicalChunker2712_static.FOLLOW_quantity_in_synpred522_ChemicalChunker2712);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred522_ChemicalChunker

    // $ANTLR start synpred524_ChemicalChunker
    public final void synpred524_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:18: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:18: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred524_ChemicalChunker2734_static.FOLLOW_moleculeamount3_in_synpred524_ChemicalChunker2734);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred524_ChemicalChunker

    // $ANTLR start synpred525_ChemicalChunker
    public final void synpred525_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred525_ChemicalChunker2736_static.FOLLOW_moleculeamount1_in_synpred525_ChemicalChunker2736);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred525_ChemicalChunker

    // $ANTLR start synpred529_ChemicalChunker
    public final void synpred529_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:32: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:32: citation
        {
        pushFollow(FOLLOW_citation_in_synpred529_ChemicalChunker2822_static.FOLLOW_citation_in_synpred529_ChemicalChunker2822);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred529_ChemicalChunker

    // $ANTLR start synpred530_ChemicalChunker
    public final void synpred530_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:41: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:41: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred530_ChemicalChunker2824_static.FOLLOW_quantity_in_synpred530_ChemicalChunker2824);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred530_ChemicalChunker

    // $ANTLR start synpred531_ChemicalChunker
    public final void synpred531_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:50: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:50: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred531_ChemicalChunker2826_static.FOLLOW_mixture_in_synpred531_ChemicalChunker2826);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred531_ChemicalChunker

    // $ANTLR start synpred532_ChemicalChunker
    public final void synpred532_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: ( jj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred532_ChemicalChunker2847_static.FOLLOW_jj_in_synpred532_ChemicalChunker2847);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred532_ChemicalChunker

    // $ANTLR start synpred533_ChemicalChunker
    public final void synpred533_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: ( ( jj )? noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: ( jj )? noun
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:18: ( jj )?
        int alt201=2;
        switch ( input.LA(1) ) {
            case 167:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA201_3 = input.LA(3);

                        if ( (synpred532_ChemicalChunker()) ) {
                            alt201=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt201) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred533_ChemicalChunker2847_static.FOLLOW_jj_in_synpred533_ChemicalChunker2847);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred533_ChemicalChunker2850_static.FOLLOW_noun_in_synpred533_ChemicalChunker2850);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred533_ChemicalChunker

    // $ANTLR start synpred534_ChemicalChunker
    public final void synpred534_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred534_ChemicalChunker2863_static.FOLLOW_quantity_in_synpred534_ChemicalChunker2863);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred534_ChemicalChunker

    // $ANTLR start synpred535_ChemicalChunker
    public final void synpred535_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:31: ( cdAlphanum )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:31: cdAlphanum
        {
        pushFollow(FOLLOW_cdAlphanum_in_synpred535_ChemicalChunker2891_static.FOLLOW_cdAlphanum_in_synpred535_ChemicalChunker2891);
        cdAlphanum();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred535_ChemicalChunker

    // $ANTLR start synpred536_ChemicalChunker
    public final void synpred536_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred536_ChemicalChunker2895_static.FOLLOW_quantity_in_synpred536_ChemicalChunker2895);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred536_ChemicalChunker

    // $ANTLR start synpred537_ChemicalChunker
    public final void synpred537_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred537_ChemicalChunker2897_static.FOLLOW_mixture_in_synpred537_ChemicalChunker2897);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred537_ChemicalChunker

    // $ANTLR start synpred539_ChemicalChunker
    public final void synpred539_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:27: ( unnamedmoleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:27: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred539_ChemicalChunker2913_static.FOLLOW_unnamedmoleculeamount1_in_synpred539_ChemicalChunker2913);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred539_ChemicalChunker

    // $ANTLR start synpred540_ChemicalChunker
    public final void synpred540_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:52: ( unnamedmoleculeamount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:52: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred540_ChemicalChunker2917_static.FOLLOW_unnamedmoleculeamount2_in_synpred540_ChemicalChunker2917);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred540_ChemicalChunker

    // $ANTLR start synpred541_ChemicalChunker
    public final void synpred541_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:77: ( unnamedmoleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:77: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred541_ChemicalChunker2921_static.FOLLOW_unnamedmoleculeamount3_in_synpred541_ChemicalChunker2921);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred541_ChemicalChunker

    // $ANTLR start synpred546_ChemicalChunker
    public final void synpred546_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred546_ChemicalChunker3025_static.FOLLOW_comma_in_synpred546_ChemicalChunker3025);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred546_ChemicalChunker3028_static.FOLLOW_measurements_in_synpred546_ChemicalChunker3028);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred546_ChemicalChunker

    // Delegated rules

    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred515_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred515_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred539_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred539_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred486_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred486_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred496_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred496_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred532_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred532_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred491_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred491_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred518_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred518_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred536_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred536_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred533_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred533_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred546_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred546_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred478_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred478_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred482_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred482_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred479_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred479_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred507_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred507_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred512_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred512_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred510_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred510_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred530_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred530_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred465_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred465_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred535_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred535_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred506_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred506_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred541_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred541_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred519_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred519_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred483_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred483_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred488_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred488_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred502_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred502_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred531_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred531_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred485_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred485_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred520_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred520_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred524_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred524_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred509_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred509_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred513_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred513_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred517_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred517_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred521_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred521_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred492_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred492_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred516_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred516_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred540_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred540_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred489_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred489_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred514_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred514_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred508_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred508_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred537_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred537_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred495_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred495_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred525_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred525_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred529_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred529_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred511_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred511_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred484_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred484_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred490_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred490_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred487_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred487_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred534_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred534_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred522_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred522_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred470_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred470_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred504_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred504_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA200 dfa200 = new DFA200(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u00bf\uffff";
    static final String DFA2_eofS =
        "\1\1\u00be\uffff";
    static final String DFA2_minS =
        "\1\40\1\uffff\u00bb\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00db\1\uffff\u00bb\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u00bb\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\14\1\33\1\141\1\u0099\1\u0098\1\167\1\u009f\1\u0091"+
        "\1\136\1\u0087\1\66\1\163\1\176\1\177\1\166\1\20\1\u00b0\1\107\1"+
        "\161\1\155\1\106\1\u00b1\1\150\1\u009b\1\0\1\u00b4\1\u009e\1\13"+
        "\1\u00ad\1\u0083\1\152\1\u0089\1\4\1\53\1\174\1\175\1\u0094\1\113"+
        "\1\132\1\147\1\52\1\u00ab\1\17\1\45\1\75\1\115\1\u0082\1\146\1\u00b2"+
        "\1\u0095\1\126\1\u0080\1\74\1\117\1\170\1\u0093\1\44\1\153\1\151"+
        "\1\u00b8\1\u00a2\1\u00ba\1\u0088\1\127\1\160\1\u00b9\1\26\1\3\1"+
        "\u008a\1\76\1\165\1\54\1\171\1\67\1\41\1\u008d\1\105\1\u009c\1\u00a1"+
        "\1\u00a9\1\u009d\1\137\1\77\1\120\1\34\1\1\1\123\1\55\1\u0084\1"+
        "\23\1\u0096\1\65\1\121\1\32\1\51\1\103\1\11\1\62\1\116\1\7\1\u00a6"+
        "\1\u00a4\1\22\1\u0097\1\145\1\157\1\130\1\57\1\72\1\31\1\5\1\24"+
        "\1\u00a8\1\u0092\1\u0086\1\73\1\63\1\104\1\47\1\u009a\1\u00af\1"+
        "\162\1\140\1\64\1\101\1\12\1\21\1\40\1\u00b3\1\143\1\173\1\u00ac"+
        "\1\135\1\43\1\2\1\102\1\125\1\61\1\30\1\42\1\10\1\15\1\16\1\u00a7"+
        "\1\u00b7\1\u00aa\1\u008f\1\u008c\1\u0090\1\u0081\1\172\1\u0085\1"+
        "\144\1\134\1\154\1\122\1\100\1\110\1\71\1\36\1\46\1\35\1\u00b5\1"+
        "\u00ae\1\u00a5\1\u00a3\1\156\1\133\1\60\1\70\1\111\1\114\1\124\1"+
        "\6\1\25\1\27\1\37\1\50\1\u008e\1\u008b\1\u00a0\1\u00b6\1\142\1\131"+
        "\1\164\1\56\1\112\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\6\1\15\1\17\1\7\1\76\1\50\1\u0087\1\16\1\37\1\116\1\117"+
            "\1\115\1\123\1\124\1\133\1\134\1\120\1\132\1\125\1\127\1\121"+
            "\1\122\1\131\1\130\1\126\1\45\1\25\1\46\1\u0088\1\5\1\56\1\47"+
            "\1\51\1\65\1\24\1\52\1\53\1\54\1\55\1\20\1\57\1\60\1\61\1\62"+
            "\1\63\1\23\1\145\1\u0085\1\146\1\151\1\21\1\74\1\153\1\152\1"+
            "\154\1\155\1\156\1\157\1\160\1\161\1\162\1\27\1\163\1\64\1\164"+
            "\1\150\1\165\1\166\1\77\1\167\1\100\1\170\1\101\1\171\1\172"+
            "\1\147\1\173\1\174\1\102\1\175\1\66\1\176\1\177\1\u0080\1\103"+
            "\1\u0081\1\44\1\73\1\u0082\1\u0083\1\u0084\1\42\1\u0089\1\22"+
            "\1\u008a\1\u0086\1\u008b\1\1\1\u008c\1\75\1\u008d\1\3\1\u008e"+
            "\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096"+
            "\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\4\1\u009d"+
            "\1\u009e\1\u009f\1\u00a0\1\2\1\30\1\u00a1\1\u00a2\1\u00a3\1"+
            "\111\1\104\1\105\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\114\1\11"+
            "\1\12\1\13\1\14\1\135\1\u00a8\1\26\1\u00a9\1\43\1\u00aa\1\u00ab"+
            "\1\36\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\10\1\u00b0\1\u00b1\1"+
            "\u00b2\1\u00b3\1\u00b4\1\u00b5\1\40\1\41\1\u00b6\1\u00b7\1\u00b8"+
            "\1\u00b9\1\u00ba\1\31\1\32\1\136\1\33\1\35\1\u00bb\1\34\1\106"+
            "\1\113\1\u00bc\1\137\1\140\1\142\1\141\1\144\1\143\1\67\1\70"+
            "\1\71\1\72\1\107\1\110\1\112",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 51:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_175 = input.LA(1);

                         
                        int index2_175 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_175);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_144 = input.LA(1);

                         
                        int index2_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_144);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_176 = input.LA(1);

                         
                        int index2_176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_176);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_177 = input.LA(1);

                         
                        int index2_177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_177);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_163 = input.LA(1);

                         
                        int index2_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_163);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_161 = input.LA(1);

                         
                        int index2_161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_161);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_178 = input.LA(1);

                         
                        int index2_178 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_178);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_162 = input.LA(1);

                         
                        int index2_162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_162);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_179 = input.LA(1);

                         
                        int index2_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_179);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_187 = input.LA(1);

                         
                        int index2_187 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_187);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_170 = input.LA(1);

                         
                        int index2_170 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_170);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_171 = input.LA(1);

                         
                        int index2_171 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_171);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_160 = input.LA(1);

                         
                        int index2_160 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_160);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_158 = input.LA(1);

                         
                        int index2_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_158);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_159 = input.LA(1);

                         
                        int index2_159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_159);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_172 = input.LA(1);

                         
                        int index2_172 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_172);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_188 = input.LA(1);

                         
                        int index2_188 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_188);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_173 = input.LA(1);

                         
                        int index2_173 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_173);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_157 = input.LA(1);

                         
                        int index2_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_157);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_174 = input.LA(1);

                         
                        int index2_174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_174);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_185 = input.LA(1);

                         
                        int index2_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_185);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_169 = input.LA(1);

                         
                        int index2_169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_169);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_155 = input.LA(1);

                         
                        int index2_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_155);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_184 = input.LA(1);

                         
                        int index2_184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_184);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_154 = input.LA(1);

                         
                        int index2_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_154);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_156 = input.LA(1);

                         
                        int index2_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_156);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_168 = input.LA(1);

                         
                        int index2_168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_168);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_186 = input.LA(1);

                         
                        int index2_186 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_186);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_152 = input.LA(1);

                         
                        int index2_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_152);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_151 = input.LA(1);

                         
                        int index2_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_151);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_153 = input.LA(1);

                         
                        int index2_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_153);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_181 = input.LA(1);

                         
                        int index2_181 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_181);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_149 = input.LA(1);

                         
                        int index2_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_149);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA2_180 = input.LA(1);

                         
                        int index2_180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_180);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA2_148 = input.LA(1);

                         
                        int index2_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_148);
                        if ( s>=0 ) return s;
                        break;

                    case 144 : 
                        int LA2_150 = input.LA(1);

                         
                        int index2_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_150);
                        if ( s>=0 ) return s;
                        break;

                    case 145 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 146 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 147 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 148 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 149 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 150 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 151 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 152 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 153 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 154 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 155 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 156 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 157 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 158 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 159 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 160 : 
                        int LA2_182 = input.LA(1);

                         
                        int index2_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_182);
                        if ( s>=0 ) return s;
                        break;

                    case 161 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 162 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 163 : 
                        int LA2_167 = input.LA(1);

                         
                        int index2_167 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_167);
                        if ( s>=0 ) return s;
                        break;

                    case 164 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 165 : 
                        int LA2_166 = input.LA(1);

                         
                        int index2_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_166);
                        if ( s>=0 ) return s;
                        break;

                    case 166 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 167 : 
                        int LA2_145 = input.LA(1);

                         
                        int index2_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_145);
                        if ( s>=0 ) return s;
                        break;

                    case 168 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 169 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 170 : 
                        int LA2_147 = input.LA(1);

                         
                        int index2_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_147);
                        if ( s>=0 ) return s;
                        break;

                    case 171 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 172 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 173 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 174 : 
                        int LA2_165 = input.LA(1);

                         
                        int index2_165 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_165);
                        if ( s>=0 ) return s;
                        break;

                    case 175 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 176 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 177 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 178 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 179 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 180 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 181 : 
                        int LA2_164 = input.LA(1);

                         
                        int index2_164 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_164);
                        if ( s>=0 ) return s;
                        break;

                    case 182 : 
                        int LA2_183 = input.LA(1);

                         
                        int index2_183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_183);
                        if ( s>=0 ) return s;
                        break;

                    case 183 : 
                        int LA2_146 = input.LA(1);

                         
                        int index2_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_146);
                        if ( s>=0 ) return s;
                        break;

                    case 184 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 185 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 186 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 189;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u008b\uffff";
    static final String DFA4_eofS =
        "\1\15\u008a\uffff";
    static final String DFA4_minS =
        "\1\40\14\0\1\uffff\171\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00db\14\0\1\uffff\171\0\4\uffff";
    static final String DFA4_acceptS =
        "\15\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\65\1\u0082\1\153\1\72\1\40\1\35\1\115\1\0\1\23\1\20"+
        "\1\124\1\177\1\uffff\1\147\1\44\1\150\1\132\1\56\1\110\1\174\1\173"+
        "\1\17\1\163\1\172\1\21\1\127\1\67\1\34\1\106\1\50\1\146\1\125\1"+
        "\42\1\136\1\75\1\2\1\111\1\112\1\64\1\120\1\155\1\154\1\135\1\74"+
        "\1\114\1\144\1\70\1\u0083\1\157\1\142\1\104\1\43\1\51\1\167\1\160"+
        "\1\151\1\121\1\41\1\5\1\164\1\47\1\133\1\22\1\162\1\4\1\130\1\53"+
        "\1\77\1\13\1\26\1\u0084\1\161\1\140\1\36\1\105\1\55\1\131\1\54\1"+
        "\126\1\24\1\134\1\25\1\76\1\107\1\66\1\137\1\12\1\175\1\171\1\3"+
        "\1\57\1\15\1\u0081\1\122\1\31\1\37\1\73\1\63\1\141\1\116\1\33\1"+
        "\11\1\166\1\113\1\32\1\176\1\102\1\152\1\156\1\27\1\6\1\61\1\100"+
        "\1\46\1\117\1\170\1\30\1\10\1\60\1\101\1\145\1\165\1\1\1\14\1\45"+
        "\1\123\1\103\1\143\1\u0080\1\16\1\52\1\71\1\62\1\7\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\24\1\12\1\14\1\25\1\77\1\51\1\15\1\13\1\40\1\117\1\120\1"+
            "\116\1\124\1\125\1\134\1\135\1\121\1\133\1\126\1\130\1\122\1"+
            "\123\1\132\1\131\1\127\1\46\1\33\1\47\1\15\1\23\1\57\1\50\1"+
            "\52\1\66\1\32\1\53\1\54\1\55\1\56\1\27\1\60\1\61\1\62\1\63\1"+
            "\64\1\31\1\145\1\u0085\1\146\1\151\1\30\1\75\1\153\1\152\1\154"+
            "\1\155\1\156\1\157\1\160\1\161\1\162\1\35\1\163\1\65\1\164\1"+
            "\150\1\165\1\166\1\100\1\167\1\101\1\170\1\102\1\171\1\172\1"+
            "\147\1\173\1\174\1\103\1\175\1\67\1\176\1\177\1\u0080\1\104"+
            "\1\u0081\1\45\1\74\1\u0082\1\u0083\1\u0084\1\43\1\15\1\16\1"+
            "\15\1\u0086\3\15\1\76\1\15\1\21\17\15\1\22\4\15\1\20\1\36\3"+
            "\15\1\112\1\105\1\106\4\15\1\115\1\6\1\7\1\10\1\11\1\136\1\15"+
            "\1\34\1\15\1\44\2\15\1\37\4\15\1\26\6\15\1\41\1\42\5\15\1\1"+
            "\1\2\1\17\1\3\1\5\1\15\1\4\1\107\1\114\1\15\1\137\1\140\1\142"+
            "\1\141\1\144\1\143\1\70\1\71\1\72\1\73\1\110\1\111\1\113",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 53:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_134 = input.LA(1);

                         
                        int index4_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_134);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_133 = input.LA(1);

                         
                        int index4_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_133);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_132 = input.LA(1);

                         
                        int index4_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_132);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\36\uffff";
    static final String DFA5_eofS =
        "\1\1\35\uffff";
    static final String DFA5_minS =
        "\1\40\1\uffff\15\37\15\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00db\1\uffff\15\37\15\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\32\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\17\uffff\1\0\1\12\1\13\1\1\1\7\1\6\1\11\1\10\1\5\1\3\1\4\1\14"+
        "\1\2\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\10\4\1\1\7\124\1\1\16\52\1\1\2\1\3\1\4\1\5\32\1"+
            "\1\11\1\12\1\1\1\13\1\15\1\1\1\14\20\1",
            "",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 53:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\40\1\uffff\3\37\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00db\1\uffff\3\37\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\1\1\2\1\0\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\135\1\1\2\26\1\1\4\62\1\1\3\24\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 53:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\113\uffff";
    static final String DFA8_eofS =
        "\113\uffff";
    static final String DFA8_minS =
        "\1\40\26\0\64\uffff";
    static final String DFA8_maxS =
        "\1\u00db\26\0\64\uffff";
    static final String DFA8_acceptS =
        "\27\uffff\1\2\62\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\64\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\14\1\16\1\6\2\27\1\uffff\1\15\1\27\20\uffff\1\27\1\24"+
            "\1\27\1\uffff\1\4\4\27\1\23\4\27\1\17\5\27\1\22\4\uffff\1\20"+
            "\1\27\11\uffff\1\26\1\uffff\1\27\4\uffff\1\27\1\uffff\1\27\1"+
            "\uffff\1\27\5\uffff\1\27\1\uffff\1\27\3\uffff\1\27\1\uffff\2"+
            "\27\3\uffff\1\27\1\uffff\1\21\5\uffff\1\27\1\uffff\1\2\17\uffff"+
            "\1\3\4\uffff\1\1\1\27\3\uffff\3\27\5\uffff\1\10\1\11\1\12\1"+
            "\13\2\uffff\1\25\1\uffff\1\27\2\uffff\1\27\4\uffff\1\7\6\uffff"+
            "\2\27\5\uffff\2\27\1\uffff\2\27\1\uffff\2\27\10\uffff\7\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "70:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA8_20 = input.LA(1);

                         
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA8_21 = input.LA(1);

                         
                        int index8_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA8_22 = input.LA(1);

                         
                        int index8_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 74;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index8_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\21\uffff";
    static final String DFA11_eofS =
        "\21\uffff";
    static final String DFA11_minS =
        "\1\40\1\uffff\7\37\1\uffff\7\0";
    static final String DFA11_maxS =
        "\1\u00db\1\uffff\7\37\1\uffff\7\0";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA11_specialS =
        "\12\uffff\1\6\1\3\1\2\1\5\1\4\1\0\1\1}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\1\1\20\uffff\3\1\1\uffff\21\1"+
            "\4\uffff\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\4\uffff\1\1\6\uffff\2\1\5\uffff"+
            "\2\11\1\uffff\2\11\1\uffff\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA11_16 = input.LA(1);

                         
                        int index11_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\111\uffff";
    static final String DFA12_eofS =
        "\1\1\110\uffff";
    static final String DFA12_minS =
        "\1\40\1\uffff\103\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00db\1\uffff\103\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\103\uffff\1\1\1\2\1\4\1\3";
    static final String DFA12_specialS =
        "\2\uffff\1\61\1\20\1\4\1\26\1\76\1\25\1\34\1\7\1\0\1\16\1\5\1\53"+
        "\1\55\1\51\1\44\1\60\1\74\1\22\1\45\1\70\1\56\1\27\1\66\1\37\1\71"+
        "\1\40\1\12\1\17\1\35\1\33\1\47\1\50\1\43\1\36\1\54\1\75\1\101\1"+
        "\11\1\21\1\72\1\2\1\62\1\3\1\73\1\64\1\65\1\23\1\100\1\15\1\31\1"+
        "\102\1\77\1\14\1\24\1\52\1\67\1\30\1\10\1\32\1\46\1\63\1\1\1\42"+
        "\1\41\1\6\1\13\1\57\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\16\1\7\1\11\1\17\1\70\1\42\1\1\1\10\1\22\20\1\1\37\1\31"+
            "\1\40\1\1\1\15\1\50\1\41\1\43\1\57\1\30\1\44\1\45\1\46\1\47"+
            "\1\26\1\51\1\52\1\53\1\54\1\55\1\21\4\1\1\27\1\66\11\1\1\33"+
            "\1\1\1\56\4\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\60\3\1\1"+
            "\75\1\1\1\36\1\65\3\1\1\34\1\1\1\2\5\1\1\67\1\1\1\12\17\1\1"+
            "\14\4\1\1\25\4\1\1\103\1\76\1\77\5\1\1\3\1\4\1\5\1\6\2\1\1\32"+
            "\1\1\1\35\2\1\1\13\4\1\1\20\6\1\1\23\1\24\14\1\1\100\10\1\1"+
            "\61\1\62\1\63\1\64\1\101\1\102\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 75:24: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_68 = input.LA(1);

                         
                        int index12_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_68);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred130_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\114\uffff";
    static final String DFA16_eofS =
        "\1\1\113\uffff";
    static final String DFA16_minS =
        "\1\40\1\uffff\111\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00db\1\uffff\111\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\111\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\45\1\1\1\65\1\4\1\21\1\41\1\43\1\2\1\12\1\63\1\35\1"+
        "\13\1\33\1\34\1\55\1\20\1\15\1\102\1\11\1\3\1\40\1\44\1\54\1\77"+
        "\1\67\1\7\1\42\1\110\1\103\1\50\1\31\1\106\1\27\1\60\1\100\1\70"+
        "\1\5\1\105\1\74\1\72\1\14\1\46\1\10\1\47\1\30\1\25\1\56\1\73\1\32"+
        "\1\36\1\17\1\53\1\57\1\107\1\37\1\51\1\66\1\23\1\26\1\101\1\24\1"+
        "\6\1\71\1\52\1\76\1\16\1\75\1\104\1\64\1\0\1\61\1\62\1\22\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\24\1\13\1\15\1\25\1\76\1\50\1\1\1\14\1\37\20\1\1\45\1\33"+
            "\1\46\1\1\1\23\1\56\1\47\1\51\1\65\1\32\1\52\1\53\1\54\1\55"+
            "\1\27\1\57\1\60\1\61\1\62\1\63\1\31\4\1\1\30\1\74\11\1\1\35"+
            "\1\1\1\64\4\1\1\77\1\1\1\100\1\1\1\101\5\1\1\102\1\1\1\66\3"+
            "\1\1\103\1\1\1\44\1\73\3\1\1\42\1\1\1\17\5\1\1\75\1\1\1\21\16"+
            "\1\1\16\1\22\4\1\1\20\4\1\1\111\1\104\1\105\5\1\1\7\1\10\1\11"+
            "\1\12\2\1\1\34\1\1\1\43\2\1\1\36\4\1\1\26\6\1\1\40\1\41\5\1"+
            "\1\2\1\3\1\1\1\4\1\6\1\1\1\5\1\106\10\1\1\67\1\70\1\71\1\72"+
            "\1\107\1\110\1\112",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_71 = input.LA(1);

                         
                        int index16_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_71);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA16_74 = input.LA(1);

                         
                        int index16_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_74);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA16_72 = input.LA(1);

                         
                        int index16_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_72);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA16_73 = input.LA(1);

                         
                        int index16_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_73);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA13_static {
    static final String DFA13_eotS =
        "\112\uffff";
    static final String DFA13_eofS =
        "\112\uffff";
    static final String DFA13_minS =
        "\1\40\23\uffff\1\0\65\uffff";
    static final String DFA13_maxS =
        "\1\u00db\23\uffff\1\0\65\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA13_specialS =
        "\24\uffff\1\0\65\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\3\1\1\uffff\21\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\24\5\uffff\1\1\1\uffff\1\1\16\uffff\1\111\1\1\4\uffff\1\1"+
            "\4\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\4\uffff\1\1\6\uffff\2\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1"+
            "\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_static.DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_static.DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_static.DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_static.DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_static.DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_static.DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA13_20 = input.LA(1);

                         
                        int index13_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\21\uffff";
    static final String DFA14_eofS =
        "\21\uffff";
    static final String DFA14_minS =
        "\1\40\1\uffff\7\37\1\uffff\7\0";
    static final String DFA14_maxS =
        "\1\u00db\1\uffff\7\37\1\uffff\7\0";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA14_specialS =
        "\12\uffff\1\4\1\6\1\0\1\3\1\1\1\5\1\2}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\1\1\20\uffff\3\1\1\uffff\21\1"+
            "\4\uffff\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\4\uffff\1\1\6\uffff\2\1\5\uffff"+
            "\2\11\1\uffff\2\11\1\uffff\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\110\uffff";
    static final String DFA15_eofS =
        "\110\uffff";
    static final String DFA15_minS =
        "\1\40\103\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00db\103\0\4\uffff";
    static final String DFA15_acceptS =
        "\104\uffff\1\1\1\2\1\4\1\3";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\14\1\6\1\10\1\15\1\67\1\41\1\uffff\1\7\1\21\20\uffff\1\36"+
            "\1\30\1\37\1\uffff\1\13\1\47\1\40\1\42\1\56\1\27\1\43\1\44\1"+
            "\45\1\46\1\25\1\50\1\51\1\52\1\53\1\54\1\20\4\uffff\1\26\1\65"+
            "\11\uffff\1\32\1\uffff\1\55\4\uffff\1\70\1\uffff\1\71\1\uffff"+
            "\1\72\5\uffff\1\73\1\uffff\1\57\3\uffff\1\74\1\uffff\1\35\1"+
            "\64\3\uffff\1\33\1\uffff\1\17\5\uffff\1\66\1\uffff\1\1\17\uffff"+
            "\1\12\4\uffff\1\24\4\uffff\1\102\1\75\1\76\5\uffff\1\2\1\3\1"+
            "\4\1\5\2\uffff\1\31\1\uffff\1\34\2\uffff\1\11\4\uffff\1\16\6"+
            "\uffff\1\22\1\23\14\uffff\1\77\10\uffff\1\60\1\61\1\62\1\63"+
            "\1\100\1\101\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "75:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA15_66 = input.LA(1);

                         
                        int index15_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_66);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA15_67 = input.LA(1);

                         
                        int index15_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_67);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\24\uffff";
    static final String DFA18_eofS =
        "\1\22\23\uffff";
    static final String DFA18_minS =
        "\1\40\21\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00db\21\0\2\uffff";
    static final String DFA18_acceptS =
        "\22\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\13\1\5\1\11\1\6\1\1\1\16\1\7\1\14\1\2\1\17\1\3\1\20"+
        "\1\4\1\15\1\12\1\10\1\0\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\14\1\6\1\10\1\15\3\22\1\7\1\21\24\22\1\13\17\22\1\20\57"+
            "\22\1\17\7\22\1\1\17\22\1\12\21\22\1\2\1\3\1\4\1\5\7\22\1\11"+
            "\4\22\1\16\44\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "75:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\24\uffff";
    static final String DFA20_eofS =
        "\24\uffff";
    static final String DFA20_minS =
        "\1\40\11\0\12\uffff";
    static final String DFA20_maxS =
        "\1\u00b7\11\0\12\uffff";
    static final String DFA20_acceptS =
        "\12\uffff\1\2\7\uffff\1\1\1\3";
    static final String DFA20_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\12\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\12\1\6\1\10\1\12\3\uffff\1\7\1\12\24\uffff\1\12\17\uffff"+
            "\1\12\57\uffff\1\12\7\uffff\1\1\17\uffff\1\12\21\uffff\1\2\1"+
            "\3\1\4\1\5\7\uffff\1\11\4\uffff\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "77:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred140_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_6 = input.LA(1);

                         
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\21\uffff";
    static final String DFA21_eofS =
        "\21\uffff";
    static final String DFA21_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA21_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA21_specialS =
        "\11\uffff\1\4\1\5\1\1\1\6\1\3\1\2\1\0\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "80:8: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\21\uffff";
    static final String DFA23_eofS =
        "\21\uffff";
    static final String DFA23_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA23_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA23_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "80:18: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_6 = input.LA(1);

                         
                        int index23_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA23_7 = input.LA(1);

                         
                        int index23_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index23_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\21\uffff";
    static final String DFA25_eofS =
        "\21\uffff";
    static final String DFA25_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA25_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA25_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA25_specialS =
        "\11\uffff\1\2\1\0\1\5\1\4\1\3\1\6\1\1\1\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "80:58: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\21\uffff";
    static final String DFA27_eofS =
        "\21\uffff";
    static final String DFA27_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA27_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA27_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "80:68: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA27_5 = input.LA(1);

                         
                        int index27_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA27_6 = input.LA(1);

                         
                        int index27_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA27_7 = input.LA(1);

                         
                        int index27_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index27_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA30_static {
    static final String DFA30_eotS =
        "\21\uffff";
    static final String DFA30_eofS =
        "\21\uffff";
    static final String DFA30_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA30_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA30_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA30_specialS =
        "\11\uffff\1\6\1\5\1\4\1\3\1\2\1\0\1\1\1\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_static.DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_static.DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_static.DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_static.DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_static.DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_static.DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_static.DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_static.DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "82:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA30_14 = input.LA(1);

                         
                        int index30_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA30_15 = input.LA(1);

                         
                        int index30_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA30_13 = input.LA(1);

                         
                        int index30_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA30_12 = input.LA(1);

                         
                        int index30_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA30_11 = input.LA(1);

                         
                        int index30_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA30_10 = input.LA(1);

                         
                        int index30_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA30_9 = input.LA(1);

                         
                        int index30_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA32_static {
    static final String DFA32_eotS =
        "\21\uffff";
    static final String DFA32_eofS =
        "\21\uffff";
    static final String DFA32_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA32_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA32_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA32_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_static.DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_static.DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_static.DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_static.DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_static.DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_static.DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_static.DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_static.DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "82:14: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA32_4 = input.LA(1);

                         
                        int index32_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA32_7 = input.LA(1);

                         
                        int index32_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index32_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA34_static {
    static final String DFA34_eotS =
        "\21\uffff";
    static final String DFA34_eofS =
        "\21\uffff";
    static final String DFA34_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA34_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA34_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA34_specialS =
        "\11\uffff\1\4\1\5\1\0\1\1\1\6\1\3\1\2\1\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_static.DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_static.DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_static.DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_static.DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_static.DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_static.DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_static.DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_static.DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "82:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA34_11 = input.LA(1);

                         
                        int index34_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA36_static {
    static final String DFA36_eotS =
        "\21\uffff";
    static final String DFA36_eofS =
        "\21\uffff";
    static final String DFA36_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA36_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_static.DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_static.DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_static.DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_static.DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_static.DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_static.DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_static.DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_static.DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "82:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\22\uffff";
    static final String DFA40_eofS =
        "\22\uffff";
    static final String DFA40_minS =
        "\1\40\7\0\12\uffff";
    static final String DFA40_maxS =
        "\1\u00b7\7\0\12\uffff";
    static final String DFA40_acceptS =
        "\10\uffff\1\1\7\uffff\1\2\1\3";
    static final String DFA40_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\12\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\4\uffff\1\21\12"+
            "\uffff\1\10\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4"+
            "\10\14\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "85:13: ( molecule | unnamedmolecule | nnchementity )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred161_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\21\uffff";
    static final String DFA42_eofS =
        "\21\uffff";
    static final String DFA42_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA42_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA42_specialS =
        "\11\uffff\1\1\1\0\1\6\1\3\1\2\1\4\1\5\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "85:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA42_14 = input.LA(1);

                         
                        int index42_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA42_15 = input.LA(1);

                         
                        int index42_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA44_static {
    static final String DFA44_eotS =
        "\21\uffff";
    static final String DFA44_eofS =
        "\21\uffff";
    static final String DFA44_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA44_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA44_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA44_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_static.DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_static.DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_static.DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_static.DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_static.DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_static.DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "85:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA61_static {
    static final String DFA61_eotS =
        "\71\uffff";
    static final String DFA61_eofS =
        "\1\1\70\uffff";
    static final String DFA61_minS =
        "\1\40\1\uffff\66\0\1\uffff";
    static final String DFA61_maxS =
        "\1\u00db\1\uffff\66\0\1\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\2\66\uffff\1\1";
    static final String DFA61_specialS =
        "\2\uffff\1\2\1\25\1\5\1\31\1\40\1\33\1\11\1\30\1\41\1\63\1\52\1"+
        "\0\1\3\1\53\1\57\1\51\1\34\1\1\1\10\1\32\1\20\1\6\1\35\1\61\1\64"+
        "\1\23\1\36\1\54\1\24\1\7\1\55\1\37\1\47\1\65\1\14\1\45\1\12\1\16"+
        "\1\46\1\13\1\50\1\15\1\17\1\44\1\27\1\60\1\26\1\22\1\4\1\42\1\62"+
        "\1\43\1\21\1\56\1\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\1\13\1\15\4\1\1\14\46\1\1\27\1\67\1\30\1\33\2\1\1\35\1"+
            "\34\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\1\1\45\1\1\1\46\1\32"+
            "\1\47\1\50\1\1\1\51\1\1\1\52\1\1\1\53\1\54\1\31\1\55\1\56\1"+
            "\1\1\57\1\1\1\60\1\61\1\62\1\1\1\63\1\17\1\1\1\64\1\65\1\66"+
            "\54\1\1\7\1\10\1\11\1\12\1\20\31\1\1\2\1\3\1\16\1\4\1\6\1\1"+
            "\1\5\3\1\1\21\1\22\1\24\1\23\1\26\1\25\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_static.DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_static.DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_static.DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_static.DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_static.DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_static.DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_static.DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_static.DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()+ loopback of 96:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA61_13 = input.LA(1);

                         
                        int index61_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA61_19 = input.LA(1);

                         
                        int index61_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA61_14 = input.LA(1);

                         
                        int index61_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA61_50 = input.LA(1);

                         
                        int index61_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_50);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA61_4 = input.LA(1);

                         
                        int index61_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_4);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA61_23 = input.LA(1);

                         
                        int index61_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA61_31 = input.LA(1);

                         
                        int index61_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_31);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA61_20 = input.LA(1);

                         
                        int index61_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_20);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA61_8 = input.LA(1);

                         
                        int index61_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_8);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA61_38 = input.LA(1);

                         
                        int index61_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_38);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA61_41 = input.LA(1);

                         
                        int index61_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_41);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA61_36 = input.LA(1);

                         
                        int index61_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_36);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA61_43 = input.LA(1);

                         
                        int index61_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_43);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA61_39 = input.LA(1);

                         
                        int index61_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_39);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA61_44 = input.LA(1);

                         
                        int index61_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_44);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA61_22 = input.LA(1);

                         
                        int index61_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_22);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA61_54 = input.LA(1);

                         
                        int index61_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_54);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA61_49 = input.LA(1);

                         
                        int index61_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_49);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA61_27 = input.LA(1);

                         
                        int index61_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_27);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA61_30 = input.LA(1);

                         
                        int index61_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_30);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA61_3 = input.LA(1);

                         
                        int index61_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_3);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA61_48 = input.LA(1);

                         
                        int index61_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_48);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA61_46 = input.LA(1);

                         
                        int index61_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_46);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA61_9 = input.LA(1);

                         
                        int index61_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_9);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA61_5 = input.LA(1);

                         
                        int index61_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_5);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA61_21 = input.LA(1);

                         
                        int index61_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_21);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA61_7 = input.LA(1);

                         
                        int index61_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_7);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA61_18 = input.LA(1);

                         
                        int index61_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_18);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA61_24 = input.LA(1);

                         
                        int index61_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_24);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA61_28 = input.LA(1);

                         
                        int index61_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_28);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA61_33 = input.LA(1);

                         
                        int index61_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_33);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA61_6 = input.LA(1);

                         
                        int index61_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_6);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA61_10 = input.LA(1);

                         
                        int index61_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_10);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA61_51 = input.LA(1);

                         
                        int index61_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_51);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA61_53 = input.LA(1);

                         
                        int index61_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_53);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA61_45 = input.LA(1);

                         
                        int index61_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_45);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA61_37 = input.LA(1);

                         
                        int index61_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_37);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA61_40 = input.LA(1);

                         
                        int index61_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_40);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA61_34 = input.LA(1);

                         
                        int index61_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_34);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA61_42 = input.LA(1);

                         
                        int index61_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_42);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA61_17 = input.LA(1);

                         
                        int index61_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_17);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA61_12 = input.LA(1);

                         
                        int index61_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_12);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA61_15 = input.LA(1);

                         
                        int index61_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_15);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA61_29 = input.LA(1);

                         
                        int index61_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_29);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA61_32 = input.LA(1);

                         
                        int index61_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_32);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA61_55 = input.LA(1);

                         
                        int index61_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_55);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA61_16 = input.LA(1);

                         
                        int index61_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_16);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA61_47 = input.LA(1);

                         
                        int index61_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_47);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA61_25 = input.LA(1);

                         
                        int index61_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_25);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA61_52 = input.LA(1);

                         
                        int index61_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_52);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA61_11 = input.LA(1);

                         
                        int index61_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_11);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA61_26 = input.LA(1);

                         
                        int index61_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_26);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA61_35 = input.LA(1);

                         
                        int index61_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA56_static {
    static final String DFA56_eotS =
        "\53\uffff";
    static final String DFA56_eofS =
        "\1\1\52\uffff";
    static final String DFA56_minS =
        "\1\40\1\uffff\50\0\1\uffff";
    static final String DFA56_maxS =
        "\1\u00db\1\uffff\50\0\1\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA56_specialS =
        "\2\uffff\1\4\1\45\1\12\1\15\1\41\1\34\1\20\1\6\1\26\1\17\1\33\1"+
        "\0\1\11\1\32\1\37\1\14\1\16\1\44\1\13\1\47\1\7\1\2\1\36\1\40\1\27"+
        "\1\24\1\43\1\22\1\5\1\1\1\25\1\23\1\21\1\3\1\35\1\30\1\42\1\10\1"+
        "\46\1\31\1\uffff}>";
    static final String[] DFA56_transitionS = {
            "\56\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\124\1\1\3\1\4\1\6\1\5"+
            "\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_static.DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_static.DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_static.DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_static.DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_static.DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_static.DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()+ loopback of 96:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA56_31 = input.LA(1);

                         
                        int index56_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_31);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA56_35 = input.LA(1);

                         
                        int index56_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_35);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA56_2 = input.LA(1);

                         
                        int index56_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_2);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA56_30 = input.LA(1);

                         
                        int index56_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_30);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA56_39 = input.LA(1);

                         
                        int index56_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_39);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA56_4 = input.LA(1);

                         
                        int index56_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_4);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA56_5 = input.LA(1);

                         
                        int index56_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_5);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA56_34 = input.LA(1);

                         
                        int index56_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_34);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA56_29 = input.LA(1);

                         
                        int index56_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA56_33 = input.LA(1);

                         
                        int index56_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_33);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA56_27 = input.LA(1);

                         
                        int index56_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_27);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA56_32 = input.LA(1);

                         
                        int index56_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_32);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA56_26 = input.LA(1);

                         
                        int index56_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_26);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA56_37 = input.LA(1);

                         
                        int index56_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_37);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA56_41 = input.LA(1);

                         
                        int index56_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_41);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA56_7 = input.LA(1);

                         
                        int index56_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_7);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA56_36 = input.LA(1);

                         
                        int index56_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_36);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA56_25 = input.LA(1);

                         
                        int index56_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_25);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA56_6 = input.LA(1);

                         
                        int index56_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_6);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA56_38 = input.LA(1);

                         
                        int index56_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_38);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA56_28 = input.LA(1);

                         
                        int index56_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_28);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA56_3 = input.LA(1);

                         
                        int index56_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_3);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA56_40 = input.LA(1);

                         
                        int index56_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_40);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA58_static {
    static final String DFA58_eotS =
        "\15\uffff";
    static final String DFA58_eofS =
        "\1\1\14\uffff";
    static final String DFA58_minS =
        "\1\40\1\uffff\5\37\5\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00db\1\uffff\5\37\5\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA58_specialS =
        "\7\uffff\1\4\1\1\1\0\1\2\1\3\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\u00a5\1\1\2\1\3\1\1\1\4\1\6\1\1\1\5\20\1",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_static.DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_static.DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_static.DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_static.DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_static.DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_static.DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 96:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA58_9 = input.LA(1);

                         
                        int index58_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_8 = input.LA(1);

                         
                        int index58_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_10 = input.LA(1);

                         
                        int index58_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA58_11 = input.LA(1);

                         
                        int index58_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA58_7 = input.LA(1);

                         
                        int index58_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA59_static {
    static final String DFA59_eotS =
        "\21\uffff";
    static final String DFA59_eofS =
        "\1\10\20\uffff";
    static final String DFA59_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA59_maxS =
        "\1\u00db\7\37\1\uffff\7\0\1\uffff";
    static final String DFA59_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA59_specialS =
        "\11\uffff\1\1\1\0\1\6\1\2\1\3\1\4\1\5\1\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\10\1\5\1\7\4\10\1\6\177\10\1\1\1\2\1\3\1\4\61\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_static.DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_static.DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_static.DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_static.DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_static.DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_static.DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_static.DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_static.DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "96:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA59_9 = input.LA(1);

                         
                        int index59_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA59_15 = input.LA(1);

                         
                        int index59_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA59_11 = input.LA(1);

                         
                        int index59_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA65_static {
    static final String DFA65_eotS =
        "\u00bf\uffff";
    static final String DFA65_eofS =
        "\1\15\u00be\uffff";
    static final String DFA65_minS =
        "\1\40\14\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\24\uffff\1\0\3\uffff"+
        "\1\0\40\uffff\22\0\50\uffff\1\0\65\uffff";
    static final String DFA65_maxS =
        "\1\u00db\14\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\24\uffff\1\0"+
        "\3\uffff\1\0\40\uffff\22\0\50\uffff\1\0\65\uffff";
    static final String DFA65_acceptS =
        "\15\uffff\1\2\u00b0\uffff\1\1";
    static final String DFA65_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\uffff\1\14\1\15\3\uffff\1\16\1\uffff\1\17\24\uffff\1\20\3\uffff"+
        "\1\21\40\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\50\uffff\1\44\65\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\15\1\12\1\14\4\15\1\13\1\15\1\122\1\123\1\121\1\127\1\130"+
            "\1\137\1\140\1\124\1\136\1\131\1\133\1\125\1\126\1\135\1\134"+
            "\1\132\2\15\1\52\7\15\1\56\71\15\1\17\1\15\1\u0089\24\15\1\16"+
            "\1\25\4\15\1\23\13\15\1\120\1\6\1\7\1\10\1\11\32\15\1\1\1\2"+
            "\1\15\1\3\1\5\1\15\1\4\1\15\1\117\16\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_static.DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_static.DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_static.DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_static.DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_static.DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_static.DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_static.DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_static.DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 96:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA65_1 = input.LA(1);

                         
                        int index65_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA65_15 = input.LA(1);

                         
                        int index65_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_15);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA65_19 = input.LA(1);

                         
                        int index65_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_19);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA65_21 = input.LA(1);

                         
                        int index65_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_21);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA65_42 = input.LA(1);

                         
                        int index65_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_42);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA65_46 = input.LA(1);

                         
                        int index65_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_46);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA65_79 = input.LA(1);

                         
                        int index65_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA65_80 = input.LA(1);

                         
                        int index65_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA65_81 = input.LA(1);

                         
                        int index65_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA65_82 = input.LA(1);

                         
                        int index65_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA65_83 = input.LA(1);

                         
                        int index65_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA65_84 = input.LA(1);

                         
                        int index65_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA65_85 = input.LA(1);

                         
                        int index65_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA65_86 = input.LA(1);

                         
                        int index65_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA65_87 = input.LA(1);

                         
                        int index65_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA65_88 = input.LA(1);

                         
                        int index65_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA65_89 = input.LA(1);

                         
                        int index65_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA65_90 = input.LA(1);

                         
                        int index65_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA65_91 = input.LA(1);

                         
                        int index65_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA65_92 = input.LA(1);

                         
                        int index65_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA65_93 = input.LA(1);

                         
                        int index65_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA65_94 = input.LA(1);

                         
                        int index65_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA65_95 = input.LA(1);

                         
                        int index65_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_95);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA65_96 = input.LA(1);

                         
                        int index65_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_96);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA65_137 = input.LA(1);

                         
                        int index65_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred187_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_137);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA66_static {
    static final String DFA66_eotS =
        "\60\uffff";
    static final String DFA66_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA66_minS =
        "\1\116\11\uffff\1\37\36\uffff\1\40\1\uffff\1\37\1\40\1\37\1\0\1"+
        "\uffff";
    static final String DFA66_maxS =
        "\1\u00d4\11\uffff\1\37\36\uffff\1\u00db\1\uffff\1\37\1\u00db\1"+
        "\37\1\0\1\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA66_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\124\uffff\1\1\1\2\1\4\1\3\1\6\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\164\52\1\53\107\52",
            "",
            "\1\54",
            "\71\52\1\55\u0082\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_static.DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_static.DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_static.DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_static.DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_static.DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_static.DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_static.DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_static.DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "97:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA66_46 = input.LA(1);

                         
                        int index66_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred197_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred210_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index66_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA70_static {
    static final String DFA70_eotS =
        "\130\uffff";
    static final String DFA70_eofS =
        "\130\uffff";
    static final String DFA70_minS =
        "\1\40\2\uffff\17\0\1\uffff\5\0\30\uffff\4\0\44\uffff";
    static final String DFA70_maxS =
        "\1\u00db\2\uffff\17\0\1\uffff\5\0\30\uffff\4\0\44\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\1\1\2\17\uffff\1\6\6\uffff\1\10\1\11\1\14\1\15\1\17"+
        "\1\20\1\24\1\25\1\26\1\27\1\33\1\34\1\35\1\36\1\37\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\1\47\1\50\4\uffff\1\55\1\56\1\57\1\60\1\61\1\64"+
        "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\3\uffff\1\3\1\5\1\7\1\30\1\63"+
        "\1\4\1\22\1\23\1\32\1\62\1\21\1\40\1\16\1\31\1\12\1\13\1\51\1\52"+
        "\1\53\1\54";
    static final String DFA70_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\uffff\1\17\1\20\1\21\1\22\1\23\30\uffff\1\24\1\25"+
        "\1\26\1\27\44\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\7\1\16\1\20\1\10\1\67\1\41\1\uffff\1\17\1\31\20\uffff\1"+
            "\36\1\26\1\37\1\uffff\1\6\1\47\1\40\1\42\1\56\1\25\1\43\1\44"+
            "\1\45\1\46\1\23\1\50\1\51\1\52\1\53\1\54\1\21\4\uffff\1\24\1"+
            "\65\11\uffff\1\22\1\uffff\1\55\4\uffff\1\70\1\uffff\1\71\1\uffff"+
            "\1\72\5\uffff\1\73\1\uffff\1\57\3\uffff\1\74\1\uffff\1\35\1"+
            "\64\3\uffff\1\32\1\uffff\1\4\5\uffff\1\66\1\uffff\1\3\17\uffff"+
            "\1\5\4\uffff\1\22\4\uffff\1\100\1\75\1\76\5\uffff\1\12\1\13"+
            "\1\14\1\15\2\uffff\1\27\1\uffff\1\33\2\uffff\1\34\4\uffff\1"+
            "\11\6\uffff\1\1\1\2\14\uffff\1\77\10\uffff\1\60\1\61\1\62\1"+
            "\63\3\100",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_static.DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_static.DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_static.DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_static.DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_static.DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_static.DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_static.DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_static.DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "105:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA70_3 = input.LA(1);

                         
                        int index70_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred245_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA70_4 = input.LA(1);

                         
                        int index70_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred245_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                         
                        input.seek(index70_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA70_5 = input.LA(1);

                         
                        int index70_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred245_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 76;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index70_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA70_6 = input.LA(1);

                         
                        int index70_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA70_7 = input.LA(1);

                         
                        int index70_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 76;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index70_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA70_8 = input.LA(1);

                         
                        int index70_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                        else if ( (synpred255_ChemicalChunker()) ) {s = 78;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 76;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index70_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA70_9 = input.LA(1);

                         
                        int index70_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 25;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 76;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index70_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA70_10 = input.LA(1);

                         
                        int index70_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA70_11 = input.LA(1);

                         
                        int index70_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA70_12 = input.LA(1);

                         
                        int index70_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA70_13 = input.LA(1);

                         
                        int index70_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA70_14 = input.LA(1);

                         
                        int index70_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA70_15 = input.LA(1);

                         
                        int index70_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA70_16 = input.LA(1);

                         
                        int index70_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA70_17 = input.LA(1);

                         
                        int index70_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index70_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA70_19 = input.LA(1);

                         
                        int index70_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred270_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index70_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA70_20 = input.LA(1);

                         
                        int index70_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred252_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index70_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA70_21 = input.LA(1);

                         
                        int index70_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index70_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA70_22 = input.LA(1);

                         
                        int index70_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred248_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index70_22);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA70_23 = input.LA(1);

                         
                        int index70_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred249_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index70_23);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA70_48 = input.LA(1);

                         
                        int index70_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 84;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index70_48);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA70_49 = input.LA(1);

                         
                        int index70_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 85;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index70_49);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA70_50 = input.LA(1);

                         
                        int index70_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 86;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index70_50);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA70_51 = input.LA(1);

                         
                        int index70_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 87;}

                        else if ( (true) ) {s = 64;}

                         
                        input.seek(index70_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\13\uffff";
    static final String DFA75_eofS =
        "\13\uffff";
    static final String DFA75_minS =
        "\1\40\1\37\1\uffff\1\41\2\37\1\0\1\40\1\uffff\1\37\1\0";
    static final String DFA75_maxS =
        "\1\u00db\1\37\1\uffff\1\u00ad\2\37\1\0\1\u00db\1\uffff\1\37\1\0";
    static final String DFA75_acceptS =
        "\2\uffff\1\2\5\uffff\1\1\2\uffff";
    static final String DFA75_specialS =
        "\6\uffff\1\1\3\uffff\1\0}>";
    static final String[] DFA75_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\3\2\1\uffff\21\2\4\uffff\2\2\11\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\17\uffff\1\1\4\uffff\1\2\4\uffff"+
            "\3\2\5\uffff\4\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\2\6\uffff\2\2\14\uffff\1\2\10\uffff\7\2",
            "\1\3",
            "",
            "\2\2\3\uffff\2\2\24\uffff\3\2\2\uffff\1\2\11\uffff\1\2\60"+
            "\uffff\1\5\3\uffff\1\2\1\uffff\1\2\22\uffff\1\4\21\uffff\4\2"+
            "\2\uffff\1\2",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\11\5\2\1\uffff\2\2\20\uffff\3\2\1\uffff\21\2\4\uffff\2"+
            "\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\17\uffff\1\2\4\uffff"+
            "\1\2\4\uffff\3\2\5\uffff\4\2\2\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2\6\uffff\2\2\14\uffff\1\2\10\uffff\7\2",
            "",
            "\1\12",
            "\1\uffff"
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "111:9: ( numberratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\12\uffff";
    static final String DFA76_eofS =
        "\1\1\4\uffff\1\1\4\uffff";
    static final String DFA76_minS =
        "\1\40\1\uffff\2\37\1\0\1\40\1\uffff\1\37\1\0\1\uffff";
    static final String DFA76_maxS =
        "\1\u00db\1\uffff\2\37\1\0\1\u00db\1\uffff\1\37\1\0\1\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\3\4\uffff\1\2\2\uffff\1\1";
    static final String DFA76_specialS =
        "\4\uffff\1\0\3\uffff\1\1\1\uffff}>";
    static final String[] DFA76_transitionS = {
            "\134\1\1\3\30\1\1\2\106\1",
            "",
            "\1\4",
            "\1\5",
            "\1\uffff",
            "\1\7\u00bb\1",
            "",
            "\1\10",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()+ loopback of 112:19: ( colon cdAlphanum | cd )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_4 = input.LA(1);

                         
                        int index76_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA84_static {
    static final String DFA84_eotS =
        "\u0090\uffff";
    static final String DFA84_eofS =
        "\u0090\uffff";
    static final String DFA84_minS =
        "\1\40\1\0\43\uffff\1\0\4\uffff\6\0\2\uffff\14\0\1\uffff\1\0\57"+
        "\uffff\1\0\40\uffff";
    static final String DFA84_maxS =
        "\1\u00db\1\0\43\uffff\1\0\4\uffff\6\0\2\uffff\14\0\1\uffff\1\0"+
        "\57\uffff\1\0\40\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\2\55\uffff\1\5\1\6\14\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\3\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA84_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff"+
        "\1\24\57\uffff\1\25\40\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\55\1\67\1\71\1\56\2\100\1\uffff\1\70\1\75\11\160\1\157\6"+
            "\160\3\100\1\uffff\1\54\17\100\1\72\4\2\2\100\11\2\1\100\1\2"+
            "\1\100\4\2\1\100\1\2\1\100\1\2\1\100\5\2\1\100\1\2\1\100\3\2"+
            "\1\100\1\2\1\45\1\100\3\2\1\100\1\u0081\1\74\2\uffff\1\76\1"+
            "\62\1\61\1\100\1\uffff\1\73\17\uffff\1\53\4\uffff\1\100\4\uffff"+
            "\1\100\1\1\1\100\4\uffff\1\160\1\63\1\64\1\65\1\66\1\60\1\uffff"+
            "\1\52\1\uffff\1\100\2\uffff\1\100\4\uffff\1\57\6\uffff\2\100"+
            "\14\uffff\1\77\1\160\1\uffff\6\2\7\100",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_static.DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_static.DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_static.DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_static.DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_static.DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_static.DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "132:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA84_37 = input.LA(1);

                         
                        int index84_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA84_42 = input.LA(1);

                         
                        int index84_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA84_43 = input.LA(1);

                         
                        int index84_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred331_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred335_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index84_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA84_44 = input.LA(1);

                         
                        int index84_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA84_45 = input.LA(1);

                         
                        int index84_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA84_46 = input.LA(1);

                         
                        int index84_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA84_47 = input.LA(1);

                         
                        int index84_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA84_50 = input.LA(1);

                         
                        int index84_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 138;}

                         
                        input.seek(index84_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA84_51 = input.LA(1);

                         
                        int index84_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA84_52 = input.LA(1);

                         
                        int index84_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA84_53 = input.LA(1);

                         
                        int index84_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA84_54 = input.LA(1);

                         
                        int index84_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA84_55 = input.LA(1);

                         
                        int index84_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA84_56 = input.LA(1);

                         
                        int index84_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA84_57 = input.LA(1);

                         
                        int index84_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred337_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index84_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA84_58 = input.LA(1);

                         
                        int index84_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA84_59 = input.LA(1);

                         
                        int index84_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA84_60 = input.LA(1);

                         
                        int index84_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index84_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA84_61 = input.LA(1);

                         
                        int index84_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred328_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_61);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA84_63 = input.LA(1);

                         
                        int index84_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred332_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index84_63);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA84_111 = input.LA(1);

                         
                        int index84_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred334_ChemicalChunker()) ) {s = 112;}

                         
                        input.seek(index84_111);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\u0092\uffff";
    static final String DFA85_eofS =
        "\u0092\uffff";
    static final String DFA85_minS =
        "\1\40\1\uffff\3\0\43\uffff\1\0\4\uffff\6\0\2\uffff\12\0\1\uffff"+
        "\1\0\57\uffff\1\0\41\uffff";
    static final String DFA85_maxS =
        "\1\u00db\1\uffff\3\0\43\uffff\1\0\4\uffff\6\0\2\uffff\12\0\1\uffff"+
        "\1\0\57\uffff\1\0\41\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\27\3\uffff\1\3\55\uffff\1\6\1\7\12\uffff\1\14\1\uffff"+
        "\1\17\57\uffff\1\21\20\uffff\1\25\1\1\1\12\1\13\1\23\1\11\1\2\1"+
        "\4\1\16\1\22\1\5\1\10\1\26\1\24\1\15\1\20";
    static final String DFA85_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\1\10"+
        "\1\11\2\uffff\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\uffff\1\24\57\uffff\1\25\41\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\57\1\72\1\74\1\60\2\101\1\uffff\1\73\1\76\11\161\1\160\6"+
            "\161\3\101\1\uffff\1\56\17\101\1\75\4\5\2\101\11\5\1\101\1\5"+
            "\1\101\4\5\1\101\1\5\1\101\1\5\1\101\5\5\1\101\1\5\1\101\3\5"+
            "\1\101\1\5\1\50\1\101\3\5\1\62\1\u0082\1\2\2\uffff\1\77\1\65"+
            "\1\64\1\101\1\uffff\1\3\1\1\16\uffff\1\55\4\uffff\1\101\4\uffff"+
            "\1\101\1\4\1\101\4\uffff\1\161\1\66\1\67\1\70\1\71\1\63\1\uffff"+
            "\1\101\1\uffff\1\101\2\uffff\1\101\4\uffff\1\61\6\uffff\2\101"+
            "\14\uffff\1\100\1\161\1\uffff\6\5\7\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "()+ loopback of 132:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_2 = input.LA(1);

                         
                        int index85_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred357_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index85_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_3 = input.LA(1);

                         
                        int index85_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_4 = input.LA(1);

                         
                        int index85_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA85_40 = input.LA(1);

                         
                        int index85_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA85_45 = input.LA(1);

                         
                        int index85_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred352_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred356_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index85_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA85_46 = input.LA(1);

                         
                        int index85_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA85_47 = input.LA(1);

                         
                        int index85_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA85_48 = input.LA(1);

                         
                        int index85_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA85_49 = input.LA(1);

                         
                        int index85_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_49);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA85_50 = input.LA(1);

                         
                        int index85_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_50);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA85_53 = input.LA(1);

                         
                        int index85_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred360_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index85_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA85_54 = input.LA(1);

                         
                        int index85_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA85_55 = input.LA(1);

                         
                        int index85_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA85_56 = input.LA(1);

                         
                        int index85_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA85_57 = input.LA(1);

                         
                        int index85_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA85_58 = input.LA(1);

                         
                        int index85_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA85_59 = input.LA(1);

                         
                        int index85_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA85_60 = input.LA(1);

                         
                        int index85_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred358_ChemicalChunker()) ) {s = 143;}

                         
                        input.seek(index85_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA85_61 = input.LA(1);

                         
                        int index85_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA85_62 = input.LA(1);

                         
                        int index85_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_62);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA85_64 = input.LA(1);

                         
                        int index85_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred351_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index85_64);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA85_112 = input.LA(1);

                         
                        int index85_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred355_ChemicalChunker()) ) {s = 113;}

                         
                        input.seek(index85_112);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\u0090\uffff";
    static final String DFA87_eofS =
        "\u0090\uffff";
    static final String DFA87_minS =
        "\1\40\2\0\43\uffff\1\0\4\uffff\5\0\2\uffff\14\0\1\uffff\1\0\57"+
        "\uffff\1\0\40\uffff";
    static final String DFA87_maxS =
        "\1\u00db\2\0\43\uffff\1\0\4\uffff\5\0\2\uffff\14\0\1\uffff\1\0"+
        "\57\uffff\1\0\40\uffff";
    static final String DFA87_acceptS =
        "\3\uffff\1\3\54\uffff\1\5\1\6\14\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\2\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA87_specialS =
        "\1\uffff\1\0\1\1\43\uffff\1\2\4\uffff\1\3\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff"+
        "\1\24\57\uffff\1\25\40\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\55\1\67\1\71\1\56\2\100\1\uffff\1\70\1\75\11\160\1\157\6"+
            "\160\3\100\1\uffff\1\54\17\100\1\72\4\3\2\100\11\3\1\100\1\3"+
            "\1\100\4\3\1\100\1\3\1\100\1\3\1\100\5\3\1\100\1\3\1\100\3\3"+
            "\1\100\1\3\1\46\1\100\3\3\1\100\1\u0081\1\74\2\uffff\1\76\1"+
            "\62\1\60\1\100\1\uffff\1\73\17\uffff\1\53\4\uffff\1\100\4\uffff"+
            "\1\100\1\1\1\100\4\uffff\1\160\1\63\1\64\1\65\1\66\1\61\1\uffff"+
            "\1\2\1\uffff\1\100\2\uffff\1\100\4\uffff\1\57\6\uffff\2\100"+
            "\14\uffff\1\77\1\160\1\uffff\6\3\7\100",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "137:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_1 = input.LA(1);

                         
                        int index87_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_2 = input.LA(1);

                         
                        int index87_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_38 = input.LA(1);

                         
                        int index87_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_38);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_43 = input.LA(1);

                         
                        int index87_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred374_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred378_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index87_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA87_44 = input.LA(1);

                         
                        int index87_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA87_45 = input.LA(1);

                         
                        int index87_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA87_46 = input.LA(1);

                         
                        int index87_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA87_47 = input.LA(1);

                         
                        int index87_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred365_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA87_50 = input.LA(1);

                         
                        int index87_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 138;}

                         
                        input.seek(index87_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA87_51 = input.LA(1);

                         
                        int index87_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA87_52 = input.LA(1);

                         
                        int index87_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA87_53 = input.LA(1);

                         
                        int index87_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA87_54 = input.LA(1);

                         
                        int index87_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA87_55 = input.LA(1);

                         
                        int index87_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA87_56 = input.LA(1);

                         
                        int index87_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA87_57 = input.LA(1);

                         
                        int index87_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred380_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index87_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA87_58 = input.LA(1);

                         
                        int index87_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA87_59 = input.LA(1);

                         
                        int index87_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred369_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA87_60 = input.LA(1);

                         
                        int index87_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred370_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred379_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index87_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA87_61 = input.LA(1);

                         
                        int index87_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_61);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA87_63 = input.LA(1);

                         
                        int index87_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred375_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index87_63);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA87_111 = input.LA(1);

                         
                        int index87_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred377_ChemicalChunker()) ) {s = 112;}

                         
                        input.seek(index87_111);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA88_static {
    static final String DFA88_eotS =
        "\u0091\uffff";
    static final String DFA88_eofS =
        "\1\1\u0090\uffff";
    static final String DFA88_minS =
        "\1\40\1\uffff\1\0\43\uffff\1\0\4\uffff\6\0\2\uffff\14\0\1\uffff"+
        "\1\0\57\uffff\1\0\40\uffff";
    static final String DFA88_maxS =
        "\1\u00db\1\uffff\1\0\43\uffff\1\0\4\uffff\6\0\2\uffff\14\0\1\uffff"+
        "\1\0\57\uffff\1\0\40\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\26\1\uffff\1\2\55\uffff\1\5\1\6\14\uffff\1\13\1\uffff"+
        "\1\16\57\uffff\1\20\20\uffff\1\24\1\1\1\3\1\11\1\12\1\15\1\21\1"+
        "\4\1\7\1\25\1\10\1\23\1\22\1\14\1\17";
    static final String DFA88_specialS =
        "\2\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff"+
        "\1\24\57\uffff\1\25\40\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\55\1\70\1\72\1\56\2\101\1\uffff\1\71\1\76\11\161\1\160\6"+
            "\161\3\101\1\uffff\1\54\17\101\1\73\4\3\2\101\11\3\1\101\1\3"+
            "\1\101\4\3\1\101\1\3\1\101\1\3\1\101\5\3\1\101\1\3\1\101\3\3"+
            "\1\101\1\3\1\46\1\101\3\3\1\60\1\u0082\1\75\2\uffff\1\77\1\63"+
            "\1\61\1\101\1\uffff\1\74\17\uffff\1\53\4\uffff\1\101\4\uffff"+
            "\1\101\1\2\1\101\4\uffff\1\161\1\64\1\65\1\66\1\67\1\62\1\uffff"+
            "\1\101\1\uffff\1\101\2\uffff\1\101\4\uffff\1\57\6\uffff\2\101"+
            "\14\uffff\1\100\1\161\1\uffff\6\3\7\101",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_static.DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_static.DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_static.DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_static.DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_static.DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_static.DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()+ loopback of 137:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA88_38 = input.LA(1);

                         
                        int index88_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred383_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_38);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA88_43 = input.LA(1);

                         
                        int index88_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred398_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index88_43);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA88_44 = input.LA(1);

                         
                        int index88_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_44);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA88_45 = input.LA(1);

                         
                        int index88_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA88_46 = input.LA(1);

                         
                        int index88_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA88_47 = input.LA(1);

                         
                        int index88_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA88_48 = input.LA(1);

                         
                        int index88_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA88_51 = input.LA(1);

                         
                        int index88_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred388_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred402_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA88_52 = input.LA(1);

                         
                        int index88_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA88_53 = input.LA(1);

                         
                        int index88_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA88_54 = input.LA(1);

                         
                        int index88_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA88_55 = input.LA(1);

                         
                        int index88_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA88_56 = input.LA(1);

                         
                        int index88_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA88_57 = input.LA(1);

                         
                        int index88_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA88_58 = input.LA(1);

                         
                        int index88_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred400_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index88_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA88_59 = input.LA(1);

                         
                        int index88_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA88_60 = input.LA(1);

                         
                        int index88_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA88_61 = input.LA(1);

                         
                        int index88_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index88_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA88_62 = input.LA(1);

                         
                        int index88_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred391_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_62);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA88_64 = input.LA(1);

                         
                        int index88_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index88_64);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA88_112 = input.LA(1);

                         
                        int index88_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 113;}

                         
                        input.seek(index88_112);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA92_static {
    static final String DFA92_eotS =
        "\47\uffff";
    static final String DFA92_eofS =
        "\47\uffff";
    static final String DFA92_minS =
        "\1\41\40\0\6\uffff";
    static final String DFA92_maxS =
        "\1\u00cd\40\0\6\uffff";
    static final String DFA92_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\6\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\13\1\15\4\uffff\1\14\1\uffff\1\20\1\21\1\17\1\25\1\26\1"+
            "\34\1\35\1\22\1\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff"+
            "\1\41\7\uffff\1\42\121\uffff\1\40\4\uffff\1\37\13\uffff\1\16"+
            "\1\7\1\10\1\11\1\12\32\uffff\1\2\1\3\1\uffff\1\4\1\6\1\uffff"+
            "\1\5\1\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_static.DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_static.DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_static.DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_static.DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_static.DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_static.DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "145:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred414_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA92_5 = input.LA(1);

                         
                        int index92_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA92_6 = input.LA(1);

                         
                        int index92_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA92_7 = input.LA(1);

                         
                        int index92_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA92_8 = input.LA(1);

                         
                        int index92_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA92_9 = input.LA(1);

                         
                        int index92_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA92_10 = input.LA(1);

                         
                        int index92_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA92_12 = input.LA(1);

                         
                        int index92_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred418_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA92_20 = input.LA(1);

                         
                        int index92_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA92_21 = input.LA(1);

                         
                        int index92_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 38;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA92_22 = input.LA(1);

                         
                        int index92_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA92_23 = input.LA(1);

                         
                        int index92_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA92_24 = input.LA(1);

                         
                        int index92_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA92_25 = input.LA(1);

                         
                        int index92_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA92_26 = input.LA(1);

                         
                        int index92_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA92_27 = input.LA(1);

                         
                        int index92_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA92_28 = input.LA(1);

                         
                        int index92_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA92_29 = input.LA(1);

                         
                        int index92_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA92_30 = input.LA(1);

                         
                        int index92_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA92_31 = input.LA(1);

                         
                        int index92_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA92_32 = input.LA(1);

                         
                        int index92_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA96_static {
    static final String DFA96_eotS =
        "\33\uffff";
    static final String DFA96_eofS =
        "\33\uffff";
    static final String DFA96_minS =
        "\1\41\1\uffff\14\37\14\0\1\uffff";
    static final String DFA96_maxS =
        "\1\u00cd\1\uffff\14\37\14\0\1\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\2\30\uffff\1\1";
    static final String DFA96_specialS =
        "\16\uffff\1\3\1\5\1\10\1\11\1\4\1\0\1\7\1\13\1\2\1\1\1\12\1\6\1"+
        "\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\13\1\15\4\uffff\1\14\1\uffff\20\1\2\uffff\1\1\131\uffff"+
            "\1\1\4\uffff\1\1\13\uffff\1\1\1\7\1\10\1\11\1\12\32\uffff\1"+
            "\2\1\3\1\uffff\1\4\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_static.DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_static.DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_static.DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_static.DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_static.DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_static.DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 157:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA96_19 = input.LA(1);

                         
                        int index96_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA96_23 = input.LA(1);

                         
                        int index96_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_23);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA96_22 = input.LA(1);

                         
                        int index96_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA96_14 = input.LA(1);

                         
                        int index96_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA96_18 = input.LA(1);

                         
                        int index96_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_18);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA96_15 = input.LA(1);

                         
                        int index96_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA96_25 = input.LA(1);

                         
                        int index96_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_25);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA96_20 = input.LA(1);

                         
                        int index96_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA96_16 = input.LA(1);

                         
                        int index96_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_16);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA96_17 = input.LA(1);

                         
                        int index96_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_17);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA96_24 = input.LA(1);

                         
                        int index96_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_24);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA96_21 = input.LA(1);

                         
                        int index96_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\21\uffff";
    static final String DFA104_eofS =
        "\21\uffff";
    static final String DFA104_minS =
        "\1\40\1\uffff\7\37\1\uffff\7\0";
    static final String DFA104_maxS =
        "\1\u00cb\1\uffff\7\37\1\uffff\7\0";
    static final String DFA104_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA104_specialS =
        "\12\uffff\1\1\1\5\1\4\1\0\1\6\1\2\1\3}>";
    static final String[] DFA104_transitionS = {
            "\1\1\1\6\1\10\1\1\3\uffff\1\7\25\uffff\1\1\17\uffff\1\1\57"+
            "\uffff\1\1\7\uffff\1\1\17\uffff\1\1\21\uffff\1\2\1\3\1\4\1\5"+
            "\14\uffff\1\1\15\uffff\2\11\1\uffff\2\11\1\uffff\1\11",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()* loopback of 167:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_13 = input.LA(1);

                         
                        int index104_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA104_10 = input.LA(1);

                         
                        int index104_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA104_15 = input.LA(1);

                         
                        int index104_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA104_16 = input.LA(1);

                         
                        int index104_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA104_12 = input.LA(1);

                         
                        int index104_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA104_11 = input.LA(1);

                         
                        int index104_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA104_14 = input.LA(1);

                         
                        int index104_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred430_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA108_static {
    static final String DFA108_eotS =
        "\33\uffff";
    static final String DFA108_eofS =
        "\33\uffff";
    static final String DFA108_minS =
        "\1\41\14\37\1\uffff\14\0\1\uffff";
    static final String DFA108_maxS =
        "\1\u00cd\14\37\1\uffff\14\0\1\uffff";
    static final String DFA108_acceptS =
        "\15\uffff\1\2\14\uffff\1\1";
    static final String DFA108_specialS =
        "\16\uffff\1\2\1\4\1\0\1\11\1\6\1\1\1\7\1\10\1\3\1\5\1\12\1\13\1"+
        "\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\12\1\14\4\uffff\1\13\1\uffff\20\15\12\uffff\1\15\121\uffff"+
            "\1\15\4\uffff\1\15\13\uffff\1\15\1\6\1\7\1\10\1\11\32\uffff"+
            "\1\1\1\2\1\uffff\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_static.DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_static.DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_static.DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_static.DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_static.DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_static.DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_static.DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_static.DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "175:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA108_16 = input.LA(1);

                         
                        int index108_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA108_19 = input.LA(1);

                         
                        int index108_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA108_14 = input.LA(1);

                         
                        int index108_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA108_22 = input.LA(1);

                         
                        int index108_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_22);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA108_15 = input.LA(1);

                         
                        int index108_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_15);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA108_23 = input.LA(1);

                         
                        int index108_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_23);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA108_18 = input.LA(1);

                         
                        int index108_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA108_20 = input.LA(1);

                         
                        int index108_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA108_21 = input.LA(1);

                         
                        int index108_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA108_17 = input.LA(1);

                         
                        int index108_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_17);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA108_24 = input.LA(1);

                         
                        int index108_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_24);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA108_25 = input.LA(1);

                         
                        int index108_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred465_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index108_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA122_static {
    static final String DFA122_eotS =
        "\u00bf\uffff";
    static final String DFA122_eofS =
        "\1\1\u00be\uffff";
    static final String DFA122_minS =
        "\1\40\5\uffff\7\0\1\uffff\2\0\3\uffff\16\0\u009e\uffff";
    static final String DFA122_maxS =
        "\1\u00db\5\uffff\7\0\1\uffff\2\0\3\uffff\16\0\u009e\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\2\u00bc\uffff\1\1";
    static final String DFA122_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10\3\uffff\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\u009e\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\27\1\12\1\14\1\30\3\1\1\13\22\1\1\36\2\1\1\26\4\1\1\35\4"+
            "\1\1\32\5\1\1\34\4\1\1\33\12\1\1\40\37\1\1\17\7\1\1\24\16\1"+
            "\1\16\1\25\4\1\1\23\14\1\1\6\1\7\1\10\1\11\2\1\1\37\11\1\1\31"+
            "\44\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_static.DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_static.DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_static.DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_static.DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_static.DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_static.DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "()* loopback of 191:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA122_6 = input.LA(1);

                         
                        int index122_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA122_7 = input.LA(1);

                         
                        int index122_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA122_8 = input.LA(1);

                         
                        int index122_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA122_9 = input.LA(1);

                         
                        int index122_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA122_10 = input.LA(1);

                         
                        int index122_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA122_11 = input.LA(1);

                         
                        int index122_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA122_12 = input.LA(1);

                         
                        int index122_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA122_14 = input.LA(1);

                         
                        int index122_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_14);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA122_15 = input.LA(1);

                         
                        int index122_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_15);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA122_19 = input.LA(1);

                         
                        int index122_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_19);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA122_20 = input.LA(1);

                         
                        int index122_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_20);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA122_21 = input.LA(1);

                         
                        int index122_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_21);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA122_22 = input.LA(1);

                         
                        int index122_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_22);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA122_23 = input.LA(1);

                         
                        int index122_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_23);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA122_24 = input.LA(1);

                         
                        int index122_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_24);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA122_25 = input.LA(1);

                         
                        int index122_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_25);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA122_26 = input.LA(1);

                         
                        int index122_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_26);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA122_27 = input.LA(1);

                         
                        int index122_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_27);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA122_28 = input.LA(1);

                         
                        int index122_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_28);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA122_29 = input.LA(1);

                         
                        int index122_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_29);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA122_30 = input.LA(1);

                         
                        int index122_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_30);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA122_31 = input.LA(1);

                         
                        int index122_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_31);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA122_32 = input.LA(1);

                         
                        int index122_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred479_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index122_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\30\uffff";
    static final String DFA121_eofS =
        "\30\uffff";
    static final String DFA121_minS =
        "\1\40\20\uffff\1\0\6\uffff";
    static final String DFA121_maxS =
        "\1\u00b7\20\uffff\1\0\6\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA121_specialS =
        "\21\uffff\1\0\6\uffff}>";
    static final String[] DFA121_transitionS = {
            "\4\1\3\uffff\1\1\22\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\4\uffff\1\1\12\uffff\1\1\37\uffff\1\21\7\uffff"+
            "\1\1\16\uffff\1\27\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1"+
            "\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 191:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_17 = input.LA(1);

                         
                        int index121_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred478_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\36\uffff";
    static final String DFA128_eofS =
        "\1\1\35\uffff";
    static final String DFA128_minS =
        "\1\40\1\uffff\24\0\10\uffff";
    static final String DFA128_maxS =
        "\1\u00b7\1\uffff\24\0\10\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\11\24\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA128_specialS =
        "\2\uffff\1\22\1\15\1\11\1\12\1\3\1\13\1\0\1\17\1\14\1\4\1\2\1\10"+
        "\1\21\1\23\1\6\1\16\1\7\1\5\1\20\1\1\10\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\5\1\14\1\16\1\6\3\uffff\1\15\22\uffff\1\24\2\uffff\1\4\4"+
            "\uffff\1\23\4\uffff\1\17\5\uffff\1\22\4\uffff\1\20\12\uffff"+
            "\1\1\37\uffff\1\21\7\uffff\1\2\17\uffff\1\3\21\uffff\1\10\1"+
            "\11\1\12\1\13\2\uffff\1\25\11\uffff\1\7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()+ loopback of 198:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_8 = input.LA(1);

                         
                        int index128_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA128_21 = input.LA(1);

                         
                        int index128_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred492_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA128_12 = input.LA(1);

                         
                        int index128_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA128_6 = input.LA(1);

                         
                        int index128_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred485_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA128_11 = input.LA(1);

                         
                        int index128_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA128_19 = input.LA(1);

                         
                        int index128_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred490_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA128_16 = input.LA(1);

                         
                        int index128_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred488_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA128_18 = input.LA(1);

                         
                        int index128_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA128_13 = input.LA(1);

                         
                        int index128_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_13);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA128_4 = input.LA(1);

                         
                        int index128_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred485_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_4);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA128_5 = input.LA(1);

                         
                        int index128_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred485_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_5);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA128_7 = input.LA(1);

                         
                        int index128_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred485_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_7);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA128_10 = input.LA(1);

                         
                        int index128_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_10);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA128_3 = input.LA(1);

                         
                        int index128_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred485_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_3);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA128_17 = input.LA(1);

                         
                        int index128_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA128_9 = input.LA(1);

                         
                        int index128_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_9);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA128_20 = input.LA(1);

                         
                        int index128_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred491_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA128_14 = input.LA(1);

                         
                        int index128_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred486_ChemicalChunker()) ) {s = 24;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_14);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA128_2 = input.LA(1);

                         
                        int index128_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred485_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred489_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_2);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA128_15 = input.LA(1);

                         
                        int index128_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred487_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u00bf\uffff";
    static final String DFA132_eofS =
        "\1\6\u00be\uffff";
    static final String DFA132_minS =
        "\1\40\5\0\u00b9\uffff";
    static final String DFA132_maxS =
        "\1\u00db\5\0\u00b9\uffff";
    static final String DFA132_acceptS =
        "\6\uffff\1\2\u00b7\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u00b9\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\2\6\1\4\31\6\1\2\127\6\1\1\41\6\1\5\44\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "201:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred496_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_2 = input.LA(1);

                         
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred496_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred496_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA132_4 = input.LA(1);

                         
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred496_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA132_5 = input.LA(1);

                         
                        int index132_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred496_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index132_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\12\uffff";
    static final String DFA133_eofS =
        "\12\uffff";
    static final String DFA133_minS =
        "\1\40\1\37\2\uffff\1\74\1\37\3\uffff\1\74";
    static final String DFA133_maxS =
        "\1\u00b7\1\37\2\uffff\1\u00ad\1\37\3\uffff\1\u0095";
    static final String DFA133_acceptS =
        "\2\uffff\1\1\1\4\2\uffff\1\2\1\5\1\3\1\uffff";
    static final String DFA133_specialS =
        "\12\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\2\uffff\1\3\31\uffff\1\2\127\uffff\1\1\41\uffff\1\3",
            "\1\4",
            "",
            "",
            "\1\10\1\2\1\6\2\uffff\1\7\100\uffff\1\3\22\uffff\1\5\27\uffff"+
            "\1\3",
            "\1\11",
            "",
            "",
            "",
            "\1\10\1\2\1\6\2\uffff\1\7\123\uffff\1\5"
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "202:1: measurementtypes : ( molar | amount | mass | percent | volume );";
        }
    }
    static class DFA135_static {
    static final String DFA135_eotS =
        "\16\uffff";
    static final String DFA135_eofS =
        "\3\uffff\1\5\12\uffff";
    static final String DFA135_minS =
        "\1\115\1\37\1\uffff\1\40\1\37\1\uffff\2\37\1\115\2\0\3\uffff";
    static final String DFA135_maxS =
        "\1\u0085\1\37\1\uffff\1\u00db\1\37\1\uffff\2\37\1\115\2\0\3\uffff";
    static final String DFA135_acceptS =
        "\2\uffff\1\4\2\uffff\1\5\5\uffff\1\2\1\3\1\1";
    static final String DFA135_specialS =
        "\10\uffff\1\1\1\2\1\0\3\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1\67\uffff\1\2",
            "\1\3",
            "",
            "\55\5\1\6\60\5\1\7\1\5\1\4\133\5",
            "\1\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_static.DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_static.DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_static.DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_static.DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_static.DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_static.DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_static.DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "206:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA135_10 = input.LA(1);

                         
                        int index135_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred504_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index135_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA135_8 = input.LA(1);

                         
                        int index135_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA135_8==77) ) {s = 11;}

                        else if ( (synpred504_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index135_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA135_9 = input.LA(1);

                         
                        int index135_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred502_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index135_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA136_static {
    static final String DFA136_eotS =
        "\21\uffff";
    static final String DFA136_eofS =
        "\1\10\20\uffff";
    static final String DFA136_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA136_maxS =
        "\1\u00db\7\37\1\uffff\7\0\1\uffff";
    static final String DFA136_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA136_specialS =
        "\11\uffff\1\1\1\5\1\4\1\3\1\0\1\2\1\6\1\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\10\1\5\1\7\4\10\1\6\177\10\1\1\1\2\1\3\1\4\61\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_static.DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_static.DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_static.DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_static.DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_static.DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_static.DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_static.DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_static.DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "206:93: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA136_13 = input.LA(1);

                         
                        int index136_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA136_9 = input.LA(1);

                         
                        int index136_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA136_14 = input.LA(1);

                         
                        int index136_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA136_12 = input.LA(1);

                         
                        int index136_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA136_11 = input.LA(1);

                         
                        int index136_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA136_10 = input.LA(1);

                         
                        int index136_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA136_15 = input.LA(1);

                         
                        int index136_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred506_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index136_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA143_static {
    static final String DFA143_eotS =
        "\u00bf\uffff";
    static final String DFA143_eofS =
        "\1\4\u00be\uffff";
    static final String DFA143_minS =
        "\1\40\3\0\u00bb\uffff";
    static final String DFA143_maxS =
        "\1\u00db\3\0\u00bb\uffff";
    static final String DFA143_acceptS =
        "\4\uffff\1\2\u00b9\uffff\1\1";
    static final String DFA143_specialS =
        "\1\uffff\1\0\1\1\1\2\u00bb\uffff}>";
    static final String[] DFA143_transitionS = {
            "\135\4\1\3\7\4\1\2\17\4\1\1\106\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_static.DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_static.DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_static.DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_static.DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_static.DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_static.DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "222:42: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred515_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred515_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred515_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA144_static {
    static final String DFA144_eotS =
        "\20\uffff";
    static final String DFA144_eofS =
        "\20\uffff";
    static final String DFA144_minS =
        "\1\40\10\uffff\2\0\5\uffff";
    static final String DFA144_maxS =
        "\1\u00b7\10\uffff\2\0\5\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\3\uffff\1\2";
    static final String DFA144_specialS =
        "\11\uffff\1\0\1\1\5\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\13\2\1\1\13\3\uffff\1\1\25\uffff\1\13\17\uffff\1\1\57\uffff"+
            "\1\17\7\uffff\1\11\17\uffff\1\12\21\uffff\4\1\14\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_static.DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_static.DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_static.DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_static.DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_static.DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_static.DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 225:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred516_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred517_ChemicalChunker()) ) {s = 15;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred516_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred517_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA145_static {
    static final String DFA145_eotS =
        "\14\uffff";
    static final String DFA145_eofS =
        "\1\2\13\uffff";
    static final String DFA145_minS =
        "\1\40\1\0\1\uffff\10\0\1\uffff";
    static final String DFA145_maxS =
        "\1\u00db\1\0\1\uffff\10\0\1\uffff";
    static final String DFA145_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA145_specialS =
        "\1\uffff\1\7\1\uffff\1\3\1\1\1\10\1\6\1\0\1\4\1\2\1\5\1\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\2\1\7\1\11\4\2\1\10\45\2\1\12\67\2\1\1\41\2\1\3\1\4\1\5"+
            "\1\6\61\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_static.DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_static.DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_static.DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_static.DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_static.DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_static.DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_static.DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()+ loopback of 225:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA145_7 = input.LA(1);

                         
                        int index145_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA145_4 = input.LA(1);

                         
                        int index145_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA145_9 = input.LA(1);

                         
                        int index145_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA145_3 = input.LA(1);

                         
                        int index145_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_3);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA145_8 = input.LA(1);

                         
                        int index145_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA145_10 = input.LA(1);

                         
                        int index145_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA145_6 = input.LA(1);

                         
                        int index145_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_6);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA145_5 = input.LA(1);

                         
                        int index145_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred518_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA146_static {
    static final String DFA146_eotS =
        "\u00c1\uffff";
    static final String DFA146_eofS =
        "\1\1\u00c0\uffff";
    static final String DFA146_minS =
        "\1\40\2\uffff\1\0\15\uffff\1\0\1\uffff\5\0\u00a9\uffff";
    static final String DFA146_maxS =
        "\1\u00db\2\uffff\1\0\15\uffff\1\0\1\uffff\5\0\u00a9\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\4\u00bc\uffff\1\1\1\3\1\2";
    static final String DFA146_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\u00a9\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\25\2\1\1\26\31\1\1\24\77\1\1\3\7\1\1\21\17\1\1\23\41\1\1"+
            "\27\44\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_static.DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_static.DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_static.DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_static.DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_static.DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_static.DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()* loopback of 225:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred519_ChemicalChunker()) ) {s = 190;}

                        else if ( (synpred521_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred519_ChemicalChunker()) ) {s = 190;}

                        else if ( (synpred520_ChemicalChunker()) ) {s = 192;}

                        else if ( (synpred521_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA146_19 = input.LA(1);

                         
                        int index146_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred520_ChemicalChunker()) ) {s = 192;}

                        else if ( (synpred521_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA146_20 = input.LA(1);

                         
                        int index146_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred520_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA146_21 = input.LA(1);

                         
                        int index146_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred520_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred520_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA146_23 = input.LA(1);

                         
                        int index146_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred520_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA149_static {
    static final String DFA149_eotS =
        "\22\uffff";
    static final String DFA149_eofS =
        "\22\uffff";
    static final String DFA149_minS =
        "\1\40\7\0\12\uffff";
    static final String DFA149_maxS =
        "\1\u00b7\7\0\12\uffff";
    static final String DFA149_acceptS =
        "\10\uffff\1\3\7\uffff\1\1\1\2";
    static final String DFA149_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\12\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\25\uffff\1\3\17\uffff\1\10\57\uffff"+
            "\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_static.DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_static.DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_static.DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_static.DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_static.DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_static.DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "230:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA149_4 = input.LA(1);

                         
                        int index149_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA149_5 = input.LA(1);

                         
                        int index149_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA149_6 = input.LA(1);

                         
                        int index149_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA149_7 = input.LA(1);

                         
                        int index149_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred524_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred525_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index149_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\u00c1\uffff";
    static final String DFA153_eofS =
        "\1\1\u00c0\uffff";
    static final String DFA153_minS =
        "\1\40\2\uffff\1\0\15\uffff\1\0\1\uffff\5\0\u00a9\uffff";
    static final String DFA153_maxS =
        "\1\u00db\2\uffff\1\0\15\uffff\1\0\1\uffff\5\0\u00a9\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\4\u00bc\uffff\1\1\1\3\1\2";
    static final String DFA153_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\u00a9\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\25\2\1\1\26\31\1\1\24\77\1\1\3\7\1\1\21\17\1\1\23\41\1\1"+
            "\27\44\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()* loopback of 241:31: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_3 = input.LA(1);

                         
                        int index153_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred529_ChemicalChunker()) ) {s = 190;}

                        else if ( (synpred531_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA153_17 = input.LA(1);

                         
                        int index153_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred529_ChemicalChunker()) ) {s = 190;}

                        else if ( (synpred530_ChemicalChunker()) ) {s = 192;}

                        else if ( (synpred531_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA153_19 = input.LA(1);

                         
                        int index153_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred530_ChemicalChunker()) ) {s = 192;}

                        else if ( (synpred531_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA153_20 = input.LA(1);

                         
                        int index153_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred530_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA153_21 = input.LA(1);

                         
                        int index153_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred530_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA153_22 = input.LA(1);

                         
                        int index153_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred530_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_22);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA153_23 = input.LA(1);

                         
                        int index153_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred530_ChemicalChunker()) ) {s = 192;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index153_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA155_static {
    static final String DFA155_eotS =
        "\106\uffff";
    static final String DFA155_eofS =
        "\1\1\105\uffff";
    static final String DFA155_minS =
        "\1\40\1\uffff\103\0\1\uffff";
    static final String DFA155_maxS =
        "\1\u00db\1\uffff\103\0\1\uffff";
    static final String DFA155_acceptS =
        "\1\uffff\1\2\103\uffff\1\1";
    static final String DFA155_specialS =
        "\2\uffff\1\52\1\53\1\47\1\61\1\70\1\5\1\67\1\46\1\37\1\51\1\50"+
        "\1\22\1\62\1\66\1\7\1\73\1\21\1\41\1\65\1\44\1\31\1\25\1\35\1\15"+
        "\1\77\1\12\1\72\1\32\1\20\1\55\1\40\1\14\1\102\1\42\1\74\1\36\1"+
        "\45\1\2\1\34\1\63\1\54\1\13\1\30\1\100\1\3\1\33\1\75\1\17\1\1\1"+
        "\64\1\101\1\11\1\10\1\76\1\4\1\71\1\43\1\23\1\60\1\24\1\57\1\16"+
        "\1\0\1\56\1\6\1\27\1\26\1\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\16\1\7\1\11\1\17\1\70\1\42\1\1\1\10\1\22\20\1\1\37\1\31"+
            "\1\40\1\1\1\15\1\50\1\41\1\43\1\57\1\30\1\44\1\45\1\46\1\47"+
            "\1\26\1\51\1\52\1\53\1\54\1\55\1\21\4\1\1\27\1\66\11\1\1\33"+
            "\1\1\1\56\4\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\60\3\1\1"+
            "\75\1\1\1\36\1\65\3\1\1\34\1\1\1\2\5\1\1\67\1\1\1\12\17\1\1"+
            "\14\4\1\1\25\4\1\1\103\1\76\1\77\5\1\1\3\1\4\1\5\1\6\2\1\1\32"+
            "\1\1\1\35\2\1\1\13\4\1\1\20\6\1\1\23\1\24\14\1\1\100\10\1\1"+
            "\61\1\62\1\63\1\64\1\101\1\102\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_static.DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_static.DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_static.DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_static.DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_static.DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_static.DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_static.DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "()+ loopback of 247:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA155_64 = input.LA(1);

                         
                        int index155_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_64);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA155_50 = input.LA(1);

                         
                        int index155_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_50);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA155_39 = input.LA(1);

                         
                        int index155_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_39);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA155_46 = input.LA(1);

                         
                        int index155_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_46);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA155_56 = input.LA(1);

                         
                        int index155_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_56);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA155_7 = input.LA(1);

                         
                        int index155_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA155_66 = input.LA(1);

                         
                        int index155_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_66);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA155_16 = input.LA(1);

                         
                        int index155_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_16);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA155_54 = input.LA(1);

                         
                        int index155_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_54);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA155_53 = input.LA(1);

                         
                        int index155_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_53);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA155_27 = input.LA(1);

                         
                        int index155_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_27);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA155_43 = input.LA(1);

                         
                        int index155_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_43);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA155_33 = input.LA(1);

                         
                        int index155_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_33);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA155_25 = input.LA(1);

                         
                        int index155_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_25);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA155_63 = input.LA(1);

                         
                        int index155_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_63);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA155_49 = input.LA(1);

                         
                        int index155_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_49);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA155_30 = input.LA(1);

                         
                        int index155_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_30);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA155_18 = input.LA(1);

                         
                        int index155_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA155_13 = input.LA(1);

                         
                        int index155_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_13);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA155_59 = input.LA(1);

                         
                        int index155_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_59);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA155_61 = input.LA(1);

                         
                        int index155_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_61);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA155_23 = input.LA(1);

                         
                        int index155_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_23);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA155_68 = input.LA(1);

                         
                        int index155_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_68);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA155_67 = input.LA(1);

                         
                        int index155_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_67);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA155_44 = input.LA(1);

                         
                        int index155_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_44);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA155_22 = input.LA(1);

                         
                        int index155_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_22);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA155_29 = input.LA(1);

                         
                        int index155_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_29);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA155_47 = input.LA(1);

                         
                        int index155_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_47);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA155_40 = input.LA(1);

                         
                        int index155_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_40);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA155_24 = input.LA(1);

                         
                        int index155_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_24);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA155_37 = input.LA(1);

                         
                        int index155_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_37);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA155_10 = input.LA(1);

                         
                        int index155_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_10);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA155_32 = input.LA(1);

                         
                        int index155_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_32);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA155_19 = input.LA(1);

                         
                        int index155_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_19);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA155_35 = input.LA(1);

                         
                        int index155_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA155_58 = input.LA(1);

                         
                        int index155_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_58);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA155_21 = input.LA(1);

                         
                        int index155_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_21);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA155_38 = input.LA(1);

                         
                        int index155_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA155_9 = input.LA(1);

                         
                        int index155_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_9);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA155_4 = input.LA(1);

                         
                        int index155_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_4);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA155_12 = input.LA(1);

                         
                        int index155_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_12);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA155_11 = input.LA(1);

                         
                        int index155_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_11);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA155_2 = input.LA(1);

                         
                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA155_42 = input.LA(1);

                         
                        int index155_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_42);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA155_31 = input.LA(1);

                         
                        int index155_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_31);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA155_65 = input.LA(1);

                         
                        int index155_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_65);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA155_62 = input.LA(1);

                         
                        int index155_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_62);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA155_60 = input.LA(1);

                         
                        int index155_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_60);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA155_5 = input.LA(1);

                         
                        int index155_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_5);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA155_14 = input.LA(1);

                         
                        int index155_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_14);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA155_41 = input.LA(1);

                         
                        int index155_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_41);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA155_51 = input.LA(1);

                         
                        int index155_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_51);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA155_20 = input.LA(1);

                         
                        int index155_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_20);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA155_15 = input.LA(1);

                         
                        int index155_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_15);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA155_8 = input.LA(1);

                         
                        int index155_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_8);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA155_6 = input.LA(1);

                         
                        int index155_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_6);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA155_57 = input.LA(1);

                         
                        int index155_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_57);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA155_28 = input.LA(1);

                         
                        int index155_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_28);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA155_17 = input.LA(1);

                         
                        int index155_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_17);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA155_36 = input.LA(1);

                         
                        int index155_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_36);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA155_48 = input.LA(1);

                         
                        int index155_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_48);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA155_55 = input.LA(1);

                         
                        int index155_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_55);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA155_26 = input.LA(1);

                         
                        int index155_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_26);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA155_45 = input.LA(1);

                         
                        int index155_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_45);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA155_52 = input.LA(1);

                         
                        int index155_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_52);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA155_34 = input.LA(1);

                         
                        int index155_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred533_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index155_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA158_static {
    static final String DFA158_eotS =
        "\u00c0\uffff";
    static final String DFA158_eofS =
        "\1\1\u00bf\uffff";
    static final String DFA158_minS =
        "\1\40\2\uffff\1\0\15\uffff\1\0\1\uffff\5\0\u00a8\uffff";
    static final String DFA158_maxS =
        "\1\u00db\2\uffff\1\0\15\uffff\1\0\1\uffff\5\0\u00a8\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\3\u00bc\uffff\1\2\1\1";
    static final String DFA158_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\u00a8\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\25\2\1\1\26\31\1\1\24\77\1\1\3\7\1\1\21\17\1\1\23\41\1\1"+
            "\27\44\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_static.DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_static.DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_static.DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_static.DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_static.DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_static.DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_static.DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_static.DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 254:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA158_3 = input.LA(1);

                         
                        int index158_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred537_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA158_17 = input.LA(1);

                         
                        int index158_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred536_ChemicalChunker()) ) {s = 191;}

                        else if ( (synpred537_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA158_19 = input.LA(1);

                         
                        int index158_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred536_ChemicalChunker()) ) {s = 191;}

                        else if ( (synpred537_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA158_20 = input.LA(1);

                         
                        int index158_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred536_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA158_21 = input.LA(1);

                         
                        int index158_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred536_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA158_22 = input.LA(1);

                         
                        int index158_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred536_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_22);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA158_23 = input.LA(1);

                         
                        int index158_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred536_ChemicalChunker()) ) {s = 191;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA159_static {
    static final String DFA159_eotS =
        "\14\uffff";
    static final String DFA159_eofS =
        "\14\uffff";
    static final String DFA159_minS =
        "\1\40\1\uffff\6\0\4\uffff";
    static final String DFA159_maxS =
        "\1\u00b7\1\uffff\6\0\4\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\1\6\uffff\1\5\1\2\1\3\1\4";
    static final String DFA159_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\4\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\5\2\uffff\1\6\4\uffff\1\1\24\uffff\1\4\77\uffff\1\10\7\uffff"+
            "\1\2\17\uffff\1\3\41\uffff\1\7",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_static.DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_static.DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_static.DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_static.DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_static.DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_static.DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_static.DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_static.DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "257:3: ( unnamedmoleculeamount5 | unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA159_2 = input.LA(1);

                         
                        int index159_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred539_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred540_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred541_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index159_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA159_3 = input.LA(1);

                         
                        int index159_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred539_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred541_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index159_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA159_4 = input.LA(1);

                         
                        int index159_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred539_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred541_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index159_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA159_5 = input.LA(1);

                         
                        int index159_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred539_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred540_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred541_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index159_5);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA159_6 = input.LA(1);

                         
                        int index159_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred539_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred541_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index159_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA159_7 = input.LA(1);

                         
                        int index159_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred539_ChemicalChunker()) ) {s = 9;}

                        else if ( (synpred541_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index159_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA164_static {
    static final String DFA164_eotS =
        "\u00bf\uffff";
    static final String DFA164_eofS =
        "\1\1\u00be\uffff";
    static final String DFA164_minS =
        "\1\40\2\uffff\1\0\u00bb\uffff";
    static final String DFA164_maxS =
        "\1\u00db\2\uffff\1\0\u00bb\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\2\u00bc\uffff\1\1";
    static final String DFA164_specialS =
        "\3\uffff\1\0\u00bb\uffff}>";
    static final String[] DFA164_transitionS = {
            "\135\1\1\3\136\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_static.DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_static.DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_static.DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_static.DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_static.DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_static.DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_static.DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_static.DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()* loopback of 267:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA164_3 = input.LA(1);

                         
                        int index164_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred546_ChemicalChunker()) ) {s = 190;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA168_static {
    static final String DFA168_eotS =
        "\112\uffff";
    static final String DFA168_eofS =
        "\112\uffff";
    static final String DFA168_minS =
        "\1\40\23\uffff\1\0\65\uffff";
    static final String DFA168_maxS =
        "\1\u00db\23\uffff\1\0\65\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA168_specialS =
        "\24\uffff\1\0\65\uffff}>";
    static final String[] DFA168_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\3\1\1\uffff\21\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\24\5\uffff\1\1\1\uffff\1\1\16\uffff\1\111\1\1\4\uffff\1\1"+
            "\4\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\4\uffff\1\1\6\uffff\2\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1"+
            "\10\uffff\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_static.DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_static.DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_static.DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_static.DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_static.DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_static.DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA168_20 = input.LA(1);

                         
                        int index168_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index168_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\21\uffff";
    static final String DFA169_eofS =
        "\21\uffff";
    static final String DFA169_minS =
        "\1\40\1\uffff\7\37\1\uffff\7\0";
    static final String DFA169_maxS =
        "\1\u00db\1\uffff\7\37\1\uffff\7\0";
    static final String DFA169_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA169_specialS =
        "\12\uffff\1\0\1\1\1\2\1\4\1\3\1\6\1\5}>";
    static final String[] DFA169_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\1\1\20\uffff\3\1\1\uffff\21\1"+
            "\4\uffff\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2"+
            "\1\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\4\uffff\1\1\6\uffff\2\1\5\uffff"+
            "\2\11\1\uffff\2\11\1\uffff\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()* loopback of 75:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_10 = input.LA(1);

                         
                        int index169_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_11 = input.LA(1);

                         
                        int index169_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_12 = input.LA(1);

                         
                        int index169_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_14 = input.LA(1);

                         
                        int index169_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA169_13 = input.LA(1);

                         
                        int index169_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA169_16 = input.LA(1);

                         
                        int index169_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_16);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA169_15 = input.LA(1);

                         
                        int index169_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index169_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA170_static {
    static final String DFA170_eotS =
        "\110\uffff";
    static final String DFA170_eofS =
        "\110\uffff";
    static final String DFA170_minS =
        "\1\40\103\0\4\uffff";
    static final String DFA170_maxS =
        "\1\u00db\103\0\4\uffff";
    static final String DFA170_acceptS =
        "\104\uffff\1\1\1\2\1\4\1\3";
    static final String DFA170_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\4\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\14\1\6\1\10\1\15\1\67\1\41\1\uffff\1\7\1\21\20\uffff\1\36"+
            "\1\30\1\37\1\uffff\1\13\1\47\1\40\1\42\1\56\1\27\1\43\1\44\1"+
            "\45\1\46\1\25\1\50\1\51\1\52\1\53\1\54\1\20\4\uffff\1\26\1\65"+
            "\11\uffff\1\32\1\uffff\1\55\4\uffff\1\70\1\uffff\1\71\1\uffff"+
            "\1\72\5\uffff\1\73\1\uffff\1\57\3\uffff\1\74\1\uffff\1\35\1"+
            "\64\3\uffff\1\33\1\uffff\1\17\5\uffff\1\66\1\uffff\1\1\17\uffff"+
            "\1\12\4\uffff\1\24\4\uffff\1\102\1\75\1\76\5\uffff\1\2\1\3\1"+
            "\4\1\5\2\uffff\1\31\1\uffff\1\34\2\uffff\1\11\4\uffff\1\16\6"+
            "\uffff\1\22\1\23\14\uffff\1\77\10\uffff\1\60\1\61\1\62\1\63"+
            "\1\100\1\101\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_static.DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_static.DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_static.DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_static.DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_static.DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_static.DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_static.DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_static.DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "75:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA170_1 = input.LA(1);

                         
                        int index170_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA170_2 = input.LA(1);

                         
                        int index170_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA170_3 = input.LA(1);

                         
                        int index170_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA170_4 = input.LA(1);

                         
                        int index170_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA170_5 = input.LA(1);

                         
                        int index170_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA170_6 = input.LA(1);

                         
                        int index170_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA170_7 = input.LA(1);

                         
                        int index170_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA170_8 = input.LA(1);

                         
                        int index170_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA170_9 = input.LA(1);

                         
                        int index170_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA170_10 = input.LA(1);

                         
                        int index170_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA170_11 = input.LA(1);

                         
                        int index170_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA170_12 = input.LA(1);

                         
                        int index170_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA170_13 = input.LA(1);

                         
                        int index170_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA170_14 = input.LA(1);

                         
                        int index170_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA170_15 = input.LA(1);

                         
                        int index170_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA170_16 = input.LA(1);

                         
                        int index170_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA170_17 = input.LA(1);

                         
                        int index170_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA170_18 = input.LA(1);

                         
                        int index170_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA170_19 = input.LA(1);

                         
                        int index170_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA170_20 = input.LA(1);

                         
                        int index170_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA170_21 = input.LA(1);

                         
                        int index170_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA170_22 = input.LA(1);

                         
                        int index170_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA170_23 = input.LA(1);

                         
                        int index170_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA170_24 = input.LA(1);

                         
                        int index170_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA170_25 = input.LA(1);

                         
                        int index170_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA170_26 = input.LA(1);

                         
                        int index170_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA170_27 = input.LA(1);

                         
                        int index170_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA170_28 = input.LA(1);

                         
                        int index170_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA170_29 = input.LA(1);

                         
                        int index170_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA170_30 = input.LA(1);

                         
                        int index170_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA170_31 = input.LA(1);

                         
                        int index170_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA170_32 = input.LA(1);

                         
                        int index170_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA170_33 = input.LA(1);

                         
                        int index170_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA170_34 = input.LA(1);

                         
                        int index170_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA170_35 = input.LA(1);

                         
                        int index170_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA170_36 = input.LA(1);

                         
                        int index170_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA170_37 = input.LA(1);

                         
                        int index170_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA170_38 = input.LA(1);

                         
                        int index170_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA170_39 = input.LA(1);

                         
                        int index170_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA170_40 = input.LA(1);

                         
                        int index170_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA170_41 = input.LA(1);

                         
                        int index170_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA170_42 = input.LA(1);

                         
                        int index170_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA170_43 = input.LA(1);

                         
                        int index170_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA170_44 = input.LA(1);

                         
                        int index170_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA170_45 = input.LA(1);

                         
                        int index170_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA170_46 = input.LA(1);

                         
                        int index170_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA170_47 = input.LA(1);

                         
                        int index170_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA170_48 = input.LA(1);

                         
                        int index170_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA170_49 = input.LA(1);

                         
                        int index170_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA170_50 = input.LA(1);

                         
                        int index170_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA170_51 = input.LA(1);

                         
                        int index170_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA170_52 = input.LA(1);

                         
                        int index170_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA170_53 = input.LA(1);

                         
                        int index170_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA170_54 = input.LA(1);

                         
                        int index170_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA170_55 = input.LA(1);

                         
                        int index170_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA170_56 = input.LA(1);

                         
                        int index170_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA170_57 = input.LA(1);

                         
                        int index170_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA170_58 = input.LA(1);

                         
                        int index170_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA170_59 = input.LA(1);

                         
                        int index170_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA170_60 = input.LA(1);

                         
                        int index170_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA170_61 = input.LA(1);

                         
                        int index170_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA170_62 = input.LA(1);

                         
                        int index170_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA170_63 = input.LA(1);

                         
                        int index170_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA170_64 = input.LA(1);

                         
                        int index170_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA170_65 = input.LA(1);

                         
                        int index170_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_65);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA170_66 = input.LA(1);

                         
                        int index170_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_66);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA170_67 = input.LA(1);

                         
                        int index170_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index170_67);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA179_static {
    static final String DFA179_eotS =
        "\21\uffff";
    static final String DFA179_eofS =
        "\21\uffff";
    static final String DFA179_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA179_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA179_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA179_specialS =
        "\11\uffff\1\0\1\6\1\4\1\3\1\5\1\1\1\2\1\uffff}>";
    static final String[] DFA179_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_static.DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_static.DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_static.DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_static.DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_static.DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_static.DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_static.DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_static.DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "82:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA179_9 = input.LA(1);

                         
                        int index179_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA179_14 = input.LA(1);

                         
                        int index179_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA179_15 = input.LA(1);

                         
                        int index179_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA179_12 = input.LA(1);

                         
                        int index179_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA179_11 = input.LA(1);

                         
                        int index179_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA179_13 = input.LA(1);

                         
                        int index179_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_13);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA179_10 = input.LA(1);

                         
                        int index179_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA181_static {
    static final String DFA181_eotS =
        "\21\uffff";
    static final String DFA181_eofS =
        "\21\uffff";
    static final String DFA181_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA181_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA181_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA181_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_static.DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_static.DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_static.DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_static.DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_static.DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_static.DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_static.DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_static.DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "82:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA181_1 = input.LA(1);

                         
                        int index181_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA181_2 = input.LA(1);

                         
                        int index181_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA181_3 = input.LA(1);

                         
                        int index181_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA181_4 = input.LA(1);

                         
                        int index181_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA181_5 = input.LA(1);

                         
                        int index181_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA181_6 = input.LA(1);

                         
                        int index181_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA181_7 = input.LA(1);

                         
                        int index181_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index181_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA184_static {
    static final String DFA184_eotS =
        "\21\uffff";
    static final String DFA184_eofS =
        "\21\uffff";
    static final String DFA184_minS =
        "\1\40\7\37\1\uffff\7\0\1\uffff";
    static final String DFA184_maxS =
        "\1\u00b7\7\37\1\uffff\7\0\1\uffff";
    static final String DFA184_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA184_specialS =
        "\11\uffff\1\1\1\4\1\5\1\6\1\3\1\0\1\2\1\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\1\10\24\uffff\1\10\17\uffff"+
            "\1\10\57\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1"+
            "\1\2\1\3\1\4\7\uffff\1\10\4\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_static.DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_static.DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_static.DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_static.DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_static.DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_static.DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_static.DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_static.DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "85:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA184_14 = input.LA(1);

                         
                        int index184_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA184_9 = input.LA(1);

                         
                        int index184_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA184_15 = input.LA(1);

                         
                        int index184_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA184_13 = input.LA(1);

                         
                        int index184_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA184_10 = input.LA(1);

                         
                        int index184_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA184_11 = input.LA(1);

                         
                        int index184_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA184_12 = input.LA(1);

                         
                        int index184_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index184_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA186_static {
    static final String DFA186_eotS =
        "\21\uffff";
    static final String DFA186_eofS =
        "\21\uffff";
    static final String DFA186_minS =
        "\1\40\7\0\11\uffff";
    static final String DFA186_maxS =
        "\1\u00b7\7\0\11\uffff";
    static final String DFA186_acceptS =
        "\10\uffff\1\1\7\uffff\1\2";
    static final String DFA186_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\11\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\4\2\10\1\5\3\uffff\1\10\1\20\24\uffff\1\3\17\uffff\1\10"+
            "\57\uffff\1\7\7\uffff\1\1\17\uffff\1\2\21\uffff\4\10\14\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_static.DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_static.DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_static.DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_static.DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_static.DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_static.DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_static.DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_static.DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "85:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA186_1 = input.LA(1);

                         
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA186_2 = input.LA(1);

                         
                        int index186_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA186_3 = input.LA(1);

                         
                        int index186_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA186_4 = input.LA(1);

                         
                        int index186_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA186_5 = input.LA(1);

                         
                        int index186_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA186_6 = input.LA(1);

                         
                        int index186_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA186_7 = input.LA(1);

                         
                        int index186_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred166_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index186_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA200_static {
    static final String DFA200_eotS =
        "\30\uffff";
    static final String DFA200_eofS =
        "\30\uffff";
    static final String DFA200_minS =
        "\1\40\20\uffff\1\0\6\uffff";
    static final String DFA200_maxS =
        "\1\u00b7\20\uffff\1\0\6\uffff";
    static final String DFA200_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA200_specialS =
        "\21\uffff\1\0\6\uffff}>";
    static final String[] DFA200_transitionS = {
            "\4\1\3\uffff\1\1\22\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\4\uffff\1\1\12\uffff\1\1\37\uffff\1\21\7\uffff"+
            "\1\1\16\uffff\1\27\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1"+
            "\11\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_static.DFA200_eotS);
    static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_static.DFA200_eofS);
    static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_static.DFA200_minS);
    static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_static.DFA200_maxS);
    static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_static.DFA200_acceptS);
    static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_static.DFA200_specialS);
    static final short[][] DFA200_transition;

    static {
        int numStates = DFA200_static.DFA200_transitionS.length;
        DFA200_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA200_transition[i] = DFA.unpackEncodedString(DFA200_static.DFA200_transitionS[i]);
        }
    }

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = DFA200_eot;
            this.eof = DFA200_eof;
            this.min = DFA200_min;
            this.max = DFA200_max;
            this.accept = DFA200_accept;
            this.special = DFA200_special;
            this.transition = DFA200_transition;
        }
        public String getDescription() {
            return "()* loopback of 191:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA200_17 = input.LA(1);

                         
                        int index200_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred478_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index200_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentences_in_document178_static {
    public static final BitSet FOLLOW_sentences_in_document178 = new BitSet(new long[]{0xFFFFFFFF00000002L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFDL,0x000000000FFFFFFFL});

    }static class FOLLOW_sentenceStructure_in_sentences199_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences199 = new BitSet(new long[]{0xFFFFFFFF00000002L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences201_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences201 = new BitSet(new long[]{0xFFFFFFFF00000002L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});

    }static class FOLLOW_stop_in_sentences205_static {
    public static final BitSet FOLLOW_stop_in_sentences205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_sentenceStructure215_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure215 = new BitSet(new long[]{0xEFFFFFBF00000002L,0xBFFFFFFFFFFFFFFFL,0xC084AFC38C300028L,0x000000000FFFBBE0L});

    }static class FOLLOW_verbphrase_in_sentenceStructure217_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure217 = new BitSet(new long[]{0xEFFFFFBF00000002L,0xBFFFFFFFFFFFFFFFL,0xC084AFC38C300028L,0x000000000FFFBBE0L});

    }static class FOLLOW_prepphrase_in_sentenceStructure219_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure219 = new BitSet(new long[]{0xEFFFFFBF00000002L,0xBFFFFFFFFFFFFFFFL,0xC084AFC38C300028L,0x000000000FFFBBE0L});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure221_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure221 = new BitSet(new long[]{0xEFFFFFBF00000002L,0xBFFFFFFFFFFFFFFFL,0xC084AFC38C300028L,0x000000000FFFBBE0L});

    }static class FOLLOW_advAdj_in_sentenceStructure226_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure226 = new BitSet(new long[]{0x0000008600000002L,0x3000000000000000L,0x0000078000100000L,0x0000000000000BE0L});

    }static class FOLLOW_colon_in_sentenceStructure228_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure228 = new BitSet(new long[]{0x0000008600000002L,0x3000000000000000L,0x0000078000100000L,0x0000000000000BE0L});

    }static class FOLLOW_conjunction_in_sentenceStructure233_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure233 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L,0x0000000000000080L});

    }static class FOLLOW_rbconj_in_sentenceStructure235_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure235 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L,0x0000000000000080L});

    }static class FOLLOW_comma_in_sentenceStructure237_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure237 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L,0x0000000000000080L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase250_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_unmatchedToken270_static {
    public static final BitSet FOLLOW_number_in_unmatchedToken270 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken272_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken272 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_unmatchedToken274_static {
    public static final BitSet FOLLOW_oscaront_in_unmatchedToken274 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken276_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken278_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken280_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken282_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken286_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken288_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken288 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken290_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken290 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken292_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken304_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken306_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken348_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken348 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken350_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_abl_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_abl_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_abn_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_abn_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_abx_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_abx_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ap_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_ap_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_at_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_at_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_be_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_be_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bed_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_bed_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bedz_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_bedz_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_beg_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_beg_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bem_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_bem_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ben_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_ben_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ber_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_ber_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bez_in_unmatchedToken400_static {
    public static final BitSet FOLLOW_bez_in_unmatchedToken400 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cs_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_cs_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dotok_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_dotok_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dod_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_dod_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_doz_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_doz_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dti_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_dti_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dts_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_dts_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtx_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_dtx_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fwin_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_fwin_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_hv_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_hv_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_hvd_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_hvd_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_hvg_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_hvg_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_hvn_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_hvn_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nc_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_nc_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_poss_in_unmatchedToken440_static {
    public static final BitSet FOLLOW_nn_poss_in_unmatchedToken440 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken442_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_poss_in_unmatchedToken444_static {
    public static final BitSet FOLLOW_nns_poss_in_unmatchedToken444 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_np_in_unmatchedToken446_static {
    public static final BitSet FOLLOW_np_in_unmatchedToken446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken448_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_np_poss_in_unmatchedToken450_static {
    public static final BitSet FOLLOW_np_poss_in_unmatchedToken450 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nps_in_unmatchedToken452_static {
    public static final BitSet FOLLOW_nps_in_unmatchedToken452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nps_poss_in_unmatchedToken454_static {
    public static final BitSet FOLLOW_nps_poss_in_unmatchedToken454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nr_in_unmatchedToken456_static {
    public static final BitSet FOLLOW_nr_in_unmatchedToken456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pn_in_unmatchedToken458_static {
    public static final BitSet FOLLOW_pn_in_unmatchedToken458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pn_poss_in_unmatchedToken460_static {
    public static final BitSet FOLLOW_pn_poss_in_unmatchedToken460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pp_poss_in_unmatchedToken464_static {
    public static final BitSet FOLLOW_pp_poss_in_unmatchedToken464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pp_poss_poss_in_unmatchedToken466_static {
    public static final BitSet FOLLOW_pp_poss_poss_in_unmatchedToken466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ppl_in_unmatchedToken468_static {
    public static final BitSet FOLLOW_ppl_in_unmatchedToken468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ppls_in_unmatchedToken470_static {
    public static final BitSet FOLLOW_ppls_in_unmatchedToken470 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken472_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken472 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken474_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken474 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ppo_in_unmatchedToken476_static {
    public static final BitSet FOLLOW_ppo_in_unmatchedToken476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pps_in_unmatchedToken478_static {
    public static final BitSet FOLLOW_pps_in_unmatchedToken478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ppss_in_unmatchedToken480_static {
    public static final BitSet FOLLOW_ppss_in_unmatchedToken480 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ql_in_unmatchedToken482_static {
    public static final BitSet FOLLOW_ql_in_unmatchedToken482 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_qlp_in_unmatchedToken484_static {
    public static final BitSet FOLLOW_qlp_in_unmatchedToken484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken486_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rn_in_unmatchedToken488_static {
    public static final BitSet FOLLOW_rn_in_unmatchedToken488 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken490_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken492_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken494_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken496_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase507_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase507 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure530_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure532_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1541_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2561_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2561 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_dt_in_nounphraseStructure2564_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2564 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2567_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2567 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2572_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2572 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_noun_in_nounphraseStructure2574_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2574 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_number_in_nounphraseStructure2576_static {
    public static final BitSet FOLLOW_number_in_nounphraseStructure2576 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_ratio_in_nounphraseStructure2578_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2578 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2586_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2586 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2589_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2589 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2593_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2593 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_noun_in_nounphraseStructure2595_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2595 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_number_in_nounphraseStructure2597_static {
    public static final BitSet FOLLOW_number_in_nounphraseStructure2597 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_ratio_in_nounphraseStructure2599_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2599 = new BitSet(new long[]{0xEE0411BF00000002L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2609_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2609 = new BitSet(new long[]{0x2004118F00000002L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2612_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2612 = new BitSet(new long[]{0x2004118F00000002L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2615_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2615 = new BitSet(new long[]{0x0004100000000002L});

    }static class FOLLOW_dissolveStructure1_in_dissolvePhrase630_static {
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure2_in_dissolvePhrase632_static {
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure3_in_dissolvePhrase634_static {
    public static final BitSet FOLLOW_dissolveStructure3_in_dissolvePhrase634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolveStructure1660_static {
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1660 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_adj_in_dissolveStructure1662_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure1662 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_dissolveStructure1665_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1665 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure1669_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1669 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure1671_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1671 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_inin_in_dissolveStructure1675_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure1675 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078008200020L});

    }static class FOLLOW_dtTHE_in_dissolveStructure1677_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure1677 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_adj_in_dissolveStructure1680_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure1680 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_dissolveStructure1683_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1683 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure1687_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1687 = new BitSet(new long[]{0x0000100000000000L,0x2000000000000000L,0x0000000000100040L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure1689_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1689 = new BitSet(new long[]{0x0000100000000000L,0x2000000000000000L,0x0000000000100040L});

    }static class FOLLOW_conjunction_in_dissolveStructure1693_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure1693 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure1695_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1695 = new BitSet(new long[]{0x0000100000000000L,0x2000000000000000L,0x0000000000100040L});

    }static class FOLLOW_rrb_in_dissolveStructure1701_static {
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure2710_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure2710 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_dissolveStructure2713_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2713 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure2717_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2717 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure2719_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2719 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_inin_in_dissolveStructure2723_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure2723 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078008200020L});

    }static class FOLLOW_dtTHE_in_dissolveStructure2725_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure2725 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_adj_in_dissolveStructure2728_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure2728 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_dissolveStructure2731_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2731 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure2735_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2735 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure2737_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2737 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_conjunction_in_dissolveStructure2741_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure2741 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure2743_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2743 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_adj_in_dissolveStructure3757_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure3757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure3760_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3760 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002004L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure3763_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3763 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure3765_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3765 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_nnchementity_in_dissolveStructure3767_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure3767 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_inin_in_dissolveStructure3771_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure3771 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078008200020L});

    }static class FOLLOW_dtTHE_in_dissolveStructure3773_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure3773 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_adj_in_dissolveStructure3776_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure3776 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_dissolveStructure3779_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3779 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure3783_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3783 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure3785_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3785 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_conjunction_in_dissolveStructure3789_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure3789 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_dissolveStructure3791_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3791 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_cc_in_conjunction808_static {
    public static final BitSet FOLLOW_cc_in_conjunction808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction810_static {
    public static final BitSet FOLLOW_comma_in_conjunction810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase822_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase822 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure840_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure840 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_to_in_verbphraseStructure843_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure843 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_inAll_in_verbphraseStructure846_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure846 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_inafter_in_verbphraseStructure849_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure849 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_md_in_verbphraseStructure853_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure853 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_rbconj_in_verbphraseStructure856_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure856 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_adv_in_verbphraseStructure859_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure859 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_adj_in_verbphraseStructure862_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure862 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_verb_in_verbphraseStructure865_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure865 = new BitSet(new long[]{0x09FFFE8600000002L,0xA76EBEAF5FF3C008L,0x00000FC004300000L,0x00000000001FABE0L});

    }static class FOLLOW_md_in_verbphraseStructure868_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure868 = new BitSet(new long[]{0x09FFFE8600000002L,0xA76EBEAF5FF3C008L,0x00000FC004300000L,0x00000000001FABE0L});

    }static class FOLLOW_adv_in_verbphraseStructure871_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure871 = new BitSet(new long[]{0x09FFFE8600000002L,0xA76EBEAF5FF3C008L,0x00000FC004300000L,0x00000000001FABE0L});

    }static class FOLLOW_adj_in_verbphraseStructure874_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure874 = new BitSet(new long[]{0x09FFFE8600000002L,0xA76EBEAF5FF3C008L,0x00000FC004300000L,0x00000000001FABE0L});

    }static class FOLLOW_neg_in_verbphraseStructure877_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure877 = new BitSet(new long[]{0x09FFFE8600000002L,0xA76EBEAF5FF3C008L,0x00000FC004300000L,0x00000000001FABE0L});

    }static class FOLLOW_inoff_in_verbphraseStructure883_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure883 = new BitSet(new long[]{0x09FFFE8600000002L,0xA000000000000008L,0x000007C004300000L,0x0000000000002B60L});

    }static class FOLLOW_cc_in_verbphraseStructure887_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure887 = new BitSet(new long[]{0x09FFFE8600000000L,0xA000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_comma_in_verbphraseStructure890_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure890 = new BitSet(new long[]{0x09FFFE8600000000L,0x8000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure893_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure893 = new BitSet(new long[]{0x09FFFE8600000002L,0xA000000000000008L,0x000007C004300000L,0x0000000000002B60L});

    }static class FOLLOW_vb_in_verb905_static {
    public static final BitSet FOLLOW_vb_in_verb905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb907_static {
    public static final BitSet FOLLOW_vbp_in_verb907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb909_static {
    public static final BitSet FOLLOW_vbg_in_verb909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb911_static {
    public static final BitSet FOLLOW_vbd_in_verb911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb913_static {
    public static final BitSet FOLLOW_vbz_in_verb913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb915_static {
    public static final BitSet FOLLOW_vbn_in_verb915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb917_static {
    public static final BitSet FOLLOW_vbuse_in_verb917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb919_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb921_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb923_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb925_static {
    public static final BitSet FOLLOW_vbsubject_in_verb925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb927_static {
    public static final BitSet FOLLOW_vbadd_in_verb927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb929_static {
    public static final BitSet FOLLOW_vbdilute_in_verb929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb931_static {
    public static final BitSet FOLLOW_vbcharge_in_verb931 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb933_static {
    public static final BitSet FOLLOW_vbcontain_in_verb933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb935_static {
    public static final BitSet FOLLOW_vbdrop_in_verb935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb937_static {
    public static final BitSet FOLLOW_vbfill_in_verb937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb939_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb941_static {
    public static final BitSet FOLLOW_vbtreat_in_verb941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb943_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb945_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb947_static {
    public static final BitSet FOLLOW_vbcool_in_verb947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb949_static {
    public static final BitSet FOLLOW_vbdegass_in_verb949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb951_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb953_static {
    public static final BitSet FOLLOW_vbdry_in_verb953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb955_static {
    public static final BitSet FOLLOW_vbextract_in_verb955 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb957_static {
    public static final BitSet FOLLOW_vbfilter_in_verb957 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb960_static {
    public static final BitSet FOLLOW_vbheat_in_verb960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb962_static {
    public static final BitSet FOLLOW_vbincrease_in_verb962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb964_static {
    public static final BitSet FOLLOW_vbpartition_in_verb964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb966_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb968_static {
    public static final BitSet FOLLOW_vbpurify_in_verb968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb970_static {
    public static final BitSet FOLLOW_vbquench_in_verb970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb972_static {
    public static final BitSet FOLLOW_vbrecover_in_verb972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb974_static {
    public static final BitSet FOLLOW_vbremove_in_verb974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb976_static {
    public static final BitSet FOLLOW_vbstir_in_verb976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb978_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb980_static {
    public static final BitSet FOLLOW_vbwait_in_verb980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb982_static {
    public static final BitSet FOLLOW_vbwash_in_verb982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb984_static {
    public static final BitSet FOLLOW_vbyield_in_verb984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb986_static {
    public static final BitSet FOLLOW_vbchange_in_verb986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb995_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_cc_in_degassMultiVerb997_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb997 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb999_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_number1006_static {
    public static final BitSet FOLLOW_cd_in_number1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_number1008_static {
    public static final BitSet FOLLOW_cdAlphanum_in_number1008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcpr_in_number1010_static {
    public static final BitSet FOLLOW_oscarcpr_in_number1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_od_in_number1012_static {
    public static final BitSet FOLLOW_od_in_number1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause1020_static {
    public static final BitSet FOLLOW_wdt_in_clause1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause1022_static {
    public static final BitSet FOLLOW_wp_poss_in_clause1022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wpo_in_clause1024_static {
    public static final BitSet FOLLOW_wpo_in_clause1024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wps_in_clause1026_static {
    public static final BitSet FOLLOW_wps_in_clause1026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wql_in_clause1028_static {
    public static final BitSet FOLLOW_wql_in_clause1028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause1030_static {
    public static final BitSet FOLLOW_wrb_in_clause1030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause1032_static {
    public static final BitSet FOLLOW_ex_in_clause1032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause1034_static {
    public static final BitSet FOLLOW_pdt_in_clause1034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun1042_static {
    public static final BitSet FOLLOW_nounStructure_in_noun1042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_dash_in_noun1045_static {
    public static final BitSet FOLLOW_dash_in_noun1045 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_nounStructure_in_noun1047_static {
    public static final BitSet FOLLOW_nounStructure_in_noun1047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_prp_in_nounStructure1058_static {
    public static final BitSet FOLLOW_prp_in_nounStructure1058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure1060_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure1060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure1062_static {
    public static final BitSet FOLLOW_citation_in_nounStructure1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure1064_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure1066_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure1068_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure1068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure1070_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure1070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure1072_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure1072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1074_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure1076_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure1076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure1078_static {
    public static final BitSet FOLLOW_nn_in_nounStructure1078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure1080_static {
    public static final BitSet FOLLOW_nns_in_nounStructure1080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure1082_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure1082 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure1084_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure1086_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure1088_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcpr_in_nounStructure1090_static {
    public static final BitSet FOLLOW_oscarcpr_in_nounStructure1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure1092_static {
    public static final BitSet FOLLOW_range_in_nounStructure1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_nounStructure1094_static {
    public static final BitSet FOLLOW_amount_in_nounStructure1094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure1096_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure1096 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure1098_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure1098 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure1100_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure1100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1102_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure1104_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure1104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure1106_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_nounStructure1108_static {
    public static final BitSet FOLLOW_measurements_in_nounStructure1108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1110_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1112_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1114_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1114 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_nounStructure1116_static {
    public static final BitSet FOLLOW_nnmethod_in_nounStructure1116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1118_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1118 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1120_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1122_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1122 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1124_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1124 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1126_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1128_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1130_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1132_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1134_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1134 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1136_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_nounStructure1138_static {
    public static final BitSet FOLLOW_wdt_in_nounStructure1138 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_nounStructure1140_static {
    public static final BitSet FOLLOW_wp_poss_in_nounStructure1140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wpo_in_nounStructure1142_static {
    public static final BitSet FOLLOW_wpo_in_nounStructure1142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wps_in_nounStructure1144_static {
    public static final BitSet FOLLOW_wps_in_nounStructure1144 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1146_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1146 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1148_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1148 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_reference_in_nounStructure1150_static {
    public static final BitSet FOLLOW_reference_in_nounStructure1150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_nounStructure1152_static {
    public static final BitSet FOLLOW_oscaront_in_nounStructure1152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1154_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_nounStructure1156_static {
    public static final BitSet FOLLOW_number_in_nounStructure1156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_nounStructure1158_static {
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure1158 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1160_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1160 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1162_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1162 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1164_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1164 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1166_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1166 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1168_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1168 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fwin_in_nounStructure1170_static {
    public static final BitSet FOLLOW_fwin_in_nounStructure1170 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1172_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1172 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1174_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_range1181_static {
    public static final BitSet FOLLOW_number_in_range1181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_dash_in_range1183_static {
    public static final BitSet FOLLOW_dash_in_range1183 = new BitSet(new long[]{0x0000000900000000L,0x0000000000000000L,0x0080000000200000L});

    }static class FOLLOW_number_in_range1185_static {
    public static final BitSet FOLLOW_number_in_range1185 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles1192_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles1192 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure1209_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure1209 = new BitSet(new long[]{0x2400008F00000000L,0x2000000000042884L,0x0080278000200020L});

    }static class FOLLOW_dashNN_in_cycleStructure1211_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure1211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});

    }static class FOLLOW_nncycle_in_cycleStructure1214_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure1214 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN1224_static {
    public static final BitSet FOLLOW_adj_in_dashNN1224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nn_in_dashNN1226_static {
    public static final BitSet FOLLOW_nn_in_dashNN1226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_cd_in_dashNN1228_static {
    public static final BitSet FOLLOW_cd_in_dashNN1228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_dash_in_dashNN1232_static {
    public static final BitSet FOLLOW_dash_in_dashNN1232 = new BitSet(new long[]{0x2400008F00000000L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_adj_in_dashNN1235_static {
    public static final BitSet FOLLOW_adj_in_dashNN1235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nn_in_dashNN1237_static {
    public static final BitSet FOLLOW_nn_in_dashNN1237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_cd_in_dashNN1239_static {
    public static final BitSet FOLLOW_cd_in_dashNN1239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_numberratio_in_ratio1252_static {
    public static final BitSet FOLLOW_numberratio_in_ratio1252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio1254_static {
    public static final BitSet FOLLOW_nounratio_in_ratio1254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberratio1277_static {
    public static final BitSet FOLLOW_cd_in_numberratio1277 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000200000L});

    }static class FOLLOW_colon_in_numberratio1280_static {
    public static final BitSet FOLLOW_colon_in_numberratio1280 = new BitSet(new long[]{0x0000000100000000L});

    }static class FOLLOW_cdAlphanum_in_numberratio1282_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numberratio1282 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cd_in_numberratio1284_static {
    public static final BitSet FOLLOW_cd_in_numberratio1284 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000200000L});

    }static class FOLLOW_noun_in_nounratio1297_static {
    public static final BitSet FOLLOW_noun_in_nounratio1297 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});

    }static class FOLLOW_colon_in_nounratio1301_static {
    public static final BitSet FOLLOW_colon_in_nounratio1301 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_noun_in_nounratio1303_static {
    public static final BitSet FOLLOW_noun_in_nounratio1303 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});

    }static class FOLLOW_lsqb_in_reference1317_static {
    public static final BitSet FOLLOW_lsqb_in_reference1317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cd_in_reference1319_static {
    public static final BitSet FOLLOW_cd_in_reference1319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_rsqb_in_reference1321_static {
    public static final BitSet FOLLOW_rsqb_in_reference1321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure1_in_citation1328_static {
    public static final BitSet FOLLOW_citationStructure1_in_citation1328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure2_in_citation1330_static {
    public static final BitSet FOLLOW_citationStructure2_in_citation1330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationStructure11352_static {
    public static final BitSet FOLLOW_lrb_in_citationStructure11352 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_citationContent_in_citationStructure11354_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure11354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_citationStructure11356_static {
    public static final BitSet FOLLOW_rrb_in_citationStructure11356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citationStructure21362_static {
    public static final BitSet FOLLOW_comma_in_citationStructure21362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_lrb_in_citationStructure21364_static {
    public static final BitSet FOLLOW_lrb_in_citationStructure21364 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_citationContent_in_citationStructure21366_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure21366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_citationStructure21368_static {
    public static final BitSet FOLLOW_rrb_in_citationStructure21368 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_comma_in_citationStructure21370_static {
    public static final BitSet FOLLOW_comma_in_citationStructure21370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_citationContent1379_static {
    public static final BitSet FOLLOW_nnp_in_citationContent1379 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_fw_in_citationContent1381_static {
    public static final BitSet FOLLOW_fw_in_citationContent1381 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_cd_in_citationContent1383_static {
    public static final BitSet FOLLOW_cd_in_citationContent1383 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_conjunction_in_citationContent1385_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent1385 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_nnp_in_citationContent1389_static {
    public static final BitSet FOLLOW_nnp_in_citationContent1389 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_fw_in_citationContent1391_static {
    public static final BitSet FOLLOW_fw_in_citationContent1391 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_cd_in_citationContent1393_static {
    public static final BitSet FOLLOW_cd_in_citationContent1393 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_conjunction_in_citationContent1395_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent1395 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0004000100300000L});

    }static class FOLLOW_mixtureRatio_in_mixture1405_static {
    public static final BitSet FOLLOW_mixtureRatio_in_mixture1405 = new BitSet(new long[]{0x2000000900000000L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_mixtureStructure3_in_mixture1410_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture1410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture1412_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture1412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture1414_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture1414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure21441_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure21441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_lrb_in_mixtureStructure21443_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure21443 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_mixtureContent_in_mixtureStructure21445_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure21445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_mixtureStructure21447_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure21447 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_comma_in_mixtureStructure21449_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure21449 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure11455_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11455 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_mixtureContent_in_mixtureStructure11457_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_mixtureStructure11459_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11459 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure31467_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure31467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnpercent_in_mixtureStructure31470_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure31470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_mixtureStructure31472_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure31472 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mixtureRatio1483_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio1483 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});

    }static class FOLLOW_colon_in_mixtureRatio1485_static {
    public static final BitSet FOLLOW_colon_in_mixtureRatio1485 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cd_in_mixtureRatio1488_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio1488 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_mixtureRatio1490_static {
    public static final BitSet FOLLOW_cdAlphanum_in_mixtureRatio1490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent1500_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent1500 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_verb_in_mixtureContent1502_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent1502 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nn_in_mixtureContent1504_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent1504 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_measurements_in_mixtureContent1506_static {
    public static final BitSet FOLLOW_measurements_in_mixtureContent1506 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_md_in_mixtureContent1508_static {
    public static final BitSet FOLLOW_md_in_mixtureContent1508 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nnpercent_in_mixtureContent1510_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1510 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_mixtureContent1512_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1512 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_oscarCompound_in_mixtureContent1514_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1514 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_molecule_in_mixtureContent1516_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent1516 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent1518_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1518 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_dash_in_mixtureContent1520_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent1520 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_sym_in_mixtureContent1522_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent1522 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_mixtureContent1524_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1524 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_noun_in_mixtureContent1526_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent1526 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inof_in_mixtureContent1528_static {
    public static final BitSet FOLLOW_inof_in_mixtureContent1528 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inAll_in_mixtureContent1530_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent1530 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_mixtureContent1532_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1532 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_comma_in_mixtureContent1534_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent1534 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_adj_in_mixtureContent1536_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent1536 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_colon_in_mixtureContent1538_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent1538 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_mixtureContent1540_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1540 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_minimixture_in_mixtureContent1544_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent1544 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_fw_in_mixtureContent1546_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent1546 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_verb_in_mixtureContent1548_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent1548 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_measurements_in_mixtureContent1550_static {
    public static final BitSet FOLLOW_measurements_in_mixtureContent1550 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nnyield_in_mixtureContent1552_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent1552 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_md_in_mixtureContent1554_static {
    public static final BitSet FOLLOW_md_in_mixtureContent1554 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nnpercent_in_mixtureContent1556_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1556 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_mixtureContent1558_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1558 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_oscarCompound_in_mixtureContent1560_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1560 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_molecule_in_mixtureContent1562_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent1562 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent1564_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1564 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_dash_in_mixtureContent1566_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent1566 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_sym_in_mixtureContent1568_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent1568 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_mixtureContent1570_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1570 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_noun_in_mixtureContent1572_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent1572 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inof_in_mixtureContent1574_static {
    public static final BitSet FOLLOW_inof_in_mixtureContent1574 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inAll_in_mixtureContent1576_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent1576 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_mixtureContent1578_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent1578 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_comma_in_mixtureContent1580_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent1580 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_adj_in_mixtureContent1582_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent1582 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_colon_in_mixtureContent1584_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent1584 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_mixtureContent1586_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent1586 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_mixtureStructure2_in_minimixture1597_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture1597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture1599_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture1599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_minimixtureStructure21619_static {
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_lrb_in_minimixtureStructure21621_static {
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure21621 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_mixtureContent_in_minimixtureStructure21623_static {
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure21623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_minimixtureStructure21625_static {
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure21625 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_comma_in_minimixtureStructure21627_static {
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_minimixtureStructure11634_static {
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure11634 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_mixtureContent_in_minimixtureStructure11636_static {
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure11636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_minimixtureStructure11638_static {
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure11638 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_minimixtureContent1647_static {
    public static final BitSet FOLLOW_fw_in_minimixtureContent1647 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nn_in_minimixtureContent1649_static {
    public static final BitSet FOLLOW_nn_in_minimixtureContent1649 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_verb_in_minimixtureContent1651_static {
    public static final BitSet FOLLOW_verb_in_minimixtureContent1651 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_measurements_in_minimixtureContent1653_static {
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1653 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nnpercent_in_minimixtureContent1655_static {
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1655 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_md_in_minimixtureContent1657_static {
    public static final BitSet FOLLOW_md_in_minimixtureContent1657 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_minimixtureContent1659_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1659 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_oscarCompound_in_minimixtureContent1661_static {
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1661 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_molecule_in_minimixtureContent1663_static {
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1663 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_unnamedmolecule_in_minimixtureContent1665_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1665 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_dash_in_minimixtureContent1667_static {
    public static final BitSet FOLLOW_dash_in_minimixtureContent1667 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_sym_in_minimixtureContent1669_static {
    public static final BitSet FOLLOW_sym_in_minimixtureContent1669 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_minimixtureContent1671_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1671 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_noun_in_minimixtureContent1673_static {
    public static final BitSet FOLLOW_noun_in_minimixtureContent1673 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inof_in_minimixtureContent1675_static {
    public static final BitSet FOLLOW_inof_in_minimixtureContent1675 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inAll_in_minimixtureContent1677_static {
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1677 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_minimixtureContent1679_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1679 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_comma_in_minimixtureContent1681_static {
    public static final BitSet FOLLOW_comma_in_minimixtureContent1681 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_adj_in_minimixtureContent1683_static {
    public static final BitSet FOLLOW_adj_in_minimixtureContent1683 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_colon_in_minimixtureContent1685_static {
    public static final BitSet FOLLOW_colon_in_minimixtureContent1685 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_minimixtureContent1687_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1687 = new BitSet(new long[]{0xEFFFFFBF00000000L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_fw_in_minimixtureContent1691_static {
    public static final BitSet FOLLOW_fw_in_minimixtureContent1691 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_verb_in_minimixtureContent1693_static {
    public static final BitSet FOLLOW_verb_in_minimixtureContent1693 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_measurements_in_minimixtureContent1695_static {
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1695 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nnyield_in_minimixtureContent1697_static {
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent1697 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_nnpercent_in_minimixtureContent1699_static {
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1699 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_md_in_minimixtureContent1701_static {
    public static final BitSet FOLLOW_md_in_minimixtureContent1701 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_minimixtureContent1703_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1703 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_oscarCompound_in_minimixtureContent1705_static {
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1705 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_molecule_in_minimixtureContent1707_static {
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1707 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_unnamedmolecule_in_minimixtureContent1709_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1709 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_dash_in_minimixtureContent1711_static {
    public static final BitSet FOLLOW_dash_in_minimixtureContent1711 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_sym_in_minimixtureContent1713_static {
    public static final BitSet FOLLOW_sym_in_minimixtureContent1713 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_minimixtureContent1715_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1715 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_noun_in_minimixtureContent1717_static {
    public static final BitSet FOLLOW_noun_in_minimixtureContent1717 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inof_in_minimixtureContent1719_static {
    public static final BitSet FOLLOW_inof_in_minimixtureContent1719 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_inAll_in_minimixtureContent1721_static {
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1721 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_cd_in_minimixtureContent1723_static {
    public static final BitSet FOLLOW_cd_in_minimixtureContent1723 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_comma_in_minimixtureContent1725_static {
    public static final BitSet FOLLOW_comma_in_minimixtureContent1725 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_adj_in_minimixtureContent1727_static {
    public static final BitSet FOLLOW_adj_in_minimixtureContent1727 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_colon_in_minimixtureContent1729_static {
    public static final BitSet FOLLOW_colon_in_minimixtureContent1729 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_stop_in_minimixtureContent1731_static {
    public static final BitSet FOLLOW_stop_in_minimixtureContent1731 = new BitSet(new long[]{0xEFFFFFBF00000002L,0x3FFFFFFFFFFFFFFFL,0xC084AFC38420002FL,0x000000000FFFBBE0L});

    }static class FOLLOW_jj_in_adj1742_static {
    public static final BitSet FOLLOW_jj_in_adj1742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj1744_static {
    public static final BitSet FOLLOW_jjr_in_adj1744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj1746_static {
    public static final BitSet FOLLOW_jjs_in_adj1746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjt_in_adj1748_static {
    public static final BitSet FOLLOW_jjt_in_adj1748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj1750_static {
    public static final BitSet FOLLOW_oscarcj_in_adj1750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj1752_static {
    public static final BitSet FOLLOW_jjchem_in_adj1752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj1754_static {
    public static final BitSet FOLLOW_oscarrn_in_adj1754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv1761_static {
    public static final BitSet FOLLOW_rb_in_adv1761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv1763_static {
    public static final BitSet FOLLOW_rbr_in_adv1763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbt_in_adv1765_static {
    public static final BitSet FOLLOW_rbt_in_adv1765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv1767_static {
    public static final BitSet FOLLOW_rp_in_adv1767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv1769_static {
    public static final BitSet FOLLOW_rbs_in_adv1769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1782_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1782 = new BitSet(new long[]{0x09FFFE8600000000L,0x8000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1786_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1788_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1790_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1792_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1794_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1796_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj1810_static {
    public static final BitSet FOLLOW_adv_in_advAdj1810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj1812_static {
    public static final BitSet FOLLOW_adj_in_advAdj1812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1821_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1821 = new BitSet(new long[]{0x09FFFE8600000000L,0x8000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_inMost_in_prepphraseOther1824_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1824 = new BitSet(new long[]{0xEFFFFFBF00000000L,0xA8D14150A00C3FFFL,0xC084A7C38C200028L,0x000000000FE03B60L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1828_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1828 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1854_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1854 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1857_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1878_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1895_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1895 = new BitSet(new long[]{0x09FFFE8600000000L,0x0000000000000000L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1898_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1898 = new BitSet(new long[]{0x0800008600000000L,0x0000000000000000L,0x0000078004200000L,0x0000000000000B60L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1902_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1902 = new BitSet(new long[]{0x0800008600000000L,0x0000000000000000L,0x0000078000200000L,0x0000000000000B60L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1905_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1905 = new BitSet(new long[]{0x0800008600000000L,0x0000000000000000L,0x0000078000200000L,0x0000000000000B60L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1908_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1908 = new BitSet(new long[]{0x0800000000000000L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1911_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1911 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_inin_in_prepphraseIN1923_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1923 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_prepphraseIN1925_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1946_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000004000000L});

    }static class FOLLOW_dt_in_prepphraseRole1948_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1951_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1974_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1993_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1993 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078004200020L,0x0000000000000B60L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1996_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1996 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L,0x0000000000000B60L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1999_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1999 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L,0x0000000000000B60L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent2002_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent2002 = new BitSet(new long[]{0x8000000000000002L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent2004_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent2004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost2015_static {
    public static final BitSet FOLLOW_in_in_inMost2015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost2017_static {
    public static final BitSet FOLLOW_inas_in_inMost2017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost2019_static {
    public static final BitSet FOLLOW_inbefore_in_inMost2019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost2021_static {
    public static final BitSet FOLLOW_inby_in_inMost2021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost2023_static {
    public static final BitSet FOLLOW_infor_in_inMost2023 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost2025_static {
    public static final BitSet FOLLOW_infrom_in_inMost2025 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost2027_static {
    public static final BitSet FOLLOW_inin_in_inMost2027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost2029_static {
    public static final BitSet FOLLOW_ininto_in_inMost2029 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost2031_static {
    public static final BitSet FOLLOW_inof_in_inMost2031 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost2033_static {
    public static final BitSet FOLLOW_inoff_in_inMost2033 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost2035_static {
    public static final BitSet FOLLOW_inon_in_inMost2035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost2037_static {
    public static final BitSet FOLLOW_inover_in_inMost2037 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost2039_static {
    public static final BitSet FOLLOW_inunder_in_inMost2039 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost2041_static {
    public static final BitSet FOLLOW_invia_in_inMost2041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost2043_static {
    public static final BitSet FOLLOW_inwith_in_inMost2043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost2045_static {
    public static final BitSet FOLLOW_inwithout_in_inMost2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost2047_static {
    public static final BitSet FOLLOW_to_in_inMost2047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll2055_static {
    public static final BitSet FOLLOW_in_in_inAll2055 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll2057_static {
    public static final BitSet FOLLOW_inafter_in_inAll2057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll2059_static {
    public static final BitSet FOLLOW_inas_in_inAll2059 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll2061_static {
    public static final BitSet FOLLOW_inbefore_in_inAll2061 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll2063_static {
    public static final BitSet FOLLOW_inby_in_inAll2063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll2065_static {
    public static final BitSet FOLLOW_infor_in_inAll2065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll2067_static {
    public static final BitSet FOLLOW_infrom_in_inAll2067 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll2069_static {
    public static final BitSet FOLLOW_inin_in_inAll2069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll2071_static {
    public static final BitSet FOLLOW_ininto_in_inAll2071 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll2073_static {
    public static final BitSet FOLLOW_inof_in_inAll2073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll2075_static {
    public static final BitSet FOLLOW_inoff_in_inAll2075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll2077_static {
    public static final BitSet FOLLOW_inon_in_inAll2077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll2079_static {
    public static final BitSet FOLLOW_inover_in_inAll2079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll2081_static {
    public static final BitSet FOLLOW_inunder_in_inAll2081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll2083_static {
    public static final BitSet FOLLOW_invia_in_inAll2083 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll2085_static {
    public static final BitSet FOLLOW_inwith_in_inAll2085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll2087_static {
    public static final BitSet FOLLOW_inwithout_in_inAll2087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll2089_static {
    public static final BitSet FOLLOW_to_in_inAll2089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp2096_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp2096 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent2117_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent2117 = new BitSet(new long[]{0x01FFFE8600000000L,0x0000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_inAll_in_prepphraseTempContent2120_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent2120 = new BitSet(new long[]{0x0000008600000000L,0x0000000000000008L,0x0000078004200000L,0x0000000000000B60L});

    }static class FOLLOW_dt_in_prepphraseTempContent2123_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent2123 = new BitSet(new long[]{0x0000008600000000L,0x0000000000000008L,0x0000078000200000L,0x0000000000000B60L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent2126_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent2126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000200000L});

    }static class FOLLOW_cd_in_prepphraseTempContent2129_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent2129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent2132_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent2132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});

    }static class FOLLOW_advAdj_in_prepphraseAfter2145_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter2145 = new BitSet(new long[]{0x0000080000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter2148_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter2148 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter2151_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter2151 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2181_static {
    public static final BitSet FOLLOW_cd_in_amount2181 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_nnamount_in_amount2184_static {
    public static final BitSet FOLLOW_nnamount_in_amount2184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2205_static {
    public static final BitSet FOLLOW_cd_in_mass2205 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_nnmass_in_mass2208_static {
    public static final BitSet FOLLOW_nnmass_in_mass2208 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_percent2229_static {
    public static final BitSet FOLLOW_number_in_percent2229 = new BitSet(new long[]{0x2400008F00000000L,0x2000000000042084L,0x0080278000200024L});

    }static class FOLLOW_nn_in_percent2231_static {
    public static final BitSet FOLLOW_nn_in_percent2231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnpercent_in_percent2234_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2257_static {
    public static final BitSet FOLLOW_cd_in_volume2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000200000L});

    }static class FOLLOW_nnvol_in_volume2260_static {
    public static final BitSet FOLLOW_nnvol_in_volume2260 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2281_static {
    public static final BitSet FOLLOW_cd_in_molar2281 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_nnmolar_in_molar2284_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase2307_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase2307 = new BitSet(new long[]{0x0000020000000000L});

    }static class FOLLOW_inas_in_preparationphrase2309_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase2309 = new BitSet(new long[]{0x0BFFFE8600000000L,0x8000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_nnexample_in_preparationphrase2312_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase2312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cd_in_preparationphrase2314_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase2314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase2317_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase2317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus2330_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2330 = new BitSet(new long[]{0x2400008F00000002L,0x2000000020042084L,0x0080278004300020L});

    }static class FOLLOW_conjunction_in_multiApparatus2333_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus2333 = new BitSet(new long[]{0x2400008F00000000L,0x2000000020042084L,0x0080278004300020L});

    }static class FOLLOW_apparatus_in_multiApparatus2336_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2336 = new BitSet(new long[]{0x2400008F00000002L,0x2000000020042084L,0x0080278004300020L});

    }static class FOLLOW_dt_in_apparatus2348_static {
    public static final BitSet FOLLOW_dt_in_apparatus2348 = new BitSet(new long[]{0x2400008F00000000L,0x2000000020042084L,0x0080278004200020L});

    }static class FOLLOW_preapparatus_in_apparatus2351_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus2351 = new BitSet(new long[]{0x2400008F00000000L,0x2000000020042084L,0x0080278004200020L});

    }static class FOLLOW_nnApp_in_apparatus2354_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus2354 = new BitSet(new long[]{0x2400008F00000002L,0x2000000020042084L,0x0080278004200020L});

    }static class FOLLOW_nnapparatus_in_nnApp2382_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2382 = new BitSet(new long[]{0x2400008F00000002L,0x2000000020042084L,0x0080278004200021L});

    }static class FOLLOW_dash_in_nnApp2386_static {
    public static final BitSet FOLLOW_dash_in_nnApp2386 = new BitSet(new long[]{0x2400008F00000000L,0x2000000020042084L,0x0080278004200020L});

    }static class FOLLOW_nnapparatus_in_nnApp2388_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_quantity_in_preapparatus2402_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus2402 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_adj_in_preapparatus2404_static {
    public static final BitSet FOLLOW_adj_in_preapparatus2404 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_nnpressure_in_preapparatus2406_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus2406 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_nnadd_in_preapparatus2408_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus2408 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_molecule_in_preapparatus2410_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus2410 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_nnchementity_in_preapparatus2412_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus2412 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_nnstate_in_preapparatus2414_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus2414 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_nn_in_preapparatus2416_static {
    public static final BitSet FOLLOW_nn_in_preapparatus2416 = new BitSet(new long[]{0x2400008F00000002L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_cd_in_measurements2427_static {
    public static final BitSet FOLLOW_cd_in_measurements2427 = new BitSet(new long[]{0x2400008F00000000L,0x2000000000042084L,0x0080278000200020L});

    }static class FOLLOW_nn_in_measurements2429_static {
    public static final BitSet FOLLOW_nn_in_measurements2429 = new BitSet(new long[]{0x2000000900000000L,0x0000000000000000L,0x0080000000200020L});

    }static class FOLLOW_multiple_in_measurements2434_static {
    public static final BitSet FOLLOW_multiple_in_measurements2434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});

    }static class FOLLOW_measurementtypes_in_measurements2436_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});

    }static class FOLLOW_dt_in_measurements2442_static {
    public static final BitSet FOLLOW_dt_in_measurements2442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2450_static {
    public static final BitSet FOLLOW_cd_in_multiple2450 = new BitSet(new long[]{0x0000004000000000L});

    }static class FOLLOW_cdunicode_in_multiple2452_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2452 = new BitSet(new long[]{0x2000000900000002L,0x0000000000000000L,0x0080000000200020L});

    }static class FOLLOW_measurementtypes_in_multiple2454_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2481_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2483_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2483 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2485_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2485 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2487_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2487 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2489_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_oscarCompound2501_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound2501 = new BitSet(new long[]{0x0000008600000000L,0x0000000000002000L,0x0000078000000020L});

    }static class FOLLOW_oscarCompound1_in_oscarCompound2505_static {
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound2505 = new BitSet(new long[]{0x0000008600000002L,0x0000000000000000L,0x0000078000000008L});

    }static class FOLLOW_oscarCompound2_in_oscarCompound2507_static {
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound2507 = new BitSet(new long[]{0x0000008600000002L,0x0000000000000000L,0x0000078000000008L});

    }static class FOLLOW_oscarCompound3_in_oscarCompound2509_static {
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound2509 = new BitSet(new long[]{0x0000008600000002L,0x0000000000000000L,0x0000078000000008L});

    }static class FOLLOW_oscarCompound4_in_oscarCompound2511_static {
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound2511 = new BitSet(new long[]{0x0000008600000002L,0x0000000000000000L,0x0000078000000008L});

    }static class FOLLOW_oscarcm_in_oscarCompound2513_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2513 = new BitSet(new long[]{0x0000008600000002L,0x0000000000000000L,0x0000078000000008L});

    }static class FOLLOW_adj_in_oscarCompound2516_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound2516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_reference_in_oscarCompound2519_static {
    public static final BitSet FOLLOW_reference_in_oscarCompound2519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_oscarCompound42528_static {
    public static final BitSet FOLLOW_lrb_in_oscarCompound42528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_oscarcm_in_oscarCompound42531_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound42531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_oscarCompound42533_static {
    public static final BitSet FOLLOW_rrb_in_oscarCompound42533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound3Structure_in_oscarCompound32556_static {
    public static final BitSet FOLLOW_oscarCompound3Structure_in_oscarCompound32556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound2Structure_in_oscarCompound22574_static {
    public static final BitSet FOLLOW_oscarCompound2Structure_in_oscarCompound22574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompound12592_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_oscarcm_in_oscarCompound12594_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});

    }static class FOLLOW_oscarcm_in_oscarCompound3Structure2619_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound3Structure2619 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000001L});

    }static class FOLLOW_dash_in_oscarCompound3Structure2622_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound3Structure2622 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});

    }static class FOLLOW_apost_in_oscarCompound3Structure2624_static {
    public static final BitSet FOLLOW_apost_in_oscarCompound3Structure2624 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000001L});

    }static class FOLLOW_oscarcm_in_oscarCompound2Structure2638_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_dash_in_oscarCompound2Structure2641_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_oscarcm_in_oscarCompound2Structure2643_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_dash_in_oscarCompound2Structure2648_static {
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount12662_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount12662 = new BitSet(new long[]{0x2004000900000000L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_mixture_in_moleculeamount12664_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount12664 = new BitSet(new long[]{0x2004000900000000L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_inof_in_moleculeamount12668_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount12668 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount12670_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount12670 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_mixture_in_moleculeamount12672_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount12672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount22683_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount22683 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_mixture_in_moleculeamount22685_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount22685 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount22689_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount22689 = new BitSet(new long[]{0x2000008F00000002L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_citation_in_moleculeamount22694_static {
    public static final BitSet FOLLOW_citation_in_moleculeamount22694 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_quantity_in_moleculeamount22696_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount22696 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_mixture_in_moleculeamount22698_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount22698 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_quantity_in_moleculeamount32712_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount32712 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_mixture_in_moleculeamount32714_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount32714 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inof_in_moleculeamount32717_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount32717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_mixtureRatio_in_moleculeamount32719_static {
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount32719 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_mixture_in_moleculeamount32721_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount32721 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount32724_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount32724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount2734_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount2734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount2736_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount2736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount2740_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount2740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule2761_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule2761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_cdAlphanumType2783_static {
    public static final BitSet FOLLOW_lrb_in_cdAlphanumType2783 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cdAlphanum_in_cdAlphanumType2786_static {
    public static final BitSet FOLLOW_cdAlphanum_in_cdAlphanumType2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_cd_in_cdAlphanumType2788_static {
    public static final BitSet FOLLOW_cd_in_cdAlphanumType2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_rrb_in_cdAlphanumType2791_static {
    public static final BitSet FOLLOW_rrb_in_cdAlphanumType2791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount12800_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12800 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount12802_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12802 = new BitSet(new long[]{0x0000000100000000L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount12805_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount12805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_unnamedmoleculeamount12807_static {
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12807 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount22816_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount22816 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22818_static {
    public static final BitSet FOLLOW_cdAlphanumType_in_unnamedmoleculeamount22818 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount22822_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22822 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount22824_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22824 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount22826_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22826 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount32842_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32842 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount32844_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32844 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount32847_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32847 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_noun_in_unnamedmoleculeamount32850_static {
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32850 = new BitSet(new long[]{0xEE0001BF00000002L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount42863_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount42863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount42865_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount42865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount42868_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount42868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount52887_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount52887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount52889_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount52889 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_cdAlphanum_in_unnamedmoleculeamount52891_static {
    public static final BitSet FOLLOW_cdAlphanum_in_unnamedmoleculeamount52891 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount52895_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount52895 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount52897_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount52897 = new BitSet(new long[]{0x2000000900000002L,0x2000000000000000L,0x0080000000200020L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2911_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount2911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2913_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2917_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2921_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2923_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2934_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity2956_static {
    public static final BitSet FOLLOW_quantity1_in_quantity2956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2958_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12983_static {
    public static final BitSet FOLLOW_lrb_in_quantity12983 = new BitSet(new long[]{0x2000000900000000L,0x0000000000000000L,0x0080000000200020L});

    }static class FOLLOW_measurements_in_quantity12985_static {
    public static final BitSet FOLLOW_measurements_in_quantity12985 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000042L});

    }static class FOLLOW_comma_in_quantity12988_static {
    public static final BitSet FOLLOW_comma_in_quantity12988 = new BitSet(new long[]{0x2000000900000000L,0x0000000000000000L,0x0080000000200020L});

    }static class FOLLOW_measurements_in_quantity12991_static {
    public static final BitSet FOLLOW_measurements_in_quantity12991 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000042L});

    }static class FOLLOW_comma_in_quantity12996_static {
    public static final BitSet FOLLOW_comma_in_quantity12996 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12998_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12998 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000042L});

    }static class FOLLOW_stop_in_quantity13003_static {
    public static final BitSet FOLLOW_stop_in_quantity13003 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity13005_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity13005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});

    }static class FOLLOW_rrb_in_quantity13010_static {
    public static final BitSet FOLLOW_rrb_in_quantity13010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity23022_static {
    public static final BitSet FOLLOW_measurements_in_quantity23022 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});

    }static class FOLLOW_comma_in_quantity23025_static {
    public static final BitSet FOLLOW_comma_in_quantity23025 = new BitSet(new long[]{0x2000000900000000L,0x0000000000000000L,0x0080000000200020L});

    }static class FOLLOW_measurements_in_quantity23028_static {
    public static final BitSet FOLLOW_measurements_in_quantity23028 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});

    }static class FOLLOW_nngeneral_in_method3043_static {
    public static final BitSet FOLLOW_nngeneral_in_method3043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nn_in_method3045_static {
    public static final BitSet FOLLOW_nn_in_method3045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nnmethod_in_method3049_static {
    public static final BitSet FOLLOW_nnmethod_in_method3049 = new BitSet(new long[]{0x0000000100000002L,0x0000000000000000L,0x0000000000200000L});

    }static class FOLLOW_cdAlphanum_in_method3052_static {
    public static final BitSet FOLLOW_cdAlphanum_in_method3052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_method3054_static {
    public static final BitSet FOLLOW_cd_in_method3054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_brackets3076_static {
    public static final BitSet FOLLOW_lrb_in_brackets3076 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000078L});

    }static class FOLLOW_rrb_in_brackets3078_static {
    public static final BitSet FOLLOW_rrb_in_brackets3078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000078L});

    }static class FOLLOW_lsqb_in_brackets3080_static {
    public static final BitSet FOLLOW_lsqb_in_brackets3080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000078L});

    }static class FOLLOW_rsqb_in_brackets3082_static {
    public static final BitSet FOLLOW_rsqb_in_brackets3082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000078L});

    }static class FOLLOW_32_in_cdAlphanum3095_static {
    public static final BitSet FOLLOW_32_in_cdAlphanum3095 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3097_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3097 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_33_in_oscarcj3110_static {
    public static final BitSet FOLLOW_33_in_oscarcj3110 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3112_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_34_in_oscarrn3125_static {
    public static final BitSet FOLLOW_34_in_oscarrn3125 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3127_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3127 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_35_in_oscarcpr3140_static {
    public static final BitSet FOLLOW_35_in_oscarcpr3140 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_oscarcpr3142_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr3142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_36_in_oscaront3155_static {
    public static final BitSet FOLLOW_36_in_oscaront3155 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_oscaront3157_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_37_in_tmunicode3170_static {
    public static final BitSet FOLLOW_37_in_tmunicode3170 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3172_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3172 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdunicode3185_static {
    public static final BitSet FOLLOW_38_in_cdunicode3185 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3187_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3187 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_jjchem3200_static {
    public static final BitSet FOLLOW_39_in_jjchem3200 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_jjchem3202_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3202 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_jjcomp3215_static {
    public static final BitSet FOLLOW_40_in_jjcomp3215 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3217_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_inas3231_static {
    public static final BitSet FOLLOW_41_in_inas3231 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inas3233_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_inbefore3246_static {
    public static final BitSet FOLLOW_42_in_inbefore3246 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inbefore3248_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_inafter3261_static {
    public static final BitSet FOLLOW_43_in_inafter3261 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inafter3263_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_inin3276_static {
    public static final BitSet FOLLOW_44_in_inin3276 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inin3278_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_ininto3291_static {
    public static final BitSet FOLLOW_45_in_ininto3291 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ininto3293_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_inwith3306_static {
    public static final BitSet FOLLOW_46_in_inwith3306 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inwith3308_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inwithout3321_static {
    public static final BitSet FOLLOW_47_in_inwithout3321 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inwithout3323_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inby3336_static {
    public static final BitSet FOLLOW_48_in_inby3336 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inby3338_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_invia3351_static {
    public static final BitSet FOLLOW_49_in_invia3351 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_invia3353_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inof3366_static {
    public static final BitSet FOLLOW_50_in_inof3366 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inof3368_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_inon3381_static {
    public static final BitSet FOLLOW_51_in_inon3381 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inon3383_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_infor3396_static {
    public static final BitSet FOLLOW_52_in_infor3396 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_infor3398_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_infrom3411_static {
    public static final BitSet FOLLOW_53_in_infrom3411 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_infrom3413_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inunder3426_static {
    public static final BitSet FOLLOW_54_in_inunder3426 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inunder3428_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_inover3441_static {
    public static final BitSet FOLLOW_55_in_inover3441 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inover3443_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inoff3456_static {
    public static final BitSet FOLLOW_56_in_inoff3456 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_inoff3458_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_nnexample3473_static {
    public static final BitSet FOLLOW_57_in_nnexample3473 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnexample3475_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_nnstate3488_static {
    public static final BitSet FOLLOW_58_in_nnstate3488 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnstate3490_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_nntime3503_static {
    public static final BitSet FOLLOW_59_in_nntime3503 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nntime3505_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_nnmass3518_static {
    public static final BitSet FOLLOW_60_in_nnmass3518 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnmass3520_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_nnmolar3533_static {
    public static final BitSet FOLLOW_61_in_nnmolar3533 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3535_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3535 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_nnamount3548_static {
    public static final BitSet FOLLOW_62_in_nnamount3548 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnamount3550_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnatmosphere3563_static {
    public static final BitSet FOLLOW_63_in_nnatmosphere3563 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3565_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nneq3578_static {
    public static final BitSet FOLLOW_64_in_nneq3578 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nneq3580_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnvol3593_static {
    public static final BitSet FOLLOW_65_in_nnvol3593 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnvol3595_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnchementity3608_static {
    public static final BitSet FOLLOW_66_in_nnchementity3608 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3610_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nntemp3623_static {
    public static final BitSet FOLLOW_67_in_nntemp3623 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nntemp3625_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnflash3638_static {
    public static final BitSet FOLLOW_68_in_nnflash3638 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnflash3640_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3640 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nngeneral3653_static {
    public static final BitSet FOLLOW_69_in_nngeneral3653 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3655_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3655 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnmethod3668_static {
    public static final BitSet FOLLOW_70_in_nnmethod3668 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3670_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnpressure3683_static {
    public static final BitSet FOLLOW_71_in_nnpressure3683 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3685_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nncolumn3698_static {
    public static final BitSet FOLLOW_72_in_nncolumn3698 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3700_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnchromatography3713_static {
    public static final BitSet FOLLOW_73_in_nnchromatography3713 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3715_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnvacuum3728_static {
    public static final BitSet FOLLOW_74_in_nnvacuum3728 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3730_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nncycle3743_static {
    public static final BitSet FOLLOW_75_in_nncycle3743 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nncycle3745_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nntimes3758_static {
    public static final BitSet FOLLOW_76_in_nntimes3758 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nntimes3760_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_oscarcm3775_static {
    public static final BitSet FOLLOW_77_in_oscarcm3775 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3777_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_vbuse3792_static {
    public static final BitSet FOLLOW_78_in_vbuse3792 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbuse3794_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_vbchange3807_static {
    public static final BitSet FOLLOW_79_in_vbchange3807 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbchange3809_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3809 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_vbsubmerge3822_static {
    public static final BitSet FOLLOW_80_in_vbsubmerge3822 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3824_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3824 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_vbsubject3837_static {
    public static final BitSet FOLLOW_81_in_vbsubject3837 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3839_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nnadd3854_static {
    public static final BitSet FOLLOW_82_in_nnadd3854 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnadd3856_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnmixture3869_static {
    public static final BitSet FOLLOW_83_in_nnmixture3869 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3871_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_vbdilute3884_static {
    public static final BitSet FOLLOW_84_in_vbdilute3884 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3886_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbadd3900_static {
    public static final BitSet FOLLOW_85_in_vbadd3900 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbadd3902_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd3902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbcharge3915_static {
    public static final BitSet FOLLOW_86_in_vbcharge3915 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbcharge3917_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbcontain3930_static {
    public static final BitSet FOLLOW_87_in_vbcontain3930 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbcontain3932_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbdrop3945_static {
    public static final BitSet FOLLOW_88_in_vbdrop3945 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbdrop3947_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_vbfill3960_static {
    public static final BitSet FOLLOW_89_in_vbfill3960 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbfill3962_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill3962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_vbsuspend3975_static {
    public static final BitSet FOLLOW_90_in_vbsuspend3975 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend3977_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbtreat3990_static {
    public static final BitSet FOLLOW_91_in_vbtreat3990 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbtreat3992_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbapparatus4007_static {
    public static final BitSet FOLLOW_92_in_vbapparatus4007 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4009_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4009 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_nnapparatus4022_static {
    public static final BitSet FOLLOW_93_in_nnapparatus4022 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4024_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbconcentrate4039_static {
    public static final BitSet FOLLOW_94_in_vbconcentrate4039 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4041_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_nnconcentrate4054_static {
    public static final BitSet FOLLOW_95_in_nnconcentrate4054 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4056_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbcool4071_static {
    public static final BitSet FOLLOW_96_in_vbcool4071 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbcool4073_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4073 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbdegass4088_static {
    public static final BitSet FOLLOW_97_in_vbdegass4088 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4090_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbdissolve4105_static {
    public static final BitSet FOLLOW_98_in_vbdissolve4105 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4107_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4107 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbdry4122_static {
    public static final BitSet FOLLOW_99_in_vbdry4122 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbdry4124_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4124 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nndry4137_static {
    public static final BitSet FOLLOW_100_in_nndry4137 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nndry4139_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4139 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbextract4154_static {
    public static final BitSet FOLLOW_101_in_vbextract4154 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbextract4156_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnextract4169_static {
    public static final BitSet FOLLOW_102_in_nnextract4169 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnextract4171_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbfilter4186_static {
    public static final BitSet FOLLOW_103_in_vbfilter4186 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4188_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_nnfilter4201_static {
    public static final BitSet FOLLOW_104_in_nnfilter4201 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4203_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4203 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbheat4218_static {
    public static final BitSet FOLLOW_105_in_vbheat4218 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbheat4220_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbincrease4233_static {
    public static final BitSet FOLLOW_106_in_vbincrease4233 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4235_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_vbimmerse4250_static {
    public static final BitSet FOLLOW_107_in_vbimmerse4250 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4252_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbpartition4266_static {
    public static final BitSet FOLLOW_108_in_vbpartition4266 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4268_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_vbprecipitate4283_static {
    public static final BitSet FOLLOW_109_in_vbprecipitate4283 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4285_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_nnprecipitate4298_static {
    public static final BitSet FOLLOW_110_in_nnprecipitate4298 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4300_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_vbpurify4315_static {
    public static final BitSet FOLLOW_111_in_vbpurify4315 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4317_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_nnpurify4330_static {
    public static final BitSet FOLLOW_112_in_nnpurify4330 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4332_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbquench4347_static {
    public static final BitSet FOLLOW_113_in_vbquench4347 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbquench4349_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbrecover4364_static {
    public static final BitSet FOLLOW_114_in_vbrecover4364 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4366_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbremove4381_static {
    public static final BitSet FOLLOW_115_in_vbremove4381 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbremove4383_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_nnremove4396_static {
    public static final BitSet FOLLOW_116_in_nnremove4396 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnremove4398_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_vbstir4413_static {
    public static final BitSet FOLLOW_117_in_vbstir4413 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbstir4415_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbsynthesize4430_static {
    public static final BitSet FOLLOW_118_in_vbsynthesize4430 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4432_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnsynthesize4445_static {
    public static final BitSet FOLLOW_119_in_nnsynthesize4445 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4447_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbwait4462_static {
    public static final BitSet FOLLOW_120_in_vbwait4462 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbwait4464_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbwash4479_static {
    public static final BitSet FOLLOW_121_in_vbwash4479 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbwash4481_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbyield4496_static {
    public static final BitSet FOLLOW_122_in_vbyield4496 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbyield4498_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnyield4513_static {
    public static final BitSet FOLLOW_123_in_nnyield4513 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnyield4515_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4515 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_colon4529_static {
    public static final BitSet FOLLOW_124_in_colon4529 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_colon4531_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_comma4544_static {
    public static final BitSet FOLLOW_125_in_comma4544 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_comma4546_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4546 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_apost4559_static {
    public static final BitSet FOLLOW_126_in_apost4559 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_apost4561_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_neg4574_static {
    public static final BitSet FOLLOW_127_in_neg4574 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_neg4576_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_dash4589_static {
    public static final BitSet FOLLOW_128_in_dash4589 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dash4591_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4591 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_stop4604_static {
    public static final BitSet FOLLOW_129_in_stop4604 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_stop4606_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnpercent4619_static {
    public static final BitSet FOLLOW_130_in_nnpercent4619 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4621_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4621 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_lsqb4634_static {
    public static final BitSet FOLLOW_131_in_lsqb4634 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_lsqb4636_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_rsqb4649_static {
    public static final BitSet FOLLOW_132_in_rsqb4649 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rsqb4651_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_lrb4665_static {
    public static final BitSet FOLLOW_133_in_lrb4665 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_lrb4667_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4667 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_rrb4680_static {
    public static final BitSet FOLLOW_134_in_rrb4680 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rrb4682_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_abl4699_static {
    public static final BitSet FOLLOW_135_in_abl4699 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_abl4701_static {
    public static final BitSet FOLLOW_TOKEN_in_abl4701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_abn4716_static {
    public static final BitSet FOLLOW_136_in_abn4716 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_abn4718_static {
    public static final BitSet FOLLOW_TOKEN_in_abn4718 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_abx4733_static {
    public static final BitSet FOLLOW_137_in_abx4733 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_abx4735_static {
    public static final BitSet FOLLOW_TOKEN_in_abx4735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_ap4750_static {
    public static final BitSet FOLLOW_138_in_ap4750 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ap4752_static {
    public static final BitSet FOLLOW_TOKEN_in_ap4752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_at4767_static {
    public static final BitSet FOLLOW_139_in_at4767 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_at4769_static {
    public static final BitSet FOLLOW_TOKEN_in_at4769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_be4784_static {
    public static final BitSet FOLLOW_140_in_be4784 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_be4786_static {
    public static final BitSet FOLLOW_TOKEN_in_be4786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_bed4801_static {
    public static final BitSet FOLLOW_141_in_bed4801 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_bed4803_static {
    public static final BitSet FOLLOW_TOKEN_in_bed4803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_bedz4818_static {
    public static final BitSet FOLLOW_142_in_bedz4818 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_bedz4820_static {
    public static final BitSet FOLLOW_TOKEN_in_bedz4820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_beg4835_static {
    public static final BitSet FOLLOW_143_in_beg4835 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_beg4837_static {
    public static final BitSet FOLLOW_TOKEN_in_beg4837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_bem4852_static {
    public static final BitSet FOLLOW_144_in_bem4852 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_bem4854_static {
    public static final BitSet FOLLOW_TOKEN_in_bem4854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_ben4869_static {
    public static final BitSet FOLLOW_145_in_ben4869 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ben4871_static {
    public static final BitSet FOLLOW_TOKEN_in_ben4871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_ber4886_static {
    public static final BitSet FOLLOW_146_in_ber4886 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ber4888_static {
    public static final BitSet FOLLOW_TOKEN_in_ber4888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_bez4903_static {
    public static final BitSet FOLLOW_147_in_bez4903 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_bez4905_static {
    public static final BitSet FOLLOW_TOKEN_in_bez4905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_cc4920_static {
    public static final BitSet FOLLOW_148_in_cc4920 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_cc4922_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_cd4937_static {
    public static final BitSet FOLLOW_149_in_cd4937 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_cd4939_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_cs4954_static {
    public static final BitSet FOLLOW_150_in_cs4954 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_cs4956_static {
    public static final BitSet FOLLOW_TOKEN_in_cs4956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_dotok4971_static {
    public static final BitSet FOLLOW_151_in_dotok4971 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dotok4973_static {
    public static final BitSet FOLLOW_TOKEN_in_dotok4973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_dod4988_static {
    public static final BitSet FOLLOW_152_in_dod4988 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dod4990_static {
    public static final BitSet FOLLOW_TOKEN_in_dod4990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_doz5005_static {
    public static final BitSet FOLLOW_153_in_doz5005 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_doz5007_static {
    public static final BitSet FOLLOW_TOKEN_in_doz5007 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_dt5022_static {
    public static final BitSet FOLLOW_154_in_dt5022 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dt5024_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_dtTHE5040_static {
    public static final BitSet FOLLOW_155_in_dtTHE5040 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dtTHE5042_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE5042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_dti5056_static {
    public static final BitSet FOLLOW_156_in_dti5056 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dti5058_static {
    public static final BitSet FOLLOW_TOKEN_in_dti5058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_dts5073_static {
    public static final BitSet FOLLOW_157_in_dts5073 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dts5075_static {
    public static final BitSet FOLLOW_TOKEN_in_dts5075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_dtx5090_static {
    public static final BitSet FOLLOW_158_in_dtx5090 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_dtx5092_static {
    public static final BitSet FOLLOW_TOKEN_in_dtx5092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_ex5107_static {
    public static final BitSet FOLLOW_159_in_ex5107 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ex5109_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5109 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_fw5124_static {
    public static final BitSet FOLLOW_160_in_fw5124 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_fw5126_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_fwin5141_static {
    public static final BitSet FOLLOW_161_in_fwin5141 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_fwin5143_static {
    public static final BitSet FOLLOW_TOKEN_in_fwin5143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_hv5158_static {
    public static final BitSet FOLLOW_162_in_hv5158 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_hv5160_static {
    public static final BitSet FOLLOW_TOKEN_in_hv5160 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_hvd5175_static {
    public static final BitSet FOLLOW_163_in_hvd5175 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_hvd5177_static {
    public static final BitSet FOLLOW_TOKEN_in_hvd5177 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_hvg5192_static {
    public static final BitSet FOLLOW_164_in_hvg5192 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_hvg5194_static {
    public static final BitSet FOLLOW_TOKEN_in_hvg5194 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_hvn5209_static {
    public static final BitSet FOLLOW_165_in_hvn5209 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_hvn5211_static {
    public static final BitSet FOLLOW_TOKEN_in_hvn5211 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_in5226_static {
    public static final BitSet FOLLOW_166_in_in5226 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_in5228_static {
    public static final BitSet FOLLOW_TOKEN_in_in5228 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_jj5243_static {
    public static final BitSet FOLLOW_167_in_jj5243 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_jj5245_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_jjr5260_static {
    public static final BitSet FOLLOW_168_in_jjr5260 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_jjr5262_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_jjs5277_static {
    public static final BitSet FOLLOW_169_in_jjs5277 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_jjs5279_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5279 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_jjt5294_static {
    public static final BitSet FOLLOW_170_in_jjt5294 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_jjt5296_static {
    public static final BitSet FOLLOW_TOKEN_in_jjt5296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_md5311_static {
    public static final BitSet FOLLOW_171_in_md5311 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_md5313_static {
    public static final BitSet FOLLOW_TOKEN_in_md5313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_nc5328_static {
    public static final BitSet FOLLOW_172_in_nc5328 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nc5330_static {
    public static final BitSet FOLLOW_TOKEN_in_nc5330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_nn5345_static {
    public static final BitSet FOLLOW_173_in_nn5345 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nn5347_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_nn_poss5362_static {
    public static final BitSet FOLLOW_174_in_nn_poss5362 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nn_poss5364_static {
    public static final BitSet FOLLOW_TOKEN_in_nn_poss5364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_nns5379_static {
    public static final BitSet FOLLOW_175_in_nns5379 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nns5381_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_nns_poss5396_static {
    public static final BitSet FOLLOW_176_in_nns_poss5396 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nns_poss5398_static {
    public static final BitSet FOLLOW_TOKEN_in_nns_poss5398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_np5413_static {
    public static final BitSet FOLLOW_177_in_np5413 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_np5415_static {
    public static final BitSet FOLLOW_TOKEN_in_np5415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_nnp5431_static {
    public static final BitSet FOLLOW_178_in_nnp5431 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nnp5433_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_np_poss5449_static {
    public static final BitSet FOLLOW_179_in_np_poss5449 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_np_poss5451_static {
    public static final BitSet FOLLOW_TOKEN_in_np_poss5451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_nps5466_static {
    public static final BitSet FOLLOW_180_in_nps5466 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nps5468_static {
    public static final BitSet FOLLOW_TOKEN_in_nps5468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_181_in_nps_poss5483_static {
    public static final BitSet FOLLOW_181_in_nps_poss5483 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nps_poss5485_static {
    public static final BitSet FOLLOW_TOKEN_in_nps_poss5485 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_182_in_nr5500_static {
    public static final BitSet FOLLOW_182_in_nr5500 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_nr5502_static {
    public static final BitSet FOLLOW_TOKEN_in_nr5502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_183_in_od5517_static {
    public static final BitSet FOLLOW_183_in_od5517 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_od5519_static {
    public static final BitSet FOLLOW_TOKEN_in_od5519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_184_in_pn5534_static {
    public static final BitSet FOLLOW_184_in_pn5534 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_pn5536_static {
    public static final BitSet FOLLOW_TOKEN_in_pn5536 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_185_in_pn_poss5551_static {
    public static final BitSet FOLLOW_185_in_pn_poss5551 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_pn_poss5553_static {
    public static final BitSet FOLLOW_TOKEN_in_pn_poss5553 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_186_in_pp_poss5568_static {
    public static final BitSet FOLLOW_186_in_pp_poss5568 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_pp_poss5570_static {
    public static final BitSet FOLLOW_TOKEN_in_pp_poss5570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_187_in_pp_poss_poss5585_static {
    public static final BitSet FOLLOW_187_in_pp_poss_poss5585 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_pp_poss_poss5587_static {
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss5587 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_188_in_ppl5602_static {
    public static final BitSet FOLLOW_188_in_ppl5602 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ppl5604_static {
    public static final BitSet FOLLOW_TOKEN_in_ppl5604 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_189_in_ppls5619_static {
    public static final BitSet FOLLOW_189_in_ppls5619 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ppls5621_static {
    public static final BitSet FOLLOW_TOKEN_in_ppls5621 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_190_in_prp5635_static {
    public static final BitSet FOLLOW_190_in_prp5635 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_prp5637_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5637 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_191_in_prp_poss5652_static {
    public static final BitSet FOLLOW_191_in_prp_poss5652 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5654_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_192_in_ppo5668_static {
    public static final BitSet FOLLOW_192_in_ppo5668 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ppo5670_static {
    public static final BitSet FOLLOW_TOKEN_in_ppo5670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_193_in_pps5685_static {
    public static final BitSet FOLLOW_193_in_pps5685 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_pps5687_static {
    public static final BitSet FOLLOW_TOKEN_in_pps5687 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_194_in_ppss5702_static {
    public static final BitSet FOLLOW_194_in_ppss5702 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ppss5704_static {
    public static final BitSet FOLLOW_TOKEN_in_ppss5704 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_195_in_ql5719_static {
    public static final BitSet FOLLOW_195_in_ql5719 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_ql5721_static {
    public static final BitSet FOLLOW_TOKEN_in_ql5721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_196_in_qlp5736_static {
    public static final BitSet FOLLOW_196_in_qlp5736 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_qlp5738_static {
    public static final BitSet FOLLOW_TOKEN_in_qlp5738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_197_in_rb5753_static {
    public static final BitSet FOLLOW_197_in_rb5753 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rb5755_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_198_in_rbr5770_static {
    public static final BitSet FOLLOW_198_in_rbr5770 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rbr5772_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5772 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_199_in_rbconj5787_static {
    public static final BitSet FOLLOW_199_in_rbconj5787 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rbconj5789_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj5789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_200_in_rbt5804_static {
    public static final BitSet FOLLOW_200_in_rbt5804 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rbt5806_static {
    public static final BitSet FOLLOW_TOKEN_in_rbt5806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_201_in_rbs5821_static {
    public static final BitSet FOLLOW_201_in_rbs5821 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rbs5823_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_202_in_rn5839_static {
    public static final BitSet FOLLOW_202_in_rn5839 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rn5841_static {
    public static final BitSet FOLLOW_TOKEN_in_rn5841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_203_in_rp5856_static {
    public static final BitSet FOLLOW_203_in_rp5856 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_rp5858_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_204_in_sym5873_static {
    public static final BitSet FOLLOW_204_in_sym5873 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_sym5875_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_205_in_to5890_static {
    public static final BitSet FOLLOW_205_in_to5890 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_to5892_static {
    public static final BitSet FOLLOW_TOKEN_in_to5892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_206_in_uh5907_static {
    public static final BitSet FOLLOW_206_in_uh5907 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_uh5909_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_207_in_vb5924_static {
    public static final BitSet FOLLOW_207_in_vb5924 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vb5926_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_208_in_vbp5940_static {
    public static final BitSet FOLLOW_208_in_vbp5940 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbp5942_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_209_in_vbd5957_static {
    public static final BitSet FOLLOW_209_in_vbd5957 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbd5959_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5959 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_210_in_vbg5974_static {
    public static final BitSet FOLLOW_210_in_vbg5974 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbg5976_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_211_in_vbn5991_static {
    public static final BitSet FOLLOW_211_in_vbn5991 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbn5993_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_212_in_vbz6008_static {
    public static final BitSet FOLLOW_212_in_vbz6008 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_vbz6010_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz6010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_213_in_wdt6025_static {
    public static final BitSet FOLLOW_213_in_wdt6025 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_wdt6027_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt6027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_214_in_wp_poss6042_static {
    public static final BitSet FOLLOW_214_in_wp_poss6042 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_wp_poss6044_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss6044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_215_in_wpo6060_static {
    public static final BitSet FOLLOW_215_in_wpo6060 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_wpo6062_static {
    public static final BitSet FOLLOW_TOKEN_in_wpo6062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_216_in_wps6077_static {
    public static final BitSet FOLLOW_216_in_wps6077 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_wps6079_static {
    public static final BitSet FOLLOW_TOKEN_in_wps6079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_217_in_wql6094_static {
    public static final BitSet FOLLOW_217_in_wql6094 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_wql6096_static {
    public static final BitSet FOLLOW_TOKEN_in_wql6096 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_218_in_wrb6111_static {
    public static final BitSet FOLLOW_218_in_wrb6111 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_wrb6113_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb6113 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_219_in_pdt6127_static {
    public static final BitSet FOLLOW_219_in_pdt6127 = new BitSet(new long[]{0x0000000080000000L});

    }static class FOLLOW_TOKEN_in_pdt6129_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt6129 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker199_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker201_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker201 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker215_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker215 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker217_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker217 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker219_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker219 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker221_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker226_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker228_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker228 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker233_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker235_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker237_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred123_ChemicalChunker530_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred123_ChemicalChunker530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred125_ChemicalChunker564_static {
    public static final BitSet FOLLOW_dt_in_synpred125_ChemicalChunker564 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred126_ChemicalChunker567_static {
    public static final BitSet FOLLOW_advAdj_in_synpred126_ChemicalChunker567 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred127_ChemicalChunker572_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred127_ChemicalChunker572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred128_ChemicalChunker574_static {
    public static final BitSet FOLLOW_noun_in_synpred128_ChemicalChunker574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred129_ChemicalChunker576_static {
    public static final BitSet FOLLOW_number_in_synpred129_ChemicalChunker576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred130_ChemicalChunker578_static {
    public static final BitSet FOLLOW_ratio_in_synpred130_ChemicalChunker578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred131_ChemicalChunker586_static {
    public static final BitSet FOLLOW_conjunction_in_synpred131_ChemicalChunker586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred132_ChemicalChunker589_static {
    public static final BitSet FOLLOW_advAdj_in_synpred132_ChemicalChunker589 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred133_ChemicalChunker593_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred133_ChemicalChunker593 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred134_ChemicalChunker595_static {
    public static final BitSet FOLLOW_noun_in_synpred134_ChemicalChunker595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred135_ChemicalChunker597_static {
    public static final BitSet FOLLOW_number_in_synpred135_ChemicalChunker597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred136_ChemicalChunker586_static {
    public static final BitSet FOLLOW_conjunction_in_synpred136_ChemicalChunker586 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C300028L,0x000000000FE01B60L});

    }static class FOLLOW_advAdj_in_synpred136_ChemicalChunker589_static {
    public static final BitSet FOLLOW_advAdj_in_synpred136_ChemicalChunker589 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A7838C200028L,0x000000000FE01B60L});

    }static class FOLLOW_dissolvePhrase_in_synpred136_ChemicalChunker593_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred136_ChemicalChunker593 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred136_ChemicalChunker595_static {
    public static final BitSet FOLLOW_noun_in_synpred136_ChemicalChunker595 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred136_ChemicalChunker597_static {
    public static final BitSet FOLLOW_number_in_synpred136_ChemicalChunker597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred136_ChemicalChunker599_static {
    public static final BitSet FOLLOW_ratio_in_synpred136_ChemicalChunker599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred138_ChemicalChunker615_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred138_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred139_ChemicalChunker609_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred139_ChemicalChunker609 = new BitSet(new long[]{0x2000018F00000002L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_prepphraseIN_in_synpred139_ChemicalChunker612_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred139_ChemicalChunker612 = new BitSet(new long[]{0x2000018F00000002L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_dissolvePhrase_in_synpred139_ChemicalChunker615_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred139_ChemicalChunker615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure1_in_synpred140_ChemicalChunker630_static {
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred140_ChemicalChunker630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure2_in_synpred141_ChemicalChunker632_static {
    public static final BitSet FOLLOW_dissolveStructure2_in_synpred141_ChemicalChunker632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred142_ChemicalChunker662_static {
    public static final BitSet FOLLOW_adj_in_synpred142_ChemicalChunker662 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred144_ChemicalChunker669_static {
    public static final BitSet FOLLOW_molecule_in_synpred144_ChemicalChunker669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred146_ChemicalChunker680_static {
    public static final BitSet FOLLOW_adj_in_synpred146_ChemicalChunker680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred148_ChemicalChunker687_static {
    public static final BitSet FOLLOW_molecule_in_synpred148_ChemicalChunker687 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred151_ChemicalChunker710_static {
    public static final BitSet FOLLOW_adj_in_synpred151_ChemicalChunker710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred153_ChemicalChunker717_static {
    public static final BitSet FOLLOW_molecule_in_synpred153_ChemicalChunker717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred155_ChemicalChunker728_static {
    public static final BitSet FOLLOW_adj_in_synpred155_ChemicalChunker728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred157_ChemicalChunker735_static {
    public static final BitSet FOLLOW_molecule_in_synpred157_ChemicalChunker735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred158_ChemicalChunker741_static {
    public static final BitSet FOLLOW_conjunction_in_synpred158_ChemicalChunker741 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_synpred158_ChemicalChunker743_static {
    public static final BitSet FOLLOW_molecule_in_synpred158_ChemicalChunker743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred159_ChemicalChunker723_static {
    public static final BitSet FOLLOW_inin_in_synpred159_ChemicalChunker723 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078008200020L});

    }static class FOLLOW_dtTHE_in_synpred159_ChemicalChunker725_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred159_ChemicalChunker725 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_adj_in_synpred159_ChemicalChunker728_static {
    public static final BitSet FOLLOW_adj_in_synpred159_ChemicalChunker728 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_synpred159_ChemicalChunker731_static {
    public static final BitSet FOLLOW_nnp_in_synpred159_ChemicalChunker731 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_synpred159_ChemicalChunker735_static {
    public static final BitSet FOLLOW_molecule_in_synpred159_ChemicalChunker735 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_unnamedmolecule_in_synpred159_ChemicalChunker737_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred159_ChemicalChunker737 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_conjunction_in_synpred159_ChemicalChunker741_static {
    public static final BitSet FOLLOW_conjunction_in_synpred159_ChemicalChunker741 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_synpred159_ChemicalChunker743_static {
    public static final BitSet FOLLOW_molecule_in_synpred159_ChemicalChunker743 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_molecule_in_synpred161_ChemicalChunker763_static {
    public static final BitSet FOLLOW_molecule_in_synpred161_ChemicalChunker763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred162_ChemicalChunker765_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred162_ChemicalChunker765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred164_ChemicalChunker776_static {
    public static final BitSet FOLLOW_adj_in_synpred164_ChemicalChunker776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred166_ChemicalChunker783_static {
    public static final BitSet FOLLOW_molecule_in_synpred166_ChemicalChunker783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred167_ChemicalChunker789_static {
    public static final BitSet FOLLOW_conjunction_in_synpred167_ChemicalChunker789 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_synpred167_ChemicalChunker791_static {
    public static final BitSet FOLLOW_molecule_in_synpred167_ChemicalChunker791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred168_ChemicalChunker771_static {
    public static final BitSet FOLLOW_inin_in_synpred168_ChemicalChunker771 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078008200020L});

    }static class FOLLOW_dtTHE_in_synpred168_ChemicalChunker773_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred168_ChemicalChunker773 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_adj_in_synpred168_ChemicalChunker776_static {
    public static final BitSet FOLLOW_adj_in_synpred168_ChemicalChunker776 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_nnp_in_synpred168_ChemicalChunker779_static {
    public static final BitSet FOLLOW_nnp_in_synpred168_ChemicalChunker779 = new BitSet(new long[]{0x2000018F00000000L,0x2000000000002000L,0x0084078000200020L});

    }static class FOLLOW_molecule_in_synpred168_ChemicalChunker783_static {
    public static final BitSet FOLLOW_molecule_in_synpred168_ChemicalChunker783 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_unnamedmolecule_in_synpred168_ChemicalChunker785_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred168_ChemicalChunker785 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_conjunction_in_synpred168_ChemicalChunker789_static {
    public static final BitSet FOLLOW_conjunction_in_synpred168_ChemicalChunker789 = new BitSet(new long[]{0x2000008F00000000L,0x2000000000002000L,0x0080078000200020L});

    }static class FOLLOW_molecule_in_synpred168_ChemicalChunker791_static {
    public static final BitSet FOLLOW_molecule_in_synpred168_ChemicalChunker791 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000100000L});

    }static class FOLLOW_to_in_synpred171_ChemicalChunker843_static {
    public static final BitSet FOLLOW_to_in_synpred171_ChemicalChunker843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred172_ChemicalChunker846_static {
    public static final BitSet FOLLOW_inAll_in_synpred172_ChemicalChunker846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred178_ChemicalChunker865_static {
    public static final BitSet FOLLOW_verb_in_synpred178_ChemicalChunker865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred179_ChemicalChunker868_static {
    public static final BitSet FOLLOW_md_in_synpred179_ChemicalChunker868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred180_ChemicalChunker871_static {
    public static final BitSet FOLLOW_adv_in_synpred180_ChemicalChunker871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred181_ChemicalChunker874_static {
    public static final BitSet FOLLOW_adj_in_synpred181_ChemicalChunker874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred182_ChemicalChunker877_static {
    public static final BitSet FOLLOW_neg_in_synpred182_ChemicalChunker877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred183_ChemicalChunker853_static {
    public static final BitSet FOLLOW_md_in_synpred183_ChemicalChunker853 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_rbconj_in_synpred183_ChemicalChunker856_static {
    public static final BitSet FOLLOW_rbconj_in_synpred183_ChemicalChunker856 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_adv_in_synpred183_ChemicalChunker859_static {
    public static final BitSet FOLLOW_adv_in_synpred183_ChemicalChunker859 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_adj_in_synpred183_ChemicalChunker862_static {
    public static final BitSet FOLLOW_adj_in_synpred183_ChemicalChunker862 = new BitSet(new long[]{0x01FFFE8600000000L,0x076EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_verb_in_synpred183_ChemicalChunker865_static {
    public static final BitSet FOLLOW_verb_in_synpred183_ChemicalChunker865 = new BitSet(new long[]{0x01FFFE8600000002L,0x876EBEAF5FF3C000L,0x00000FC004000000L,0x00000000001FABE0L});

    }static class FOLLOW_md_in_synpred183_ChemicalChunker868_static {
    public static final BitSet FOLLOW_md_in_synpred183_ChemicalChunker868 = new BitSet(new long[]{0x0000008600000002L,0x8000000000000000L,0x00000F8000000000L,0x0000000000000B60L});

    }static class FOLLOW_adv_in_synpred183_ChemicalChunker871_static {
    public static final BitSet FOLLOW_adv_in_synpred183_ChemicalChunker871 = new BitSet(new long[]{0x0000008600000002L,0x8000000000000000L,0x0000078000000000L,0x0000000000000B60L});

    }static class FOLLOW_adj_in_synpred183_ChemicalChunker874_static {
    public static final BitSet FOLLOW_adj_in_synpred183_ChemicalChunker874 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});

    }static class FOLLOW_neg_in_synpred183_ChemicalChunker877_static {
    public static final BitSet FOLLOW_neg_in_synpred183_ChemicalChunker877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred184_ChemicalChunker883_static {
    public static final BitSet FOLLOW_inoff_in_synpred184_ChemicalChunker883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred187_ChemicalChunker887_static {
    public static final BitSet FOLLOW_cc_in_synpred187_ChemicalChunker887 = new BitSet(new long[]{0x09FFFE8600000000L,0xA000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_comma_in_synpred187_ChemicalChunker890_static {
    public static final BitSet FOLLOW_comma_in_synpred187_ChemicalChunker890 = new BitSet(new long[]{0x09FFFE8600000000L,0x8000000000000008L,0x000007C004200000L,0x0000000000002B60L});

    }static class FOLLOW_prepphrase_in_synpred187_ChemicalChunker893_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred187_ChemicalChunker893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred197_ChemicalChunker923_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred197_ChemicalChunker923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred210_ChemicalChunker949_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred210_ChemicalChunker949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred238_ChemicalChunker1045_static {
    public static final BitSet FOLLOW_dash_in_synpred238_ChemicalChunker1045 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_nounStructure_in_synpred238_ChemicalChunker1047_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred238_ChemicalChunker1047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred241_ChemicalChunker1062_static {
    public static final BitSet FOLLOW_citation_in_synpred241_ChemicalChunker1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred242_ChemicalChunker1064_static {
    public static final BitSet FOLLOW_cycles_in_synpred242_ChemicalChunker1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred243_ChemicalChunker1066_static {
    public static final BitSet FOLLOW_molecule_in_synpred243_ChemicalChunker1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred244_ChemicalChunker1068_static {
    public static final BitSet FOLLOW_apparatus_in_synpred244_ChemicalChunker1068 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred245_ChemicalChunker1070_static {
    public static final BitSet FOLLOW_mixture_in_synpred245_ChemicalChunker1070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred246_ChemicalChunker1072_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred246_ChemicalChunker1072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred248_ChemicalChunker1076_static {
    public static final BitSet FOLLOW_nnstate_in_synpred248_ChemicalChunker1076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred249_ChemicalChunker1078_static {
    public static final BitSet FOLLOW_nn_in_synpred249_ChemicalChunker1078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred252_ChemicalChunker1084_static {
    public static final BitSet FOLLOW_nnadd_in_synpred252_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcpr_in_synpred255_ChemicalChunker1090_static {
    public static final BitSet FOLLOW_oscarcpr_in_synpred255_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred256_ChemicalChunker1092_static {
    public static final BitSet FOLLOW_range_in_synpred256_ChemicalChunker1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_synpred257_ChemicalChunker1094_static {
    public static final BitSet FOLLOW_amount_in_synpred257_ChemicalChunker1094 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred262_ChemicalChunker1104_static {
    public static final BitSet FOLLOW_quantity_in_synpred262_ChemicalChunker1104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred263_ChemicalChunker1106_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred263_ChemicalChunker1106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred264_ChemicalChunker1108_static {
    public static final BitSet FOLLOW_measurements_in_synpred264_ChemicalChunker1108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred270_ChemicalChunker1120_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred270_ChemicalChunker1120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_synpred279_ChemicalChunker1138_static {
    public static final BitSet FOLLOW_wdt_in_synpred279_ChemicalChunker1138 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_synpred280_ChemicalChunker1140_static {
    public static final BitSet FOLLOW_wp_poss_in_synpred280_ChemicalChunker1140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wpo_in_synpred281_ChemicalChunker1142_static {
    public static final BitSet FOLLOW_wpo_in_synpred281_ChemicalChunker1142 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wps_in_synpred282_ChemicalChunker1144_static {
    public static final BitSet FOLLOW_wps_in_synpred282_ChemicalChunker1144 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_number_in_synpred288_ChemicalChunker1156_static {
    public static final BitSet FOLLOW_number_in_synpred288_ChemicalChunker1156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1158_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred289_ChemicalChunker1158 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberratio_in_synpred303_ChemicalChunker1252_static {
    public static final BitSet FOLLOW_numberratio_in_synpred303_ChemicalChunker1252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred304_ChemicalChunker1280_static {
    public static final BitSet FOLLOW_colon_in_synpred304_ChemicalChunker1280 = new BitSet(new long[]{0x0000000100000000L});

    }static class FOLLOW_cdAlphanum_in_synpred304_ChemicalChunker1282_static {
    public static final BitSet FOLLOW_cdAlphanum_in_synpred304_ChemicalChunker1282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred305_ChemicalChunker1284_static {
    public static final BitSet FOLLOW_cd_in_synpred305_ChemicalChunker1284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred306_ChemicalChunker1301_static {
    public static final BitSet FOLLOW_colon_in_synpred306_ChemicalChunker1301 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_noun_in_synpred306_ChemicalChunker1303_static {
    public static final BitSet FOLLOW_noun_in_synpred306_ChemicalChunker1303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred319_ChemicalChunker1500_static {
    public static final BitSet FOLLOW_fw_in_synpred319_ChemicalChunker1500 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred320_ChemicalChunker1502_static {
    public static final BitSet FOLLOW_verb_in_synpred320_ChemicalChunker1502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred321_ChemicalChunker1504_static {
    public static final BitSet FOLLOW_nn_in_synpred321_ChemicalChunker1504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred322_ChemicalChunker1506_static {
    public static final BitSet FOLLOW_measurements_in_synpred322_ChemicalChunker1506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred325_ChemicalChunker1512_static {
    public static final BitSet FOLLOW_stop_in_synpred325_ChemicalChunker1512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1514_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred326_ChemicalChunker1514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred327_ChemicalChunker1516_static {
    public static final BitSet FOLLOW_molecule_in_synpred327_ChemicalChunker1516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred328_ChemicalChunker1518_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred328_ChemicalChunker1518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred330_ChemicalChunker1522_static {
    public static final BitSet FOLLOW_sym_in_synpred330_ChemicalChunker1522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred331_ChemicalChunker1524_static {
    public static final BitSet FOLLOW_cd_in_synpred331_ChemicalChunker1524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred332_ChemicalChunker1526_static {
    public static final BitSet FOLLOW_noun_in_synpred332_ChemicalChunker1526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred333_ChemicalChunker1528_static {
    public static final BitSet FOLLOW_inof_in_synpred333_ChemicalChunker1528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred334_ChemicalChunker1530_static {
    public static final BitSet FOLLOW_inAll_in_synpred334_ChemicalChunker1530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred335_ChemicalChunker1532_static {
    public static final BitSet FOLLOW_cd_in_synpred335_ChemicalChunker1532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred336_ChemicalChunker1534_static {
    public static final BitSet FOLLOW_comma_in_synpred336_ChemicalChunker1534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred337_ChemicalChunker1536_static {
    public static final BitSet FOLLOW_adj_in_synpred337_ChemicalChunker1536 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred339_ChemicalChunker1544_static {
    public static final BitSet FOLLOW_minimixture_in_synpred339_ChemicalChunker1544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred340_ChemicalChunker1546_static {
    public static final BitSet FOLLOW_fw_in_synpred340_ChemicalChunker1546 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred341_ChemicalChunker1548_static {
    public static final BitSet FOLLOW_verb_in_synpred341_ChemicalChunker1548 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred342_ChemicalChunker1550_static {
    public static final BitSet FOLLOW_measurements_in_synpred342_ChemicalChunker1550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred343_ChemicalChunker1552_static {
    public static final BitSet FOLLOW_nnyield_in_synpred343_ChemicalChunker1552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred346_ChemicalChunker1558_static {
    public static final BitSet FOLLOW_stop_in_synpred346_ChemicalChunker1558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred347_ChemicalChunker1560_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred347_ChemicalChunker1560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred348_ChemicalChunker1562_static {
    public static final BitSet FOLLOW_molecule_in_synpred348_ChemicalChunker1562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred349_ChemicalChunker1564_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred349_ChemicalChunker1564 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred351_ChemicalChunker1568_static {
    public static final BitSet FOLLOW_sym_in_synpred351_ChemicalChunker1568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred352_ChemicalChunker1570_static {
    public static final BitSet FOLLOW_cd_in_synpred352_ChemicalChunker1570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred353_ChemicalChunker1572_static {
    public static final BitSet FOLLOW_noun_in_synpred353_ChemicalChunker1572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred354_ChemicalChunker1574_static {
    public static final BitSet FOLLOW_inof_in_synpred354_ChemicalChunker1574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred355_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_inAll_in_synpred355_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred356_ChemicalChunker1578_static {
    public static final BitSet FOLLOW_cd_in_synpred356_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred357_ChemicalChunker1580_static {
    public static final BitSet FOLLOW_comma_in_synpred357_ChemicalChunker1580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred358_ChemicalChunker1582_static {
    public static final BitSet FOLLOW_adj_in_synpred358_ChemicalChunker1582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred360_ChemicalChunker1586_static {
    public static final BitSet FOLLOW_stop_in_synpred360_ChemicalChunker1586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred362_ChemicalChunker1647_static {
    public static final BitSet FOLLOW_fw_in_synpred362_ChemicalChunker1647 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred363_ChemicalChunker1649_static {
    public static final BitSet FOLLOW_nn_in_synpred363_ChemicalChunker1649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred364_ChemicalChunker1651_static {
    public static final BitSet FOLLOW_verb_in_synpred364_ChemicalChunker1651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred365_ChemicalChunker1653_static {
    public static final BitSet FOLLOW_measurements_in_synpred365_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred368_ChemicalChunker1659_static {
    public static final BitSet FOLLOW_stop_in_synpred368_ChemicalChunker1659 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred369_ChemicalChunker1661_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred369_ChemicalChunker1661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred370_ChemicalChunker1663_static {
    public static final BitSet FOLLOW_molecule_in_synpred370_ChemicalChunker1663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred371_ChemicalChunker1665_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred371_ChemicalChunker1665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred373_ChemicalChunker1669_static {
    public static final BitSet FOLLOW_sym_in_synpred373_ChemicalChunker1669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred374_ChemicalChunker1671_static {
    public static final BitSet FOLLOW_cd_in_synpred374_ChemicalChunker1671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred375_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_noun_in_synpred375_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred376_ChemicalChunker1675_static {
    public static final BitSet FOLLOW_inof_in_synpred376_ChemicalChunker1675 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred377_ChemicalChunker1677_static {
    public static final BitSet FOLLOW_inAll_in_synpred377_ChemicalChunker1677 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred378_ChemicalChunker1679_static {
    public static final BitSet FOLLOW_cd_in_synpred378_ChemicalChunker1679 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred379_ChemicalChunker1681_static {
    public static final BitSet FOLLOW_comma_in_synpred379_ChemicalChunker1681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred380_ChemicalChunker1683_static {
    public static final BitSet FOLLOW_adj_in_synpred380_ChemicalChunker1683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred382_ChemicalChunker1691_static {
    public static final BitSet FOLLOW_fw_in_synpred382_ChemicalChunker1691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred383_ChemicalChunker1693_static {
    public static final BitSet FOLLOW_verb_in_synpred383_ChemicalChunker1693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_synpred384_ChemicalChunker1695_static {
    public static final BitSet FOLLOW_measurements_in_synpred384_ChemicalChunker1695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred385_ChemicalChunker1697_static {
    public static final BitSet FOLLOW_nnyield_in_synpred385_ChemicalChunker1697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred388_ChemicalChunker1703_static {
    public static final BitSet FOLLOW_stop_in_synpred388_ChemicalChunker1703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred389_ChemicalChunker1705_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred389_ChemicalChunker1705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred390_ChemicalChunker1707_static {
    public static final BitSet FOLLOW_molecule_in_synpred390_ChemicalChunker1707 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred391_ChemicalChunker1709_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred391_ChemicalChunker1709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred393_ChemicalChunker1713_static {
    public static final BitSet FOLLOW_sym_in_synpred393_ChemicalChunker1713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred394_ChemicalChunker1715_static {
    public static final BitSet FOLLOW_cd_in_synpred394_ChemicalChunker1715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred395_ChemicalChunker1717_static {
    public static final BitSet FOLLOW_noun_in_synpred395_ChemicalChunker1717 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_synpred396_ChemicalChunker1719_static {
    public static final BitSet FOLLOW_inof_in_synpred396_ChemicalChunker1719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred397_ChemicalChunker1721_static {
    public static final BitSet FOLLOW_inAll_in_synpred397_ChemicalChunker1721 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred398_ChemicalChunker1723_static {
    public static final BitSet FOLLOW_cd_in_synpred398_ChemicalChunker1723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred399_ChemicalChunker1725_static {
    public static final BitSet FOLLOW_comma_in_synpred399_ChemicalChunker1725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred400_ChemicalChunker1727_static {
    public static final BitSet FOLLOW_adj_in_synpred400_ChemicalChunker1727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred402_ChemicalChunker1731_static {
    public static final BitSet FOLLOW_stop_in_synpred402_ChemicalChunker1731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred414_ChemicalChunker1786_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred414_ChemicalChunker1786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred415_ChemicalChunker1788_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred415_ChemicalChunker1788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred416_ChemicalChunker1790_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred416_ChemicalChunker1790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred417_ChemicalChunker1792_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred417_ChemicalChunker1792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred418_ChemicalChunker1794_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred418_ChemicalChunker1794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred422_ChemicalChunker1895_static {
    public static final BitSet FOLLOW_advAdj_in_synpred422_ChemicalChunker1895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred427_ChemicalChunker1911_static {
    public static final BitSet FOLLOW_nntime_in_synpred427_ChemicalChunker1911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred430_ChemicalChunker1999_static {
    public static final BitSet FOLLOW_advAdj_in_synpred430_ChemicalChunker1999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred431_ChemicalChunker2004_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred431_ChemicalChunker2004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred465_ChemicalChunker2117_static {
    public static final BitSet FOLLOW_advAdj_in_synpred465_ChemicalChunker2117 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred470_ChemicalChunker2132_static {
    public static final BitSet FOLLOW_nntemp_in_synpred470_ChemicalChunker2132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred478_ChemicalChunker2333_static {
    public static final BitSet FOLLOW_conjunction_in_synpred478_ChemicalChunker2333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred479_ChemicalChunker2333_static {
    public static final BitSet FOLLOW_conjunction_in_synpred479_ChemicalChunker2333 = new BitSet(new long[]{0x2400008F00000000L,0x2000000020042084L,0x0080278004300020L});

    }static class FOLLOW_apparatus_in_synpred479_ChemicalChunker2336_static {
    public static final BitSet FOLLOW_apparatus_in_synpred479_ChemicalChunker2336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred482_ChemicalChunker2354_static {
    public static final BitSet FOLLOW_nnApp_in_synpred482_ChemicalChunker2354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred483_ChemicalChunker2382_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred483_ChemicalChunker2382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred484_ChemicalChunker2386_static {
    public static final BitSet FOLLOW_dash_in_synpred484_ChemicalChunker2386 = new BitSet(new long[]{0x2400008F00000000L,0x2000000020042084L,0x0080278004200020L});

    }static class FOLLOW_nnapparatus_in_synpred484_ChemicalChunker2388_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred484_ChemicalChunker2388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred485_ChemicalChunker2402_static {
    public static final BitSet FOLLOW_quantity_in_synpred485_ChemicalChunker2402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred486_ChemicalChunker2404_static {
    public static final BitSet FOLLOW_adj_in_synpred486_ChemicalChunker2404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred487_ChemicalChunker2406_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred487_ChemicalChunker2406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred488_ChemicalChunker2408_static {
    public static final BitSet FOLLOW_nnadd_in_synpred488_ChemicalChunker2408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred489_ChemicalChunker2410_static {
    public static final BitSet FOLLOW_molecule_in_synpred489_ChemicalChunker2410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred490_ChemicalChunker2412_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred490_ChemicalChunker2412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred491_ChemicalChunker2414_static {
    public static final BitSet FOLLOW_nnstate_in_synpred491_ChemicalChunker2414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred492_ChemicalChunker2416_static {
    public static final BitSet FOLLOW_nn_in_synpred492_ChemicalChunker2416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred495_ChemicalChunker2442_static {
    public static final BitSet FOLLOW_dt_in_synpred495_ChemicalChunker2442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred496_ChemicalChunker2454_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred496_ChemicalChunker2454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound1_in_synpred502_ChemicalChunker2505_static {
    public static final BitSet FOLLOW_oscarCompound1_in_synpred502_ChemicalChunker2505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound3_in_synpred504_ChemicalChunker2509_static {
    public static final BitSet FOLLOW_oscarCompound3_in_synpred504_ChemicalChunker2509 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred506_ChemicalChunker2516_static {
    public static final BitSet FOLLOW_adj_in_synpred506_ChemicalChunker2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_reference_in_synpred507_ChemicalChunker2519_static {
    public static final BitSet FOLLOW_reference_in_synpred507_ChemicalChunker2519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred508_ChemicalChunker2594_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred508_ChemicalChunker2594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred509_ChemicalChunker2622_static {
    public static final BitSet FOLLOW_dash_in_synpred509_ChemicalChunker2622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred510_ChemicalChunker2624_static {
    public static final BitSet FOLLOW_apost_in_synpred510_ChemicalChunker2624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred511_ChemicalChunker2641_static {
    public static final BitSet FOLLOW_dash_in_synpred511_ChemicalChunker2641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_oscarcm_in_synpred511_ChemicalChunker2643_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred511_ChemicalChunker2643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred512_ChemicalChunker2648_static {
    public static final BitSet FOLLOW_dash_in_synpred512_ChemicalChunker2648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred513_ChemicalChunker2662_static {
    public static final BitSet FOLLOW_quantity_in_synpred513_ChemicalChunker2662 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred514_ChemicalChunker2664_static {
    public static final BitSet FOLLOW_mixture_in_synpred514_ChemicalChunker2664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred515_ChemicalChunker2672_static {
    public static final BitSet FOLLOW_mixture_in_synpred515_ChemicalChunker2672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred516_ChemicalChunker2683_static {
    public static final BitSet FOLLOW_quantity_in_synpred516_ChemicalChunker2683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred517_ChemicalChunker2685_static {
    public static final BitSet FOLLOW_mixture_in_synpred517_ChemicalChunker2685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred518_ChemicalChunker2689_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred518_ChemicalChunker2689 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred519_ChemicalChunker2694_static {
    public static final BitSet FOLLOW_citation_in_synpred519_ChemicalChunker2694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred520_ChemicalChunker2696_static {
    public static final BitSet FOLLOW_quantity_in_synpred520_ChemicalChunker2696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred521_ChemicalChunker2698_static {
    public static final BitSet FOLLOW_mixture_in_synpred521_ChemicalChunker2698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred522_ChemicalChunker2712_static {
    public static final BitSet FOLLOW_quantity_in_synpred522_ChemicalChunker2712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred524_ChemicalChunker2734_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred524_ChemicalChunker2734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred525_ChemicalChunker2736_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred525_ChemicalChunker2736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred529_ChemicalChunker2822_static {
    public static final BitSet FOLLOW_citation_in_synpred529_ChemicalChunker2822 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred530_ChemicalChunker2824_static {
    public static final BitSet FOLLOW_quantity_in_synpred530_ChemicalChunker2824 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred531_ChemicalChunker2826_static {
    public static final BitSet FOLLOW_mixture_in_synpred531_ChemicalChunker2826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred532_ChemicalChunker2847_static {
    public static final BitSet FOLLOW_jj_in_synpred532_ChemicalChunker2847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred533_ChemicalChunker2847_static {
    public static final BitSet FOLLOW_jj_in_synpred533_ChemicalChunker2847 = new BitSet(new long[]{0xEE0001BF00000000L,0x28D14150A00C3FFFL,0xC084A78384200028L,0x000000000FE01000L});

    }static class FOLLOW_noun_in_synpred533_ChemicalChunker2850_static {
    public static final BitSet FOLLOW_noun_in_synpred533_ChemicalChunker2850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred534_ChemicalChunker2863_static {
    public static final BitSet FOLLOW_quantity_in_synpred534_ChemicalChunker2863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_synpred535_ChemicalChunker2891_static {
    public static final BitSet FOLLOW_cdAlphanum_in_synpred535_ChemicalChunker2891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred536_ChemicalChunker2895_static {
    public static final BitSet FOLLOW_quantity_in_synpred536_ChemicalChunker2895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred537_ChemicalChunker2897_static {
    public static final BitSet FOLLOW_mixture_in_synpred537_ChemicalChunker2897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_synpred539_ChemicalChunker2913_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred539_ChemicalChunker2913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred540_ChemicalChunker2917_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred540_ChemicalChunker2917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_synpred541_ChemicalChunker2921_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred541_ChemicalChunker2921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred546_ChemicalChunker3025_static {
    public static final BitSet FOLLOW_comma_in_synpred546_ChemicalChunker3025 = new BitSet(new long[]{0x2000000900000000L,0x0000000000000000L,0x0080000000200020L});

    }static class FOLLOW_measurements_in_synpred546_ChemicalChunker3028_static {
    public static final BitSet FOLLOW_measurements_in_synpred546_ChemicalChunker3028 = new BitSet(new long[]{0x0000000000000002L});

    }
}