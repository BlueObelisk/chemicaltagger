// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-06-14 15:17:38

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[712+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document195_static.FOLLOW_sentences_in_document195);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 55:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:55:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences216_static.FOLLOW_sentenceStructure_in_sentences216);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences218_static.FOLLOW_unmatchedPhrase_in_sentences218);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences222_static.FOLLOW_stop_in_sentences222);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure232_static.FOLLOW_nounphrase_in_sentenceStructure232);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure234_static.FOLLOW_verbphrase_in_sentenceStructure234);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure236_static.FOLLOW_prepphrase_in_sentenceStructure236);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure238_static.FOLLOW_prepphraseAfter_in_sentenceStructure238);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure243_static.FOLLOW_advAdj_in_sentenceStructure243);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure245_static.FOLLOW_colon_in_sentenceStructure245);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure250_static.FOLLOW_conjunction_in_sentenceStructure250);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure252_static.FOLLOW_rbconj_in_sentenceStructure252);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure254_static.FOLLOW_comma_in_sentenceStructure254);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:61:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase266_static.FOLLOW_unmatchedToken_in_unmatchedPhrase266);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 62:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:62:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:64:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode18 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp19 = null;

        ChemicalChunkerParser.inAll_return inAll20 = null;

        ChemicalChunkerParser.nnexample_return nnexample21 = null;

        ChemicalChunkerParser.nnstate_return nnstate22 = null;

        ChemicalChunkerParser.nntime_return nntime23 = null;

        ChemicalChunkerParser.nnmass_return nnmass24 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar25 = null;

        ChemicalChunkerParser.nnamount_return nnamount26 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere27 = null;

        ChemicalChunkerParser.nneq_return nneq28 = null;

        ChemicalChunkerParser.nnvol_return nnvol29 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity30 = null;

        ChemicalChunkerParser.nntemp_return nntemp31 = null;

        ChemicalChunkerParser.nnph_return nnph32 = null;

        ChemicalChunkerParser.nnflash_return nnflash33 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral34 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod35 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure36 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn37 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography38 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum39 = null;

        ChemicalChunkerParser.nncycle_return nncycle40 = null;

        ChemicalChunkerParser.nntimes_return nntimes41 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm42 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos )
            int alt7=70;
            switch ( input.LA(1) ) {
            case 38:
            case 145:
                {
                alt7=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 150:
            case 151:
            case 152:
            case 163:
            case 164:
            case 165:
            case 166:
                {
                alt7=2;
                }
                break;
            case 43:
                {
                alt7=3;
                }
                break;
            case 44:
                {
                alt7=4;
                }
                break;
            case 46:
                {
                alt7=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 149:
            case 168:
                {
                alt7=6;
                }
                break;
            case 83:
                {
                alt7=7;
                }
                break;
            case 63:
                {
                alt7=8;
                }
                break;
            case 64:
                {
                alt7=9;
                }
                break;
            case 65:
                {
                alt7=10;
                }
                break;
            case 67:
                {
                alt7=11;
                }
                break;
            case 66:
                {
                alt7=12;
                }
                break;
            case 68:
                {
                alt7=13;
                }
                break;
            case 69:
                {
                alt7=14;
                }
                break;
            case 70:
                {
                alt7=15;
                }
                break;
            case 71:
                {
                alt7=16;
                }
                break;
            case 72:
                {
                alt7=17;
                }
                break;
            case 73:
                {
                alt7=18;
                }
                break;
            case 74:
                {
                alt7=19;
                }
                break;
            case 75:
                {
                alt7=20;
                }
                break;
            case 76:
                {
                alt7=21;
                }
                break;
            case 77:
                {
                alt7=22;
                }
                break;
            case 78:
                {
                alt7=23;
                }
                break;
            case 79:
                {
                alt7=24;
                }
                break;
            case 80:
                {
                alt7=25;
                }
                break;
            case 81:
                {
                alt7=26;
                }
                break;
            case 82:
                {
                alt7=27;
                }
                break;
            case 84:
                {
                alt7=28;
                }
                break;
            case 42:
                {
                alt7=29;
                }
                break;
            case 41:
                {
                alt7=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
                {
                alt7=31;
                }
                break;
            case 89:
                {
                alt7=32;
                }
                break;
            case 90:
                {
                alt7=33;
                }
                break;
            case 100:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 107:
                {
                alt7=36;
                }
                break;
            case 109:
                {
                alt7=37;
                }
                break;
            case 111:
                {
                alt7=38;
                }
                break;
            case 117:
                {
                alt7=39;
                }
                break;
            case 119:
                {
                alt7=40;
                }
                break;
            case 123:
                {
                alt7=41;
                }
                break;
            case 126:
                {
                alt7=42;
                }
                break;
            case 130:
                {
                alt7=43;
                }
                break;
            case 132:
                {
                alt7=44;
                }
                break;
            case 134:
                {
                alt7=45;
                }
                break;
            case 135:
                {
                alt7=46;
                }
                break;
            case 136:
                {
                alt7=47;
                }
                break;
            case 138:
                {
                alt7=48;
                }
                break;
            case 139:
                {
                alt7=49;
                }
                break;
            case 140:
                {
                alt7=50;
                }
                break;
            case 142:
                {
                alt7=51;
                }
                break;
            case 143:
                {
                alt7=52;
                }
                break;
            case 144:
                {
                alt7=53;
                }
                break;
            case 146:
                {
                alt7=54;
                }
                break;
            case 141:
                {
                alt7=55;
                }
                break;
            case 148:
                {
                alt7=56;
                }
                break;
            case 154:
                {
                alt7=57;
                }
                break;
            case 155:
                {
                alt7=58;
                }
                break;
            case 156:
                {
                alt7=59;
                }
                break;
            case 157:
                {
                alt7=60;
                }
                break;
            case 161:
                {
                alt7=61;
                }
                break;
            case 162:
                {
                alt7=62;
                }
                break;
            case 131:
                {
                alt7=63;
                }
                break;
            case 167:
                {
                alt7=64;
                }
                break;
            case 169:
                {
                alt7=65;
                }
                break;
            case 147:
            case 159:
            case 176:
            case 177:
            case 178:
            case 179:
                {
                alt7=66;
                }
                break;
            case 133:
                {
                alt7=67;
                }
                break;
            case 153:
                {
                alt7=68;
                }
                break;
            case 158:
                {
                alt7=69;
                }
                break;
            case 160:
                {
                alt7=70;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken285_static.FOLLOW_numeric_in_unmatchedToken285);
                    numeric15=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken287_static.FOLLOW_advAdj_in_unmatchedToken287);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken289_static.FOLLOW_tmunicode_in_unmatchedToken289);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken291_static.FOLLOW_cdunicode_in_unmatchedToken291);
                    cdunicode18=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken293_static.FOLLOW_jjcomp_in_unmatchedToken293);
                    jjcomp19=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:65:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken295_static.FOLLOW_inAll_in_unmatchedToken295);
                    inAll20=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken299_static.FOLLOW_nnexample_in_unmatchedToken299);
                    nnexample21=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken301_static.FOLLOW_nnstate_in_unmatchedToken301);
                    nnstate22=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken303_static.FOLLOW_nntime_in_unmatchedToken303);
                    nntime23=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken305_static.FOLLOW_nnmass_in_unmatchedToken305);
                    nnmass24=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken307_static.FOLLOW_nnmolar_in_unmatchedToken307);
                    nnmolar25=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken309_static.FOLLOW_nnamount_in_unmatchedToken309);
                    nnamount26=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken311_static.FOLLOW_nnatmosphere_in_unmatchedToken311);
                    nnatmosphere27=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken313_static.FOLLOW_nneq_in_unmatchedToken313);
                    nneq28=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken315_static.FOLLOW_nnvol_in_unmatchedToken315);
                    nnvol29=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken317_static.FOLLOW_nnchementity_in_unmatchedToken317);
                    nnchementity30=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken319_static.FOLLOW_nntemp_in_unmatchedToken319);
                    nntemp31=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken321_static.FOLLOW_nnph_in_unmatchedToken321);
                    nnph32=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken323_static.FOLLOW_nnflash_in_unmatchedToken323);
                    nnflash33=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken325_static.FOLLOW_nngeneral_in_unmatchedToken325);
                    nngeneral34=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken327_static.FOLLOW_nnmethod_in_unmatchedToken327);
                    nnmethod35=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken329_static.FOLLOW_nnpressure_in_unmatchedToken329);
                    nnpressure36=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken331_static.FOLLOW_nncolumn_in_unmatchedToken331);
                    nncolumn37=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken333_static.FOLLOW_nnchromatography_in_unmatchedToken333);
                    nnchromatography38=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken335_static.FOLLOW_nnvacuum_in_unmatchedToken335);
                    nnvacuum39=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken337_static.FOLLOW_nncycle_in_unmatchedToken337);
                    nncycle40=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:66:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken339_static.FOLLOW_nntimes_in_unmatchedToken339);
                    nntimes41=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken343_static.FOLLOW_oscarcm_in_unmatchedToken343);
                    oscarcm42=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken345_static.FOLLOW_oscaronts_in_unmatchedToken345);
                    oscaronts43=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken347_static.FOLLOW_oscarase_in_unmatchedToken347);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken349_static.FOLLOW_verb_in_unmatchedToken349);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken351_static.FOLLOW_nnadd_in_unmatchedToken351);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken353_static.FOLLOW_nnmixture_in_unmatchedToken353);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken355_static.FOLLOW_nnapparatus_in_unmatchedToken355);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken357_static.FOLLOW_nnconcentrate_in_unmatchedToken357);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken359_static.FOLLOW_nndry_in_unmatchedToken359);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken361_static.FOLLOW_nnextract_in_unmatchedToken361);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken363_static.FOLLOW_nnfilter_in_unmatchedToken363);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken365_static.FOLLOW_nnprecipitate_in_unmatchedToken365);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken367_static.FOLLOW_nnpurify_in_unmatchedToken367);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken369_static.FOLLOW_nnremove_in_unmatchedToken369);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken371_static.FOLLOW_nnsynthesize_in_unmatchedToken371);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken373_static.FOLLOW_nnyield_in_unmatchedToken373);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken375_static.FOLLOW_colon_in_unmatchedToken375);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken377_static.FOLLOW_apost_in_unmatchedToken377);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken379_static.FOLLOW_neg_in_unmatchedToken379);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken381_static.FOLLOW_dash_in_unmatchedToken381);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken383_static.FOLLOW_nnpercent_in_unmatchedToken383);
                    nnpercent62=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken385_static.FOLLOW_lsqb_in_unmatchedToken385);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken387_static.FOLLOW_rsqb_in_unmatchedToken387);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken389_static.FOLLOW_lrb_in_unmatchedToken389);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:67:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken391_static.FOLLOW_rrb_in_unmatchedToken391);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken395_static.FOLLOW_cc_in_unmatchedToken395);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken397_static.FOLLOW_dt_in_unmatchedToken397);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken399_static.FOLLOW_dtTHE_in_unmatchedToken399);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken401_static.FOLLOW_fw_in_unmatchedToken401);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken403_static.FOLLOW_md_in_unmatchedToken403);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken405_static.FOLLOW_nn_in_unmatchedToken405);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken407_static.FOLLOW_nns_in_unmatchedToken407);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken409_static.FOLLOW_nnp_in_unmatchedToken409);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken411_static.FOLLOW_prp_in_unmatchedToken411);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken413_static.FOLLOW_prp_poss_in_unmatchedToken413);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken415_static.FOLLOW_rbconj_in_unmatchedToken415);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken417_static.FOLLOW_sym_in_unmatchedToken417);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken419_static.FOLLOW_uh_in_unmatchedToken419);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken421_static.FOLLOW_clause_in_unmatchedToken421);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken423_static.FOLLOW_comma_in_unmatchedToken423);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken425_static.FOLLOW_ls_in_unmatchedToken425);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken427_static.FOLLOW_nnps_in_unmatchedToken427);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:68:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken429_static.FOLLOW_pos_in_unmatchedToken429);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:70:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure85 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase439_static.FOLLOW_nounphraseStructure_in_nounphrase439);
            nounphraseStructure85=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure85.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 71:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:71:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:73:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure186 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure458_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure458);
                    nounphraseStructure186=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure186.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure460_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure460);
                    nounphraseStructure287=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure287.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:75:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus88 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1469_static.FOLLOW_multiApparatus_in_nounphraseStructure1469);
            multiApparatus88=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus88.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 76:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:76:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:77:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE89 = null;

        ChemicalChunkerParser.dt_return dt90 = null;

        ChemicalChunkerParser.advAdj_return advAdj91 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase92 = null;

        ChemicalChunkerParser.ratio_return ratio93 = null;

        ChemicalChunkerParser.noun_return noun94 = null;

        ChemicalChunkerParser.numeric_return numeric95 = null;

        ChemicalChunkerParser.conjunction_return conjunction96 = null;

        ChemicalChunkerParser.advAdj_return advAdj97 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase98 = null;

        ChemicalChunkerParser.ratio_return ratio99 = null;

        ChemicalChunkerParser.noun_return noun100 = null;

        ChemicalChunkerParser.numeric_return numeric101 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf102 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN103 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase104 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2486_static.FOLLOW_dtTHE_in_nounphraseStructure2486);
                    dtTHE89=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE89.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred85_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2489_static.FOLLOW_dt_in_nounphraseStructure2489);
                    dt90=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt90.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2492_static.FOLLOW_advAdj_in_nounphraseStructure2492);
            	    advAdj91=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj91.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:24: ( dissolvePhrase | ratio | noun | numeric )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2497_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2497);
            	    dissolvePhrase92=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase92.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:40: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2499_static.FOLLOW_ratio_in_nounphraseStructure2499);
            	    ratio93=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio93.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:46: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2501_static.FOLLOW_noun_in_nounphraseStructure2501);
            	    noun94=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun94.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:51: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseStructure2503_static.FOLLOW_numeric_in_nounphraseStructure2503);
            	    numeric95=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric95.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2511_static.FOLLOW_conjunction_in_nounphraseStructure2511);
            	    	    conjunction96=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction96.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:78: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2514_static.FOLLOW_advAdj_in_nounphraseStructure2514);
            	    	    advAdj97=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj97.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:86: ( dissolvePhrase | ratio | noun | numeric )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:87: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2518_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2518);
            	            dissolvePhrase98=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase98.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:102: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2520_static.FOLLOW_ratio_in_nounphraseStructure2520);
            	            ratio99=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio99.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:108: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2522_static.FOLLOW_noun_in_nounphraseStructure2522);
            	            noun100=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun100.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:113: numeric
            	            {
            	            pushFollow(FOLLOW_numeric_in_nounphraseStructure2524_static.FOLLOW_numeric_in_nounphraseStructure2524);
            	            numeric101=numeric();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric101.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:127: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 50:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred99_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 56:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred99_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:128: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:128: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 56:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 50:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:129: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2534_static.FOLLOW_prepphraseOf_in_nounphraseStructure2534);
            	            prepphraseOf102=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf102.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:143: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2537_static.FOLLOW_prepphraseIN_in_nounphraseStructure2537);
            	            prepphraseIN103=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN103.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:157: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2540_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2540);
            	            dissolvePhrase104=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase104.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure105 = null;

        ChemicalChunkerParser.lrb_return lrb106 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure107 = null;

        ChemicalChunkerParser.rrb_return rrb108 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt20=2;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase554_static.FOLLOW_dissolveStructure_in_dissolvePhrase554);
                    dissolveStructure105=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure105.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase556_static.FOLLOW_lrb_in_dissolvePhrase556);
                    lrb106=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb106.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase558_static.FOLLOW_dissolveStructure_in_dissolvePhrase558);
                    dissolveStructure107=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure107.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase560_static.FOLLOW_rrb_in_dissolvePhrase560);
                    rrb108=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb108.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: lrb, rrb, dissolveStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:82:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj109 = null;

        ChemicalChunkerParser.nnp_return nnp110 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity111 = null;

        ChemicalChunkerParser.nnp_return nnp112 = null;

        ChemicalChunkerParser.molecule_return molecule113 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule114 = null;

        ChemicalChunkerParser.inin_return inin115 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE116 = null;

        ChemicalChunkerParser.adj_return adj117 = null;

        ChemicalChunkerParser.nnp_return nnp118 = null;

        ChemicalChunkerParser.molecule_return molecule119 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule120 = null;

        ChemicalChunkerParser.conjunction_return conjunction121 = null;

        ChemicalChunkerParser.molecule_return molecule122 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:4: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure585_static.FOLLOW_adj_in_dissolveStructure585);
                    adj109=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj109.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt24=2;
            switch ( input.LA(1) ) {
            case 157:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 38:
                    case 39:
                    case 40:
                    case 45:
                    case 46:
                    case 73:
                    case 84:
                    case 133:
                    case 139:
                    case 142:
                    case 145:
                    case 150:
                    case 151:
                    case 152:
                        {
                        alt24=2;
                        }
                        break;
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 50:
                                {
                                alt24=1;
                                }
                                break;
                            case 38:
                            case 139:
                            case 142:
                            case 145:
                                {
                                alt24=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 24, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 24, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 24, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 73:
            case 84:
            case 133:
            case 139:
            case 142:
            case 145:
            case 150:
            case 151:
            case 152:
                {
                alt24=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure589_static.FOLLOW_nnp_in_dissolveStructure589);
                    nnp110=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp110.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure591_static.FOLLOW_nnchementity_in_dissolveStructure591);
                    nnchementity111=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity111.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:28: ( nnp )?
                    int alt22=2;
                    switch ( input.LA(1) ) {
                        case 157:
                            {
                            alt22=1;
                            }
                            break;
                    }

                    switch (alt22) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure594_static.FOLLOW_nnp_in_dissolveStructure594);
                            nnp112=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp112.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:32: ( molecule | unnamedmolecule )
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure597_static.FOLLOW_molecule_in_dissolveStructure597);
                            molecule113=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule113.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure599_static.FOLLOW_unnamedmolecule_in_dissolveStructure599);
                            unnamedmolecule114=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule114.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:60: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt30=0;
            loop30:
            do {
                int alt30=2;
                switch ( input.LA(1) ) {
                case 50:
                    {
                    int LA30_2 = input.LA(2);

                    if ( (synpred110_ChemicalChunker()) ) {
                        alt30=1;
                    }


                    }
                    break;

                }

                switch (alt30) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:61: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure604_static.FOLLOW_inin_in_dissolveStructure604);
            	    inin115=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin115.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:66: ( dtTHE )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 141:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure606_static.FOLLOW_dtTHE_in_dissolveStructure606);
            	            dtTHE116=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE116.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: ( adj )?
            	    int alt26=2;
            	    alt26 = dfa26.predict(input);
            	    switch (alt26) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure609_static.FOLLOW_adj_in_dissolveStructure609);
            	            adj117=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj117.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:78: ( nnp )?
            	    int alt27=2;
            	    switch ( input.LA(1) ) {
            	        case 157:
            	            {
            	            alt27=1;
            	            }
            	            break;
            	    }

            	    switch (alt27) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure612_static.FOLLOW_nnp_in_dissolveStructure612);
            	            nnp118=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp118.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:83: ( molecule | unnamedmolecule )
            	    int alt28=2;
            	    alt28 = dfa28.predict(input);
            	    switch (alt28) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:84: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure616_static.FOLLOW_molecule_in_dissolveStructure616);
            	            molecule119=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule119.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:93: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure618_static.FOLLOW_unnamedmolecule_in_dissolveStructure618);
            	            unnamedmolecule120=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule120.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:110: ( conjunction molecule )*
            	    loop29:
            	    do {
            	        int alt29=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            int LA29_1 = input.LA(2);

            	            if ( (synpred109_ChemicalChunker()) ) {
            	                alt29=1;
            	            }


            	            }
            	            break;
            	        case 133:
            	            {
            	            int LA29_2 = input.LA(2);

            	            if ( (synpred109_ChemicalChunker()) ) {
            	                alt29=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt29) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:111: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure622_static.FOLLOW_conjunction_in_dissolveStructure622);
            	    	    conjunction121=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction121.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure624_static.FOLLOW_molecule_in_dissolveStructure624);
            	    	    molecule122=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule122.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop29;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        throw eee;
                }
                cnt30++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure123 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase639_static.FOLLOW_verbphraseStructure_in_verbphrase639);
            verbphraseStructure123=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure123.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:87:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt124 = null;

        ChemicalChunkerParser.to_return to125 = null;

        ChemicalChunkerParser.inAll_return inAll126 = null;

        ChemicalChunkerParser.inafter_return inafter127 = null;

        ChemicalChunkerParser.md_return md128 = null;

        ChemicalChunkerParser.rbconj_return rbconj129 = null;

        ChemicalChunkerParser.adv_return adv130 = null;

        ChemicalChunkerParser.adj_return adj131 = null;

        ChemicalChunkerParser.verb_return verb132 = null;

        ChemicalChunkerParser.md_return md133 = null;

        ChemicalChunkerParser.adv_return adv134 = null;

        ChemicalChunkerParser.adj_return adj135 = null;

        ChemicalChunkerParser.neg_return neg136 = null;

        ChemicalChunkerParser.inoff_return inoff137 = null;

        ChemicalChunkerParser.cc_return cc138 = null;

        ChemicalChunkerParser.comma_return comma139 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase140 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:24: ( dt )?
            int alt31=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt31=1;
                    }
                    break;
            }

            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure657_static.FOLLOW_dt_in_verbphraseStructure657);
                    dt124=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt124.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:28: ( to )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA32_3 = input.LA(3);

                            if ( (synpred112_ChemicalChunker()) ) {
                                alt32=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure660_static.FOLLOW_to_in_verbphraseStructure660);
                    to125=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to125.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:32: ( inAll )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 149:
                case 168:
                    {
                    alt33=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_4 = input.LA(3);

                            if ( (synpred113_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure663_static.FOLLOW_inAll_in_verbphraseStructure663);
                    inAll126=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll126.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:39: ( inafter )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt34=1;
                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure666_static.FOLLOW_inafter_in_verbphraseStructure666);
                    inafter127=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter127.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt44=0;
            loop44:
            do {
                int alt44=2;
                alt44 = dfa44.predict(input);
                switch (alt44) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )*
            	    loop35:
            	    do {
            	        int alt35=2;
            	        switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            alt35=1;
            	            }
            	            break;

            	        }

            	        switch (alt35) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure670_static.FOLLOW_md_in_verbphraseStructure670);
            	    	    md128=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md128.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop35;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:53: ( rbconj )?
            	    int alt36=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt36=1;
            	            }
            	            break;
            	    }

            	    switch (alt36) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure673_static.FOLLOW_rbconj_in_verbphraseStructure673);
            	            rbconj129=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj129.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:61: ( adv )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        switch ( input.LA(1) ) {
            	        case 163:
            	        case 164:
            	        case 165:
            	        case 166:
            	            {
            	            alt37=1;
            	            }
            	            break;

            	        }

            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure676_static.FOLLOW_adv_in_verbphraseStructure676);
            	    	    adv130=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv130.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:66: ( adj )?
            	    int alt38=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 150:
            	        case 151:
            	        case 152:
            	            {
            	            alt38=1;
            	            }
            	            break;
            	    }

            	    switch (alt38) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure679_static.FOLLOW_adj_in_verbphraseStructure679);
            	            adj131=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj131.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: ( verb )+
            	    int cnt39=0;
            	    loop39:
            	    do {
            	        int alt39=2;
            	        alt39 = dfa39.predict(input);
            	        switch (alt39) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure682_static.FOLLOW_verb_in_verbphraseStructure682);
            	    	    verb132=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb132.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt39 >= 1 ) break loop39;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(39, input);
            	                throw eee;
            	        }
            	        cnt39++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: ( md )*
            	    loop40:
            	    do {
            	        int alt40=2;
            	        switch ( input.LA(1) ) {
            	        case 154:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA40_3 = input.LA(3);

            	                if ( (synpred120_ChemicalChunker()) ) {
            	                    alt40=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure685_static.FOLLOW_md_in_verbphraseStructure685);
            	    	    md133=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md133.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop40;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: ( adv )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        alt41 = dfa41.predict(input);
            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure688_static.FOLLOW_adv_in_verbphraseStructure688);
            	    	    adv134=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv134.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: ( adj )?
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure691_static.FOLLOW_adj_in_verbphraseStructure691);
            	            adj135=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj135.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: ( neg )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA43_3 = input.LA(3);

            	                    if ( (synpred123_ChemicalChunker()) ) {
            	                        alt43=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure694_static.FOLLOW_neg_in_verbphraseStructure694);
            	            neg136=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg136.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt44 >= 1 ) break loop44;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(44, input);
                        throw eee;
                }
                cnt44++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:99: ( inoff )?
            int alt45=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA45_3 = input.LA(3);

                            if ( (synpred125_ChemicalChunker()) ) {
                                alt45=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt45) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure700_static.FOLLOW_inoff_in_verbphraseStructure700);
                    inoff137=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff137.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:106: ( ( cc )? ( comma )? prepphrase )*
            loop48:
            do {
                int alt48=2;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )?
            	    int alt46=2;
            	    switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            alt46=1;
            	            }
            	            break;
            	    }

            	    switch (alt46) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure704_static.FOLLOW_cc_in_verbphraseStructure704);
            	            cc138=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc138.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:111: ( comma )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure707_static.FOLLOW_comma_in_verbphraseStructure707);
            	            comma139=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma139.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure710_static.FOLLOW_prepphrase_in_verbphraseStructure710);
            	    prepphrase140=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase140.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb141 = null;

        ChemicalChunkerParser.vbp_return vbp142 = null;

        ChemicalChunkerParser.vbg_return vbg143 = null;

        ChemicalChunkerParser.vbd_return vbd144 = null;

        ChemicalChunkerParser.vbz_return vbz145 = null;

        ChemicalChunkerParser.vbn_return vbn146 = null;

        ChemicalChunkerParser.vbuse_return vbuse147 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge148 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse149 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb150 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject151 = null;

        ChemicalChunkerParser.vbadd_return vbadd152 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute153 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge154 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain155 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop156 = null;

        ChemicalChunkerParser.vbfill_return vbfill157 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend158 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat159 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus160 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate161 = null;

        ChemicalChunkerParser.vbcool_return vbcool162 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass163 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve164 = null;

        ChemicalChunkerParser.vbdry_return vbdry165 = null;

        ChemicalChunkerParser.vbextract_return vbextract166 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter167 = null;

        ChemicalChunkerParser.vbheat_return vbheat168 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease169 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition170 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate171 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify172 = null;

        ChemicalChunkerParser.vbquench_return vbquench173 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover174 = null;

        ChemicalChunkerParser.vbremove_return vbremove175 = null;

        ChemicalChunkerParser.vbstir_return vbstir176 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize177 = null;

        ChemicalChunkerParser.vbwait_return vbwait178 = null;

        ChemicalChunkerParser.vbwash_return vbwash179 = null;

        ChemicalChunkerParser.vbyield_return vbyield180 = null;

        ChemicalChunkerParser.vbchange_return vbchange181 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt49=41;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb722_static.FOLLOW_vb_in_verb722);
                    vb141=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb141.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb724_static.FOLLOW_vbp_in_verb724);
                    vbp142=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp142.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb726_static.FOLLOW_vbg_in_verb726);
                    vbg143=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg143.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb728_static.FOLLOW_vbd_in_verb728);
                    vbd144=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd144.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb730_static.FOLLOW_vbz_in_verb730);
                    vbz145=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz145.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb732_static.FOLLOW_vbn_in_verb732);
                    vbn146=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn146.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb734_static.FOLLOW_vbuse_in_verb734);
                    vbuse147=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse147.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb736_static.FOLLOW_vbsubmerge_in_verb736);
                    vbsubmerge148=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge148.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb738_static.FOLLOW_vbimmerse_in_verb738);
                    vbimmerse149=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse149.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb740_static.FOLLOW_degassMultiVerb_in_verb740);
                    degassMultiVerb150=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb150.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb742_static.FOLLOW_vbsubject_in_verb742);
                    vbsubject151=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject151.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb744_static.FOLLOW_vbadd_in_verb744);
                    vbadd152=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd152.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb746_static.FOLLOW_vbdilute_in_verb746);
                    vbdilute153=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute153.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb748_static.FOLLOW_vbcharge_in_verb748);
                    vbcharge154=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge154.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb750_static.FOLLOW_vbcontain_in_verb750);
                    vbcontain155=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain155.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb752_static.FOLLOW_vbdrop_in_verb752);
                    vbdrop156=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop156.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb754_static.FOLLOW_vbfill_in_verb754);
                    vbfill157=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill157.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb756_static.FOLLOW_vbsuspend_in_verb756);
                    vbsuspend158=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend158.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb758_static.FOLLOW_vbtreat_in_verb758);
                    vbtreat159=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat159.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb760_static.FOLLOW_vbapparatus_in_verb760);
                    vbapparatus160=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus160.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb762_static.FOLLOW_vbconcentrate_in_verb762);
                    vbconcentrate161=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate161.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb764_static.FOLLOW_vbcool_in_verb764);
                    vbcool162=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool162.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb766_static.FOLLOW_vbdegass_in_verb766);
                    vbdegass163=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass163.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb768_static.FOLLOW_vbdissolve_in_verb768);
                    vbdissolve164=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve164.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb770_static.FOLLOW_vbdry_in_verb770);
                    vbdry165=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry165.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb772_static.FOLLOW_vbextract_in_verb772);
                    vbextract166=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract166.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb774_static.FOLLOW_vbfilter_in_verb774);
                    vbfilter167=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter167.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb777_static.FOLLOW_vbheat_in_verb777);
                    vbheat168=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat168.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb779_static.FOLLOW_vbincrease_in_verb779);
                    vbincrease169=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease169.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb781_static.FOLLOW_vbpartition_in_verb781);
                    vbpartition170=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition170.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb783_static.FOLLOW_vbprecipitate_in_verb783);
                    vbprecipitate171=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate171.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb785_static.FOLLOW_vbpurify_in_verb785);
                    vbpurify172=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify172.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb787_static.FOLLOW_vbquench_in_verb787);
                    vbquench173=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench173.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb789_static.FOLLOW_vbrecover_in_verb789);
                    vbrecover174=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover174.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb791_static.FOLLOW_vbremove_in_verb791);
                    vbremove175=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove175.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb793_static.FOLLOW_vbstir_in_verb793);
                    vbstir176=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir176.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb795_static.FOLLOW_vbsynthesize_in_verb795);
                    vbsynthesize177=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize177.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb797_static.FOLLOW_vbwait_in_verb797);
                    vbwait178=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait178.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb799_static.FOLLOW_vbwash_in_verb799);
                    vbwash179=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash179.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb801_static.FOLLOW_vbyield_in_verb801);
                    vbyield180=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield180.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb803_static.FOLLOW_vbchange_in_verb803);
                    vbchange181=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange181.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass182 = null;

        ChemicalChunkerParser.cc_return cc183 = null;

        ChemicalChunkerParser.vbfill_return vbfill184 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb812_static.FOLLOW_vbdegass_in_degassMultiVerb812);
            vbdegass182=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass182.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb814_static.FOLLOW_cc_in_degassMultiVerb814);
            cc183=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc183.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb816_static.FOLLOW_vbfill_in_degassMultiVerb816);
            vbfill184=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure185 = null;

        ChemicalChunkerParser.dash_return dash186 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure187 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun825_static.FOLLOW_nounStructure_in_noun825);
            nounStructure185=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure185.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:23: ( dash nounStructure )*
            loop50:
            do {
                int alt50=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA50_2 = input.LA(2);

                    if ( (synpred169_ChemicalChunker()) ) {
                        alt50=1;
                    }


                    }
                    break;

                }

                switch (alt50) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun828_static.FOLLOW_dash_in_noun828);
            	    dash186=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash186.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun830_static.FOLLOW_nounStructure_in_noun830);
            	    nounStructure187=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure187.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp188 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss189 = null;

        ChemicalChunkerParser.citation_return citation190 = null;

        ChemicalChunkerParser.cycles_return cycles191 = null;

        ChemicalChunkerParser.molecule_return molecule192 = null;

        ChemicalChunkerParser.apparatus_return apparatus193 = null;

        ChemicalChunkerParser.mixture_return mixture194 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule195 = null;

        ChemicalChunkerParser.nnyield_return nnyield196 = null;

        ChemicalChunkerParser.nnstate_return nnstate197 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode198 = null;

        ChemicalChunkerParser.nn_return nn199 = null;

        ChemicalChunkerParser.nns_return nns200 = null;

        ChemicalChunkerParser.nnp_return nnp201 = null;

        ChemicalChunkerParser.nnadd_return nnadd202 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase203 = null;

        ChemicalChunkerParser.nnexample_return nnexample204 = null;

        ChemicalChunkerParser.range_return range205 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts206 = null;

        ChemicalChunkerParser.nntime_return nntime207 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere208 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode209 = null;

        ChemicalChunkerParser.quantity_return quantity210 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity211 = null;

        ChemicalChunkerParser.nntemp_return nntemp212 = null;

        ChemicalChunkerParser.nnph_return nnph213 = null;

        ChemicalChunkerParser.nnflash_return nnflash214 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral215 = null;

        ChemicalChunkerParser.nnamount_return nnamount216 = null;

        ChemicalChunkerParser.nneq_return nneq217 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure218 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn219 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography220 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum221 = null;

        ChemicalChunkerParser.nncycle_return nncycle222 = null;

        ChemicalChunkerParser.nntimes_return nntimes223 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate224 = null;

        ChemicalChunkerParser.nnvol_return nnvol225 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify226 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize227 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture228 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference229 = null;

        ChemicalChunkerParser.nndry_return nndry230 = null;

        ChemicalChunkerParser.numeric_return numeric231 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound232 = null;

        ChemicalChunkerParser.nnextract_return nnextract233 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter234 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate235 = null;

        ChemicalChunkerParser.nnremove_return nnremove236 = null;

        ChemicalChunkerParser.fw_return fw237 = null;

        ChemicalChunkerParser.sym_return sym238 = null;

        ChemicalChunkerParser.clause_return clause239 = null;

        ChemicalChunkerParser.ls_return ls240 = null;

        ChemicalChunkerParser.nnps_return nnps241 = null;

        ChemicalChunkerParser.pos_return pos242 = null;

        ChemicalChunkerParser.oscarase_return oscarase243 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt51=56;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure841_static.FOLLOW_prp_in_nounStructure841);
                    prp188=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp188.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure843_static.FOLLOW_prp_poss_in_nounStructure843);
                    prp_poss189=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss189.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure845_static.FOLLOW_citation_in_nounStructure845);
                    citation190=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation190.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure847_static.FOLLOW_cycles_in_nounStructure847);
                    cycles191=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles191.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure849_static.FOLLOW_molecule_in_nounStructure849);
                    molecule192=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule192.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure851_static.FOLLOW_apparatus_in_nounStructure851);
                    apparatus193=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus193.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure853_static.FOLLOW_mixture_in_nounStructure853);
                    mixture194=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture194.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure855_static.FOLLOW_unnamedmolecule_in_nounStructure855);
                    unnamedmolecule195=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule195.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure857_static.FOLLOW_nnyield_in_nounStructure857);
                    nnyield196=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield196.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure859_static.FOLLOW_nnstate_in_nounStructure859);
                    nnstate197=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate197.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:106: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure861_static.FOLLOW_procedureNode_in_nounStructure861);
                    procedureNode198=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode198.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:120: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure863_static.FOLLOW_nn_in_nounStructure863);
                    nn199=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn199.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:123: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure865_static.FOLLOW_nns_in_nounStructure865);
                    nns200=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns200.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:127: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure867_static.FOLLOW_nnp_in_nounStructure867);
                    nnp201=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp201.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:131: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure869_static.FOLLOW_nnadd_in_nounStructure869);
                    nnadd202=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd202.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:137: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure871_static.FOLLOW_preparationphrase_in_nounStructure871);
                    preparationphrase203=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase203.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:155: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure873_static.FOLLOW_nnexample_in_nounStructure873);
                    nnexample204=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample204.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:165: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure875_static.FOLLOW_range_in_nounStructure875);
                    range205=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range205.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:171: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure877_static.FOLLOW_oscaronts_in_nounStructure877);
                    oscaronts206=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts206.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:181: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure879_static.FOLLOW_nntime_in_nounStructure879);
                    nntime207=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime207.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:188: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure881_static.FOLLOW_nnatmosphere_in_nounStructure881);
                    nnatmosphere208=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere208.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:201: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure883_static.FOLLOW_tmunicode_in_nounStructure883);
                    tmunicode209=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode209.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:211: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure885_static.FOLLOW_quantity_in_nounStructure885);
                    quantity210=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity210.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:220: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure887_static.FOLLOW_nnchementity_in_nounStructure887);
                    nnchementity211=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity211.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:233: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure889_static.FOLLOW_nntemp_in_nounStructure889);
                    nntemp212=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp212.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:240: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure891_static.FOLLOW_nnph_in_nounStructure891);
                    nnph213=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph213.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:245: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure893_static.FOLLOW_nnflash_in_nounStructure893);
                    nnflash214=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash214.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:253: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure895_static.FOLLOW_nngeneral_in_nounStructure895);
                    nngeneral215=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral215.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:263: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure897_static.FOLLOW_nnamount_in_nounStructure897);
                    nnamount216=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount216.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:272: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure899_static.FOLLOW_nneq_in_nounStructure899);
                    nneq217=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq217.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:277: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure901_static.FOLLOW_nnpressure_in_nounStructure901);
                    nnpressure218=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure218.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:288: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure903_static.FOLLOW_nncolumn_in_nounStructure903);
                    nncolumn219=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn219.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:297: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure905_static.FOLLOW_nnchromatography_in_nounStructure905);
                    nnchromatography220=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography220.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:314: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure907_static.FOLLOW_nnvacuum_in_nounStructure907);
                    nnvacuum221=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum221.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:323: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure909_static.FOLLOW_nncycle_in_nounStructure909);
                    nncycle222=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle222.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:331: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure911_static.FOLLOW_nntimes_in_nounStructure911);
                    nntimes223=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes223.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:339: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure913_static.FOLLOW_nnconcentrate_in_nounStructure913);
                    nnconcentrate224=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate224.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:353: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure915_static.FOLLOW_nnvol_in_nounStructure915);
                    nnvol225=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol225.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:359: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure917_static.FOLLOW_nnpurify_in_nounStructure917);
                    nnpurify226=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify226.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:368: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure919_static.FOLLOW_nnsynthesize_in_nounStructure919);
                    nnsynthesize227=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize227.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:381: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure921_static.FOLLOW_nnmixture_in_nounStructure921);
                    nnmixture228=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture228.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:391: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure923_static.FOLLOW_squareBracketedReference_in_nounStructure923);
                    squareBracketedReference229=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference229.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:416: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure925_static.FOLLOW_nndry_in_nounStructure925);
                    nndry230=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry230.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:422: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_nounStructure927_static.FOLLOW_numeric_in_nounStructure927);
                    numeric231=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric231.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:430: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure929_static.FOLLOW_oscarCompound_in_nounStructure929);
                    oscarCompound232=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound232.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:444: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure931_static.FOLLOW_nnextract_in_nounStructure931);
                    nnextract233=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract233.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:454: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure933_static.FOLLOW_nnfilter_in_nounStructure933);
                    nnfilter234=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter234.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:463: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure935_static.FOLLOW_nnprecipitate_in_nounStructure935);
                    nnprecipitate235=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate235.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:477: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure937_static.FOLLOW_nnremove_in_nounStructure937);
                    nnremove236=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove236.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:486: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure939_static.FOLLOW_fw_in_nounStructure939);
                    fw237=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw237.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:489: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure941_static.FOLLOW_sym_in_nounStructure941);
                    sym238=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym238.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:493: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure943_static.FOLLOW_clause_in_nounStructure943);
                    clause239=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause239.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:500: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure945_static.FOLLOW_ls_in_nounStructure945);
                    ls240=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls240.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:503: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure947_static.FOLLOW_nnps_in_nounStructure947);
                    nnps241=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps241.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:508: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure949_static.FOLLOW_pos_in_nounStructure949);
                    pos242=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos242.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:512: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure951_static.FOLLOW_oscarase_in_nounStructure951);
                    oscarase243=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase243.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg244 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere245 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime246 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp247 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN248 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole249 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther250 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:5: ( neg )?
            int alt52=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt52=1;
                    }
                    break;
            }

            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase963_static.FOLLOW_neg_in_prepphrase963);
                    neg244=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg244.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt53=6;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase967_static.FOLLOW_prepphraseAtmosphere_in_prepphrase967);
                    prepphraseAtmosphere245=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere245.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase969_static.FOLLOW_prepphraseTime_in_prepphrase969);
                    prepphraseTime246=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime246.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase971_static.FOLLOW_prepphraseTemp_in_prepphrase971);
                    prepphraseTemp247=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp247.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase973_static.FOLLOW_prepphraseIN_in_prepphrase973);
                    prepphraseIN248=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN248.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase975_static.FOLLOW_prepphraseRole_in_prepphrase975);
                    prepphraseRole249=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole249.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase977_static.FOLLOW_prepphraseOther_in_prepphrase977);
                    prepphraseOther250=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther250.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent251 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989);
            prepphraseAtmosphereContent251=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent251.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 104:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder252 = null;

        ChemicalChunkerParser.dt_return dt253 = null;

        ChemicalChunkerParser.advAdj_return advAdj254 = null;

        ChemicalChunkerParser.molecule_return molecule255 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere256 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1009_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1009);
            inunder252=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder252.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:12: ( dt )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt54=1;
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1012_static.FOLLOW_dt_in_prepphraseAtmosphereContent1012);
                    dt253=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt253.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:16: ( advAdj )*
            loop55:
            do {
                int alt55=2;
                alt55 = dfa55.predict(input);
                switch (alt55) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1015_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1015);
            	    advAdj254=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj254.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1018_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1018);
            molecule255=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule255.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:33: ( nnatmosphere )?
            int alt56=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA56_3 = input.LA(3);

                            if ( (synpred233_ChemicalChunker()) ) {
                                alt56=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt56) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020);
                    nnatmosphere256=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere256.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure257 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030);
            prepPhraseTimeStructure257=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure257.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 110:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj258 = null;

        ChemicalChunkerParser.inAll_return inAll259 = null;

        ChemicalChunkerParser.dt_return dt260 = null;

        ChemicalChunkerParser.advAdj_return advAdj261 = null;

        ChemicalChunkerParser.cd_return cd262 = null;

        ChemicalChunkerParser.nntime_return nntime263 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:3: ( advAdj )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1048_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1048);
            	    advAdj258=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj258.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:11: ( inAll )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 149:
                case 168:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1051_static.FOLLOW_inAll_in_prepPhraseTimeStructure1051);
                    inAll259=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll259.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:19: ( dt )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1055_static.FOLLOW_dt_in_prepPhraseTimeStructure1055);
                    dt260=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt260.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:23: ( advAdj )*
            loop60:
            do {
                int alt60=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 150:
                case 151:
                case 152:
                case 163:
                case 164:
                case 165:
                case 166:
                    {
                    alt60=1;
                    }
                    break;

                }

                switch (alt60) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1058_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1058);
            	    advAdj261=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj261.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:31: ( cd )?
            int alt61=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt61=1;
                    }
                    break;
            }

            switch (alt61) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1061_static.FOLLOW_cd_in_prepPhraseTimeStructure1061);
                    cd262=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd262.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:35: ( nntime )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA62_2 = input.LA(2);

                    if ( (synpred239_ChemicalChunker()) ) {
                        alt62=1;
                    }


                    }
                    break;

                }

                switch (alt62) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1064_static.FOLLOW_nntime_in_prepPhraseTimeStructure1064);
            	    nntime263=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime263.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent264 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1074_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1074);
            prepphraseTempContent264=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent264.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 115:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj265 = null;

        ChemicalChunkerParser.inAll_return inAll266 = null;

        ChemicalChunkerParser.dt_return dt267 = null;

        ChemicalChunkerParser.advAdj_return advAdj268 = null;

        ChemicalChunkerParser.cd_return cd269 = null;

        ChemicalChunkerParser.nntemp_return nntemp270 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:5: ( advAdj )?
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1095_static.FOLLOW_advAdj_in_prepphraseTempContent1095);
                    advAdj265=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj265.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:13: ( inAll )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 149:
                case 168:
                    {
                    alt64=1;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1098_static.FOLLOW_inAll_in_prepphraseTempContent1098);
                    inAll266=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll266.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:20: ( dt )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1101_static.FOLLOW_dt_in_prepphraseTempContent1101);
                    dt267=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt267.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:24: ( advAdj )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 150:
                case 151:
                case 152:
                case 163:
                case 164:
                case 165:
                case 166:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1104_static.FOLLOW_advAdj_in_prepphraseTempContent1104);
                    advAdj268=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj268.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:32: ( cd )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1107_static.FOLLOW_cd_in_prepphraseTempContent1107);
                    cd269=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd269.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:36: ( nntemp )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA68_2 = input.LA(2);

                    if ( (synpred245_ChemicalChunker()) ) {
                        alt68=1;
                    }


                    }
                    break;

                }

                switch (alt68) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1110_static.FOLLOW_nntemp_in_prepphraseTempContent1110);
            	    nntemp270=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp270.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin271 = null;

        ChemicalChunkerParser.molecule_return molecule272 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1119_static.FOLLOW_inin_in_prepphraseIN1119);
            inin271=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin271.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1121_static.FOLLOW_molecule_in_prepphraseIN1121);
            molecule272=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule272.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 121:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:123:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas273 = null;

        ChemicalChunkerParser.dt_return dt274 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity275 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1142_static.FOLLOW_inas_in_prepphraseRole1142);
            inas273=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas273.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:8: ( dt )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt69=1;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1144_static.FOLLOW_dt_in_prepphraseRole1144);
                    dt274=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt274.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1147_static.FOLLOW_nnchementity_in_prepphraseRole1147);
            nnchementity275=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity275.getTree());


            // AST REWRITE
            // elements: inas, nnchementity, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 124:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj276 = null;

        ChemicalChunkerParser.inMost_return inMost277 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase278 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:4: ( advAdj )*
            loop70:
            do {
                int alt70=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 150:
                case 151:
                case 152:
                case 163:
                case 164:
                case 165:
                case 166:
                    {
                    alt70=1;
                    }
                    break;

                }

                switch (alt70) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1170_static.FOLLOW_advAdj_in_prepphraseOther1170);
            	    advAdj276=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj276.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:12: ( inMost )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 149:
                case 168:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1173_static.FOLLOW_inMost_in_prepphraseOther1173);
            	    inMost277=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost277.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1177_static.FOLLOW_nounphrase_in_prepphraseOther1177);
            nounphrase278=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase278.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inMost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof279 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase280 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1203_static.FOLLOW_inof_in_prepphraseOf1203);
            inof279=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof279.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1206_static.FOLLOW_nounphrase_in_prepphraseOf1206);
            nounphrase280=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase280.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj281 = null;

        ChemicalChunkerParser.inafter_return inafter282 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase283 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:5: ( advAdj )?
            int alt72=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 150:
                case 151:
                case 152:
                case 163:
                case 164:
                case 165:
                case 166:
                    {
                    alt72=1;
                    }
                    break;
            }

            switch (alt72) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1228_static.FOLLOW_advAdj_in_prepphraseAfter1228);
                    advAdj281=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj281.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1231_static.FOLLOW_inafter_in_prepphraseAfter1231);
            inafter282=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter282.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1234_static.FOLLOW_nounphrase_in_prepphraseAfter1234);
            nounphrase283=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase283.getTree());


            // AST REWRITE
            // elements: inafter, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 133:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize284 = null;

        ChemicalChunkerParser.inas_return inas285 = null;

        ChemicalChunkerParser.nnexample_return nnexample286 = null;

        ChemicalChunkerParser.cd_return cd287 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase288 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1259_static.FOLLOW_vbsynthesize_in_preparationphrase1259);
            vbsynthesize284=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize284.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1261_static.FOLLOW_inas_in_preparationphrase1261);
            inas285=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas285.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:22: ( nnexample cd | prepphrase )
            int alt73=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt73=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 145:
            case 146:
            case 149:
            case 150:
            case 151:
            case 152:
            case 163:
            case 164:
            case 165:
            case 166:
            case 168:
                {
                alt73=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1264_static.FOLLOW_nnexample_in_preparationphrase1264);
                    nnexample286=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample286.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1266_static.FOLLOW_cd_in_preparationphrase1266);
                    cd287=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd287.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1269_static.FOLLOW_prepphrase_in_preparationphrase1269);
                    prepphrase288=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase288.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus289 = null;

        ChemicalChunkerParser.conjunction_return conjunction290 = null;

        ChemicalChunkerParser.apparatus_return apparatus291 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1280_static.FOLLOW_apparatus_in_multiApparatus1280);
            apparatus289=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus289.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:14: ( ( conjunction )* apparatus )*
            loop75:
            do {
                int alt75=2;
                alt75 = dfa75.predict(input);
                switch (alt75) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( conjunction )*
            	    loop74:
            	    do {
            	        int alt74=2;
            	        alt74 = dfa74.predict(input);
            	        switch (alt74) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1283_static.FOLLOW_conjunction_in_multiApparatus1283);
            	    	    conjunction290=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction290.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop74;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1286_static.FOLLOW_apparatus_in_multiApparatus1286);
            	    apparatus291=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus291.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt292 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus293 = null;

        ChemicalChunkerParser.nnApp_return nnApp294 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:4: ( dt )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt76=1;
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1297_static.FOLLOW_dt_in_apparatus1297);
                    dt292=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt292.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:8: ( preapparatus )*
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 45:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 133:
                case 142:
                case 145:
                case 150:
                case 151:
                case 152:
                case 155:
                    {
                    alt77=1;
                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1300_static.FOLLOW_preapparatus_in_apparatus1300);
            	    preapparatus293=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus293.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:22: ( nnApp )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA78_2 = input.LA(2);

                    if ( (synpred255_ChemicalChunker()) ) {
                        alt78=1;
                    }


                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1303_static.FOLLOW_nnApp_in_apparatus1303);
            	    nnApp294=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp294.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);



            // AST REWRITE
            // elements: dt, nnApp, preapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 141:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus295 = null;

        ChemicalChunkerParser.dash_return dash296 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus297 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:4: ( nnapparatus )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred256_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1330_static.FOLLOW_nnapparatus_in_nnApp1330);
            	    nnapparatus295=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus295.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:17: ( dash nnapparatus )*
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA80_5 = input.LA(5);

                                if ( (synpred257_ChemicalChunker()) ) {
                                    alt80=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1334_static.FOLLOW_dash_in_nnApp1334);
            	    dash296=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash296.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1336_static.FOLLOW_nnapparatus_in_nnApp1336);
            	    nnapparatus297=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus297.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity298 = null;

        ChemicalChunkerParser.adj_return adj299 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure300 = null;

        ChemicalChunkerParser.nnadd_return nnadd301 = null;

        ChemicalChunkerParser.molecule_return molecule302 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity303 = null;

        ChemicalChunkerParser.nnstate_return nnstate304 = null;

        ChemicalChunkerParser.nn_return nn305 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt81=0;
            loop81:
            do {
                int alt81=9;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1350_static.FOLLOW_quantity_in_preapparatus1350);
            	    quantity298=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity298.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1352_static.FOLLOW_adj_in_preapparatus1352);
            	    adj299=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj299.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1354_static.FOLLOW_nnpressure_in_preapparatus1354);
            	    nnpressure300=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure300.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1356_static.FOLLOW_nnadd_in_preapparatus1356);
            	    nnadd301=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd301.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1358_static.FOLLOW_molecule_in_preapparatus1358);
            	    molecule302=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule302.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1360_static.FOLLOW_nnchementity_in_preapparatus1360);
            	    nnchementity303=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity303.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1362_static.FOLLOW_nnstate_in_preapparatus1362);
            	    nnstate304=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate304.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1364_static.FOLLOW_nn_in_preapparatus1364);
            	    nn305=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn305.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront306 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:4: ( oscaront )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA82_2 = input.LA(2);

                    if ( (synpred266_ChemicalChunker()) ) {
                        alt82=1;
                    }


                    }
                    break;

                }

                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1376_static.FOLLOW_oscaront_in_oscaronts1376);
            	    oscaront306=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront306.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:1: oscarCompound : ( adj )* oscarCompoundStructure ( adj )? ( alphanumericOrBrackettedCompoundReference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj307 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure308 = null;

        ChemicalChunkerParser.adj_return adj309 = null;

        ChemicalChunkerParser.alphanumericOrBrackettedCompoundReference_return alphanumericOrBrackettedCompoundReference310 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:15: ( ( adj )* oscarCompoundStructure ( adj )? ( alphanumericOrBrackettedCompoundReference )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:18: ( adj )* oscarCompoundStructure ( adj )? ( alphanumericOrBrackettedCompoundReference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:18: ( adj )*
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 150:
                case 151:
                case 152:
                    {
                    alt83=1;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1396_static.FOLLOW_adj_in_oscarCompound1396);
            	    adj307=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj307.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1399_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1399);
            oscarCompoundStructure308=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure308.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:46: ( adj )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1401_static.FOLLOW_adj_in_oscarCompound1401);
                    adj309=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj309.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:51: ( alphanumericOrBrackettedCompoundReference )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: alphanumericOrBrackettedCompoundReference
                    {
                    pushFollow(FOLLOW_alphanumericOrBrackettedCompoundReference_in_oscarCompound1404_static.FOLLOW_alphanumericOrBrackettedCompoundReference_in_oscarCompound1404);
                    alphanumericOrBrackettedCompoundReference310=alphanumericOrBrackettedCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrBrackettedCompoundReference310.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:1: oscarCompoundStructure : ( nestedOscarCM | oscarcm );
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nestedOscarCM_return nestedOscarCM311 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm312 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:23: ( nestedOscarCM | oscarcm )
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:25: nestedOscarCM
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nestedOscarCM_in_oscarCompoundStructure1412_static.FOLLOW_nestedOscarCM_in_oscarCompoundStructure1412);
                    nestedOscarCM311=nestedOscarCM();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nestedOscarCM311.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:39: oscarcm
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1414_static.FOLLOW_oscarcm_in_oscarCompoundStructure1414);
                    oscarcm312=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm312.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class nestedOscarCM_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nestedOscarCM"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:1: nestedOscarCM : ( oscarcm afterOscarCompoundStructure | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.nestedOscarCM_return nestedOscarCM() throws RecognitionException {
        ChemicalChunkerParser.nestedOscarCM_return retval = new ChemicalChunkerParser.nestedOscarCM_return();
        retval.start = input.LT(1);
        int nestedOscarCM_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm313 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure314 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure315 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:14: ( ( oscarcm afterOscarCompoundStructure | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:16: ( oscarcm afterOscarCompoundStructure | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:16: ( oscarcm afterOscarCompoundStructure | bracketedOscarCompoundStructure )
            int alt87=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt87=1;
                }
                break;
            case 142:
                {
                alt87=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:17: oscarcm afterOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_oscarcm_in_nestedOscarCM1421_static.FOLLOW_oscarcm_in_nestedOscarCM1421);
                    oscarcm313=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm313.getTree());
                    pushFollow(FOLLOW_afterOscarCompoundStructure_in_nestedOscarCM1423_static.FOLLOW_afterOscarCompoundStructure_in_nestedOscarCM1423);
                    afterOscarCompoundStructure314=afterOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure314.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:55: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_nestedOscarCM1427_static.FOLLOW_bracketedOscarCompoundStructure_in_nestedOscarCM1427);
                    bracketedOscarCompoundStructure315=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure315.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedOscarCompoundStructure, afterOscarCompoundStructure, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 153:88: -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:91: ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:101: ( oscarcm )?
                if ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:110: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:139: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, nestedOscarCM_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nestedOscarCM"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:1: afterOscarCompoundStructure : ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm316 = null;

        ChemicalChunkerParser.dash_return dash317 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm318 = null;

        ChemicalChunkerParser.dash_return dash319 = null;

        ChemicalChunkerParser.dash_return dash320 = null;

        ChemicalChunkerParser.apost_return apost321 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:28: ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ )
            int alt93=3;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt93=1;
                }
                break;
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                        {
                        alt93=3;
                        }
                        break;
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA93_6 = input.LA(5);

                            if ( (synpred277_ChemicalChunker()) ) {
                                alt93=2;
                            }
                            else if ( (true) ) {
                                alt93=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 93, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);

                    throw nvae;
                }

                }
                break;
            case 134:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:30: ( oscarcm )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:30: ( oscarcm )+
                    int cnt88=0;
                    loop88:
                    do {
                        int alt88=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA88_3 = input.LA(3);

                                if ( (synpred272_ChemicalChunker()) ) {
                                    alt88=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt88) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1449_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1449);
                    	    oscarcm316=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm316.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt88 >= 1 ) break loop88;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(88, input);
                                throw eee;
                        }
                        cnt88++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:39: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:39: ( dash ( oscarcm )+ )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA90_5 = input.LA(5);

                                        if ( (synpred275_ChemicalChunker()) ) {
                                            alt90=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt90) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:40: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1453_static.FOLLOW_dash_in_afterOscarCompoundStructure1453);
                    	    dash317=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash317.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:45: ( oscarcm )+
                    	    int cnt89=0;
                    	    loop89:
                    	    do {
                    	        int alt89=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA89_3 = input.LA(3);

                    	                if ( (synpred274_ChemicalChunker()) ) {
                    	                    alt89=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt89) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1455_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1455);
                    	    	    oscarcm318=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm318.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt89 >= 1 ) break loop89;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(89, input);
                    	                throw eee;
                    	        }
                    	        cnt89++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:56: ( dash )?
                    int alt91=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA91_3 = input.LA(3);

                                    if ( (synpred276_ChemicalChunker()) ) {
                                        alt91=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt91) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1460_static.FOLLOW_dash_in_afterOscarCompoundStructure1460);
                            dash319=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash319.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:62: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:62: ( dash | apost )+
                    int cnt92=0;
                    loop92:
                    do {
                        int alt92=3;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA92_4 = input.LA(3);

                                if ( (synpred278_ChemicalChunker()) ) {
                                    alt92=1;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA92_5 = input.LA(3);

                                if ( (synpred279_ChemicalChunker()) ) {
                                    alt92=2;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt92) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:63: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1464_static.FOLLOW_dash_in_afterOscarCompoundStructure1464);
                    	    dash320=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash320.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:68: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1466_static.FOLLOW_apost_in_afterOscarCompoundStructure1466);
                    	    apost321=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost321.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt92 >= 1 ) break loop92;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(92, input);
                                throw eee;
                        }
                        cnt92++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb322 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm323 = null;

        ChemicalChunkerParser.rrb_return rrb324 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1475_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1475);
            lrb322=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb322.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:155:40: ( oscarcm )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1478_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1478);
            	    oscarcm323=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm323.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1481_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1481);
            rrb324=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb324.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount325 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1491_static.FOLLOW_moleculeamount_in_molecule1491);
            moleculeamount325=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount325.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3326 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1327 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2328 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:16: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt95=3;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:18: moleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1508_static.FOLLOW_moleculeamount3_in_moleculeamount1508);
                    moleculeamount3326=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3326.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:34: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1510_static.FOLLOW_moleculeamount1_in_moleculeamount1510);
                    moleculeamount1327=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1327.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:52: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1514_static.FOLLOW_moleculeamount2_in_moleculeamount1514);
                    moleculeamount2328=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: moleculeamount3 : ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity329 = null;

        ChemicalChunkerParser.mixture_return mixture330 = null;

        ChemicalChunkerParser.inof_return inof331 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE332 = null;

        ChemicalChunkerParser.dt_return dt333 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio334 = null;

        ChemicalChunkerParser.mixture_return mixture335 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound336 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:2: ( ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:3: ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:3: ( quantity | mixture )
            int alt96=2;
            switch ( input.LA(1) ) {
            case 142:
                {
                int LA96_1 = input.LA(2);

                if ( (synpred283_ChemicalChunker()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;
                }
                }
                break;
            case 145:
                {
                int LA96_2 = input.LA(2);

                if ( (synpred283_ChemicalChunker()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 73:
                {
                alt96=1;
                }
                break;
            case 133:
                {
                alt96=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }

            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount31524_static.FOLLOW_quantity_in_moleculeamount31524);
                    quantity329=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity329.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31526_static.FOLLOW_mixture_in_moleculeamount31526);
                    mixture330=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture330.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount31529_static.FOLLOW_inof_in_moleculeamount31529);
            inof331=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof331.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:27: ( dtTHE | dt )?
            int alt97=3;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt97=1;
                    }
                    break;
                case 146:
                    {
                    alt97=2;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:28: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31532_static.FOLLOW_dtTHE_in_moleculeamount31532);
                    dtTHE332=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE332.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:36: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31536_static.FOLLOW_dt_in_moleculeamount31536);
                    dt333=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt333.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount31540_static.FOLLOW_mixtureRatio_in_moleculeamount31540);
            mixtureRatio334=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio334.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:54: ( mixture )?
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31542_static.FOLLOW_mixture_in_moleculeamount31542);
                    mixture335=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture335.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31545_static.FOLLOW_oscarCompound_in_moleculeamount31545);
            oscarCompound336=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound336.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:1: moleculeamount1 : ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? oscarCompound afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity337 = null;

        ChemicalChunkerParser.mixture_return mixture338 = null;

        ChemicalChunkerParser.inof_return inof339 = null;

        ChemicalChunkerParser.quantity_return quantity340 = null;

        ChemicalChunkerParser.inof_return inof341 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE342 = null;

        ChemicalChunkerParser.dt_return dt343 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound344 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity345 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:2: ( ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? oscarCompound afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:3: ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? oscarCompound afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:3: ( quantity | mixture )+
            int cnt99=0;
            loop99:
            do {
                int alt99=3;
                switch ( input.LA(1) ) {
                case 142:
                    {
                    int LA99_2 = input.LA(2);

                    if ( (synpred287_ChemicalChunker()) ) {
                        alt99=1;
                    }
                    else if ( (synpred288_ChemicalChunker()) ) {
                        alt99=2;
                    }


                    }
                    break;
                case 145:
                    {
                    int LA99_3 = input.LA(2);

                    if ( (synpred287_ChemicalChunker()) ) {
                        alt99=1;
                    }
                    else if ( (synpred288_ChemicalChunker()) ) {
                        alt99=2;
                    }


                    }
                    break;
                case 38:
                case 73:
                    {
                    alt99=1;
                    }
                    break;
                case 133:
                    {
                    alt99=2;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11555_static.FOLLOW_quantity_in_moleculeamount11555);
            	    quantity337=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity337.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11557_static.FOLLOW_mixture_in_moleculeamount11557);
            	    mixture338=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture338.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11561_static.FOLLOW_inof_in_moleculeamount11561);
            inof339=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof339.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:28: ( quantity ( inof )? )?
            int alt101=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 38:
                                case 73:
                                case 145:
                                    {
                                    alt101=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 38:
                case 73:
                case 145:
                    {
                    alt101=1;
                    }
                    break;
            }

            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:29: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11564_static.FOLLOW_quantity_in_moleculeamount11564);
                    quantity340=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity340.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:38: ( inof )?
                    int alt100=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt100=1;
                            }
                            break;
                    }

                    switch (alt100) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11566_static.FOLLOW_inof_in_moleculeamount11566);
                            inof341=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof341.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:46: ( dtTHE | dt )?
            int alt102=3;
            switch ( input.LA(1) ) {
                case 141:
                    {
                    alt102=1;
                    }
                    break;
                case 146:
                    {
                    alt102=2;
                    }
                    break;
            }

            switch (alt102) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:47: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11572_static.FOLLOW_dtTHE_in_moleculeamount11572);
                    dtTHE342=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE342.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:55: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11576_static.FOLLOW_dt_in_moleculeamount11576);
                    dt343=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt343.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11580_static.FOLLOW_oscarCompound_in_moleculeamount11580);
            oscarCompound344=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound344.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11582_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11582);
            afterCompoundCitationOrQuantity345=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity345.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity346 = null;

        ChemicalChunkerParser.mixture_return mixture347 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound348 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity349 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:2: ( ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:3: ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:3: ( quantity | mixture )*
            loop103:
            do {
                int alt103=3;
                alt103 = dfa103.predict(input);
                switch (alt103) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21591_static.FOLLOW_quantity_in_moleculeamount21591);
            	    quantity346=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity346.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21593_static.FOLLOW_mixture_in_moleculeamount21593);
            	    mixture347=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture347.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:23: ( oscarCompound )+
            int cnt104=0;
            loop104:
            do {
                int alt104=2;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21597_static.FOLLOW_oscarCompound_in_moleculeamount21597);
            	    oscarCompound348=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound348.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt104 >= 1 ) break loop104;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(104, input);
                        throw eee;
                }
                cnt104++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21600_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21600);
            afterCompoundCitationOrQuantity349=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity349.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:1: afterCompoundCitationOrQuantity : ( ( numericCompoundReference | nnchementity ) ( quantity )+ )? ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericCompoundReference_return numericCompoundReference350 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity351 = null;

        ChemicalChunkerParser.quantity_return quantity352 = null;

        ChemicalChunkerParser.citation_return citation353 = null;

        ChemicalChunkerParser.quantity_return quantity354 = null;

        ChemicalChunkerParser.comma_return comma355 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node356 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure357 = null;

        ChemicalChunkerParser.mixture_return mixture358 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:32: ( ( ( numericCompoundReference | nnchementity ) ( quantity )+ )? ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:34: ( ( numericCompoundReference | nnchementity ) ( quantity )+ )? ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:34: ( ( numericCompoundReference | nnchementity ) ( quantity )+ )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:35: ( numericCompoundReference | nnchementity ) ( quantity )+
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:35: ( numericCompoundReference | nnchementity )
                    int alt105=2;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 139:
                    case 142:
                    case 145:
                        {
                        alt105=1;
                        }
                        break;
                    case 71:
                        {
                        alt105=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 105, 0, input);

                        throw nvae;
                    }

                    switch (alt105) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:36: numericCompoundReference
                            {
                            pushFollow(FOLLOW_numericCompoundReference_in_afterCompoundCitationOrQuantity1609_static.FOLLOW_numericCompoundReference_in_afterCompoundCitationOrQuantity1609);
                            numericCompoundReference350=numericCompoundReference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericCompoundReference350.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:61: nnchementity
                            {
                            pushFollow(FOLLOW_nnchementity_in_afterCompoundCitationOrQuantity1611_static.FOLLOW_nnchementity_in_afterCompoundCitationOrQuantity1611);
                            nnchementity351=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity351.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:74: ( quantity )+
                    int cnt106=0;
                    loop106:
                    do {
                        int alt106=2;
                        alt106 = dfa106.predict(input);
                        switch (alt106) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
                    	    {
                    	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1613_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1613);
                    	    quantity352=quantity();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity352.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt106 >= 1 ) break loop106;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(106, input);
                                throw eee;
                        }
                        cnt106++;
                    } while (true);


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:85: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop109:
            do {
                int alt109=5;
                alt109 = dfa109.predict(input);
                switch (alt109) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:86: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1618_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1618);
            	    citation353=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation353.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:95: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620);
            	    quantity354=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity354.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:104: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1622_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1622);
            	    comma355=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma355.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:110: ( quantity1Node | citationStructure )
            	    int alt108=2;
            	    alt108 = dfa108.predict(input);
            	    switch (alt108) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:111: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625);
            	            quantity1Node356=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node356.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:125: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627);
            	            citationStructure357=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure357.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:144: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630_static.FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630);
            	    mixture358=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture358.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: unnamedmolecule : ( unnamedmoleculeamount | referenceToCompound ) -> ^( UNNAMEDMOLECULE ( unnamedmoleculeamount )? ( referenceToCompound )? ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount359 = null;

        ChemicalChunkerParser.referenceToCompound_return referenceToCompound360 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        RewriteRuleSubtreeStream stream_referenceToCompound=new RewriteRuleSubtreeStream(adaptor,"rule referenceToCompound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:2: ( ( unnamedmoleculeamount | referenceToCompound ) -> ^( UNNAMEDMOLECULE ( unnamedmoleculeamount )? ( referenceToCompound )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: ( unnamedmoleculeamount | referenceToCompound )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: ( unnamedmoleculeamount | referenceToCompound )
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:5: unnamedmoleculeamount
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1642_static.FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1642);
                    unnamedmoleculeamount359=unnamedmoleculeamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount359.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:27: referenceToCompound
                    {
                    pushFollow(FOLLOW_referenceToCompound_in_unnamedmolecule1644_static.FOLLOW_referenceToCompound_in_unnamedmolecule1644);
                    referenceToCompound360=referenceToCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_referenceToCompound.add(referenceToCompound360.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: referenceToCompound, unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 174:48: -> ^( UNNAMEDMOLECULE ( unnamedmoleculeamount )? ( referenceToCompound )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:51: ^( UNNAMEDMOLECULE ( unnamedmoleculeamount )? ( referenceToCompound )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:69: ( unnamedmoleculeamount )?
                if ( stream_unnamedmoleculeamount.hasNext() ) {
                    adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                }
                stream_unnamedmoleculeamount.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:92: ( referenceToCompound )?
                if ( stream_referenceToCompound.hasNext() ) {
                    adaptor.addChild(root_1, stream_referenceToCompound.nextTree());

                }
                stream_referenceToCompound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1361 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2362 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3363 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4364 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5365 = null;

        ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6366 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:2: ( ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 )
            int alt111=6;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:4: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1666_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1666);
                    unnamedmoleculeamount1361=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1361.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:27: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1668_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1668);
                    unnamedmoleculeamount2362=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2362.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:50: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1670_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1670);
                    unnamedmoleculeamount3363=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3363.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:73: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1672_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1672);
                    unnamedmoleculeamount4364=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4364.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:96: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1674_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1674);
                    unnamedmoleculeamount5365=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5365.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:119: unnamedmoleculeamount6
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeamount1676_static.FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeamount1676);
                    unnamedmoleculeamount6366=unnamedmoleculeamount6();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount6366.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, unnamedmoleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:1: unnamedmoleculeamount1 : jjcomp nnchementity ( numericCompoundReference )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp367 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity368 = null;

        ChemicalChunkerParser.numericCompoundReference_return numericCompoundReference369 = null;

        ChemicalChunkerParser.quantity_return quantity370 = null;

        ChemicalChunkerParser.mixture_return mixture371 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:24: ( jjcomp nnchementity ( numericCompoundReference )? ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:11: jjcomp nnchementity ( numericCompoundReference )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount11696_static.FOLLOW_jjcomp_in_unnamedmoleculeamount11696);
            jjcomp367=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp367.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount11698_static.FOLLOW_nnchementity_in_unnamedmoleculeamount11698);
            nnchementity368=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity368.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:31: ( numericCompoundReference )?
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericCompoundReference
                    {
                    pushFollow(FOLLOW_numericCompoundReference_in_unnamedmoleculeamount11700_static.FOLLOW_numericCompoundReference_in_unnamedmoleculeamount11700);
                    numericCompoundReference369=numericCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericCompoundReference369.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:57: ( quantity | mixture )*
            loop113:
            do {
                int alt113=3;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:58: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11704_static.FOLLOW_quantity_in_unnamedmoleculeamount11704);
            	    quantity370=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity370.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:67: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount11706_static.FOLLOW_mixture_in_unnamedmoleculeamount11706);
            	    mixture371=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture371.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: unnamedmoleculeamount2 : quantity inof ( nnchementity )? numericCompoundReference ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity372 = null;

        ChemicalChunkerParser.inof_return inof373 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity374 = null;

        ChemicalChunkerParser.numericCompoundReference_return numericCompoundReference375 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:2: ( quantity inof ( nnchementity )? numericCompoundReference )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:4: quantity inof ( nnchementity )? numericCompoundReference
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount21718_static.FOLLOW_quantity_in_unnamedmoleculeamount21718);
            quantity372=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity372.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount21720_static.FOLLOW_inof_in_unnamedmoleculeamount21720);
            inof373=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof373.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:18: ( nnchementity )?
            int alt114=2;
            switch ( input.LA(1) ) {
                case 71:
                    {
                    alt114=1;
                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount21722_static.FOLLOW_nnchementity_in_unnamedmoleculeamount21722);
                    nnchementity374=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity374.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_numericCompoundReference_in_unnamedmoleculeamount21725_static.FOLLOW_numericCompoundReference_in_unnamedmoleculeamount21725);
            numericCompoundReference375=numericCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericCompoundReference375.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: unnamedmoleculeamount3 : alphanumericOrBrackettedCompoundReference ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.alphanumericOrBrackettedCompoundReference_return alphanumericOrBrackettedCompoundReference376 = null;

        ChemicalChunkerParser.citation_return citation377 = null;

        ChemicalChunkerParser.quantity_return quantity378 = null;

        ChemicalChunkerParser.mixture_return mixture379 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:2: ( alphanumericOrBrackettedCompoundReference ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: alphanumericOrBrackettedCompoundReference ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_alphanumericOrBrackettedCompoundReference_in_unnamedmoleculeamount31734_static.FOLLOW_alphanumericOrBrackettedCompoundReference_in_unnamedmoleculeamount31734);
            alphanumericOrBrackettedCompoundReference376=alphanumericOrBrackettedCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrBrackettedCompoundReference376.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:46: ( citation | quantity | mixture )*
            loop115:
            do {
                int alt115=4;
                alt115 = dfa115.predict(input);
                switch (alt115) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:47: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount31737_static.FOLLOW_citation_in_unnamedmoleculeamount31737);
            	    citation377=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation377.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:56: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount31739_static.FOLLOW_quantity_in_unnamedmoleculeamount31739);
            	    quantity378=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity378.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:65: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount31741_static.FOLLOW_mixture_in_unnamedmoleculeamount31741);
            	    mixture379=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture379.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class alphanumericOrBrackettedCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrBrackettedCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:1: alphanumericOrBrackettedCompoundReference : ( cdAlphanum | bracketedNumeric | squareBracketedReference ) -> ^( REFERENCETOCOMPOUND ( cdAlphanum )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.alphanumericOrBrackettedCompoundReference_return alphanumericOrBrackettedCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrBrackettedCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrBrackettedCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrBrackettedCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum380 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric381 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference382 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_cdAlphanum=new RewriteRuleSubtreeStream(adaptor,"rule cdAlphanum");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:3: ( ( cdAlphanum | bracketedNumeric | squareBracketedReference ) -> ^( REFERENCETOCOMPOUND ( cdAlphanum )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:5: ( cdAlphanum | bracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:5: ( cdAlphanum | bracketedNumeric | squareBracketedReference )
            int alt116=3;
            switch ( input.LA(1) ) {
            case 38:
                {
                alt116=1;
                }
                break;
            case 142:
                {
                alt116=2;
                }
                break;
            case 139:
                {
                alt116=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:6: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_alphanumericOrBrackettedCompoundReference1754_static.FOLLOW_cdAlphanum_in_alphanumericOrBrackettedCompoundReference1754);
                    cdAlphanum380=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdAlphanum.add(cdAlphanum380.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:17: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_alphanumericOrBrackettedCompoundReference1756_static.FOLLOW_bracketedNumeric_in_alphanumericOrBrackettedCompoundReference1756);
                    bracketedNumeric381=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric381.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:34: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_alphanumericOrBrackettedCompoundReference1758_static.FOLLOW_squareBracketedReference_in_alphanumericOrBrackettedCompoundReference1758);
                    squareBracketedReference382=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference382.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, cdAlphanum, bracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:60: -> ^( REFERENCETOCOMPOUND ( cdAlphanum )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:63: ^( REFERENCETOCOMPOUND ( cdAlphanum )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:85: ( cdAlphanum )?
                if ( stream_cdAlphanum.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdAlphanum.nextTree());

                }
                stream_cdAlphanum.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:97: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:115: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, alphanumericOrBrackettedCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrBrackettedCompoundReference"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:1: unnamedmoleculeamount4 : numberCompoundReference ( citation | quantity | mixture )* quantity ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference383 = null;

        ChemicalChunkerParser.citation_return citation384 = null;

        ChemicalChunkerParser.quantity_return quantity385 = null;

        ChemicalChunkerParser.mixture_return mixture386 = null;

        ChemicalChunkerParser.quantity_return quantity387 = null;

        ChemicalChunkerParser.citation_return citation388 = null;

        ChemicalChunkerParser.quantity_return quantity389 = null;

        ChemicalChunkerParser.mixture_return mixture390 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:2: ( numberCompoundReference ( citation | quantity | mixture )* quantity ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: numberCompoundReference ( citation | quantity | mixture )* quantity ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numberCompoundReference_in_unnamedmoleculeamount41783_static.FOLLOW_numberCompoundReference_in_unnamedmoleculeamount41783);
            numberCompoundReference383=numberCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference383.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:28: ( citation | quantity | mixture )*
            loop117:
            do {
                int alt117=4;
                alt117 = dfa117.predict(input);
                switch (alt117) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:29: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount41786_static.FOLLOW_citation_in_unnamedmoleculeamount41786);
            	    citation384=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation384.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:38: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41788_static.FOLLOW_quantity_in_unnamedmoleculeamount41788);
            	    quantity385=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity385.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:47: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount41790_static.FOLLOW_mixture_in_unnamedmoleculeamount41790);
            	    mixture386=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture386.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41794_static.FOLLOW_quantity_in_unnamedmoleculeamount41794);
            quantity387=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity387.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:66: ( citation | quantity | mixture )*
            loop118:
            do {
                int alt118=4;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:67: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount41797_static.FOLLOW_citation_in_unnamedmoleculeamount41797);
            	    citation388=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation388.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:76: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41799_static.FOLLOW_quantity_in_unnamedmoleculeamount41799);
            	    quantity389=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity389.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:85: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount41801_static.FOLLOW_mixture_in_unnamedmoleculeamount41801);
            	    mixture390=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture390.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: numberCompoundReference : cd -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd391 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:3: ( cd -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:5: cd
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference1813_static.FOLLOW_cd_in_numberCompoundReference1813);
            cd391=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd391.getTree());


            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 195:8: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:11: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:1: unnamedmoleculeamount5 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity392 = null;

        ChemicalChunkerParser.inof_return inof393 = null;

        ChemicalChunkerParser.jj_return jj394 = null;

        ChemicalChunkerParser.noun_return noun395 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:2: ( quantity inof ( ( jj )? noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51829_static.FOLLOW_quantity_in_unnamedmoleculeamount51829);
            quantity392=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity392.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount51831_static.FOLLOW_inof_in_unnamedmoleculeamount51831);
            inof393=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof393.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:17: ( ( jj )? noun )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: ( jj )? noun
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: ( jj )?
            	    int alt119=2;
            	    switch ( input.LA(1) ) {
            	        case 150:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA119_3 = input.LA(3);

            	                    if ( (synpred325_ChemicalChunker()) ) {
            	                        alt119=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt119) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount51834_static.FOLLOW_jj_in_unnamedmoleculeamount51834);
            	            jj394=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj394.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount51837_static.FOLLOW_noun_in_unnamedmoleculeamount51837);
            	    noun395=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun395.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class unnamedmoleculeamount6_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount6"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:1: unnamedmoleculeamount6 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount6_return retval = new ChemicalChunkerParser.unnamedmoleculeamount6_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount6_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity396 = null;

        ChemicalChunkerParser.mixture_return mixture397 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity398 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:2: ( ( quantity | mixture ) nnchementity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:3: ( quantity | mixture )
            int alt121=2;
            switch ( input.LA(1) ) {
            case 142:
                {
                int LA121_1 = input.LA(2);

                if ( (synpred327_ChemicalChunker()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 1, input);

                    throw nvae;
                }
                }
                break;
            case 145:
                {
                int LA121_2 = input.LA(2);

                if ( (synpred327_ChemicalChunker()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 73:
                {
                alt121=1;
                }
                break;
            case 133:
                {
                alt121=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61848_static.FOLLOW_quantity_in_unnamedmoleculeamount61848);
                    quantity396=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity396.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61850_static.FOLLOW_mixture_in_unnamedmoleculeamount61850);
                    mixture397=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture397.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount61853_static.FOLLOW_nnchementity_in_unnamedmoleculeamount61853);
            nnchementity398=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity398.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, unnamedmoleculeamount6_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount6"

    public static class referenceToCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:1: referenceToCompound : ( nnchementity | {...}?) numericCompoundReference ;
    public final ChemicalChunkerParser.referenceToCompound_return referenceToCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToCompound_return retval = new ChemicalChunkerParser.referenceToCompound_return();
        retval.start = input.LT(1);
        int referenceToCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity399 = null;

        ChemicalChunkerParser.numericCompoundReference_return numericCompoundReference400 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:2: ( ( nnchementity | {...}?) numericCompoundReference )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( nnchementity | {...}?) numericCompoundReference
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:4: ( nnchementity | {...}?)
            int alt122=2;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt122=1;
                }
                break;
            case 38:
            case 139:
            case 142:
            case 145:
                {
                alt122=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:5: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_referenceToCompound1863_static.FOLLOW_nnchementity_in_referenceToCompound1863);
                    nnchementity399=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity399.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:204:20: {...}?
                    {
                    if ( !(("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "referenceToCompound", "\"IN-OF\".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)");
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_numericCompoundReference_in_referenceToCompound1870_static.FOLLOW_numericCompoundReference_in_referenceToCompound1870);
            numericCompoundReference400=numericCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericCompoundReference400.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, referenceToCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToCompound"

    public static class numericCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:1: numericCompoundReference : ( numericOrBracketedNumeric | squareBracketedReference ) -> ^( REFERENCETOCOMPOUND ( numericOrBracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.numericCompoundReference_return numericCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericCompoundReference_return retval = new ChemicalChunkerParser.numericCompoundReference_return();
        retval.start = input.LT(1);
        int numericCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric401 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference402 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_numericOrBracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule numericOrBracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:3: ( ( numericOrBracketedNumeric | squareBracketedReference ) -> ^( REFERENCETOCOMPOUND ( numericOrBracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:5: ( numericOrBracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:5: ( numericOrBracketedNumeric | squareBracketedReference )
            int alt123=2;
            switch ( input.LA(1) ) {
            case 38:
            case 142:
            case 145:
                {
                alt123=1;
                }
                break;
            case 139:
                {
                alt123=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }

            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:6: numericOrBracketedNumeric
                    {
                    pushFollow(FOLLOW_numericOrBracketedNumeric_in_numericCompoundReference1881_static.FOLLOW_numericOrBracketedNumeric_in_numericCompoundReference1881);
                    numericOrBracketedNumeric401=numericOrBracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericOrBracketedNumeric.add(numericOrBracketedNumeric401.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:33: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_numericCompoundReference1884_static.FOLLOW_squareBracketedReference_in_numericCompoundReference1884);
                    squareBracketedReference402=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference402.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, numericOrBracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 207:59: -> ^( REFERENCETOCOMPOUND ( numericOrBracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:62: ^( REFERENCETOCOMPOUND ( numericOrBracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:84: ( numericOrBracketedNumeric )?
                if ( stream_numericOrBracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericOrBracketedNumeric.nextTree());

                }
                stream_numericOrBracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:111: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, numericCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericCompoundReference"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb403 = null;

        ChemicalChunkerParser.numeric_return numeric404 = null;

        ChemicalChunkerParser.rsqb_return rsqb405 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:2: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:4: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference1906_static.FOLLOW_lsqb_in_squareBracketedReference1906);
            lsqb403=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb403.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference1908_static.FOLLOW_numeric_in_squareBracketedReference1908);
            numeric404=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric404.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference1910_static.FOLLOW_rsqb_in_squareBracketedReference1910);
            rsqb405=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb405.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node406 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node407 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:14: ( quantity1Node | quantity2Node )
            int alt124=2;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt124=1;
                }
                break;
            case 38:
            case 73:
            case 145:
                {
                alt124=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }

            switch (alt124) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity1921_static.FOLLOW_quantity1Node_in_quantity1921);
                    quantity1Node406=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node406.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity1923_static.FOLLOW_quantity2Node_in_quantity1923);
                    quantity2Node407=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node407.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1408 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node1932_static.FOLLOW_quantity1_in_quantity1Node1932);
            quantity1408=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1408.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb409 = null;

        ChemicalChunkerParser.measurements_return measurements410 = null;

        ChemicalChunkerParser.comma_return comma411 = null;

        ChemicalChunkerParser.measurements_return measurements412 = null;

        ChemicalChunkerParser.comma_return comma413 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase414 = null;

        ChemicalChunkerParser.stop_return stop415 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase416 = null;

        ChemicalChunkerParser.rrb_return rrb417 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity11952_static.FOLLOW_lrb_in_quantity11952);
            lrb409=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb409.getTree());
            pushFollow(FOLLOW_measurements_in_quantity11954_static.FOLLOW_measurements_in_quantity11954);
            measurements410=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements410.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:21: ( comma measurements )*
            loop125:
            do {
                int alt125=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 73:
                        case 145:
                            {
                            alt125=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11957_static.FOLLOW_comma_in_quantity11957);
            	    comma411=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma411.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity11960_static.FOLLOW_measurements_in_quantity11960);
            	    measurements412=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements412.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:44: ( comma preparationphrase )*
            loop126:
            do {
                int alt126=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt126=1;
                    }
                    break;

                }

                switch (alt126) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity11965_static.FOLLOW_comma_in_quantity11965);
            	    comma413=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma413.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11967_static.FOLLOW_preparationphrase_in_quantity11967);
            	    preparationphrase414=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase414.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:71: ( stop preparationphrase )*
            loop127:
            do {
                int alt127=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt127=1;
                    }
                    break;

                }

                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity11972_static.FOLLOW_stop_in_quantity11972);
            	    stop415=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop415.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity11974_static.FOLLOW_preparationphrase_in_quantity11974);
            	    preparationphrase416=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase416.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity11979_static.FOLLOW_rrb_in_quantity11979);
            rrb417=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb417.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2418 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node1987_static.FOLLOW_quantity2_in_quantity2Node1987);
            quantity2418=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2418.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 219:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements419 = null;

        ChemicalChunkerParser.comma_return comma420 = null;

        ChemicalChunkerParser.measurements_return measurements421 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22008_static.FOLLOW_measurements_in_quantity22008);
            measurements419=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements419.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:18: ( comma measurements )*
            loop128:
            do {
                int alt128=2;
                alt128 = dfa128.predict(input);
                switch (alt128) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22011_static.FOLLOW_comma_in_quantity22011);
            	    comma420=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma420.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22014_static.FOLLOW_measurements_in_quantity22014);
            	    measurements421=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements421.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd422 = null;

        ChemicalChunkerParser.nn_return nn423 = null;

        ChemicalChunkerParser.multiple_return multiple424 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes425 = null;

        ChemicalChunkerParser.dt_return dt426 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:3: ( cd nn )?
            int alt129=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 155:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 73:
                                                case 145:
                                                    {
                                                    alt129=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2027_static.FOLLOW_cd_in_measurements2027);
                    cd422=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd422.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2029_static.FOLLOW_nn_in_measurements2029);
                    nn423=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn423.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:12: ( multiple | measurementtypes )
            int alt130=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 44:
                        {
                        alt130=1;
                        }
                        break;
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 145:
                    case 155:
                        {
                        alt130=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 73:
                {
                alt130=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2034_static.FOLLOW_multiple_in_measurements2034);
                    multiple424=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple424.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2036_static.FOLLOW_measurementtypes_in_measurements2036);
                    measurementtypes425=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes425.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:43: ( dt )?
            int alt131=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA131_3 = input.LA(3);

                            if ( (synpred337_ChemicalChunker()) ) {
                                alt131=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2042_static.FOLLOW_dt_in_measurements2042);
                    dt426=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt426.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd427 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode428 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes429 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2050_static.FOLLOW_cd_in_multiple2050);
            cd427=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd427.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2052_static.FOLLOW_cdunicode_in_multiple2052);
            cdunicode428=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode428.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:25: ( measurementtypes )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2054_static.FOLLOW_measurementtypes_in_multiple2054);
                    measurementtypes429=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes429.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, cdunicode, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 226:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar430 = null;

        ChemicalChunkerParser.amount_return amount431 = null;

        ChemicalChunkerParser.mass_return mass432 = null;

        ChemicalChunkerParser.volume_return volume433 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity434 = null;

        ChemicalChunkerParser.equivalent_return equivalent435 = null;

        ChemicalChunkerParser.yield_return yield436 = null;

        ChemicalChunkerParser.percent_return percent437 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt133=8;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2079_static.FOLLOW_molar_in_measurementtypes2079);
                    molar430=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar430.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2081_static.FOLLOW_amount_in_measurementtypes2081);
                    amount431=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount431.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2083_static.FOLLOW_mass_in_measurementtypes2083);
                    mass432=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass432.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2085_static.FOLLOW_volume_in_measurementtypes2085);
                    volume433=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume433.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2087_static.FOLLOW_logHydrogenActivity_in_measurementtypes2087);
                    logHydrogenActivity434=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity434.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2089_static.FOLLOW_equivalent_in_measurementtypes2089);
                    equivalent435=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent435.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2091_static.FOLLOW_yield_in_measurementtypes2091);
                    yield436=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield436.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2093_static.FOLLOW_percent_in_measurementtypes2093);
                    percent437=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent437.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:1: molar : ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd438 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar439 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:7: ( ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:9: ( cd )+ nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:9: ( cd )+
            int cnt134=0;
            loop134:
            do {
                int alt134=2;
                switch ( input.LA(1) ) {
                case 145:
                    {
                    alt134=1;
                    }
                    break;

                }

                switch (alt134) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2101_static.FOLLOW_cd_in_molar2101);
            	    cd438=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd438.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt134 >= 1 ) break loop134;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(134, input);
                        throw eee;
                }
                cnt134++;
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2104_static.FOLLOW_nnmolar_in_molar2104);
            nnmolar439=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar439.getTree());


            // AST REWRITE
            // elements: cd, nnmolar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:21: -> ^( MOLAR ( cd )+ nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:24: ^( MOLAR ( cd )+ nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd440 = null;

        ChemicalChunkerParser.nnamount_return nnamount441 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:10: ( cd )+
            int cnt135=0;
            loop135:
            do {
                int alt135=2;
                switch ( input.LA(1) ) {
                case 145:
                    {
                    alt135=1;
                    }
                    break;

                }

                switch (alt135) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2125_static.FOLLOW_cd_in_amount2125);
            	    cd440=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd440.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt135 >= 1 ) break loop135;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(135, input);
                        throw eee;
                }
                cnt135++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2128_static.FOLLOW_nnamount_in_amount2128);
            nnamount441=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount441.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:231:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd442 = null;

        ChemicalChunkerParser.nnmass_return nnmass443 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:8: ( cd )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                switch ( input.LA(1) ) {
                case 145:
                    {
                    alt136=1;
                    }
                    break;

                }

                switch (alt136) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2149_static.FOLLOW_cd_in_mass2149);
            	    cd442=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd442.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2152_static.FOLLOW_nnmass_in_mass2152);
            nnmass443=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass443.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 232:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd444 = null;

        ChemicalChunkerParser.nnvol_return nnvol445 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:10: ( cd )+
            int cnt137=0;
            loop137:
            do {
                int alt137=2;
                switch ( input.LA(1) ) {
                case 145:
                    {
                    alt137=1;
                    }
                    break;

                }

                switch (alt137) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2172_static.FOLLOW_cd_in_volume2172);
            	    cd444=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd444.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt137 >= 1 ) break loop137;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(137, input);
                        throw eee;
                }
                cnt137++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2175_static.FOLLOW_nnvol_in_volume2175);
            nnvol445=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol445.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 233:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:1: logHydrogenActivity : nnph cd -> ^( PH nnph cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph446 = null;

        ChemicalChunkerParser.cd_return cd447 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:21: ( nnph cd -> ^( PH nnph cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:23: nnph cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2196_static.FOLLOW_nnph_in_logHydrogenActivity2196);
            nnph446=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph446.getTree());
            pushFollow(FOLLOW_cd_in_logHydrogenActivity2198_static.FOLLOW_cd_in_logHydrogenActivity2198);
            cd447=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd447.getTree());


            // AST REWRITE
            // elements: cd, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 234:31: -> ^( PH nnph cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:234:34: ^( PH nnph cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: equivalent : ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd448 = null;

        ChemicalChunkerParser.nneq_return nneq449 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:11: ( ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:13: ( cd )+ nneq
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:13: ( cd )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                switch ( input.LA(1) ) {
                case 145:
                    {
                    alt138=1;
                    }
                    break;

                }

                switch (alt138) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_equivalent2217_static.FOLLOW_cd_in_equivalent2217);
            	    cd448=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd448.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);

            pushFollow(FOLLOW_nneq_in_equivalent2220_static.FOLLOW_nneq_in_equivalent2220);
            nneq449=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq449.getTree());


            // AST REWRITE
            // elements: nneq, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:22: -> ^( EQUIVALENT ( cd )+ nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:25: ^( EQUIVALENT ( cd )+ nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:1: yield : percent nnyield -> ^( YIELD percent nnyield ) ;
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent450 = null;

        ChemicalChunkerParser.nnyield_return nnyield451 = null;


        RewriteRuleSubtreeStream stream_percent=new RewriteRuleSubtreeStream(adaptor,"rule percent");
        RewriteRuleSubtreeStream stream_nnyield=new RewriteRuleSubtreeStream(adaptor,"rule nnyield");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:6: ( percent nnyield -> ^( YIELD percent nnyield ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:8: percent nnyield
            {
            pushFollow(FOLLOW_percent_in_yield2238_static.FOLLOW_percent_in_yield2238);
            percent450=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percent.add(percent450.getTree());
            pushFollow(FOLLOW_nnyield_in_yield2240_static.FOLLOW_nnyield_in_yield2240);
            nnyield451=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnyield.add(nnyield451.getTree());


            // AST REWRITE
            // elements: nnyield, percent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 236:24: -> ^( YIELD percent nnyield )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:27: ^( YIELD percent nnyield )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_percent.nextTree());
                adaptor.addChild(root_1, stream_nnyield.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:1: percent : numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric452 = null;

        ChemicalChunkerParser.nn_return nn453 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent454 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:9: ( numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:11: numeric ( nn )? nnpercent
            {
            pushFollow(FOLLOW_numeric_in_percent2258_static.FOLLOW_numeric_in_percent2258);
            numeric452=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric.add(numeric452.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:19: ( nn )?
            int alt139=2;
            switch ( input.LA(1) ) {
                case 155:
                    {
                    alt139=1;
                    }
                    break;
            }

            switch (alt139) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2260_static.FOLLOW_nn_in_percent2260);
                    nn453=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn453.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2263_static.FOLLOW_nnpercent_in_percent2263);
            nnpercent454=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent454.getTree());


            // AST REWRITE
            // elements: nnpercent, nn, numeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:33: -> ^( PERCENT numeric ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:36: ^( PERCENT numeric ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_numeric.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:237:56: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio455 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3456 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2457 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1458 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:10: ( mixtureRatio )?
            int alt140=2;
            switch ( input.LA(1) ) {
                case 145:
                    {
                    alt140=1;
                    }
                    break;
            }

            switch (alt140) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture2286_static.FOLLOW_mixtureRatio_in_mixture2286);
                    mixtureRatio455=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio455.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt141=3;
            switch ( input.LA(1) ) {
            case 142:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 66:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 132:
                    case 133:
                    case 136:
                    case 137:
                    case 139:
                    case 142:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 168:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                        {
                        alt141=3;
                        }
                        break;
                    case 138:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 143:
                                {
                                alt141=1;
                                }
                                break;
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 66:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 132:
                            case 133:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 142:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 167:
                            case 168:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                                {
                                alt141=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 141, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 141, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;
                }

                }
                break;
            case 133:
                {
                alt141=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2291_static.FOLLOW_mixtureStructure3_in_mixture2291);
                    mixtureStructure3456=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3456.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2293_static.FOLLOW_mixtureStructure2_in_mixture2293);
                    mixtureStructure2457=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2457.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2295_static.FOLLOW_mixtureStructure1_in_mixture2295);
                    mixtureStructure1458=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1458.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure3, mixtureRatio, mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 239:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma459 = null;

        ChemicalChunkerParser.lrb_return lrb460 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent461 = null;

        ChemicalChunkerParser.rrb_return rrb462 = null;

        ChemicalChunkerParser.comma_return comma463 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:240:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22322_static.FOLLOW_comma_in_mixtureStructure22322);
            comma459=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma459.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22324_static.FOLLOW_lrb_in_mixtureStructure22324);
            lrb460=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb460.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22326_static.FOLLOW_mixtureContent_in_mixtureStructure22326);
            mixtureContent461=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent461.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22328_static.FOLLOW_rrb_in_mixtureStructure22328);
            rrb462=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb462.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22330_static.FOLLOW_comma_in_mixtureStructure22330);
            comma463=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma463.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb464 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent465 = null;

        ChemicalChunkerParser.rrb_return rrb466 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12336_static.FOLLOW_lrb_in_mixtureStructure12336);
            lrb464=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb464.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure12338_static.FOLLOW_mixtureContent_in_mixtureStructure12338);
            mixtureContent465=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent465.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure12340_static.FOLLOW_rrb_in_mixtureStructure12340);
            rrb466=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb466.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb467 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent468 = null;

        ChemicalChunkerParser.rrb_return rrb469 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32348_static.FOLLOW_lrb_in_mixtureStructure32348);
            lrb467=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb467.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure32351_static.FOLLOW_nnpercent_in_mixtureStructure32351);
            nnpercent468=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent468.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32353_static.FOLLOW_rrb_in_mixtureStructure32353);
            rrb469=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb469.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:1: mixtureRatio : cd colon numeric ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);
        int mixtureRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd470 = null;

        ChemicalChunkerParser.colon_return colon471 = null;

        ChemicalChunkerParser.numeric_return numeric472 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:2: ( cd colon numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:4: cd colon numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio2362_static.FOLLOW_cd_in_mixtureRatio2362);
            cd470=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd470.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio2364_static.FOLLOW_colon_in_mixtureRatio2364);
            colon471=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon471.getTree());
            pushFollow(FOLLOW_numeric_in_mixtureRatio2366_static.FOLLOW_numeric_in_mixtureRatio2366);
            numeric472=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric472.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, mixtureRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: mixtureContent : ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw473 = null;

        ChemicalChunkerParser.verb_return verb474 = null;

        ChemicalChunkerParser.nn_return nn475 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node476 = null;

        ChemicalChunkerParser.md_return md477 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent478 = null;

        ChemicalChunkerParser.stop_return stop479 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound480 = null;

        ChemicalChunkerParser.molecule_return molecule481 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule482 = null;

        ChemicalChunkerParser.dash_return dash483 = null;

        ChemicalChunkerParser.sym_return sym484 = null;

        ChemicalChunkerParser.cd_return cd485 = null;

        ChemicalChunkerParser.noun_return noun486 = null;

        ChemicalChunkerParser.inAll_return inAll487 = null;

        ChemicalChunkerParser.cd_return cd488 = null;

        ChemicalChunkerParser.comma_return comma489 = null;

        ChemicalChunkerParser.adj_return adj490 = null;

        ChemicalChunkerParser.colon_return colon491 = null;

        ChemicalChunkerParser.stop_return stop492 = null;

        ChemicalChunkerParser.minimixture_return minimixture493 = null;

        ChemicalChunkerParser.fw_return fw494 = null;

        ChemicalChunkerParser.verb_return verb495 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node496 = null;

        ChemicalChunkerParser.nnyield_return nnyield497 = null;

        ChemicalChunkerParser.md_return md498 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent499 = null;

        ChemicalChunkerParser.stop_return stop500 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound501 = null;

        ChemicalChunkerParser.molecule_return molecule502 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule503 = null;

        ChemicalChunkerParser.dash_return dash504 = null;

        ChemicalChunkerParser.sym_return sym505 = null;

        ChemicalChunkerParser.cd_return cd506 = null;

        ChemicalChunkerParser.noun_return noun507 = null;

        ChemicalChunkerParser.inAll_return inAll508 = null;

        ChemicalChunkerParser.cd_return cd509 = null;

        ChemicalChunkerParser.comma_return comma510 = null;

        ChemicalChunkerParser.adj_return adj511 = null;

        ChemicalChunkerParser.colon_return colon512 = null;

        ChemicalChunkerParser.stop_return stop513 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:15: ( ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:19: ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:19: ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )
            int alt142=20;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent2375_static.FOLLOW_fw_in_mixtureContent2375);
                    fw473=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw473.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2377_static.FOLLOW_verb_in_mixtureContent2377);
                    verb474=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb474.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent2379_static.FOLLOW_nn_in_mixtureContent2379);
                    nn475=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn475.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:31: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2381_static.FOLLOW_quantity2Node_in_mixtureContent2381);
                    quantity2Node476=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node476.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:45: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2383_static.FOLLOW_md_in_mixtureContent2383);
                    md477=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md477.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent2385_static.FOLLOW_nnpercent_in_mixtureContent2385);
                    nnpercent478=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent478.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:58: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2387_static.FOLLOW_stop_in_mixtureContent2387);
                    stop479=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop479.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:63: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2389_static.FOLLOW_oscarCompound_in_mixtureContent2389);
                    oscarCompound480=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound480.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:77: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent2391_static.FOLLOW_molecule_in_mixtureContent2391);
                    molecule481=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule481.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:86: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2393_static.FOLLOW_unnamedmolecule_in_mixtureContent2393);
                    unnamedmolecule482=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule482.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:102: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2395_static.FOLLOW_dash_in_mixtureContent2395);
                    dash483=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash483.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:107: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent2397_static.FOLLOW_sym_in_mixtureContent2397);
                    sym484=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym484.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:111: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2399_static.FOLLOW_cd_in_mixtureContent2399);
                    cd485=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd485.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:114: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2401_static.FOLLOW_noun_in_mixtureContent2401);
                    noun486=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun486.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:119: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2403_static.FOLLOW_inAll_in_mixtureContent2403);
                    inAll487=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll487.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:125: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2405_static.FOLLOW_cd_in_mixtureContent2405);
                    cd488=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd488.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:128: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2407_static.FOLLOW_comma_in_mixtureContent2407);
                    comma489=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma489.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:134: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2409_static.FOLLOW_adj_in_mixtureContent2409);
                    adj490=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj490.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:138: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2411_static.FOLLOW_colon_in_mixtureContent2411);
                    colon491=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon491.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:144: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2413_static.FOLLOW_stop_in_mixtureContent2413);
                    stop492=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop492.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:150: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt143=0;
            loop143:
            do {
                int alt143=22;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:151: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent2417_static.FOLLOW_minimixture_in_mixtureContent2417);
            	    minimixture493=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture493.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:163: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent2419_static.FOLLOW_fw_in_mixtureContent2419);
            	    fw494=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw494.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:166: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2421_static.FOLLOW_verb_in_mixtureContent2421);
            	    verb495=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb495.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:171: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2423_static.FOLLOW_quantity2Node_in_mixtureContent2423);
            	    quantity2Node496=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node496.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:185: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent2425_static.FOLLOW_nnyield_in_mixtureContent2425);
            	    nnyield497=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield497.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:193: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2427_static.FOLLOW_md_in_mixtureContent2427);
            	    md498=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md498.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:196: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent2429_static.FOLLOW_nnpercent_in_mixtureContent2429);
            	    nnpercent499=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent499.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:206: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2431_static.FOLLOW_stop_in_mixtureContent2431);
            	    stop500=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop500.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:211: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2433_static.FOLLOW_oscarCompound_in_mixtureContent2433);
            	    oscarCompound501=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound501.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:225: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent2435_static.FOLLOW_molecule_in_mixtureContent2435);
            	    molecule502=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule502.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:234: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2437_static.FOLLOW_unnamedmolecule_in_mixtureContent2437);
            	    unnamedmolecule503=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule503.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:250: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2439_static.FOLLOW_dash_in_mixtureContent2439);
            	    dash504=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash504.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:255: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent2441_static.FOLLOW_sym_in_mixtureContent2441);
            	    sym505=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym505.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:259: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2443_static.FOLLOW_cd_in_mixtureContent2443);
            	    cd506=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd506.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:262: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2445_static.FOLLOW_noun_in_mixtureContent2445);
            	    noun507=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun507.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:267: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2447_static.FOLLOW_inAll_in_mixtureContent2447);
            	    inAll508=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll508.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:273: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2449_static.FOLLOW_cd_in_mixtureContent2449);
            	    cd509=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd509.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:276: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent2451_static.FOLLOW_comma_in_mixtureContent2451);
            	    comma510=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma510.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:282: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2453_static.FOLLOW_adj_in_mixtureContent2453);
            	    adj511=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj511.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:286: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2455_static.FOLLOW_colon_in_mixtureContent2455);
            	    colon512=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon512.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:292: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2457_static.FOLLOW_stop_in_mixtureContent2457);
            	    stop513=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop513.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2514 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1515 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt144=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt144=1;
                }
                break;
            case 142:
                {
                alt144=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture2468_static.FOLLOW_mixtureStructure2_in_minimixture2468);
                    mixtureStructure2514=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2514.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture2470_static.FOLLOW_mixtureStructure1_in_minimixture2470);
                    mixtureStructure1515=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1515.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:249:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method516 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2491_static.FOLLOW_method_in_procedureNode2491);
            method516=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method516.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: method : ( ( nngeneral | nn )? nnmethod ( numeric )? | nnexample numeric );
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral517 = null;

        ChemicalChunkerParser.nn_return nn518 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod519 = null;

        ChemicalChunkerParser.numeric_return numeric520 = null;

        ChemicalChunkerParser.nnexample_return nnexample521 = null;

        ChemicalChunkerParser.numeric_return numeric522 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:7: ( ( nngeneral | nn )? nnmethod ( numeric )? | nnexample numeric )
            int alt147=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 155:
                {
                alt147=1;
                }
                break;
            case 83:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:5: ( nngeneral | nn )? nnmethod ( numeric )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:5: ( nngeneral | nn )?
                    int alt145=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt145=1;
                            }
                            break;
                        case 155:
                            {
                            alt145=2;
                            }
                            break;
                    }

                    switch (alt145) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:6: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2511_static.FOLLOW_nngeneral_in_method2511);
                            nngeneral517=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral517.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:16: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2513_static.FOLLOW_nn_in_method2513);
                            nn518=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn518.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2517_static.FOLLOW_nnmethod_in_method2517);
                    nnmethod519=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod519.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:30: ( numeric )?
                    int alt146=2;
                    switch ( input.LA(1) ) {
                        case 145:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA146_4 = input.LA(3);

                                    if ( (synpred398_ChemicalChunker()) ) {
                                        alt146=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 38:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA146_5 = input.LA(3);

                                    if ( (synpred398_ChemicalChunker()) ) {
                                        alt146=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt146) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2519_static.FOLLOW_numeric_in_method2519);
                            numeric520=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric520.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:41: nnexample numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_method2524_static.FOLLOW_nnexample_in_method2524);
                    nnexample521=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample521.getTree());
                    pushFollow(FOLLOW_numeric_in_method2526_static.FOLLOW_numeric_in_method2526);
                    numeric522=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric522.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv523 = null;

        ChemicalChunkerParser.adj_return adj524 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( adv | adj )
            int alt148=2;
            switch ( input.LA(1) ) {
            case 163:
            case 164:
            case 165:
            case 166:
                {
                alt148=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 150:
            case 151:
            case 152:
                {
                alt148=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2535_static.FOLLOW_adv_in_advAdj2535);
                    adv523=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv523.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2537_static.FOLLOW_adj_in_advAdj2537);
                    adj524=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj524.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric525 = null;

        ChemicalChunkerParser.dash_return dash526 = null;

        ChemicalChunkerParser.numeric_return numeric527 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2544_static.FOLLOW_numeric_in_range2544);
            numeric525=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric525.getTree());
            pushFollow(FOLLOW_dash_in_range2546_static.FOLLOW_dash_in_range2546);
            dash526=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash526.getTree());
            pushFollow(FOLLOW_numeric_in_range2548_static.FOLLOW_numeric_in_range2548);
            numeric527=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric527.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure528 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2555_static.FOLLOW_cycleStructure_in_cycles2555);
            cycleStructure528=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure528.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd529 = null;

        ChemicalChunkerParser.dashNN_return dashNN530 = null;

        ChemicalChunkerParser.nncycle_return nncycle531 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2572_static.FOLLOW_cd_in_cycleStructure2572);
            cd529=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd529.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:21: ( dashNN )?
            int alt149=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 145:
                case 150:
                case 151:
                case 152:
                case 155:
                    {
                    alt149=1;
                    }
                    break;
            }

            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2574_static.FOLLOW_dashNN_in_cycleStructure2574);
                    dashNN530=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN530.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2577_static.FOLLOW_nncycle_in_cycleStructure2577);
            nncycle531=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle531.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj532 = null;

        ChemicalChunkerParser.nn_return nn533 = null;

        ChemicalChunkerParser.cd_return cd534 = null;

        ChemicalChunkerParser.dash_return dash535 = null;

        ChemicalChunkerParser.adj_return adj536 = null;

        ChemicalChunkerParser.nn_return nn537 = null;

        ChemicalChunkerParser.cd_return cd538 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:10: ( adj | nn | cd )
            int alt150=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 150:
            case 151:
            case 152:
                {
                alt150=1;
                }
                break;
            case 155:
                {
                alt150=2;
                }
                break;
            case 145:
                {
                alt150=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2585_static.FOLLOW_adj_in_dashNN2585);
                    adj532=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj532.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2587_static.FOLLOW_nn_in_dashNN2587);
                    nn533=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn533.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2589_static.FOLLOW_cd_in_dashNN2589);
                    cd534=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd534.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:22: ( dash ( adj | nn | cd ) )*
            loop152:
            do {
                int alt152=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt152=1;
                    }
                    break;

                }

                switch (alt152) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2593_static.FOLLOW_dash_in_dashNN2593);
            	    dash535=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash535.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:28: ( adj | nn | cd )
            	    int alt151=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 150:
            	    case 151:
            	    case 152:
            	        {
            	        alt151=1;
            	        }
            	        break;
            	    case 155:
            	        {
            	        alt151=2;
            	        }
            	        break;
            	    case 145:
            	        {
            	        alt151=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 151, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt151) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2596_static.FOLLOW_adj_in_dashNN2596);
            	            adj536=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj536.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN2598_static.FOLLOW_nn_in_dashNN2598);
            	            nn537=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn537.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN2600_static.FOLLOW_cd_in_dashNN2600);
            	            cd538=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd538.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: ratio : ( numericratio | nounratio ) -> ^( RATIO ( numericratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericratio_return numericratio539 = null;

        ChemicalChunkerParser.nounratio_return nounratio540 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numericratio=new RewriteRuleSubtreeStream(adaptor,"rule numericratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:7: ( ( numericratio | nounratio ) -> ^( RATIO ( numericratio )? ( nounratio )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:9: ( numericratio | nounratio )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:9: ( numericratio | nounratio )
            int alt153=2;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:10: numericratio
                    {
                    pushFollow(FOLLOW_numericratio_in_ratio2611_static.FOLLOW_numericratio_in_ratio2611);
                    numericratio539=numericratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericratio.add(numericratio539.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:23: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio2613_static.FOLLOW_nounratio_in_ratio2613);
                    nounratio540=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio540.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numericratio, nounratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 263:34: -> ^( RATIO ( numericratio )? ( nounratio )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:37: ^( RATIO ( numericratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:45: ( numericratio )?
                if ( stream_numericratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericratio.nextTree());

                }
                stream_numericratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:59: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numericratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:1: numericratio : cd ( colon numeric )+ ;
    public final ChemicalChunkerParser.numericratio_return numericratio() throws RecognitionException {
        ChemicalChunkerParser.numericratio_return retval = new ChemicalChunkerParser.numericratio_return();
        retval.start = input.LT(1);
        int numericratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd541 = null;

        ChemicalChunkerParser.colon_return colon542 = null;

        ChemicalChunkerParser.numeric_return numeric543 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:14: ( cd ( colon numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:17: cd ( colon numeric )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numericratio2636_static.FOLLOW_cd_in_numericratio2636);
            cd541=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd541.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:20: ( colon numeric )+
            int cnt154=0;
            loop154:
            do {
                int alt154=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 145:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA154_6 = input.LA(5);

                                if ( (synpred408_ChemicalChunker()) ) {
                                    alt154=1;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 38:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA154_7 = input.LA(5);

                                if ( (synpred408_ChemicalChunker()) ) {
                                    alt154=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt154) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:21: colon numeric
            	    {
            	    pushFollow(FOLLOW_colon_in_numericratio2639_static.FOLLOW_colon_in_numericratio2639);
            	    colon542=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon542.getTree());
            	    pushFollow(FOLLOW_numeric_in_numericratio2641_static.FOLLOW_numeric_in_numericratio2641);
            	    numeric543=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric543.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt154 >= 1 ) break loop154;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, numericratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun544 = null;

        ChemicalChunkerParser.colon_return colon545 = null;

        ChemicalChunkerParser.noun_return noun546 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio2653_static.FOLLOW_noun_in_nounratio2653);
            noun544=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun544.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:11: ( colon noun )+
            int cnt155=0;
            loop155:
            do {
                int alt155=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    int LA155_2 = input.LA(2);

                    if ( (synpred409_ChemicalChunker()) ) {
                        alt155=1;
                    }


                    }
                    break;

                }

                switch (alt155) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio2657_static.FOLLOW_colon_in_nounratio2657);
            	    colon545=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon545.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio2659_static.FOLLOW_noun_in_nounratio2659);
            	    noun546=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun546.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt155 >= 1 ) break loop155;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(155, input);
                        throw eee;
                }
                cnt155++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure547 = null;

        ChemicalChunkerParser.comma_return comma548 = null;

        ChemicalChunkerParser.citationContent_return citationContent549 = null;

        ChemicalChunkerParser.comma_return comma550 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:9: ( citationStructure | comma citationContent comma )
            int alt156=2;
            switch ( input.LA(1) ) {
            case 142:
                {
                alt156=1;
                }
                break;
            case 133:
                {
                alt156=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation2671_static.FOLLOW_citationStructure_in_citation2671);
                    citationStructure547=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure547.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation2673_static.FOLLOW_comma_in_citation2673);
                    comma548=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma548.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation2675_static.FOLLOW_citationContent_in_citation2675);
                    citationContent549=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent549.getTree());
                    pushFollow(FOLLOW_comma_in_citation2677_static.FOLLOW_comma_in_citation2677);
                    comma550=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma550.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent551 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure2685_static.FOLLOW_citationContent_in_citationStructure2685);
            citationContent551=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent551.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb552 = null;

        ChemicalChunkerParser.nnp_return nnp553 = null;

        ChemicalChunkerParser.fw_return fw554 = null;

        ChemicalChunkerParser.cd_return cd555 = null;

        ChemicalChunkerParser.conjunction_return conjunction556 = null;

        ChemicalChunkerParser.nnp_return nnp557 = null;

        ChemicalChunkerParser.fw_return fw558 = null;

        ChemicalChunkerParser.cd_return cd559 = null;

        ChemicalChunkerParser.conjunction_return conjunction560 = null;

        ChemicalChunkerParser.rrb_return rrb561 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent2701_static.FOLLOW_lrb_in_citationContent2701);
            lrb552=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb552.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:24: ( nnp | fw | cd | conjunction )
            int alt157=4;
            switch ( input.LA(1) ) {
            case 157:
                {
                alt157=1;
                }
                break;
            case 148:
                {
                alt157=2;
                }
                break;
            case 145:
                {
                alt157=3;
                }
                break;
            case 133:
            case 144:
                {
                alt157=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent2704_static.FOLLOW_nnp_in_citationContent2704);
                    nnp553=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp553.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent2706_static.FOLLOW_fw_in_citationContent2706);
                    fw554=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw554.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent2708_static.FOLLOW_cd_in_citationContent2708);
                    cd555=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd555.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent2710_static.FOLLOW_conjunction_in_citationContent2710);
                    conjunction556=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction556.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:48: ( nnp | fw | cd | conjunction )+
            int cnt158=0;
            loop158:
            do {
                int alt158=5;
                switch ( input.LA(1) ) {
                case 157:
                    {
                    alt158=1;
                    }
                    break;
                case 148:
                    {
                    alt158=2;
                    }
                    break;
                case 145:
                    {
                    alt158=3;
                    }
                    break;
                case 133:
                case 144:
                    {
                    alt158=4;
                    }
                    break;

                }

                switch (alt158) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent2714_static.FOLLOW_nnp_in_citationContent2714);
            	    nnp557=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp557.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent2716_static.FOLLOW_fw_in_citationContent2716);
            	    fw558=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw558.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent2718_static.FOLLOW_cd_in_citationContent2718);
            	    cd559=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd559.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent2720_static.FOLLOW_conjunction_in_citationContent2720);
            	    conjunction560=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction560.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt158 >= 1 ) break loop158;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(158, input);
                        throw eee;
                }
                cnt158++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent2724_static.FOLLOW_rrb_in_citationContent2724);
            rrb561=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb561.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric562 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric563 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:27: ( numeric | bracketedNumeric )
            int alt159=2;
            switch ( input.LA(1) ) {
            case 38:
            case 145:
                {
                alt159=1;
                }
                break;
            case 142:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric2734_static.FOLLOW_numeric_in_numericOrBracketedNumeric2734);
                    numeric562=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric562.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2738_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2738);
                    bracketedNumeric563=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric563.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb564 = null;

        ChemicalChunkerParser.numeric_return numeric565 = null;

        ChemicalChunkerParser.rrb_return rrb566 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric2746_static.FOLLOW_lrb_in_bracketedNumeric2746);
            lrb564=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb564.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric2748_static.FOLLOW_numeric_in_bracketedNumeric2748);
            numeric565=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric565.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric2750_static.FOLLOW_rrb_in_bracketedNumeric2750);
            rrb566=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb566.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj567 = null;

        ChemicalChunkerParser.jjr_return jjr568 = null;

        ChemicalChunkerParser.jjs_return jjs569 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj570 = null;

        ChemicalChunkerParser.jjchem_return jjchem571 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn572 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt160=6;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt160=1;
                }
                break;
            case 151:
                {
                alt160=2;
                }
                break;
            case 152:
                {
                alt160=3;
                }
                break;
            case 39:
                {
                alt160=4;
                }
                break;
            case 45:
                {
                alt160=5;
                }
                break;
            case 40:
                {
                alt160=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj2758_static.FOLLOW_jj_in_adj2758);
                    jj567=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj567.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj2760_static.FOLLOW_jjr_in_adj2760);
                    jjr568=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr568.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj2762_static.FOLLOW_jjs_in_adj2762);
                    jjs569=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs569.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj2764_static.FOLLOW_oscarcj_in_adj2764);
                    oscarcj570=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj570.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj2766_static.FOLLOW_jjchem_in_adj2766);
                    jjchem571=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem571.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj2768_static.FOLLOW_oscarrn_in_adj2768);
                    oscarrn572=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn572.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb573 = null;

        ChemicalChunkerParser.rbr_return rbr574 = null;

        ChemicalChunkerParser.rp_return rp575 = null;

        ChemicalChunkerParser.rbs_return rbs576 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:5: ( rb | rbr | rp | rbs )
            int alt161=4;
            switch ( input.LA(1) ) {
            case 163:
                {
                alt161=1;
                }
                break;
            case 164:
                {
                alt161=2;
                }
                break;
            case 166:
                {
                alt161=3;
                }
                break;
            case 165:
                {
                alt161=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv2775_static.FOLLOW_rb_in_adv2775);
                    rb573=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb573.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv2777_static.FOLLOW_rbr_in_adv2777);
                    rbr574=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr574.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv2779_static.FOLLOW_rp_in_adv2779);
                    rp575=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp575.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv2781_static.FOLLOW_rbs_in_adv2781);
                    rbs576=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs576.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt577 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss578 = null;

        ChemicalChunkerParser.wrb_return wrb579 = null;

        ChemicalChunkerParser.ex_return ex580 = null;

        ChemicalChunkerParser.pdt_return pdt581 = null;

        ChemicalChunkerParser.wp_return wp582 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt162=6;
            switch ( input.LA(1) ) {
            case 176:
                {
                alt162=1;
                }
                break;
            case 178:
                {
                alt162=2;
                }
                break;
            case 179:
                {
                alt162=3;
                }
                break;
            case 147:
                {
                alt162=4;
                }
                break;
            case 159:
                {
                alt162=5;
                }
                break;
            case 177:
                {
                alt162=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause2788_static.FOLLOW_wdt_in_clause2788);
                    wdt577=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt577.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause2790_static.FOLLOW_wp_poss_in_clause2790);
                    wp_poss578=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss578.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause2792_static.FOLLOW_wrb_in_clause2792);
                    wrb579=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb579.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause2794_static.FOLLOW_ex_in_clause2794);
                    ex580=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex580.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause2796_static.FOLLOW_pdt_in_clause2796);
                    pdt581=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt581.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause2798_static.FOLLOW_wp_in_clause2798);
                    wp582=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp582.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc583 = null;

        ChemicalChunkerParser.comma_return comma584 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:13: ( cc | comma )
            int alt163=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt163=1;
                }
                break;
            case 133:
                {
                alt163=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction2805_static.FOLLOW_cc_in_conjunction2805);
                    cc583=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc583.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction2807_static.FOLLOW_comma_in_conjunction2807);
                    comma584=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma584.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in585 = null;

        ChemicalChunkerParser.inafter_return inafter586 = null;

        ChemicalChunkerParser.inas_return inas587 = null;

        ChemicalChunkerParser.inbefore_return inbefore588 = null;

        ChemicalChunkerParser.inby_return inby589 = null;

        ChemicalChunkerParser.infor_return infor590 = null;

        ChemicalChunkerParser.infrom_return infrom591 = null;

        ChemicalChunkerParser.inin_return inin592 = null;

        ChemicalChunkerParser.ininto_return ininto593 = null;

        ChemicalChunkerParser.inof_return inof594 = null;

        ChemicalChunkerParser.inoff_return inoff595 = null;

        ChemicalChunkerParser.inon_return inon596 = null;

        ChemicalChunkerParser.inover_return inover597 = null;

        ChemicalChunkerParser.inunder_return inunder598 = null;

        ChemicalChunkerParser.invia_return invia599 = null;

        ChemicalChunkerParser.inwith_return inwith600 = null;

        ChemicalChunkerParser.inwithout_return inwithout601 = null;

        ChemicalChunkerParser.to_return to602 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt164=18;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt164=1;
                }
                break;
            case 49:
                {
                alt164=2;
                }
                break;
            case 47:
                {
                alt164=3;
                }
                break;
            case 48:
                {
                alt164=4;
                }
                break;
            case 54:
                {
                alt164=5;
                }
                break;
            case 58:
                {
                alt164=6;
                }
                break;
            case 59:
                {
                alt164=7;
                }
                break;
            case 50:
                {
                alt164=8;
                }
                break;
            case 51:
                {
                alt164=9;
                }
                break;
            case 56:
                {
                alt164=10;
                }
                break;
            case 62:
                {
                alt164=11;
                }
                break;
            case 57:
                {
                alt164=12;
                }
                break;
            case 61:
                {
                alt164=13;
                }
                break;
            case 60:
                {
                alt164=14;
                }
                break;
            case 55:
                {
                alt164=15;
                }
                break;
            case 52:
                {
                alt164=16;
                }
                break;
            case 53:
                {
                alt164=17;
                }
                break;
            case 168:
                {
                alt164=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll2814_static.FOLLOW_in_in_inAll2814);
                    in585=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in585.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll2816_static.FOLLOW_inafter_in_inAll2816);
                    inafter586=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter586.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll2818_static.FOLLOW_inas_in_inAll2818);
                    inas587=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas587.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll2820_static.FOLLOW_inbefore_in_inAll2820);
                    inbefore588=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore588.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll2822_static.FOLLOW_inby_in_inAll2822);
                    inby589=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby589.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll2824_static.FOLLOW_infor_in_inAll2824);
                    infor590=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor590.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll2826_static.FOLLOW_infrom_in_inAll2826);
                    infrom591=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom591.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll2828_static.FOLLOW_inin_in_inAll2828);
                    inin592=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin592.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll2830_static.FOLLOW_ininto_in_inAll2830);
                    ininto593=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto593.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll2832_static.FOLLOW_inof_in_inAll2832);
                    inof594=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof594.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll2834_static.FOLLOW_inoff_in_inAll2834);
                    inoff595=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff595.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll2836_static.FOLLOW_inon_in_inAll2836);
                    inon596=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon596.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll2838_static.FOLLOW_inover_in_inAll2838);
                    inover597=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover597.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll2840_static.FOLLOW_inunder_in_inAll2840);
                    inunder598=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder598.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll2842_static.FOLLOW_invia_in_inAll2842);
                    invia599=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia599.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll2844_static.FOLLOW_inwith_in_inAll2844);
                    inwith600=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith600.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll2846_static.FOLLOW_inwithout_in_inAll2846);
                    inwithout601=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout601.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll2848_static.FOLLOW_to_in_inAll2848);
                    to602=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to602.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in603 = null;

        ChemicalChunkerParser.inas_return inas604 = null;

        ChemicalChunkerParser.inbefore_return inbefore605 = null;

        ChemicalChunkerParser.inby_return inby606 = null;

        ChemicalChunkerParser.infor_return infor607 = null;

        ChemicalChunkerParser.infrom_return infrom608 = null;

        ChemicalChunkerParser.inin_return inin609 = null;

        ChemicalChunkerParser.ininto_return ininto610 = null;

        ChemicalChunkerParser.inof_return inof611 = null;

        ChemicalChunkerParser.inoff_return inoff612 = null;

        ChemicalChunkerParser.inon_return inon613 = null;

        ChemicalChunkerParser.inover_return inover614 = null;

        ChemicalChunkerParser.inunder_return inunder615 = null;

        ChemicalChunkerParser.invia_return invia616 = null;

        ChemicalChunkerParser.inwith_return inwith617 = null;

        ChemicalChunkerParser.inwithout_return inwithout618 = null;

        ChemicalChunkerParser.to_return to619 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt165=17;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt165=1;
                }
                break;
            case 47:
                {
                alt165=2;
                }
                break;
            case 48:
                {
                alt165=3;
                }
                break;
            case 54:
                {
                alt165=4;
                }
                break;
            case 58:
                {
                alt165=5;
                }
                break;
            case 59:
                {
                alt165=6;
                }
                break;
            case 50:
                {
                alt165=7;
                }
                break;
            case 51:
                {
                alt165=8;
                }
                break;
            case 56:
                {
                alt165=9;
                }
                break;
            case 62:
                {
                alt165=10;
                }
                break;
            case 57:
                {
                alt165=11;
                }
                break;
            case 61:
                {
                alt165=12;
                }
                break;
            case 60:
                {
                alt165=13;
                }
                break;
            case 55:
                {
                alt165=14;
                }
                break;
            case 52:
                {
                alt165=15;
                }
                break;
            case 53:
                {
                alt165=16;
                }
                break;
            case 168:
                {
                alt165=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost2855_static.FOLLOW_in_in_inMost2855);
                    in603=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in603.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost2857_static.FOLLOW_inas_in_inMost2857);
                    inas604=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas604.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost2859_static.FOLLOW_inbefore_in_inMost2859);
                    inbefore605=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore605.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost2861_static.FOLLOW_inby_in_inMost2861);
                    inby606=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby606.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost2863_static.FOLLOW_infor_in_inMost2863);
                    infor607=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor607.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost2865_static.FOLLOW_infrom_in_inMost2865);
                    infrom608=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom608.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost2867_static.FOLLOW_inin_in_inMost2867);
                    inin609=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin609.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost2869_static.FOLLOW_ininto_in_inMost2869);
                    ininto610=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto610.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost2871_static.FOLLOW_inof_in_inMost2871);
                    inof611=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof611.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost2873_static.FOLLOW_inoff_in_inMost2873);
                    inoff612=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff612.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost2875_static.FOLLOW_inon_in_inMost2875);
                    inon613=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon613.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost2877_static.FOLLOW_inover_in_inMost2877);
                    inover614=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover614.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost2879_static.FOLLOW_inunder_in_inMost2879);
                    inunder615=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder615.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost2881_static.FOLLOW_invia_in_inMost2881);
                    invia616=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia616.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost2883_static.FOLLOW_inwith_in_inMost2883);
                    inwith617=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith617.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost2885_static.FOLLOW_inwithout_in_inMost2885);
                    inwithout618=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout618.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost2887_static.FOLLOW_to_in_inMost2887);
                    to619=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to619.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd620 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum621 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:9: ( cd | cdAlphanum )
            int alt166=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt166=1;
                }
                break;
            case 38:
                {
                alt166=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric2894_static.FOLLOW_cd_in_numeric2894);
                    cd620=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd620.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric2896_static.FOLLOW_cdAlphanum_in_numeric2896);
                    cdAlphanum621=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum621.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal622=(Token)match(input,38,FOLLOW_38_in_cdAlphanum2904_static.FOLLOW_38_in_cdAlphanum2904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal622);

            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum2906_static.FOLLOW_TOKEN_in_cdAlphanum2906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN623);



            // AST REWRITE
            // elements: TOKEN, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:9: 'OSCAR-CJ' TOKEN
            {
            string_literal624=(Token)match(input,39,FOLLOW_39_in_oscarcj2919_static.FOLLOW_39_in_oscarcj2919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal624);

            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2921_static.FOLLOW_TOKEN_in_oscarcj2921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN625);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:9: 'OSCAR-RN' TOKEN
            {
            string_literal626=(Token)match(input,40,FOLLOW_40_in_oscarrn2934_static.FOLLOW_40_in_oscarrn2934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal626);

            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2936_static.FOLLOW_TOKEN_in_oscarrn2936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN627);



            // AST REWRITE
            // elements: TOKEN, 40
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:10: 'OSCAR-ASE' TOKEN
            {
            string_literal628=(Token)match(input,41,FOLLOW_41_in_oscarase2949_static.FOLLOW_41_in_oscarase2949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal628);

            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase2951_static.FOLLOW_TOKEN_in_oscarase2951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN629);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 289:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:10: 'OSCAR-ONT' TOKEN
            {
            string_literal630=(Token)match(input,42,FOLLOW_42_in_oscaront2964_static.FOLLOW_42_in_oscaront2964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal630);

            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2966_static.FOLLOW_TOKEN_in_oscaront2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN631);



            // AST REWRITE
            // elements: 42, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:290:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:11: 'TM-UNICODE' TOKEN
            {
            string_literal632=(Token)match(input,43,FOLLOW_43_in_tmunicode2979_static.FOLLOW_43_in_tmunicode2979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal632);

            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2981_static.FOLLOW_TOKEN_in_tmunicode2981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN633);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:11: 'CD-UNICODE' TOKEN
            {
            string_literal634=(Token)match(input,44,FOLLOW_44_in_cdunicode2994_static.FOLLOW_44_in_cdunicode2994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal634);

            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2996_static.FOLLOW_TOKEN_in_cdunicode2996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN635);



            // AST REWRITE
            // elements: TOKEN, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:8: 'JJ-CHEM' TOKEN
            {
            string_literal636=(Token)match(input,45,FOLLOW_45_in_jjchem3009_static.FOLLOW_45_in_jjchem3009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal636);

            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3011_static.FOLLOW_TOKEN_in_jjchem3011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN637);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal638=(Token)match(input,46,FOLLOW_46_in_jjcomp3024_static.FOLLOW_46_in_jjcomp3024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal638);

            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3026_static.FOLLOW_TOKEN_in_jjcomp3026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN639);



            // AST REWRITE
            // elements: TOKEN, 46
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 294:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:6: 'IN-AS' TOKEN
            {
            string_literal640=(Token)match(input,47,FOLLOW_47_in_inas3040_static.FOLLOW_47_in_inas3040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal640);

            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3042_static.FOLLOW_TOKEN_in_inas3042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN641);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 296:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:10: 'IN-BEFORE' TOKEN
            {
            string_literal642=(Token)match(input,48,FOLLOW_48_in_inbefore3055_static.FOLLOW_48_in_inbefore3055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal642);

            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3057_static.FOLLOW_TOKEN_in_inbefore3057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN643);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:9: 'IN-AFTER' TOKEN
            {
            string_literal644=(Token)match(input,49,FOLLOW_49_in_inafter3070_static.FOLLOW_49_in_inafter3070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal644);

            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3072_static.FOLLOW_TOKEN_in_inafter3072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN645);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:6: 'IN-IN' TOKEN
            {
            string_literal646=(Token)match(input,50,FOLLOW_50_in_inin3085_static.FOLLOW_50_in_inin3085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal646);

            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3087_static.FOLLOW_TOKEN_in_inin3087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN647);



            // AST REWRITE
            // elements: 50, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:8: 'IN-INTO' TOKEN
            {
            string_literal648=(Token)match(input,51,FOLLOW_51_in_ininto3100_static.FOLLOW_51_in_ininto3100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal648);

            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3102_static.FOLLOW_TOKEN_in_ininto3102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN649);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:8: 'IN-WITH' TOKEN
            {
            string_literal650=(Token)match(input,52,FOLLOW_52_in_inwith3115_static.FOLLOW_52_in_inwith3115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal650);

            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3117_static.FOLLOW_TOKEN_in_inwith3117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN651);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:11: 'IN-WITHOUT' TOKEN
            {
            string_literal652=(Token)match(input,53,FOLLOW_53_in_inwithout3130_static.FOLLOW_53_in_inwithout3130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal652);

            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3132_static.FOLLOW_TOKEN_in_inwithout3132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN653);



            // AST REWRITE
            // elements: TOKEN, 53
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:6: 'IN-BY' TOKEN
            {
            string_literal654=(Token)match(input,54,FOLLOW_54_in_inby3145_static.FOLLOW_54_in_inby3145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal654);

            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3147_static.FOLLOW_TOKEN_in_inby3147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN655);



            // AST REWRITE
            // elements: TOKEN, 54
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 303:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:7: 'IN-VIA' TOKEN
            {
            string_literal656=(Token)match(input,55,FOLLOW_55_in_invia3160_static.FOLLOW_55_in_invia3160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal656);

            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3162_static.FOLLOW_TOKEN_in_invia3162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN657);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:6: 'IN-OF' TOKEN
            {
            string_literal658=(Token)match(input,56,FOLLOW_56_in_inof3175_static.FOLLOW_56_in_inof3175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal658);

            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3177_static.FOLLOW_TOKEN_in_inof3177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN659);



            // AST REWRITE
            // elements: 56, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:6: 'IN-ON' TOKEN
            {
            string_literal660=(Token)match(input,57,FOLLOW_57_in_inon3190_static.FOLLOW_57_in_inon3190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal660);

            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3192_static.FOLLOW_TOKEN_in_inon3192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN661);



            // AST REWRITE
            // elements: TOKEN, 57
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:7: 'IN-FOR' TOKEN
            {
            string_literal662=(Token)match(input,58,FOLLOW_58_in_infor3205_static.FOLLOW_58_in_infor3205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal662);

            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3207_static.FOLLOW_TOKEN_in_infor3207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN663);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 307:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:8: 'IN-FROM' TOKEN
            {
            string_literal664=(Token)match(input,59,FOLLOW_59_in_infrom3220_static.FOLLOW_59_in_infrom3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal664);

            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3222_static.FOLLOW_TOKEN_in_infrom3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN665);



            // AST REWRITE
            // elements: TOKEN, 59
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:9: 'IN-UNDER' TOKEN
            {
            string_literal666=(Token)match(input,60,FOLLOW_60_in_inunder3235_static.FOLLOW_60_in_inunder3235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal666);

            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3237_static.FOLLOW_TOKEN_in_inunder3237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN667);



            // AST REWRITE
            // elements: TOKEN, 60
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:8: 'IN-OVER' TOKEN
            {
            string_literal668=(Token)match(input,61,FOLLOW_61_in_inover3250_static.FOLLOW_61_in_inover3250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal668);

            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3252_static.FOLLOW_TOKEN_in_inover3252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN669);



            // AST REWRITE
            // elements: 61, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:7: 'IN-OFF' TOKEN
            {
            string_literal670=(Token)match(input,62,FOLLOW_62_in_inoff3265_static.FOLLOW_62_in_inoff3265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal670);

            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3267_static.FOLLOW_TOKEN_in_inoff3267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN671);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:9: 'NN-STATE' TOKEN
            {
            string_literal672=(Token)match(input,63,FOLLOW_63_in_nnstate3282_static.FOLLOW_63_in_nnstate3282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal672);

            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3284_static.FOLLOW_TOKEN_in_nnstate3284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN673);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:8: 'NN-TIME' TOKEN
            {
            string_literal674=(Token)match(input,64,FOLLOW_64_in_nntime3297_static.FOLLOW_64_in_nntime3297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal674);

            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3299_static.FOLLOW_TOKEN_in_nntime3299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN675);



            // AST REWRITE
            // elements: 64, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:8: 'NN-MASS' TOKEN
            {
            string_literal676=(Token)match(input,65,FOLLOW_65_in_nnmass3312_static.FOLLOW_65_in_nnmass3312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal676);

            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3314_static.FOLLOW_TOKEN_in_nnmass3314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN677);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:10: 'NN-AMOUNT' TOKEN
            {
            string_literal678=(Token)match(input,66,FOLLOW_66_in_nnamount3327_static.FOLLOW_66_in_nnamount3327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal678);

            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3329_static.FOLLOW_TOKEN_in_nnamount3329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN679);



            // AST REWRITE
            // elements: TOKEN, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:9: 'NN-MOLAR' TOKEN
            {
            string_literal680=(Token)match(input,67,FOLLOW_67_in_nnmolar3342_static.FOLLOW_67_in_nnmolar3342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal680);

            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3344_static.FOLLOW_TOKEN_in_nnmolar3344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN681);



            // AST REWRITE
            // elements: 67, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal682=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3357_static.FOLLOW_68_in_nnatmosphere3357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal682);

            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3359_static.FOLLOW_TOKEN_in_nnatmosphere3359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN683);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:319:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:6: 'NN-EQ' TOKEN
            {
            string_literal684=(Token)match(input,69,FOLLOW_69_in_nneq3372_static.FOLLOW_69_in_nneq3372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal684);

            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3374_static.FOLLOW_TOKEN_in_nneq3374); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN685);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:7: 'NN-VOL' TOKEN
            {
            string_literal686=(Token)match(input,70,FOLLOW_70_in_nnvol3387_static.FOLLOW_70_in_nnvol3387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal686);

            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3389_static.FOLLOW_TOKEN_in_nnvol3389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN687);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal688=(Token)match(input,71,FOLLOW_71_in_nnchementity3402_static.FOLLOW_71_in_nnchementity3402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal688);

            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3404_static.FOLLOW_TOKEN_in_nnchementity3404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN689);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:8: 'NN-TEMP' TOKEN
            {
            string_literal690=(Token)match(input,72,FOLLOW_72_in_nntemp3417_static.FOLLOW_72_in_nntemp3417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal690);

            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3419_static.FOLLOW_TOKEN_in_nntemp3419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN691);



            // AST REWRITE
            // elements: TOKEN, 72
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:6: 'NN-PH' TOKEN
            {
            string_literal692=(Token)match(input,73,FOLLOW_73_in_nnph3432_static.FOLLOW_73_in_nnph3432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal692);

            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3434_static.FOLLOW_TOKEN_in_nnph3434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN693);



            // AST REWRITE
            // elements: 73, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:9: 'NN-FLASH' TOKEN
            {
            string_literal694=(Token)match(input,74,FOLLOW_74_in_nnflash3447_static.FOLLOW_74_in_nnflash3447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal694);

            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3449_static.FOLLOW_TOKEN_in_nnflash3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN695);



            // AST REWRITE
            // elements: TOKEN, 74
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:11: 'NN-GENERAL' TOKEN
            {
            string_literal696=(Token)match(input,75,FOLLOW_75_in_nngeneral3462_static.FOLLOW_75_in_nngeneral3462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal696);

            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3464_static.FOLLOW_TOKEN_in_nngeneral3464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN697);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:10: 'NN-METHOD' TOKEN
            {
            string_literal698=(Token)match(input,76,FOLLOW_76_in_nnmethod3477_static.FOLLOW_76_in_nnmethod3477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal698);

            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3479_static.FOLLOW_TOKEN_in_nnmethod3479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN699);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:12: 'NN-PRESSURE' TOKEN
            {
            string_literal700=(Token)match(input,77,FOLLOW_77_in_nnpressure3492_static.FOLLOW_77_in_nnpressure3492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal700);

            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3494_static.FOLLOW_TOKEN_in_nnpressure3494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN701);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:10: 'NN-COLUMN' TOKEN
            {
            string_literal702=(Token)match(input,78,FOLLOW_78_in_nncolumn3507_static.FOLLOW_78_in_nncolumn3507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal702);

            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3509_static.FOLLOW_TOKEN_in_nncolumn3509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN703);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal704=(Token)match(input,79,FOLLOW_79_in_nnchromatography3522_static.FOLLOW_79_in_nnchromatography3522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal704);

            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3524_static.FOLLOW_TOKEN_in_nnchromatography3524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN705);



            // AST REWRITE
            // elements: 79, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:10: 'NN-VACUUM' TOKEN
            {
            string_literal706=(Token)match(input,80,FOLLOW_80_in_nnvacuum3537_static.FOLLOW_80_in_nnvacuum3537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal706);

            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3539_static.FOLLOW_TOKEN_in_nnvacuum3539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN707);



            // AST REWRITE
            // elements: TOKEN, 80
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:9: 'NN-CYCLE' TOKEN
            {
            string_literal708=(Token)match(input,81,FOLLOW_81_in_nncycle3552_static.FOLLOW_81_in_nncycle3552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal708);

            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3554_static.FOLLOW_TOKEN_in_nncycle3554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN709);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:9: 'NN-TIMES' TOKEN
            {
            string_literal710=(Token)match(input,82,FOLLOW_82_in_nntimes3567_static.FOLLOW_82_in_nntimes3567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal710);

            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3569_static.FOLLOW_TOKEN_in_nntimes3569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN711);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal712=(Token)match(input,83,FOLLOW_83_in_nnexample3582_static.FOLLOW_83_in_nnexample3582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal712);

            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3584_static.FOLLOW_TOKEN_in_nnexample3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN713);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:9: 'OSCAR-CM' TOKEN
            {
            string_literal714=(Token)match(input,84,FOLLOW_84_in_oscarcm3599_static.FOLLOW_84_in_oscarcm3599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal714);

            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3601_static.FOLLOW_TOKEN_in_oscarcm3601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN715);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:7: 'VB-USE' TOKEN
            {
            string_literal716=(Token)match(input,85,FOLLOW_85_in_vbuse3616_static.FOLLOW_85_in_vbuse3616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal716);

            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3618_static.FOLLOW_TOKEN_in_vbuse3618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN717);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:10: 'VB-CHANGE' TOKEN
            {
            string_literal718=(Token)match(input,86,FOLLOW_86_in_vbchange3631_static.FOLLOW_86_in_vbchange3631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal718);

            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3633_static.FOLLOW_TOKEN_in_vbchange3633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN719);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal720=(Token)match(input,87,FOLLOW_87_in_vbsubmerge3646_static.FOLLOW_87_in_vbsubmerge3646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal720);

            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3648_static.FOLLOW_TOKEN_in_vbsubmerge3648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN721);



            // AST REWRITE
            // elements: 87, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:11: 'VB-SUBJECT' TOKEN
            {
            string_literal722=(Token)match(input,88,FOLLOW_88_in_vbsubject3661_static.FOLLOW_88_in_vbsubject3661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal722);

            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3663_static.FOLLOW_TOKEN_in_vbsubject3663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN723);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:7: 'NN-ADD' TOKEN
            {
            string_literal724=(Token)match(input,89,FOLLOW_89_in_nnadd3678_static.FOLLOW_89_in_nnadd3678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal724);

            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3680_static.FOLLOW_TOKEN_in_nnadd3680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN725);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:11: 'NN-MIXTURE' TOKEN
            {
            string_literal726=(Token)match(input,90,FOLLOW_90_in_nnmixture3693_static.FOLLOW_90_in_nnmixture3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal726);

            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3695_static.FOLLOW_TOKEN_in_nnmixture3695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN727);



            // AST REWRITE
            // elements: 90, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:10: 'VB-DILUTE' TOKEN
            {
            string_literal728=(Token)match(input,91,FOLLOW_91_in_vbdilute3708_static.FOLLOW_91_in_vbdilute3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal728);

            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3710_static.FOLLOW_TOKEN_in_vbdilute3710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN729);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:7: 'VB-ADD' TOKEN
            {
            string_literal730=(Token)match(input,92,FOLLOW_92_in_vbadd3723_static.FOLLOW_92_in_vbadd3723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal730);

            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3725_static.FOLLOW_TOKEN_in_vbadd3725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN731);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:10: 'VB-CHARGE' TOKEN
            {
            string_literal732=(Token)match(input,93,FOLLOW_93_in_vbcharge3738_static.FOLLOW_93_in_vbcharge3738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal732);

            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3740_static.FOLLOW_TOKEN_in_vbcharge3740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN733);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:11: 'VB-CONTAIN' TOKEN
            {
            string_literal734=(Token)match(input,94,FOLLOW_94_in_vbcontain3753_static.FOLLOW_94_in_vbcontain3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal734);

            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3755_static.FOLLOW_TOKEN_in_vbcontain3755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN735);



            // AST REWRITE
            // elements: TOKEN, 94
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:8: 'VB-DROP' TOKEN
            {
            string_literal736=(Token)match(input,95,FOLLOW_95_in_vbdrop3768_static.FOLLOW_95_in_vbdrop3768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal736);

            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3770_static.FOLLOW_TOKEN_in_vbdrop3770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN737);



            // AST REWRITE
            // elements: 95, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:8: 'VB-FILL' TOKEN
            {
            string_literal738=(Token)match(input,96,FOLLOW_96_in_vbfill3783_static.FOLLOW_96_in_vbfill3783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal738);

            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3785_static.FOLLOW_TOKEN_in_vbfill3785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN739);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:11: 'VB-SUSPEND' TOKEN
            {
            string_literal740=(Token)match(input,97,FOLLOW_97_in_vbsuspend3798_static.FOLLOW_97_in_vbsuspend3798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal740);

            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3800_static.FOLLOW_TOKEN_in_vbsuspend3800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN741);



            // AST REWRITE
            // elements: 97, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:9: 'VB-TREAT' TOKEN
            {
            string_literal742=(Token)match(input,98,FOLLOW_98_in_vbtreat3813_static.FOLLOW_98_in_vbtreat3813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal742);

            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3815_static.FOLLOW_TOKEN_in_vbtreat3815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN743);



            // AST REWRITE
            // elements: TOKEN, 98
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:13: 'VB-APPARATUS' TOKEN
            {
            string_literal744=(Token)match(input,99,FOLLOW_99_in_vbapparatus3830_static.FOLLOW_99_in_vbapparatus3830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal744);

            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3832_static.FOLLOW_TOKEN_in_vbapparatus3832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN745);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:13: 'NN-APPARATUS' TOKEN
            {
            string_literal746=(Token)match(input,100,FOLLOW_100_in_nnapparatus3845_static.FOLLOW_100_in_nnapparatus3845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal746);

            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3847_static.FOLLOW_TOKEN_in_nnapparatus3847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN747);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal748=(Token)match(input,101,FOLLOW_101_in_vbconcentrate3862_static.FOLLOW_101_in_vbconcentrate3862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal748);

            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3864_static.FOLLOW_TOKEN_in_vbconcentrate3864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN749);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal750=(Token)match(input,102,FOLLOW_102_in_nnconcentrate3877_static.FOLLOW_102_in_nnconcentrate3877); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal750);

            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3879_static.FOLLOW_TOKEN_in_nnconcentrate3879); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN751);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:8: 'VB-COOL' TOKEN
            {
            string_literal752=(Token)match(input,103,FOLLOW_103_in_vbcool3894_static.FOLLOW_103_in_vbcool3894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal752);

            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3896_static.FOLLOW_TOKEN_in_vbcool3896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN753);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:10: 'VB-DEGASS' TOKEN
            {
            string_literal754=(Token)match(input,104,FOLLOW_104_in_vbdegass3911_static.FOLLOW_104_in_vbdegass3911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal754);

            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass3913_static.FOLLOW_TOKEN_in_vbdegass3913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN755);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal756=(Token)match(input,105,FOLLOW_105_in_vbdissolve3928_static.FOLLOW_105_in_vbdissolve3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal756);

            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve3930_static.FOLLOW_TOKEN_in_vbdissolve3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN757);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:7: 'VB-DRY' TOKEN
            {
            string_literal758=(Token)match(input,106,FOLLOW_106_in_vbdry3945_static.FOLLOW_106_in_vbdry3945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal758);

            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry3947_static.FOLLOW_TOKEN_in_vbdry3947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN759);



            // AST REWRITE
            // elements: TOKEN, 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:7: 'NN-DRY' TOKEN
            {
            string_literal760=(Token)match(input,107,FOLLOW_107_in_nndry3960_static.FOLLOW_107_in_nndry3960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal760);

            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry3962_static.FOLLOW_TOKEN_in_nndry3962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN761);



            // AST REWRITE
            // elements: 107, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:11: 'VB-EXTRACT' TOKEN
            {
            string_literal762=(Token)match(input,108,FOLLOW_108_in_vbextract3977_static.FOLLOW_108_in_vbextract3977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal762);

            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract3979_static.FOLLOW_TOKEN_in_vbextract3979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN763);



            // AST REWRITE
            // elements: 108, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:11: 'NN-EXTRACT' TOKEN
            {
            string_literal764=(Token)match(input,109,FOLLOW_109_in_nnextract3992_static.FOLLOW_109_in_nnextract3992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal764);

            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract3994_static.FOLLOW_TOKEN_in_nnextract3994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN765);



            // AST REWRITE
            // elements: 109, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:10: 'VB-FILTER' TOKEN
            {
            string_literal766=(Token)match(input,110,FOLLOW_110_in_vbfilter4009_static.FOLLOW_110_in_vbfilter4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal766);

            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4011_static.FOLLOW_TOKEN_in_vbfilter4011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN767);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:10: 'NN-FILTER' TOKEN
            {
            string_literal768=(Token)match(input,111,FOLLOW_111_in_nnfilter4024_static.FOLLOW_111_in_nnfilter4024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal768);

            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4026_static.FOLLOW_TOKEN_in_nnfilter4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN769);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:8: 'VB-HEAT' TOKEN
            {
            string_literal770=(Token)match(input,112,FOLLOW_112_in_vbheat4041_static.FOLLOW_112_in_vbheat4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal770);

            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4043_static.FOLLOW_TOKEN_in_vbheat4043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN771);



            // AST REWRITE
            // elements: 112, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:12: 'VB-INCREASE' TOKEN
            {
            string_literal772=(Token)match(input,113,FOLLOW_113_in_vbincrease4056_static.FOLLOW_113_in_vbincrease4056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal772);

            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4058_static.FOLLOW_TOKEN_in_vbincrease4058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN773);



            // AST REWRITE
            // elements: 113, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:11: 'VB-IMMERSE' TOKEN
            {
            string_literal774=(Token)match(input,114,FOLLOW_114_in_vbimmerse4073_static.FOLLOW_114_in_vbimmerse4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal774);

            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4075_static.FOLLOW_TOKEN_in_vbimmerse4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN775);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:13: 'VB-PARTITION' TOKEN
            {
            string_literal776=(Token)match(input,115,FOLLOW_115_in_vbpartition4090_static.FOLLOW_115_in_vbpartition4090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal776);

            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4092_static.FOLLOW_TOKEN_in_vbpartition4092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN777);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal778=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4107_static.FOLLOW_116_in_vbprecipitate4107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal778);

            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4109_static.FOLLOW_TOKEN_in_vbprecipitate4109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN779);



            // AST REWRITE
            // elements: 116, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal780=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4122_static.FOLLOW_117_in_nnprecipitate4122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal780);

            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4124_static.FOLLOW_TOKEN_in_nnprecipitate4124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN781);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:10: 'VB-PURIFY' TOKEN
            {
            string_literal782=(Token)match(input,118,FOLLOW_118_in_vbpurify4139_static.FOLLOW_118_in_vbpurify4139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal782);

            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4141_static.FOLLOW_TOKEN_in_vbpurify4141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN783);



            // AST REWRITE
            // elements: 118, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:10: 'NN-PURIFY' TOKEN
            {
            string_literal784=(Token)match(input,119,FOLLOW_119_in_nnpurify4154_static.FOLLOW_119_in_nnpurify4154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal784);

            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4156_static.FOLLOW_TOKEN_in_nnpurify4156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN785);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:10: 'VB-QUENCH' TOKEN
            {
            string_literal786=(Token)match(input,120,FOLLOW_120_in_vbquench4171_static.FOLLOW_120_in_vbquench4171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal786);

            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4173_static.FOLLOW_TOKEN_in_vbquench4173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN787);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:11: 'VB-RECOVER' TOKEN
            {
            string_literal788=(Token)match(input,121,FOLLOW_121_in_vbrecover4188_static.FOLLOW_121_in_vbrecover4188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal788);

            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4190_static.FOLLOW_TOKEN_in_vbrecover4190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN789);



            // AST REWRITE
            // elements: 121, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:10: 'VB-REMOVE' TOKEN
            {
            string_literal790=(Token)match(input,122,FOLLOW_122_in_vbremove4205_static.FOLLOW_122_in_vbremove4205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal790);

            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4207_static.FOLLOW_TOKEN_in_vbremove4207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN791);



            // AST REWRITE
            // elements: 122, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:10: 'NN-REMOVE' TOKEN
            {
            string_literal792=(Token)match(input,123,FOLLOW_123_in_nnremove4220_static.FOLLOW_123_in_nnremove4220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal792);

            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4222_static.FOLLOW_TOKEN_in_nnremove4222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN793);



            // AST REWRITE
            // elements: TOKEN, 123
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:8: 'VB-STIR' TOKEN
            {
            string_literal794=(Token)match(input,124,FOLLOW_124_in_vbstir4237_static.FOLLOW_124_in_vbstir4237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal794);

            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4239_static.FOLLOW_TOKEN_in_vbstir4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN795);



            // AST REWRITE
            // elements: 124, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal796=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4254_static.FOLLOW_125_in_vbsynthesize4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal796);

            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4256_static.FOLLOW_TOKEN_in_vbsynthesize4256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN797);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal798=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4269_static.FOLLOW_126_in_nnsynthesize4269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal798);

            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4271_static.FOLLOW_TOKEN_in_nnsynthesize4271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN799);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:419:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:8: 'VB-WAIT' TOKEN
            {
            string_literal800=(Token)match(input,127,FOLLOW_127_in_vbwait4286_static.FOLLOW_127_in_vbwait4286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal800);

            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4288_static.FOLLOW_TOKEN_in_vbwait4288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN801);



            // AST REWRITE
            // elements: 127, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:8: 'VB-WASH' TOKEN
            {
            string_literal802=(Token)match(input,128,FOLLOW_128_in_vbwash4303_static.FOLLOW_128_in_vbwash4303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal802);

            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4305_static.FOLLOW_TOKEN_in_vbwash4305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN803);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:9: 'VB-YIELD' TOKEN
            {
            string_literal804=(Token)match(input,129,FOLLOW_129_in_vbyield4320_static.FOLLOW_129_in_vbyield4320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal804);

            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4322_static.FOLLOW_TOKEN_in_vbyield4322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN805);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:9: 'NN-YIELD' TOKEN
            {
            string_literal806=(Token)match(input,130,FOLLOW_130_in_nnyield4337_static.FOLLOW_130_in_nnyield4337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal806);

            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4339_static.FOLLOW_TOKEN_in_nnyield4339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN807);



            // AST REWRITE
            // elements: TOKEN, 130
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:8: 'RB-CONJ' TOKEN
            {
            string_literal808=(Token)match(input,131,FOLLOW_131_in_rbconj4355_static.FOLLOW_131_in_rbconj4355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal808);

            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4357_static.FOLLOW_TOKEN_in_rbconj4357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN809);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:7: 'COLON' TOKEN
            {
            string_literal810=(Token)match(input,132,FOLLOW_132_in_colon4370_static.FOLLOW_132_in_colon4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal810);

            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4372_static.FOLLOW_TOKEN_in_colon4372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN811);



            // AST REWRITE
            // elements: TOKEN, 132
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:7: 'COMMA' TOKEN
            {
            string_literal812=(Token)match(input,133,FOLLOW_133_in_comma4385_static.FOLLOW_133_in_comma4385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal812);

            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4387_static.FOLLOW_TOKEN_in_comma4387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN813);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:7: 'APOST' TOKEN
            {
            string_literal814=(Token)match(input,134,FOLLOW_134_in_apost4400_static.FOLLOW_134_in_apost4400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal814);

            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4402_static.FOLLOW_TOKEN_in_apost4402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN815);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:438:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:5: 'NEG' TOKEN
            {
            string_literal816=(Token)match(input,135,FOLLOW_135_in_neg4415_static.FOLLOW_135_in_neg4415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal816);

            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4417_static.FOLLOW_TOKEN_in_neg4417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN817);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:6: 'DASH' TOKEN
            {
            string_literal818=(Token)match(input,136,FOLLOW_136_in_dash4430_static.FOLLOW_136_in_dash4430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal818);

            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4432_static.FOLLOW_TOKEN_in_dash4432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN819);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:6: 'STOP' TOKEN
            {
            string_literal820=(Token)match(input,137,FOLLOW_137_in_stop4445_static.FOLLOW_137_in_stop4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal820);

            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4447_static.FOLLOW_TOKEN_in_stop4447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN821);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:441:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:11: 'NN-PERCENT' TOKEN
            {
            string_literal822=(Token)match(input,138,FOLLOW_138_in_nnpercent4460_static.FOLLOW_138_in_nnpercent4460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal822);

            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4462_static.FOLLOW_TOKEN_in_nnpercent4462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN823);



            // AST REWRITE
            // elements: TOKEN, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:6: 'LSQB' TOKEN
            {
            string_literal824=(Token)match(input,139,FOLLOW_139_in_lsqb4475_static.FOLLOW_139_in_lsqb4475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal824);

            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4477_static.FOLLOW_TOKEN_in_lsqb4477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN825);



            // AST REWRITE
            // elements: 139, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:6: 'RSQB' TOKEN
            {
            string_literal826=(Token)match(input,140,FOLLOW_140_in_rsqb4490_static.FOLLOW_140_in_rsqb4490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal826);

            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4492_static.FOLLOW_TOKEN_in_rsqb4492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN827);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:444:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:7: 'DT-THE' TOKEN
            {
            string_literal828=(Token)match(input,141,FOLLOW_141_in_dtTHE4507_static.FOLLOW_141_in_dtTHE4507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal828);

            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4509_static.FOLLOW_TOKEN_in_dtTHE4509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN829);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:5: '-LRB-' TOKEN
            {
            string_literal830=(Token)match(input,142,FOLLOW_142_in_lrb4523_static.FOLLOW_142_in_lrb4523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal830);

            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4525_static.FOLLOW_TOKEN_in_lrb4525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN831);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:5: '-RRB-' TOKEN
            {
            string_literal832=(Token)match(input,143,FOLLOW_143_in_rrb4538_static.FOLLOW_143_in_rrb4538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal832);

            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4540_static.FOLLOW_TOKEN_in_rrb4540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN833);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:4: 'CC' TOKEN
            {
            string_literal834=(Token)match(input,144,FOLLOW_144_in_cc4557_static.FOLLOW_144_in_cc4557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal834);

            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4559_static.FOLLOW_TOKEN_in_cc4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN835);



            // AST REWRITE
            // elements: 144, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:455:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:4: 'CD' TOKEN
            {
            string_literal836=(Token)match(input,145,FOLLOW_145_in_cd4574_static.FOLLOW_145_in_cd4574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal836);

            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4576_static.FOLLOW_TOKEN_in_cd4576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN837);



            // AST REWRITE
            // elements: 145, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:4: 'DT' TOKEN
            {
            string_literal838=(Token)match(input,146,FOLLOW_146_in_dt4591_static.FOLLOW_146_in_dt4591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal838);

            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4593_static.FOLLOW_TOKEN_in_dt4593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN839);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:4: 'EX' TOKEN
            {
            string_literal840=(Token)match(input,147,FOLLOW_147_in_ex4608_static.FOLLOW_147_in_ex4608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal840);

            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex4610_static.FOLLOW_TOKEN_in_ex4610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN841);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:4: 'FW' TOKEN
            {
            string_literal842=(Token)match(input,148,FOLLOW_148_in_fw4625_static.FOLLOW_148_in_fw4625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal842);

            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw4627_static.FOLLOW_TOKEN_in_fw4627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN843);



            // AST REWRITE
            // elements: 148, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:4: 'IN' TOKEN
            {
            string_literal844=(Token)match(input,149,FOLLOW_149_in_in4642_static.FOLLOW_149_in_in4642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal844);

            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in4644_static.FOLLOW_TOKEN_in_in4644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN845);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:4: 'JJ' TOKEN
            {
            string_literal846=(Token)match(input,150,FOLLOW_150_in_jj4659_static.FOLLOW_150_in_jj4659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal846);

            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj4661_static.FOLLOW_TOKEN_in_jj4661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN847);



            // AST REWRITE
            // elements: TOKEN, 150
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:5: 'JJR' TOKEN
            {
            string_literal848=(Token)match(input,151,FOLLOW_151_in_jjr4676_static.FOLLOW_151_in_jjr4676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal848);

            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr4678_static.FOLLOW_TOKEN_in_jjr4678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN849);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:5: 'JJS' TOKEN
            {
            string_literal850=(Token)match(input,152,FOLLOW_152_in_jjs4693_static.FOLLOW_152_in_jjs4693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal850);

            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs4695_static.FOLLOW_TOKEN_in_jjs4695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN851);



            // AST REWRITE
            // elements: TOKEN, 152
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:4: 'LS' TOKEN
            {
            string_literal852=(Token)match(input,153,FOLLOW_153_in_ls4710_static.FOLLOW_153_in_ls4710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal852);

            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls4712_static.FOLLOW_TOKEN_in_ls4712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN853);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:4: 'MD' TOKEN
            {
            string_literal854=(Token)match(input,154,FOLLOW_154_in_md4727_static.FOLLOW_154_in_md4727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal854);

            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md4729_static.FOLLOW_TOKEN_in_md4729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN855);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:4: 'NN' TOKEN
            {
            string_literal856=(Token)match(input,155,FOLLOW_155_in_nn4744_static.FOLLOW_155_in_nn4744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal856);

            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn4746_static.FOLLOW_TOKEN_in_nn4746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN857);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:5: 'NNS' TOKEN
            {
            string_literal858=(Token)match(input,156,FOLLOW_156_in_nns4761_static.FOLLOW_156_in_nns4761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal858);

            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns4763_static.FOLLOW_TOKEN_in_nns4763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN859);



            // AST REWRITE
            // elements: TOKEN, 156
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:5: 'NNP' TOKEN
            {
            string_literal860=(Token)match(input,157,FOLLOW_157_in_nnp4778_static.FOLLOW_157_in_nnp4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal860);

            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp4780_static.FOLLOW_TOKEN_in_nnp4780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN861);



            // AST REWRITE
            // elements: TOKEN, 157
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:6: 'NNPS' TOKEN
            {
            string_literal862=(Token)match(input,158,FOLLOW_158_in_nnps4795_static.FOLLOW_158_in_nnps4795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal862);

            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps4797_static.FOLLOW_TOKEN_in_nnps4797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN863);



            // AST REWRITE
            // elements: TOKEN, 158
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:5: 'PDT' TOKEN
            {
            string_literal864=(Token)match(input,159,FOLLOW_159_in_pdt4812_static.FOLLOW_159_in_pdt4812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal864);

            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4814_static.FOLLOW_TOKEN_in_pdt4814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN865);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:5: 'POS' TOKEN
            {
            string_literal866=(Token)match(input,160,FOLLOW_160_in_pos4829_static.FOLLOW_160_in_pos4829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal866);

            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos4831_static.FOLLOW_TOKEN_in_pos4831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN867);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 503:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:5: 'PRP' TOKEN
            {
            string_literal868=(Token)match(input,161,FOLLOW_161_in_prp4846_static.FOLLOW_161_in_prp4846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal868);

            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp4848_static.FOLLOW_TOKEN_in_prp4848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN869);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 506:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:10: 'PRP$' TOKEN
            {
            string_literal870=(Token)match(input,162,FOLLOW_162_in_prp_poss4863_static.FOLLOW_162_in_prp_poss4863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal870);

            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss4865_static.FOLLOW_TOKEN_in_prp_poss4865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN871);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:4: 'RB' TOKEN
            {
            string_literal872=(Token)match(input,163,FOLLOW_163_in_rb4880_static.FOLLOW_163_in_rb4880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal872);

            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb4882_static.FOLLOW_TOKEN_in_rb4882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN873);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:5: 'RBR' TOKEN
            {
            string_literal874=(Token)match(input,164,FOLLOW_164_in_rbr4897_static.FOLLOW_164_in_rbr4897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal874);

            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr4899_static.FOLLOW_TOKEN_in_rbr4899); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN875);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:5: 'RBS' TOKEN
            {
            string_literal876=(Token)match(input,165,FOLLOW_165_in_rbs4914_static.FOLLOW_165_in_rbs4914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal876);

            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs4916_static.FOLLOW_TOKEN_in_rbs4916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN877);



            // AST REWRITE
            // elements: 165, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:4: 'RP' TOKEN
            {
            string_literal878=(Token)match(input,166,FOLLOW_166_in_rp4931_static.FOLLOW_166_in_rp4931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal878);

            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp4933_static.FOLLOW_TOKEN_in_rp4933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN879);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:5: 'SYM' TOKEN
            {
            string_literal880=(Token)match(input,167,FOLLOW_167_in_sym4948_static.FOLLOW_167_in_sym4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal880);

            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym4950_static.FOLLOW_TOKEN_in_sym4950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN881);



            // AST REWRITE
            // elements: TOKEN, 167
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:4: 'TO' TOKEN
            {
            string_literal882=(Token)match(input,168,FOLLOW_168_in_to4965_static.FOLLOW_168_in_to4965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal882);

            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to4967_static.FOLLOW_TOKEN_in_to4967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN883);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:4: 'UH' TOKEN
            {
            string_literal884=(Token)match(input,169,FOLLOW_169_in_uh4982_static.FOLLOW_169_in_uh4982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal884);

            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh4984_static.FOLLOW_TOKEN_in_uh4984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN885);



            // AST REWRITE
            // elements: 169, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:4: 'VB' TOKEN
            {
            string_literal886=(Token)match(input,170,FOLLOW_170_in_vb4999_static.FOLLOW_170_in_vb4999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal886);

            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5001_static.FOLLOW_TOKEN_in_vb5001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN887);



            // AST REWRITE
            // elements: TOKEN, 170
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:5: 'VBD' TOKEN
            {
            string_literal888=(Token)match(input,171,FOLLOW_171_in_vbd5016_static.FOLLOW_171_in_vbd5016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal888);

            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5018_static.FOLLOW_TOKEN_in_vbd5018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN889);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:5: 'VBG' TOKEN
            {
            string_literal890=(Token)match(input,172,FOLLOW_172_in_vbg5033_static.FOLLOW_172_in_vbg5033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal890);

            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5035_static.FOLLOW_TOKEN_in_vbg5035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN891);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 539:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:5: 'VBN' TOKEN
            {
            string_literal892=(Token)match(input,173,FOLLOW_173_in_vbn5050_static.FOLLOW_173_in_vbn5050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal892);

            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5052_static.FOLLOW_TOKEN_in_vbn5052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN893);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:5: 'VBP' TOKEN
            {
            string_literal894=(Token)match(input,174,FOLLOW_174_in_vbp5067_static.FOLLOW_174_in_vbp5067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal894);

            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5069_static.FOLLOW_TOKEN_in_vbp5069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN895);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 545:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:5: 'VBZ' TOKEN
            {
            string_literal896=(Token)match(input,175,FOLLOW_175_in_vbz5084_static.FOLLOW_175_in_vbz5084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal896);

            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5086_static.FOLLOW_TOKEN_in_vbz5086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN897);



            // AST REWRITE
            // elements: TOKEN, 175
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:5: 'WDT' TOKEN
            {
            string_literal898=(Token)match(input,176,FOLLOW_176_in_wdt5101_static.FOLLOW_176_in_wdt5101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal898);

            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5103_static.FOLLOW_TOKEN_in_wdt5103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN899);



            // AST REWRITE
            // elements: 176, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:4: 'WP' TOKEN
            {
            string_literal900=(Token)match(input,177,FOLLOW_177_in_wp5118_static.FOLLOW_177_in_wp5118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal900);

            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5120_static.FOLLOW_TOKEN_in_wp5120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN901);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:9: 'WP$' TOKEN
            {
            string_literal902=(Token)match(input,178,FOLLOW_178_in_wp_poss5135_static.FOLLOW_178_in_wp_poss5135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal902);

            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5137_static.FOLLOW_TOKEN_in_wp_poss5137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN903);



            // AST REWRITE
            // elements: TOKEN, 178
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:5: 'WRB' TOKEN
            {
            string_literal904=(Token)match(input,179,FOLLOW_179_in_wrb5152_static.FOLLOW_179_in_wrb5152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal904);

            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5154_static.FOLLOW_TOKEN_in_wrb5154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN905);



            // AST REWRITE
            // elements: TOKEN, 179
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker216_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker216);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:57:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker218_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker218);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker232_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker232);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker234_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker234);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker236_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker236);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker238_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker238);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker243_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker243);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker245_static.FOLLOW_colon_in_synpred10_ChemicalChunker245);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker250_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker250);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker252_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker252);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:59:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker254_static.FOLLOW_comma_in_synpred13_ChemicalChunker254);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred83_ChemicalChunker
    public final void synpred83_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:74:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred83_ChemicalChunker458_static.FOLLOW_nounphraseStructure1_in_synpred83_ChemicalChunker458);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_ChemicalChunker

    // $ANTLR start synpred85_ChemicalChunker
    public final void synpred85_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred85_ChemicalChunker489_static.FOLLOW_dt_in_synpred85_ChemicalChunker489);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:15: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred86_ChemicalChunker492_static.FOLLOW_advAdj_in_synpred86_ChemicalChunker492);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:25: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred87_ChemicalChunker497_static.FOLLOW_dissolvePhrase_in_synpred87_ChemicalChunker497);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:40: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:40: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred88_ChemicalChunker499_static.FOLLOW_ratio_in_synpred88_ChemicalChunker499);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:46: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:46: noun
        {
        pushFollow(FOLLOW_noun_in_synpred89_ChemicalChunker501_static.FOLLOW_noun_in_synpred89_ChemicalChunker501);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:51: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:51: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred90_ChemicalChunker503_static.FOLLOW_numeric_in_synpred90_ChemicalChunker503);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred91_ChemicalChunker511_static.FOLLOW_conjunction_in_synpred91_ChemicalChunker511);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:78: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:78: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred92_ChemicalChunker514_static.FOLLOW_advAdj_in_synpred92_ChemicalChunker514);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:87: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:87: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred93_ChemicalChunker518_static.FOLLOW_dissolvePhrase_in_synpred93_ChemicalChunker518);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:102: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:102: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred94_ChemicalChunker520_static.FOLLOW_ratio_in_synpred94_ChemicalChunker520);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:108: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:108: noun
        {
        pushFollow(FOLLOW_noun_in_synpred95_ChemicalChunker522_static.FOLLOW_noun_in_synpred95_ChemicalChunker522);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:65: ( conjunction )*
        loop167:
        do {
            int alt167=2;
            alt167 = dfa167.predict(input);
            switch (alt167) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred96_ChemicalChunker511_static.FOLLOW_conjunction_in_synpred96_ChemicalChunker511);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop167;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:78: ( advAdj )*
        loop168:
        do {
            int alt168=2;
            alt168 = dfa168.predict(input);
            switch (alt168) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred96_ChemicalChunker514_static.FOLLOW_advAdj_in_synpred96_ChemicalChunker514);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop168;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:86: ( dissolvePhrase | ratio | noun | numeric )
        int alt169=4;
        alt169 = dfa169.predict(input);
        switch (alt169) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:87: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred96_ChemicalChunker518_static.FOLLOW_dissolvePhrase_in_synpred96_ChemicalChunker518);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:102: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred96_ChemicalChunker520_static.FOLLOW_ratio_in_synpred96_ChemicalChunker520);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:108: noun
                {
                pushFollow(FOLLOW_noun_in_synpred96_ChemicalChunker522_static.FOLLOW_noun_in_synpred96_ChemicalChunker522);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:113: numeric
                {
                pushFollow(FOLLOW_numeric_in_synpred96_ChemicalChunker524_static.FOLLOW_numeric_in_synpred96_ChemicalChunker524);
                numeric();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:157: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:157: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker540_static.FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker540);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:128: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:128: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:128: ( prepphraseOf | prepphraseIN )
        int alt170=2;
        switch ( input.LA(1) ) {
        case 56:
            {
            alt170=1;
            }
            break;
        case 50:
            {
            alt170=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 170, 0, input);

            throw nvae;
        }

        switch (alt170) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:129: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred99_ChemicalChunker534_static.FOLLOW_prepphraseOf_in_synpred99_ChemicalChunker534);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:143: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker537_static.FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker537);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:78:157: ( dissolvePhrase )?
        int alt171=2;
        switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 73:
            case 84:
            case 133:
            case 139:
            case 142:
            case 145:
            case 150:
            case 151:
            case 152:
            case 157:
                {
                alt171=1;
                }
                break;
        }

        switch (alt171) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker540_static.FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker540);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:80:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred100_ChemicalChunker554_static.FOLLOW_dissolveStructure_in_synpred100_ChemicalChunker554);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred101_ChemicalChunker585_static.FOLLOW_adj_in_synpred101_ChemicalChunker585);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred104_ChemicalChunker597_static.FOLLOW_molecule_in_synpred104_ChemicalChunker597);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred106_ChemicalChunker
    public final void synpred106_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: adj
        {
        pushFollow(FOLLOW_adj_in_synpred106_ChemicalChunker609_static.FOLLOW_adj_in_synpred106_ChemicalChunker609);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:84: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:84: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker616_static.FOLLOW_molecule_in_synpred108_ChemicalChunker616);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:111: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:111: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker622_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker622);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker624_static.FOLLOW_molecule_in_synpred109_ChemicalChunker624);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:61: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:61: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred110_ChemicalChunker604_static.FOLLOW_inin_in_synpred110_ChemicalChunker604);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:66: ( dtTHE )?
        int alt172=2;
        switch ( input.LA(1) ) {
            case 141:
                {
                alt172=1;
                }
                break;
        }

        switch (alt172) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred110_ChemicalChunker606_static.FOLLOW_dtTHE_in_synpred110_ChemicalChunker606);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: ( adj )?
        int alt173=2;
        alt173 = dfa173.predict(input);
        switch (alt173) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred110_ChemicalChunker609_static.FOLLOW_adj_in_synpred110_ChemicalChunker609);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:78: ( nnp )?
        int alt174=2;
        switch ( input.LA(1) ) {
            case 157:
                {
                alt174=1;
                }
                break;
        }

        switch (alt174) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred110_ChemicalChunker612_static.FOLLOW_nnp_in_synpred110_ChemicalChunker612);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:83: ( molecule | unnamedmolecule )
        int alt175=2;
        alt175 = dfa175.predict(input);
        switch (alt175) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:84: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker616_static.FOLLOW_molecule_in_synpred110_ChemicalChunker616);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:93: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker618_static.FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker618);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:110: ( conjunction molecule )*
        loop176:
        do {
            int alt176=2;
            switch ( input.LA(1) ) {
            case 133:
            case 144:
                {
                alt176=1;
                }
                break;

            }

            switch (alt176) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:111: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred110_ChemicalChunker622_static.FOLLOW_conjunction_in_synpred110_ChemicalChunker622);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker624_static.FOLLOW_molecule_in_synpred110_ChemicalChunker624);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop176;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:28: to
        {
        pushFollow(FOLLOW_to_in_synpred112_ChemicalChunker660_static.FOLLOW_to_in_synpred112_ChemicalChunker660);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred113_ChemicalChunker663_static.FOLLOW_inAll_in_synpred113_ChemicalChunker663);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred119_ChemicalChunker682_static.FOLLOW_verb_in_synpred119_ChemicalChunker682);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: md
        {
        pushFollow(FOLLOW_md_in_synpred120_ChemicalChunker685_static.FOLLOW_md_in_synpred120_ChemicalChunker685);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred121_ChemicalChunker688_static.FOLLOW_adv_in_synpred121_ChemicalChunker688);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred122_ChemicalChunker691_static.FOLLOW_adj_in_synpred122_ChemicalChunker691);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred123_ChemicalChunker694_static.FOLLOW_neg_in_synpred123_ChemicalChunker694);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:49: ( md )*
        loop177:
        do {
            int alt177=2;
            switch ( input.LA(1) ) {
            case 154:
                {
                alt177=1;
                }
                break;

            }

            switch (alt177) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred124_ChemicalChunker670_static.FOLLOW_md_in_synpred124_ChemicalChunker670);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop177;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:53: ( rbconj )?
        int alt178=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt178=1;
                }
                break;
        }

        switch (alt178) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred124_ChemicalChunker673_static.FOLLOW_rbconj_in_synpred124_ChemicalChunker673);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:61: ( adv )*
        loop179:
        do {
            int alt179=2;
            switch ( input.LA(1) ) {
            case 163:
            case 164:
            case 165:
            case 166:
                {
                alt179=1;
                }
                break;

            }

            switch (alt179) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred124_ChemicalChunker676_static.FOLLOW_adv_in_synpred124_ChemicalChunker676);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop179;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:66: ( adj )?
        int alt180=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 150:
            case 151:
            case 152:
                {
                alt180=1;
                }
                break;
        }

        switch (alt180) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred124_ChemicalChunker679_static.FOLLOW_adj_in_synpred124_ChemicalChunker679);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:71: ( verb )+
        int cnt181=0;
        loop181:
        do {
            int alt181=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
                {
                alt181=1;
                }
                break;

            }

            switch (alt181) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred124_ChemicalChunker682_static.FOLLOW_verb_in_synpred124_ChemicalChunker682);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt181 >= 1 ) break loop181;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(181, input);
                    throw eee;
            }
            cnt181++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:77: ( md )*
        loop182:
        do {
            int alt182=2;
            switch ( input.LA(1) ) {
            case 154:
                {
                alt182=1;
                }
                break;

            }

            switch (alt182) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred124_ChemicalChunker685_static.FOLLOW_md_in_synpred124_ChemicalChunker685);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop182;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:81: ( adv )*
        loop183:
        do {
            int alt183=2;
            switch ( input.LA(1) ) {
            case 163:
            case 164:
            case 165:
            case 166:
                {
                alt183=1;
                }
                break;

            }

            switch (alt183) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred124_ChemicalChunker688_static.FOLLOW_adv_in_synpred124_ChemicalChunker688);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop183;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:86: ( adj )?
        int alt184=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 150:
            case 151:
            case 152:
                {
                alt184=1;
                }
                break;
        }

        switch (alt184) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred124_ChemicalChunker691_static.FOLLOW_adj_in_synpred124_ChemicalChunker691);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:91: ( neg )?
        int alt185=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt185=1;
                }
                break;
        }

        switch (alt185) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred124_ChemicalChunker694_static.FOLLOW_neg_in_synpred124_ChemicalChunker694);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred125_ChemicalChunker700_static.FOLLOW_inoff_in_synpred125_ChemicalChunker700);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:107: ( cc )?
        int alt186=2;
        switch ( input.LA(1) ) {
            case 144:
                {
                alt186=1;
                }
                break;
        }

        switch (alt186) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred128_ChemicalChunker704_static.FOLLOW_cc_in_synpred128_ChemicalChunker704);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:111: ( comma )?
        int alt187=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt187=1;
                }
                break;
        }

        switch (alt187) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred128_ChemicalChunker707_static.FOLLOW_comma_in_synpred128_ChemicalChunker707);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred128_ChemicalChunker710_static.FOLLOW_prepphrase_in_synpred128_ChemicalChunker710);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred138_ChemicalChunker
    public final void synpred138_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker740_static.FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker740);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred138_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred151_ChemicalChunker766_static.FOLLOW_vbdegass_in_synpred151_ChemicalChunker766);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred169_ChemicalChunker828_static.FOLLOW_dash_in_synpred169_ChemicalChunker828);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred169_ChemicalChunker830_static.FOLLOW_nounStructure_in_synpred169_ChemicalChunker830);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred172_ChemicalChunker845_static.FOLLOW_citation_in_synpred172_ChemicalChunker845);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred173_ChemicalChunker847_static.FOLLOW_cycles_in_synpred173_ChemicalChunker847);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred174_ChemicalChunker849_static.FOLLOW_molecule_in_synpred174_ChemicalChunker849);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred175_ChemicalChunker851_static.FOLLOW_apparatus_in_synpred175_ChemicalChunker851);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred176_ChemicalChunker853_static.FOLLOW_mixture_in_synpred176_ChemicalChunker853);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker855_static.FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker855);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:98: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred179_ChemicalChunker859_static.FOLLOW_nnstate_in_synpred179_ChemicalChunker859);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:106: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:106: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred180_ChemicalChunker861_static.FOLLOW_procedureNode_in_synpred180_ChemicalChunker861);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:120: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:120: nn
        {
        pushFollow(FOLLOW_nn_in_synpred181_ChemicalChunker863_static.FOLLOW_nn_in_synpred181_ChemicalChunker863);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:131: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:131: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred184_ChemicalChunker869_static.FOLLOW_nnadd_in_synpred184_ChemicalChunker869);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:155: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:155: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred186_ChemicalChunker873_static.FOLLOW_nnexample_in_synpred186_ChemicalChunker873);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:165: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:165: range
        {
        pushFollow(FOLLOW_range_in_synpred187_ChemicalChunker875_static.FOLLOW_range_in_synpred187_ChemicalChunker875);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:211: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:211: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred192_ChemicalChunker885_static.FOLLOW_quantity_in_synpred192_ChemicalChunker885);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:220: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:220: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred193_ChemicalChunker887_static.FOLLOW_nnchementity_in_synpred193_ChemicalChunker887);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:240: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:240: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred195_ChemicalChunker891_static.FOLLOW_nnph_in_synpred195_ChemicalChunker891);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:253: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:253: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred197_ChemicalChunker895_static.FOLLOW_nngeneral_in_synpred197_ChemicalChunker895);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:277: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:277: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred200_ChemicalChunker901_static.FOLLOW_nnpressure_in_synpred200_ChemicalChunker901);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred211_ChemicalChunker
    public final void synpred211_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:391: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:391: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker923_static.FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker923);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:422: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:422: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred213_ChemicalChunker927_static.FOLLOW_numeric_in_synpred213_ChemicalChunker927);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:430: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:96:430: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred214_ChemicalChunker929_static.FOLLOW_oscarCompound_in_synpred214_ChemicalChunker929);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker967_static.FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker967);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker969_static.FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker969);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker971_static.FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker971);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker973_static.FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker973);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker975_static.FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker975);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred232_ChemicalChunker1015_static.FOLLOW_advAdj_in_synpred232_ChemicalChunker1015);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1020_static.FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1020);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred234_ChemicalChunker1048_static.FOLLOW_advAdj_in_synpred234_ChemicalChunker1048);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred239_ChemicalChunker1064_static.FOLLOW_nntime_in_synpred239_ChemicalChunker1064);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred240_ChemicalChunker1095_static.FOLLOW_advAdj_in_synpred240_ChemicalChunker1095);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred245_ChemicalChunker1110_static.FOLLOW_nntemp_in_synpred245_ChemicalChunker1110);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred251_ChemicalChunker1283_static.FOLLOW_conjunction_in_synpred251_ChemicalChunker1283);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( conjunction )*
        loop188:
        do {
            int alt188=2;
            alt188 = dfa188.predict(input);
            switch (alt188) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred252_ChemicalChunker1283_static.FOLLOW_conjunction_in_synpred252_ChemicalChunker1283);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop188;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred252_ChemicalChunker1286_static.FOLLOW_apparatus_in_synpred252_ChemicalChunker1286);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred255_ChemicalChunker1303_static.FOLLOW_nnApp_in_synpred255_ChemicalChunker1303);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1330_static.FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1330);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred257_ChemicalChunker1334_static.FOLLOW_dash_in_synpred257_ChemicalChunker1334);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1336_static.FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1336);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred258_ChemicalChunker1350_static.FOLLOW_quantity_in_synpred258_ChemicalChunker1350);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred259_ChemicalChunker1352_static.FOLLOW_adj_in_synpred259_ChemicalChunker1352);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred260_ChemicalChunker1354_static.FOLLOW_nnpressure_in_synpred260_ChemicalChunker1354);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred261_ChemicalChunker1356_static.FOLLOW_nnadd_in_synpred261_ChemicalChunker1356);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred262_ChemicalChunker1358_static.FOLLOW_molecule_in_synpred262_ChemicalChunker1358);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred263_ChemicalChunker1360_static.FOLLOW_nnchementity_in_synpred263_ChemicalChunker1360);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred264_ChemicalChunker1362_static.FOLLOW_nnstate_in_synpred264_ChemicalChunker1362);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred265_ChemicalChunker1364_static.FOLLOW_nn_in_synpred265_ChemicalChunker1364);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred266_ChemicalChunker1376_static.FOLLOW_oscaront_in_synpred266_ChemicalChunker1376);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:46: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:46: adj
        {
        pushFollow(FOLLOW_adj_in_synpred268_ChemicalChunker1401_static.FOLLOW_adj_in_synpred268_ChemicalChunker1401);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:51: ( alphanumericOrBrackettedCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:51: alphanumericOrBrackettedCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrBrackettedCompoundReference_in_synpred269_ChemicalChunker1404_static.FOLLOW_alphanumericOrBrackettedCompoundReference_in_synpred269_ChemicalChunker1404);
        alphanumericOrBrackettedCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:25: ( nestedOscarCM )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:152:25: nestedOscarCM
        {
        pushFollow(FOLLOW_nestedOscarCM_in_synpred270_ChemicalChunker1412_static.FOLLOW_nestedOscarCM_in_synpred270_ChemicalChunker1412);
        nestedOscarCM();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:30: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:30: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred272_ChemicalChunker1449_static.FOLLOW_oscarcm_in_synpred272_ChemicalChunker1449);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:45: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:45: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred274_ChemicalChunker1455_static.FOLLOW_oscarcm_in_synpred274_ChemicalChunker1455);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:40: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:40: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1453_static.FOLLOW_dash_in_synpred275_ChemicalChunker1453);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:45: ( oscarcm )+
        int cnt190=0;
        loop190:
        do {
            int alt190=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt190=1;
                }
                break;

            }

            switch (alt190) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred275_ChemicalChunker1455_static.FOLLOW_oscarcm_in_synpred275_ChemicalChunker1455);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt190 >= 1 ) break loop190;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(190, input);
                    throw eee;
            }
            cnt190++;
        } while (true);


        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:56: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:56: dash
        {
        pushFollow(FOLLOW_dash_in_synpred276_ChemicalChunker1460_static.FOLLOW_dash_in_synpred276_ChemicalChunker1460);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:39: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:39: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:39: ( dash ( oscarcm )+ )+
        int cnt192=0;
        loop192:
        do {
            int alt192=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt192=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt192) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:40: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred277_ChemicalChunker1453_static.FOLLOW_dash_in_synpred277_ChemicalChunker1453);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:45: ( oscarcm )+
        	    int cnt191=0;
        	    loop191:
        	    do {
        	        int alt191=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt191=1;
        	            }
        	            break;

        	        }

        	        switch (alt191) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred277_ChemicalChunker1455_static.FOLLOW_oscarcm_in_synpred277_ChemicalChunker1455);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt191 >= 1 ) break loop191;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(191, input);
        	                throw eee;
        	        }
        	        cnt191++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt192 >= 1 ) break loop192;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(192, input);
                    throw eee;
            }
            cnt192++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:56: ( dash )?
        int alt193=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt193=1;
                }
                break;
        }

        switch (alt193) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred277_ChemicalChunker1460_static.FOLLOW_dash_in_synpred277_ChemicalChunker1460);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:63: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:63: dash
        {
        pushFollow(FOLLOW_dash_in_synpred278_ChemicalChunker1464_static.FOLLOW_dash_in_synpred278_ChemicalChunker1464);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:68: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:68: apost
        {
        pushFollow(FOLLOW_apost_in_synpred279_ChemicalChunker1466_static.FOLLOW_apost_in_synpred279_ChemicalChunker1466);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:18: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:18: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred281_ChemicalChunker1508_static.FOLLOW_moleculeamount3_in_synpred281_ChemicalChunker1508);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:34: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:34: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred282_ChemicalChunker1510_static.FOLLOW_moleculeamount1_in_synpred282_ChemicalChunker1510);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred283_ChemicalChunker1524_static.FOLLOW_quantity_in_synpred283_ChemicalChunker1524);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:54: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:54: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred286_ChemicalChunker1542_static.FOLLOW_mixture_in_synpred286_ChemicalChunker1542);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred287_ChemicalChunker1555_static.FOLLOW_quantity_in_synpred287_ChemicalChunker1555);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred288_ChemicalChunker1557_static.FOLLOW_mixture_in_synpred288_ChemicalChunker1557);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred293_ChemicalChunker1591_static.FOLLOW_quantity_in_synpred293_ChemicalChunker1591);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred294_ChemicalChunker1593_static.FOLLOW_mixture_in_synpred294_ChemicalChunker1593);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1597_static.FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1597);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:74: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:74: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred297_ChemicalChunker1613_static.FOLLOW_quantity_in_synpred297_ChemicalChunker1613);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:35: ( ( numericCompoundReference | nnchementity ) ( quantity )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:35: ( numericCompoundReference | nnchementity ) ( quantity )+
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:35: ( numericCompoundReference | nnchementity )
        int alt195=2;
        switch ( input.LA(1) ) {
        case 38:
        case 139:
        case 142:
        case 145:
            {
            alt195=1;
            }
            break;
        case 71:
            {
            alt195=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 195, 0, input);

            throw nvae;
        }

        switch (alt195) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:36: numericCompoundReference
                {
                pushFollow(FOLLOW_numericCompoundReference_in_synpred298_ChemicalChunker1609_static.FOLLOW_numericCompoundReference_in_synpred298_ChemicalChunker1609);
                numericCompoundReference();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:61: nnchementity
                {
                pushFollow(FOLLOW_nnchementity_in_synpred298_ChemicalChunker1611_static.FOLLOW_nnchementity_in_synpred298_ChemicalChunker1611);
                nnchementity();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:74: ( quantity )+
        int cnt196=0;
        loop196:
        do {
            int alt196=2;
            switch ( input.LA(1) ) {
            case 38:
            case 73:
            case 142:
            case 145:
                {
                alt196=1;
                }
                break;

            }

            switch (alt196) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
        	    {
        	    pushFollow(FOLLOW_quantity_in_synpred298_ChemicalChunker1613_static.FOLLOW_quantity_in_synpred298_ChemicalChunker1613);
        	    quantity();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt196 >= 1 ) break loop196;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(196, input);
                    throw eee;
            }
            cnt196++;
        } while (true);


        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:86: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:86: citation
        {
        pushFollow(FOLLOW_citation_in_synpred299_ChemicalChunker1618_static.FOLLOW_citation_in_synpred299_ChemicalChunker1618);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:95: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:95: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred300_ChemicalChunker1620_static.FOLLOW_quantity_in_synpred300_ChemicalChunker1620);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:104: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:104: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred302_ChemicalChunker1622_static.FOLLOW_comma_in_synpred302_ChemicalChunker1622);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:110: ( quantity1Node | citationStructure )
        int alt197=2;
        alt197 = dfa197.predict(input);
        switch (alt197) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:111: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1625_static.FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1625);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:125: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred302_ChemicalChunker1627_static.FOLLOW_citationStructure_in_synpred302_ChemicalChunker1627);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:144: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:144: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred303_ChemicalChunker1630_static.FOLLOW_mixture_in_synpred303_ChemicalChunker1630);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:5: ( unnamedmoleculeamount )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:5: unnamedmoleculeamount
        {
        pushFollow(FOLLOW_unnamedmoleculeamount_in_synpred304_ChemicalChunker1642_static.FOLLOW_unnamedmoleculeamount_in_synpred304_ChemicalChunker1642);
        unnamedmoleculeamount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:27: ( unnamedmoleculeamount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:27: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred306_ChemicalChunker1668_static.FOLLOW_unnamedmoleculeamount2_in_synpred306_ChemicalChunker1668);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:50: ( unnamedmoleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:50: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred307_ChemicalChunker1670_static.FOLLOW_unnamedmoleculeamount3_in_synpred307_ChemicalChunker1670);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:73: ( unnamedmoleculeamount4 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:73: unnamedmoleculeamount4
        {
        pushFollow(FOLLOW_unnamedmoleculeamount4_in_synpred308_ChemicalChunker1672_static.FOLLOW_unnamedmoleculeamount4_in_synpred308_ChemicalChunker1672);
        unnamedmoleculeamount4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:96: ( unnamedmoleculeamount5 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:96: unnamedmoleculeamount5
        {
        pushFollow(FOLLOW_unnamedmoleculeamount5_in_synpred309_ChemicalChunker1674_static.FOLLOW_unnamedmoleculeamount5_in_synpred309_ChemicalChunker1674);
        unnamedmoleculeamount5();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:31: ( numericCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:31: numericCompoundReference
        {
        pushFollow(FOLLOW_numericCompoundReference_in_synpred310_ChemicalChunker1700_static.FOLLOW_numericCompoundReference_in_synpred310_ChemicalChunker1700);
        numericCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:58: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:58: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred311_ChemicalChunker1704_static.FOLLOW_quantity_in_synpred311_ChemicalChunker1704);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:67: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:67: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred312_ChemicalChunker1706_static.FOLLOW_mixture_in_synpred312_ChemicalChunker1706);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:47: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:47: citation
        {
        pushFollow(FOLLOW_citation_in_synpred314_ChemicalChunker1737_static.FOLLOW_citation_in_synpred314_ChemicalChunker1737);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:56: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:56: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred315_ChemicalChunker1739_static.FOLLOW_quantity_in_synpred315_ChemicalChunker1739);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:65: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:65: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred316_ChemicalChunker1741_static.FOLLOW_mixture_in_synpred316_ChemicalChunker1741);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:29: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:29: citation
        {
        pushFollow(FOLLOW_citation_in_synpred319_ChemicalChunker1786_static.FOLLOW_citation_in_synpred319_ChemicalChunker1786);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:38: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:38: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred320_ChemicalChunker1788_static.FOLLOW_quantity_in_synpred320_ChemicalChunker1788);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:47: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:47: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred321_ChemicalChunker1790_static.FOLLOW_mixture_in_synpred321_ChemicalChunker1790);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred322_ChemicalChunker
    public final void synpred322_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:67: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:67: citation
        {
        pushFollow(FOLLOW_citation_in_synpred322_ChemicalChunker1797_static.FOLLOW_citation_in_synpred322_ChemicalChunker1797);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_ChemicalChunker

    // $ANTLR start synpred323_ChemicalChunker
    public final void synpred323_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:76: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:76: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred323_ChemicalChunker1799_static.FOLLOW_quantity_in_synpred323_ChemicalChunker1799);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_ChemicalChunker

    // $ANTLR start synpred324_ChemicalChunker
    public final void synpred324_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:85: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:85: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred324_ChemicalChunker1801_static.FOLLOW_mixture_in_synpred324_ChemicalChunker1801);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: ( jj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred325_ChemicalChunker1834_static.FOLLOW_jj_in_synpred325_ChemicalChunker1834);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: ( ( jj )? noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: ( jj )? noun
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:18: ( jj )?
        int alt198=2;
        switch ( input.LA(1) ) {
            case 150:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA198_3 = input.LA(3);

                        if ( (synpred325_ChemicalChunker()) ) {
                            alt198=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt198) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred326_ChemicalChunker1834_static.FOLLOW_jj_in_synpred326_ChemicalChunker1834);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred326_ChemicalChunker1837_static.FOLLOW_noun_in_synpred326_ChemicalChunker1837);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred327_ChemicalChunker1848_static.FOLLOW_quantity_in_synpred327_ChemicalChunker1848);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred334_ChemicalChunker2011_static.FOLLOW_comma_in_synpred334_ChemicalChunker2011);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred334_ChemicalChunker2014_static.FOLLOW_measurements_in_synpred334_ChemicalChunker2014);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:43: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred337_ChemicalChunker2042_static.FOLLOW_dt_in_synpred337_ChemicalChunker2042);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred338_ChemicalChunker2054_static.FOLLOW_measurementtypes_in_synpred338_ChemicalChunker2054);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred345_ChemicalChunker
    public final void synpred345_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:228:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred345_ChemicalChunker2091_static.FOLLOW_yield_in_synpred345_ChemicalChunker2091);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_ChemicalChunker

    // $ANTLR start synpred355_ChemicalChunker
    public final void synpred355_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred355_ChemicalChunker2375_static.FOLLOW_fw_in_synpred355_ChemicalChunker2375);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred355_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred356_ChemicalChunker2377_static.FOLLOW_verb_in_synpred356_ChemicalChunker2377);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred357_ChemicalChunker2379_static.FOLLOW_nn_in_synpred357_ChemicalChunker2379);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred358_ChemicalChunker
    public final void synpred358_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:31: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:31: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2381_static.FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2381);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_ChemicalChunker

    // $ANTLR start synpred361_ChemicalChunker
    public final void synpred361_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:58: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:58: stop
        {
        pushFollow(FOLLOW_stop_in_synpred361_ChemicalChunker2387_static.FOLLOW_stop_in_synpred361_ChemicalChunker2387);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred361_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:63: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:63: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred362_ChemicalChunker2389_static.FOLLOW_oscarCompound_in_synpred362_ChemicalChunker2389);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred363_ChemicalChunker
    public final void synpred363_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:77: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:77: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred363_ChemicalChunker2391_static.FOLLOW_molecule_in_synpred363_ChemicalChunker2391);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred363_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:86: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:86: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred364_ChemicalChunker2393_static.FOLLOW_unnamedmolecule_in_synpred364_ChemicalChunker2393);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred366_ChemicalChunker
    public final void synpred366_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:107: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:107: sym
        {
        pushFollow(FOLLOW_sym_in_synpred366_ChemicalChunker2397_static.FOLLOW_sym_in_synpred366_ChemicalChunker2397);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:111: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:111: cd
        {
        pushFollow(FOLLOW_cd_in_synpred367_ChemicalChunker2399_static.FOLLOW_cd_in_synpred367_ChemicalChunker2399);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:114: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:114: noun
        {
        pushFollow(FOLLOW_noun_in_synpred368_ChemicalChunker2401_static.FOLLOW_noun_in_synpred368_ChemicalChunker2401);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred370_ChemicalChunker
    public final void synpred370_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:125: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:125: cd
        {
        pushFollow(FOLLOW_cd_in_synpred370_ChemicalChunker2405_static.FOLLOW_cd_in_synpred370_ChemicalChunker2405);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:128: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:128: comma
        {
        pushFollow(FOLLOW_comma_in_synpred371_ChemicalChunker2407_static.FOLLOW_comma_in_synpred371_ChemicalChunker2407);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred372_ChemicalChunker
    public final void synpred372_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:134: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:134: adj
        {
        pushFollow(FOLLOW_adj_in_synpred372_ChemicalChunker2409_static.FOLLOW_adj_in_synpred372_ChemicalChunker2409);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_ChemicalChunker

    // $ANTLR start synpred374_ChemicalChunker
    public final void synpred374_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:151: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:151: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred374_ChemicalChunker2417_static.FOLLOW_minimixture_in_synpred374_ChemicalChunker2417);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:163: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:163: fw
        {
        pushFollow(FOLLOW_fw_in_synpred375_ChemicalChunker2419_static.FOLLOW_fw_in_synpred375_ChemicalChunker2419);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:166: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:166: verb
        {
        pushFollow(FOLLOW_verb_in_synpred376_ChemicalChunker2421_static.FOLLOW_verb_in_synpred376_ChemicalChunker2421);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred377_ChemicalChunker
    public final void synpred377_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:171: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:171: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred377_ChemicalChunker2423_static.FOLLOW_quantity2Node_in_synpred377_ChemicalChunker2423);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_ChemicalChunker

    // $ANTLR start synpred378_ChemicalChunker
    public final void synpred378_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:185: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:185: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred378_ChemicalChunker2425_static.FOLLOW_nnyield_in_synpred378_ChemicalChunker2425);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_ChemicalChunker

    // $ANTLR start synpred381_ChemicalChunker
    public final void synpred381_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:206: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:206: stop
        {
        pushFollow(FOLLOW_stop_in_synpred381_ChemicalChunker2431_static.FOLLOW_stop_in_synpred381_ChemicalChunker2431);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:211: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:211: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred382_ChemicalChunker2433_static.FOLLOW_oscarCompound_in_synpred382_ChemicalChunker2433);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:225: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:225: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred383_ChemicalChunker2435_static.FOLLOW_molecule_in_synpred383_ChemicalChunker2435);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:234: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:234: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred384_ChemicalChunker2437_static.FOLLOW_unnamedmolecule_in_synpred384_ChemicalChunker2437);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:255: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:255: sym
        {
        pushFollow(FOLLOW_sym_in_synpred386_ChemicalChunker2441_static.FOLLOW_sym_in_synpred386_ChemicalChunker2441);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred387_ChemicalChunker
    public final void synpred387_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:259: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:259: cd
        {
        pushFollow(FOLLOW_cd_in_synpred387_ChemicalChunker2443_static.FOLLOW_cd_in_synpred387_ChemicalChunker2443);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:262: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:262: noun
        {
        pushFollow(FOLLOW_noun_in_synpred388_ChemicalChunker2445_static.FOLLOW_noun_in_synpred388_ChemicalChunker2445);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:273: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:273: cd
        {
        pushFollow(FOLLOW_cd_in_synpred390_ChemicalChunker2449_static.FOLLOW_cd_in_synpred390_ChemicalChunker2449);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred391_ChemicalChunker
    public final void synpred391_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:276: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:276: comma
        {
        pushFollow(FOLLOW_comma_in_synpred391_ChemicalChunker2451_static.FOLLOW_comma_in_synpred391_ChemicalChunker2451);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:282: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:282: adj
        {
        pushFollow(FOLLOW_adj_in_synpred392_ChemicalChunker2453_static.FOLLOW_adj_in_synpred392_ChemicalChunker2453);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:292: ( stop )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:292: stop
        {
        pushFollow(FOLLOW_stop_in_synpred394_ChemicalChunker2457_static.FOLLOW_stop_in_synpred394_ChemicalChunker2457);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:30: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:30: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred398_ChemicalChunker2519_static.FOLLOW_numeric_in_synpred398_ChemicalChunker2519);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:10: ( numericratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:10: numericratio
        {
        pushFollow(FOLLOW_numericratio_in_synpred407_ChemicalChunker2611_static.FOLLOW_numericratio_in_synpred407_ChemicalChunker2611);
        numericratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:21: ( colon numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:21: colon numeric
        {
        pushFollow(FOLLOW_colon_in_synpred408_ChemicalChunker2639_static.FOLLOW_colon_in_synpred408_ChemicalChunker2639);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_numeric_in_synpred408_ChemicalChunker2641_static.FOLLOW_numeric_in_synpred408_ChemicalChunker2641);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred409_ChemicalChunker2657_static.FOLLOW_colon_in_synpred409_ChemicalChunker2657);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred409_ChemicalChunker2659_static.FOLLOW_noun_in_synpred409_ChemicalChunker2659);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // Delegated rules

    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred363_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred363_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA197 dfa197 = new DFA197(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0091\uffff";
    static final String DFA2_eofS =
        "\1\1\u0090\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008d\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b3\1\uffff\u008d\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008d\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\164\1\44\1\101\1\26\1\u008a\1\140\1\120\1\15\1\142\1"+
        "\37\1\75\1\116\1\144\1\163\1\107\1\177\1\102\1\35\1\21\1\10\1\u0087"+
        "\1\76\1\150\1\1\1\123\1\65\1\103\1\156\1\173\1\17\1\134\1\30\1\u0086"+
        "\1\2\1\105\1\72\1\32\1\54\1\7\1\162\1\175\1\12\1\66\1\64\1\67\1"+
        "\46\1\40\1\22\1\131\1\132\1\u0084\1\143\1\41\1\23\1\174\1\133\1"+
        "\145\1\16\1\25\1\51\1\50\1\127\1\u0088\1\4\1\77\1\152\1\155\1\52"+
        "\1\113\1\47\1\53\1\33\1\56\1\u0081\1\153\1\114\1\157\1\u0082\1\13"+
        "\1\5\1\14\1\6\1\70\1\62\1\166\1\167\1\110\1\146\1\20\1\u0085\1\u0083"+
        "\1\135\1\124\1\176\1\63\1\151\1\27\1\3\1\45\1\0\1\74\1\137\1\61"+
        "\1\125\1\122\1\u008b\1\165\1\161\1\36\1\24\1\112\1\60\1\126\1\141"+
        "\1\170\1\u008c\1\31\1\42\1\55\1\111\1\117\1\171\1\160\1\u0089\1"+
        "\11\1\57\1\106\1\73\1\34\1\115\1\121\1\43\1\154\1\u0080\1\172\1"+
        "\147\1\136\1\130\1\104\1\100\1\71\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\6\1\12\1\14\1\107\1\45\1\50\1\u0084\1\13\1\33\1\113\1\114"+
            "\1\112\1\120\1\121\1\130\1\131\1\115\1\127\1\122\1\124\1\116"+
            "\1\117\1\126\1\125\1\123\1\22\1\46\1\u0085\1\53\1\u0086\1\47"+
            "\1\54\1\63\1\21\1\51\1\5\1\52\1\40\1\41\1\15\1\55\1\56\1\57"+
            "\1\60\1\61\1\42\1\20\1\142\1\u0082\1\143\1\146\1\16\1\66\1\150"+
            "\1\147\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\24\1\160"+
            "\1\62\1\161\1\145\1\162\1\163\1\67\1\164\1\70\1\165\1\71\1\166"+
            "\1\167\1\144\1\170\1\171\1\72\1\172\1\64\1\173\1\174\1\175\1"+
            "\73\1\176\1\44\1\65\1\177\1\u0080\1\u0081\1\37\1\133\1\u0087"+
            "\1\17\1\u0088\1\u0083\1\u0089\1\1\1\u008a\1\34\1\u008b\1\25"+
            "\1\3\1\u008c\1\u008d\1\4\1\2\1\101\1\74\1\111\1\7\1\10\1\11"+
            "\1\104\1\132\1\23\1\43\1\32\1\105\1\102\1\106\1\35\1\36\1\26"+
            "\1\27\1\31\1\30\1\75\1\110\1\u008e\1\134\1\137\1\136\1\141\1"+
            "\135\1\140\1\76\1\103\1\77\1\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 57:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred2_ChemicalChunker())) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred2_ChemicalChunker())) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred2_ChemicalChunker())) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred2_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred2_ChemicalChunker())) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u0088\uffff";
    static final String DFA4_eofS =
        "\1\13\u0087\uffff";
    static final String DFA4_minS =
        "\1\46\12\0\1\uffff\170\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00b3\12\0\1\uffff\170\0\4\uffff";
    static final String DFA4_acceptS =
        "\13\uffff\1\5\170\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\161\1\43\1\75\1\143\1\3\1\57\1\126\1\176\1\117\1\153"+
        "\1\uffff\1\134\1\23\1\167\1\110\1\162\1\41\1\166\1\24\1\76\1\173"+
        "\1\0\1\103\1\137\1\106\1\61\1\6\1\164\1\174\1\74\1\124\1\177\1\70"+
        "\1\105\1\165\1\122\1\140\1\u0081\1\145\1\123\1\20\1\125\1\121\1"+
        "\175\1\45\1\50\1\67\1\22\1\31\1\157\1\135\1\14\1\46\1\142\1\136"+
        "\1\107\1\147\1\33\1\37\1\36\1\1\1\100\1\172\1\11\1\71\1\34\1\27"+
        "\1\152\1\64\1\16\1\53\1\131\1\10\1\120\1\44\1\132\1\25\1\54\1\112"+
        "\1\144\1\113\1\116\1\13\1\133\1\60\1\62\1\77\1\114\1\150\1\12\1"+
        "\5\1\170\1\101\1\40\1\15\1\102\1\42\1\30\1\72\1\32\1\65\1\104\1"+
        "\u0080\1\156\1\160\1\4\1\35\1\56\1\52\1\73\1\130\1\171\1\154\1\2"+
        "\1\21\1\55\1\115\1\163\1\146\1\26\1\7\1\63\1\51\1\66\1\17\1\155"+
        "\1\111\1\141\1\127\1\47\1\151\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\22\1\10\1\12\1\110\1\46\1\51\1\13\1\11\1\34\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\27\1\47\1\13\1\54\1\13\1\50\1\55"+
            "\1\64\1\26\1\52\1\21\1\53\1\41\1\42\1\23\1\56\1\57\1\60\1\61"+
            "\1\62\1\43\1\25\1\142\1\u0082\1\143\1\146\1\24\1\67\1\150\1"+
            "\147\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\31\1\160\1"+
            "\63\1\161\1\145\1\162\1\163\1\70\1\164\1\71\1\165\1\72\1\166"+
            "\1\167\1\144\1\170\1\171\1\73\1\172\1\65\1\173\1\174\1\175\1"+
            "\74\1\176\1\45\1\66\1\177\1\u0080\1\u0081\1\40\1\15\1\13\1\14"+
            "\1\13\1\u0083\3\13\1\35\1\13\1\32\1\17\2\13\1\20\1\16\1\102"+
            "\1\75\1\112\1\5\1\6\1\7\1\105\1\133\1\30\1\44\1\33\1\106\1\103"+
            "\1\107\1\36\1\37\1\1\1\2\1\4\1\3\1\76\1\111\1\13\1\134\1\137"+
            "\1\136\1\141\1\135\1\140\1\77\1\104\1\100\1\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 59:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred5_ChemicalChunker())) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred5_ChemicalChunker())) ) {s = 132;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred5_ChemicalChunker())) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred5_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred5_ChemicalChunker())) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\32\uffff";
    static final String DFA5_eofS =
        "\1\1\31\uffff";
    static final String DFA5_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00b3\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\15\uffff\1\0\1\2\1\3\1\11\1\4\1\12\1\5\1\7\1\10\1\1\1\6\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\126\1\1\14\21\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 59:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00b3\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\2\1\0\1\1\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\135\1\1\3\1\1\1\2\12\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 59:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\110\uffff";
    static final String DFA8_eofS =
        "\110\uffff";
    static final String DFA8_minS =
        "\1\46\23\0\64\uffff";
    static final String DFA8_maxS =
        "\1\u00b3\23\0\64\uffff";
    static final String DFA8_acceptS =
        "\24\uffff\1\2\62\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\64\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\11\1\13\3\24\1\uffff\1\12\1\24\20\uffff\1\21\1\24\1"+
            "\uffff\1\24\1\uffff\3\24\1\20\1\24\1\4\3\24\1\14\6\24\1\17\4"+
            "\uffff\1\15\1\24\11\uffff\1\23\1\uffff\1\24\4\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\1\24\5\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1"+
            "\uffff\2\24\3\uffff\1\24\2\uffff\1\16\5\uffff\1\24\1\uffff\1"+
            "\24\1\2\2\uffff\1\3\1\1\2\24\1\uffff\1\6\1\7\1\10\1\24\1\uffff"+
            "\1\22\14\24\10\uffff\4\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "73:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA11_maxS =
        "\1\u00b3\6\45\2\uffff\6\0";
    static final String DFA11_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA11_specialS =
        "\11\uffff\1\1\1\2\1\4\1\3\1\5\1\0}>";
    static final String[] DFA11_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7"+
            "\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10"+
            "\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 78:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\107\uffff";
    static final String DFA12_eofS =
        "\1\1\106\uffff";
    static final String DFA12_minS =
        "\1\46\1\uffff\101\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00b3\1\uffff\101\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\101\uffff\1\1\1\2\1\3\1\4";
    static final String DFA12_specialS =
        "\2\uffff\1\53\1\35\1\46\1\34\1\27\1\3\1\16\1\17\1\40\1\6\1\50\1"+
        "\75\1\13\1\56\1\24\1\2\1\36\1\52\1\55\1\41\1\1\1\72\1\25\1\65\1"+
        "\54\1\30\1\70\1\14\1\45\1\5\1\76\1\20\1\51\1\21\1\66\1\42\1\61\1"+
        "\0\1\12\1\47\1\22\1\57\1\43\1\64\1\26\1\11\1\67\1\60\1\4\1\15\1"+
        "\100\1\74\1\71\1\33\1\73\1\63\1\7\1\44\1\77\1\62\1\32\1\23\1\31"+
        "\1\10\1\37\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\15\1\6\1\10\1\102\1\40\1\43\1\1\1\7\1\17\20\1\1\27\1\41"+
            "\1\1\1\46\1\1\1\42\1\47\1\56\1\21\1\44\1\14\1\45\1\33\1\34\1"+
            "\25\1\50\1\51\1\52\1\53\1\54\1\35\1\16\4\1\1\26\1\61\11\1\1"+
            "\31\1\1\1\55\4\1\1\62\1\1\1\63\1\1\1\64\5\1\1\65\1\1\1\57\3"+
            "\1\1\66\1\1\1\37\1\60\3\1\1\32\2\1\1\2\5\1\1\20\2\1\1\12\2\1"+
            "\1\13\1\24\1\74\1\67\1\1\1\3\1\4\1\5\1\77\1\1\1\30\1\36\1\11"+
            "\1\100\1\75\1\101\1\22\1\23\4\1\1\70\10\1\1\71\1\76\1\72\1\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 78:24: ( dissolvePhrase | ratio | noun | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred87_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred87_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred88_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred88_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred89_ChemicalChunker()||(synpred89_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred87_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred87_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred88_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred88_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred89_ChemicalChunker()||(synpred89_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred87_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred87_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred88_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred88_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred89_ChemicalChunker()||(synpred89_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred87_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred87_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred88_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred88_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred89_ChemicalChunker()||(synpred89_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\111\uffff";
    static final String DFA16_eofS =
        "\1\1\110\uffff";
    static final String DFA16_minS =
        "\1\46\1\uffff\106\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00b3\1\uffff\106\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\106\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\52\1\42\1\66\1\103\1\105\1\63\1\2\1\3\1\20\1\24\1\50"+
        "\1\1\1\47\1\72\1\61\1\31\1\12\1\25\1\67\1\75\1\100\1\11\1\41\1\60"+
        "\1\54\1\46\1\64\1\101\1\22\1\32\1\30\1\23\1\13\1\16\1\55\1\27\1"+
        "\104\1\21\1\65\1\26\1\15\1\37\1\40\1\56\1\43\1\76\1\62\1\14\1\33"+
        "\1\70\1\73\1\44\1\36\1\71\1\10\1\7\1\51\1\45\1\74\1\6\1\34\1\53"+
        "\1\35\1\4\1\17\1\5\1\0\1\102\1\57\1\77\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\22\1\11\1\13\1\107\1\45\1\50\1\1\1\12\1\33\20\1\1\27\1\46"+
            "\1\1\1\53\1\1\1\47\1\54\1\63\1\26\1\51\1\21\1\52\1\40\1\41\1"+
            "\23\1\55\1\56\1\57\1\60\1\61\1\42\1\25\4\1\1\24\1\66\11\1\1"+
            "\31\1\1\1\62\4\1\1\67\1\1\1\70\1\1\1\71\5\1\1\72\1\1\1\64\3"+
            "\1\1\73\1\1\1\44\1\65\3\1\1\37\2\1\1\15\5\1\1\34\2\1\1\17\1"+
            "\1\1\14\1\20\1\16\1\101\1\74\1\1\1\6\1\7\1\10\1\104\1\1\1\30"+
            "\1\43\1\32\1\105\1\102\1\106\1\35\1\36\1\2\1\3\1\5\1\4\1\75"+
            "\10\1\1\76\1\103\1\77\1\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 78:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred96_ChemicalChunker())) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred96_ChemicalChunker())) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred96_ChemicalChunker())) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||(synpred96_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred96_ChemicalChunker())) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA16_71 = input.LA(1);

                         
                        int index16_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_71);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA13_static {
    static final String DFA13_eotS =
        "\107\uffff";
    static final String DFA13_eofS =
        "\107\uffff";
    static final String DFA13_minS =
        "\1\46\17\uffff\1\0\66\uffff";
    static final String DFA13_maxS =
        "\1\u00b3\17\uffff\1\0\66\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA13_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\2\uffff\1\1\1\uffff\1\106\4\1"+
            "\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_static.DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_static.DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_static.DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_static.DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_static.DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_static.DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 78:65: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00b3\6\45\2\uffff\6\0";
    static final String DFA14_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\2\1\4\1\5\1\3\1\1\1\0}>";
    static final String[] DFA14_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7"+
            "\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10"+
            "\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 78:78: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\106\uffff";
    static final String DFA15_eofS =
        "\106\uffff";
    static final String DFA15_minS =
        "\1\46\101\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00b3\101\0\4\uffff";
    static final String DFA15_acceptS =
        "\102\uffff\1\1\1\2\1\3\1\4";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\13\1\4\1\6\1\101\1\37\1\42\1\uffff\1\5\1\16\20\uffff\1\26"+
            "\1\40\1\uffff\1\45\1\uffff\1\41\1\46\1\55\1\20\1\43\1\12\1\44"+
            "\1\32\1\33\1\24\1\47\1\50\1\51\1\52\1\53\1\34\1\15\4\uffff\1"+
            "\25\1\60\11\uffff\1\30\1\uffff\1\54\4\uffff\1\61\1\uffff\1\62"+
            "\1\uffff\1\63\5\uffff\1\64\1\uffff\1\56\3\uffff\1\65\1\uffff"+
            "\1\36\1\57\3\uffff\1\31\2\uffff\1\14\5\uffff\1\17\2\uffff\1"+
            "\10\2\uffff\1\11\1\23\1\73\1\66\1\uffff\1\1\1\2\1\3\1\76\1\uffff"+
            "\1\27\1\35\1\7\1\77\1\74\1\100\1\21\1\22\4\uffff\1\67\10\uffff"+
            "\1\70\1\75\1\71\1\72",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "78:86: ( dissolvePhrase | ratio | noun | numeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( (((synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred95_ChemicalChunker())) ) {s = 68;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( (((synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred95_ChemicalChunker())) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( (((synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred95_ChemicalChunker())) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( (((synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( (((synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred95_ChemicalChunker())) ) {s = 68;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\23\uffff";
    static final String DFA18_eofS =
        "\1\21\22\uffff";
    static final String DFA18_minS =
        "\1\46\20\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00b3\20\0\2\uffff";
    static final String DFA18_acceptS =
        "\21\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\17\1\7\1\15\1\16\1\12\1\10\1\5\1\0\1\13\1\14\1\3\1\4"+
        "\1\6\1\1\1\2\1\11\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\13\1\4\1\6\4\21\1\5\1\16\30\21\1\20\1\21\1\12\12\21\1\15"+
            "\60\21\1\14\5\21\1\17\2\21\1\10\2\21\1\11\4\21\1\1\1\2\1\3\4"+
            "\21\1\7\26\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "78:157: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred98_ChemicalChunker()||(synpred98_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred98_ChemicalChunker()||(synpred98_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred98_ChemicalChunker()||(synpred98_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred98_ChemicalChunker()||(synpred98_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_ChemicalChunker()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\22\uffff";
    static final String DFA20_eofS =
        "\22\uffff";
    static final String DFA20_minS =
        "\1\46\7\uffff\1\0\11\uffff";
    static final String DFA20_maxS =
        "\1\u009d\7\uffff\1\0\11\uffff";
    static final String DFA20_acceptS =
        "\1\uffff\1\1\17\uffff\1\2";
    static final String DFA20_specialS =
        "\10\uffff\1\0\11\uffff}>";
    static final String[] DFA20_transitionS = {
            "\3\1\4\uffff\2\1\30\uffff\1\1\1\uffff\1\1\12\uffff\1\1\60\uffff"+
            "\1\1\5\uffff\1\1\2\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "80:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred100_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred100_ChemicalChunker())) ) {s = 1;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\17\uffff";
    static final String DFA21_eofS =
        "\17\uffff";
    static final String DFA21_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u009d\6\45\1\uffff\6\0\1\uffff";
    static final String DFA21_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA21_specialS =
        "\10\uffff\1\4\1\2\1\1\1\5\1\3\1\0\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\2\uffff\1\7\2\uffff\1\7\4\uffff"+
            "\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "83:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\20\uffff";
    static final String DFA23_eofS =
        "\20\uffff";
    static final String DFA23_minS =
        "\1\46\5\0\12\uffff";
    static final String DFA23_maxS =
        "\1\u0098\5\0\12\uffff";
    static final String DFA23_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\12\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\2\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "83:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA26_static {
    static final String DFA26_eotS =
        "\17\uffff";
    static final String DFA26_eofS =
        "\17\uffff";
    static final String DFA26_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u009d\6\45\1\uffff\6\0\1\uffff";
    static final String DFA26_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA26_specialS =
        "\10\uffff\1\1\1\2\1\5\1\0\1\3\1\4\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\2\uffff\1\7\2\uffff\1\7\4\uffff"+
            "\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_static.DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_static.DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_static.DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_static.DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_static.DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_static.DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "83:73: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA28_static {
    static final String DFA28_eotS =
        "\20\uffff";
    static final String DFA28_eofS =
        "\20\uffff";
    static final String DFA28_minS =
        "\1\46\5\0\12\uffff";
    static final String DFA28_maxS =
        "\1\u0098\5\0\12\uffff";
    static final String DFA28_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String DFA28_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\12\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\2\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_static.DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_static.DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_static.DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_static.DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_static.DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_static.DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "83:83: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA28_1 = input.LA(1);

                         
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA28_2 = input.LA(1);

                         
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA28_3 = input.LA(1);

                         
                        int index28_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA28_4 = input.LA(1);

                         
                        int index28_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA28_5 = input.LA(1);

                         
                        int index28_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA44_static {
    static final String DFA44_eotS =
        "\67\uffff";
    static final String DFA44_eofS =
        "\1\1\66\uffff";
    static final String DFA44_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA44_maxS =
        "\1\u00b3\1\uffff\64\0\1\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA44_specialS =
        "\2\uffff\1\5\1\16\1\1\1\36\1\50\1\40\1\2\1\0\1\20\1\3\1\22\1\32"+
        "\1\45\1\15\1\4\1\37\1\55\1\47\1\21\1\31\1\46\1\7\1\33\1\60\1\57"+
        "\1\13\1\41\1\26\1\11\1\42\1\61\1\14\1\27\1\62\1\30\1\43\1\56\1\23"+
        "\1\54\1\17\1\24\1\53\1\44\1\10\1\51\1\34\1\25\1\63\1\6\1\52\1\35"+
        "\1\12\1\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\22\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_static.DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_static.DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_static.DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_static.DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_static.DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_static.DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "()+ loopback of 88:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA44_16 = input.LA(1);

                         
                        int index44_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA44_50 = input.LA(1);

                         
                        int index44_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_50);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA44_23 = input.LA(1);

                         
                        int index44_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA44_45 = input.LA(1);

                         
                        int index44_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_45);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA44_30 = input.LA(1);

                         
                        int index44_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_30);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA44_53 = input.LA(1);

                         
                        int index44_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA44_27 = input.LA(1);

                         
                        int index44_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_27);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA44_33 = input.LA(1);

                         
                        int index44_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_33);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA44_15 = input.LA(1);

                         
                        int index44_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_15);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA44_41 = input.LA(1);

                         
                        int index44_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_41);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA44_20 = input.LA(1);

                         
                        int index44_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_20);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA44_39 = input.LA(1);

                         
                        int index44_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_39);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA44_42 = input.LA(1);

                         
                        int index44_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_42);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA44_48 = input.LA(1);

                         
                        int index44_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_48);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA44_29 = input.LA(1);

                         
                        int index44_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_29);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA44_34 = input.LA(1);

                         
                        int index44_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_34);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA44_36 = input.LA(1);

                         
                        int index44_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_36);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA44_21 = input.LA(1);

                         
                        int index44_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_21);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA44_24 = input.LA(1);

                         
                        int index44_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_24);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA44_47 = input.LA(1);

                         
                        int index44_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_47);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA44_52 = input.LA(1);

                         
                        int index44_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_52);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_17);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_28);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA44_31 = input.LA(1);

                         
                        int index44_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_31);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA44_37 = input.LA(1);

                         
                        int index44_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_37);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA44_44 = input.LA(1);

                         
                        int index44_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_44);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_14);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA44_22 = input.LA(1);

                         
                        int index44_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_22);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA44_19 = input.LA(1);

                         
                        int index44_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_19);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA44_46 = input.LA(1);

                         
                        int index44_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_46);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA44_51 = input.LA(1);

                         
                        int index44_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_51);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA44_43 = input.LA(1);

                         
                        int index44_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_43);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA44_40 = input.LA(1);

                         
                        int index44_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_40);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA44_18 = input.LA(1);

                         
                        int index44_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_18);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA44_38 = input.LA(1);

                         
                        int index44_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_38);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA44_26 = input.LA(1);

                         
                        int index44_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_26);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA44_25 = input.LA(1);

                         
                        int index44_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_25);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA44_32 = input.LA(1);

                         
                        int index44_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_32);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA44_35 = input.LA(1);

                         
                        int index44_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_35);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA44_49 = input.LA(1);

                         
                        int index44_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA39_static {
    static final String DFA39_eotS =
        "\53\uffff";
    static final String DFA39_eofS =
        "\1\1\52\uffff";
    static final String DFA39_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA39_maxS =
        "\1\u00b3\1\uffff\50\0\1\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA39_specialS =
        "\2\uffff\1\23\1\35\1\43\1\46\1\15\1\16\1\12\1\41\1\26\1\40\1\44"+
        "\1\2\1\7\1\30\1\32\1\11\1\33\1\10\1\37\1\5\1\25\1\31\1\47\1\4\1"+
        "\27\1\21\1\45\1\36\1\13\1\42\1\14\1\6\1\17\1\22\1\0\1\34\1\20\1"+
        "\1\1\24\1\3\1\uffff}>";
    static final String[] DFA39_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\50\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_static.DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_static.DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_static.DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_static.DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_static.DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_static.DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()+ loopback of 88:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA39_36 = input.LA(1);

                         
                        int index39_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_36);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA39_39 = input.LA(1);

                         
                        int index39_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_39);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA39_41 = input.LA(1);

                         
                        int index39_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_41);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA39_33 = input.LA(1);

                         
                        int index39_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_33);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_32);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA39_34 = input.LA(1);

                         
                        int index39_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_34);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA39_38 = input.LA(1);

                         
                        int index39_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_38);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA39_35 = input.LA(1);

                         
                        int index39_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_35);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA39_40 = input.LA(1);

                         
                        int index39_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_40);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA39_37 = input.LA(1);

                         
                        int index39_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_37);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_31);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA41_static {
    static final String DFA41_eotS =
        "\13\uffff";
    static final String DFA41_eofS =
        "\1\1\12\uffff";
    static final String DFA41_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA41_maxS =
        "\1\u00b3\1\uffff\4\45\4\0\1\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA41_specialS =
        "\6\uffff\1\2\1\1\1\0\1\3\1\uffff}>";
    static final String[] DFA41_transitionS = {
            "\175\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_static.DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_static.DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_static.DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_static.DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_static.DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_static.DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 88:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\17\uffff";
    static final String DFA42_eofS =
        "\1\7\16\uffff";
    static final String DFA42_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b3\6\45\1\uffff\6\0\1\uffff";
    static final String DFA42_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA42_specialS =
        "\10\uffff\1\3\1\0\1\2\1\1\1\5\1\4\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\150\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "88:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA48_static {
    static final String DFA48_eotS =
        "\u0091\uffff";
    static final String DFA48_eofS =
        "\1\13\u0090\uffff";
    static final String DFA48_minS =
        "\1\46\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\26\uffff\1\0\2\uffff"+
        "\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA48_maxS =
        "\1\u00b3\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\26\uffff\1\0"+
        "\2\uffff\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA48_acceptS =
        "\13\uffff\1\2\u0084\uffff\1\1";
    static final String DFA48_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\3\uffff\1\14\1\uffff\1\15\26\uffff\1\16\2\uffff\1\17\36\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\117\1\120\1\116\1\124\1\125"+
            "\1\134\1\135\1\121\1\133\1\126\1\130\1\122\1\123\1\132\1\131"+
            "\1\127\1\13\1\52\7\13\1\55\74\13\1\15\1\13\1\u0086\10\13\1\14"+
            "\1\23\1\21\2\13\1\115\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\114\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_static.DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_static.DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_static.DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_static.DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_static.DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_static.DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 88:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA48_4 = input.LA(1);

                         
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA48_5 = input.LA(1);

                         
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA48_6 = input.LA(1);

                         
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA48_7 = input.LA(1);

                         
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA48_17 = input.LA(1);

                         
                        int index48_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA48_19 = input.LA(1);

                         
                        int index48_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA48_42 = input.LA(1);

                         
                        int index48_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_42);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA48_45 = input.LA(1);

                         
                        int index48_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_45);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA48_76 = input.LA(1);

                         
                        int index48_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_76);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA48_77 = input.LA(1);

                         
                        int index48_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_77);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA48_78 = input.LA(1);

                         
                        int index48_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_78);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA48_79 = input.LA(1);

                         
                        int index48_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_79);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA48_80 = input.LA(1);

                         
                        int index48_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_80);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA48_81 = input.LA(1);

                         
                        int index48_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_81);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA48_82 = input.LA(1);

                         
                        int index48_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_82);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA48_83 = input.LA(1);

                         
                        int index48_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_83);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA48_84 = input.LA(1);

                         
                        int index48_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_84);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA48_85 = input.LA(1);

                         
                        int index48_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_85);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA48_86 = input.LA(1);

                         
                        int index48_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_86);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA48_87 = input.LA(1);

                         
                        int index48_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_87);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA48_88 = input.LA(1);

                         
                        int index48_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_88);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA48_89 = input.LA(1);

                         
                        int index48_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_89);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA48_90 = input.LA(1);

                         
                        int index48_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_90);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA48_91 = input.LA(1);

                         
                        int index48_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_91);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA48_92 = input.LA(1);

                         
                        int index48_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_92);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA48_93 = input.LA(1);

                         
                        int index48_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_93);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA48_134 = input.LA(1);

                         
                        int index48_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_134);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\60\uffff";
    static final String DFA49_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA49_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA49_maxS =
        "\1\u00af\11\uffff\1\45\36\uffff\1\u00b3\1\uffff\1\45\1\u00b3\1"+
        "\45\1\0\1\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA49_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\50\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\152\52\1\53\43\52",
            "",
            "\1\54",
            "\72\52\1\55\123\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "89:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA51_static {
    static final String DFA51_eotS =
        "\123\uffff";
    static final String DFA51_eofS =
        "\123\uffff";
    static final String DFA51_minS =
        "\1\46\2\uffff\14\0\1\uffff\5\0\2\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\67\uffff";
    static final String DFA51_maxS =
        "\1\u00b3\2\uffff\14\0\1\uffff\5\0\2\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\67\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\1\1\2\14\uffff\1\6\6\uffff\1\10\1\uffff\1\11\1\uffff"+
        "\1\13\1\uffff\1\15\1\16\1\20\1\23\1\24\1\25\1\26\1\31\1\33\1\35"+
        "\1\36\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\53\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\5\uffff\1\65\1\66\1\67\1\70\1\3\1"+
        "\5\1\7\1\27\1\55\1\4\1\22\1\54\1\32\1\37\1\17\1\30\1\12\1\14\1\52"+
        "\1\34\1\21";
    static final String DFA51_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\uffff\1\14\1\15\1\16\1\17\1\20\2\uffff\1\21\1\uffff\1\22\1\uffff"+
        "\1\23\67\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\7\1\13\1\15\1\101\1\37\1\42\1\uffff\1\14\1\26\20\uffff\1"+
            "\23\1\40\1\uffff\1\45\1\uffff\1\41\1\46\1\55\1\22\1\43\1\6\1"+
            "\44\1\31\1\32\1\20\1\47\1\50\1\51\1\52\1\53\1\33\1\16\4\uffff"+
            "\1\21\1\60\11\uffff\1\17\1\uffff\1\54\4\uffff\1\61\1\uffff\1"+
            "\62\1\uffff\1\63\5\uffff\1\64\1\uffff\1\56\3\uffff\1\65\1\uffff"+
            "\1\36\1\57\3\uffff\1\30\2\uffff\1\4\5\uffff\1\27\2\uffff\1\3"+
            "\2\uffff\1\5\1\17\1\70\1\66\1\uffff\1\10\1\11\1\12\1\76\1\uffff"+
            "\1\24\1\34\1\35\1\77\1\70\1\100\1\1\1\2\4\uffff\1\67\10\uffff"+
            "\4\70",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_static.DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_static.DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_static.DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_static.DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_static.DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_static.DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "96:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA51_3 = input.LA(1);

                         
                        int index51_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 68;}

                        else if ( ((synpred177_ChemicalChunker()||(synpred177_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 22;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA51_4 = input.LA(1);

                         
                        int index51_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index51_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA51_5 = input.LA(1);

                         
                        int index51_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 68;}

                        else if ( ((synpred177_ChemicalChunker()||(synpred177_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 22;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index51_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA51_6 = input.LA(1);

                         
                        int index51_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index51_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA51_7 = input.LA(1);

                         
                        int index51_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( ((synpred177_ChemicalChunker()||(synpred177_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 22;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index51_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA51_8 = input.LA(1);

                         
                        int index51_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA51_9 = input.LA(1);

                         
                        int index51_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA51_10 = input.LA(1);

                         
                        int index51_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA51_11 = input.LA(1);

                         
                        int index51_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA51_12 = input.LA(1);

                         
                        int index51_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA51_13 = input.LA(1);

                         
                        int index51_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA51_14 = input.LA(1);

                         
                        int index51_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA51_16 = input.LA(1);

                         
                        int index51_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index51_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA51_17 = input.LA(1);

                         
                        int index51_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred184_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index51_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA51_18 = input.LA(1);

                         
                        int index51_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index51_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA51_19 = input.LA(1);

                         
                        int index51_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index51_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA51_20 = input.LA(1);

                         
                        int index51_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 26;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index51_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA51_23 = input.LA(1);

                         
                        int index51_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred177_ChemicalChunker()||(synpred177_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 22;}

                        else if ( (synpred211_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index51_23);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA51_25 = input.LA(1);

                         
                        int index51_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 26;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index51_25);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA51_27 = input.LA(1);

                         
                        int index51_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 26;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index51_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA53_static {
    static final String DFA53_eotS =
        "\45\uffff";
    static final String DFA53_eofS =
        "\45\uffff";
    static final String DFA53_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA53_maxS =
        "\1\u00a8\36\0\6\uffff";
    static final String DFA53_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA53_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\110\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_static.DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_static.DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_static.DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_static.DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_static.DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_static.DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "101:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA53_1 = input.LA(1);

                         
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA53_3 = input.LA(1);

                         
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA53_4 = input.LA(1);

                         
                        int index53_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA53_5 = input.LA(1);

                         
                        int index53_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA53_6 = input.LA(1);

                         
                        int index53_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA53_7 = input.LA(1);

                         
                        int index53_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA53_8 = input.LA(1);

                         
                        int index53_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA53_9 = input.LA(1);

                         
                        int index53_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA53_10 = input.LA(1);

                         
                        int index53_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA53_11 = input.LA(1);

                         
                        int index53_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA53_12 = input.LA(1);

                         
                        int index53_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA53_14 = input.LA(1);

                         
                        int index53_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA53_15 = input.LA(1);

                         
                        int index53_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA53_16 = input.LA(1);

                         
                        int index53_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA53_17 = input.LA(1);

                         
                        int index53_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA53_18 = input.LA(1);

                         
                        int index53_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA53_19 = input.LA(1);

                         
                        int index53_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA53_20 = input.LA(1);

                         
                        int index53_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA53_21 = input.LA(1);

                         
                        int index53_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA53_22 = input.LA(1);

                         
                        int index53_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA53_23 = input.LA(1);

                         
                        int index53_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA53_24 = input.LA(1);

                         
                        int index53_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA53_25 = input.LA(1);

                         
                        int index53_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA53_26 = input.LA(1);

                         
                        int index53_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA53_27 = input.LA(1);

                         
                        int index53_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA53_28 = input.LA(1);

                         
                        int index53_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA53_29 = input.LA(1);

                         
                        int index53_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA53_30 = input.LA(1);

                         
                        int index53_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA55_static {
    static final String DFA55_eotS =
        "\17\uffff";
    static final String DFA55_eofS =
        "\17\uffff";
    static final String DFA55_minS =
        "\1\46\1\uffff\6\45\1\uffff\6\0";
    static final String DFA55_maxS =
        "\1\u00a6\1\uffff\6\45\1\uffff\6\0";
    static final String DFA55_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA55_specialS =
        "\11\uffff\1\1\1\0\1\4\1\5\1\2\1\3}>";
    static final String[] DFA55_transitionS = {
            "\1\1\1\5\1\7\4\uffff\1\6\33\uffff\1\1\12\uffff\1\1\60\uffff"+
            "\1\1\10\uffff\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4"+
            "\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_static.DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_static.DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_static.DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_static.DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_static.DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_static.DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_static.DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_static.DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "()* loopback of 107:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA55_10 = input.LA(1);

                         
                        int index55_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA55_9 = input.LA(1);

                         
                        int index55_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA55_13 = input.LA(1);

                         
                        int index55_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA55_14 = input.LA(1);

                         
                        int index55_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA55_11 = input.LA(1);

                         
                        int index55_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA55_12 = input.LA(1);

                         
                        int index55_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 55, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA57_static {
    static final String DFA57_eotS =
        "\27\uffff";
    static final String DFA57_eofS =
        "\27\uffff";
    static final String DFA57_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA57_maxS =
        "\1\u00a8\1\uffff\12\45\12\0\1\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA57_specialS =
        "\14\uffff\1\6\1\3\1\4\1\1\1\0\1\2\1\7\1\5\1\10\1\11\1\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\120\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_static.DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_static.DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_static.DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_static.DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_static.DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_static.DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_static.DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_static.DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 113:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA57_16 = input.LA(1);

                         
                        int index57_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA57_15 = input.LA(1);

                         
                        int index57_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA57_17 = input.LA(1);

                         
                        int index57_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA57_13 = input.LA(1);

                         
                        int index57_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA57_14 = input.LA(1);

                         
                        int index57_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA57_19 = input.LA(1);

                         
                        int index57_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA57_12 = input.LA(1);

                         
                        int index57_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA57_18 = input.LA(1);

                         
                        int index57_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA57_20 = input.LA(1);

                         
                        int index57_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_20);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA57_21 = input.LA(1);

                         
                        int index57_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA63_static {
    static final String DFA63_eotS =
        "\27\uffff";
    static final String DFA63_eofS =
        "\27\uffff";
    static final String DFA63_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA63_maxS =
        "\1\u00a8\12\45\1\uffff\12\0\1\uffff";
    static final String DFA63_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA63_specialS =
        "\14\uffff\1\10\1\1\1\2\1\0\1\3\1\6\1\7\1\5\1\11\1\4\1\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\110\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_static.DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_static.DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_static.DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_static.DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_static.DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_static.DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_static.DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_static.DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "118:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA63_15 = input.LA(1);

                         
                        int index63_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA63_13 = input.LA(1);

                         
                        int index63_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA63_14 = input.LA(1);

                         
                        int index63_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA63_16 = input.LA(1);

                         
                        int index63_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA63_21 = input.LA(1);

                         
                        int index63_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_21);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA63_19 = input.LA(1);

                         
                        int index63_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA63_17 = input.LA(1);

                         
                        int index63_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_17);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA63_18 = input.LA(1);

                         
                        int index63_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA63_12 = input.LA(1);

                         
                        int index63_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_12);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA63_20 = input.LA(1);

                         
                        int index63_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\u0091\uffff";
    static final String DFA75_eofS =
        "\1\1\u0090\uffff";
    static final String DFA75_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\164\uffff";
    static final String DFA75_maxS =
        "\1\u00b3\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\164\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA75_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\164\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\25\1\10\1\12\4\1\1\11\21\1\1\32\7\1\1\31\1\1\1\24\3\1\1"+
            "\26\6\1\1\30\4\1\1\27\12\1\1\34\40\1\1\15\10\1\1\22\1\1\1\14"+
            "\1\23\1\21\3\1\1\5\1\6\1\7\2\1\1\33\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 139:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_5 = input.LA(1);

                         
                        int index75_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA75_7 = input.LA(1);

                         
                        int index75_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA75_9 = input.LA(1);

                         
                        int index75_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA75_12 = input.LA(1);

                         
                        int index75_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA75_13 = input.LA(1);

                         
                        int index75_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA75_17 = input.LA(1);

                         
                        int index75_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA75_18 = input.LA(1);

                         
                        int index75_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA75_19 = input.LA(1);

                         
                        int index75_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA75_20 = input.LA(1);

                         
                        int index75_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA75_21 = input.LA(1);

                         
                        int index75_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_21);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA75_22 = input.LA(1);

                         
                        int index75_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA75_23 = input.LA(1);

                         
                        int index75_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_23);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA75_24 = input.LA(1);

                         
                        int index75_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_24);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA75_25 = input.LA(1);

                         
                        int index75_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA75_26 = input.LA(1);

                         
                        int index75_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA75_27 = input.LA(1);

                         
                        int index75_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_27);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA75_28 = input.LA(1);

                         
                        int index75_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA74_static {
    static final String DFA74_eotS =
        "\25\uffff";
    static final String DFA74_eofS =
        "\25\uffff";
    static final String DFA74_minS =
        "\1\46\15\uffff\1\0\6\uffff";
    static final String DFA74_maxS =
        "\1\u009b\15\uffff\1\0\6\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA74_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA74_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\10\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_static.DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_static.DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_static.DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_static.DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_static.DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_static.DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_static.DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_static.DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "()* loopback of 139:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA74_14 = input.LA(1);

                         
                        int index74_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index74_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\33\uffff";
    static final String DFA81_eofS =
        "\1\1\32\uffff";
    static final String DFA81_minS =
        "\1\46\1\uffff\21\0\10\uffff";
    static final String DFA81_maxS =
        "\1\u009b\1\uffff\21\0\10\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\11\21\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA81_specialS =
        "\2\uffff\1\20\1\13\1\3\1\11\1\5\1\1\1\7\1\14\1\17\1\6\1\0\1\10"+
        "\1\4\1\12\1\16\1\2\1\15\10\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\5\1\11\1\13\4\uffff\1\12\21\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\17\4\uffff\1\15\12\uffff\1\1\40"+
            "\uffff\1\16\10\uffff\1\2\2\uffff\1\3\4\uffff\1\6\1\7\1\10\2"+
            "\uffff\1\22",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()+ loopback of 146:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_12 = input.LA(1);

                         
                        int index81_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_7 = input.LA(1);

                         
                        int index81_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_4 = input.LA(1);

                         
                        int index81_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_14 = input.LA(1);

                         
                        int index81_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_14);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_6 = input.LA(1);

                         
                        int index81_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_11 = input.LA(1);

                         
                        int index81_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_11);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA81_8 = input.LA(1);

                         
                        int index81_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA81_13 = input.LA(1);

                         
                        int index81_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_13);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA81_5 = input.LA(1);

                         
                        int index81_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_5);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_15);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA81_3 = input.LA(1);

                         
                        int index81_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_3);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA81_9 = input.LA(1);

                         
                        int index81_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_9);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA81_18 = input.LA(1);

                         
                        int index81_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_18);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA81_16 = input.LA(1);

                         
                        int index81_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_16);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA81_10 = input.LA(1);

                         
                        int index81_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA81_2 = input.LA(1);

                         
                        int index81_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA84_static {
    static final String DFA84_eotS =
        "\17\uffff";
    static final String DFA84_eofS =
        "\1\7\16\uffff";
    static final String DFA84_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA84_maxS =
        "\1\u00b3\6\45\1\uffff\6\0\1\uffff";
    static final String DFA84_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA84_specialS =
        "\10\uffff\1\3\1\4\1\5\1\1\1\0\1\2\1\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\150\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_static.DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_static.DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_static.DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_static.DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_static.DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_static.DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "150:46: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA84_12 = input.LA(1);

                         
                        int index84_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA84_11 = input.LA(1);

                         
                        int index84_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA84_13 = input.LA(1);

                         
                        int index84_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\u0091\uffff";
    static final String DFA85_eofS =
        "\1\4\u0090\uffff";
    static final String DFA85_minS =
        "\1\46\3\0\u008d\uffff";
    static final String DFA85_maxS =
        "\1\u00b3\3\0\u008d\uffff";
    static final String DFA85_acceptS =
        "\4\uffff\1\2\u008b\uffff\1\1";
    static final String DFA85_specialS =
        "\1\uffff\1\0\1\1\1\2\u008d\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\1\144\4\1\3\2\4\1\2\45\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "150:51: ( alphanumericOrBrackettedCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_1 = input.LA(1);

                         
                        int index85_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index85_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_2 = input.LA(1);

                         
                        int index85_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index85_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_3 = input.LA(1);

                         
                        int index85_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index85_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA86_static {
    static final String DFA86_eotS =
        "\13\uffff";
    static final String DFA86_eofS =
        "\3\uffff\1\4\7\uffff";
    static final String DFA86_minS =
        "\1\124\1\45\1\uffff\1\46\1\uffff\3\45\3\0";
    static final String DFA86_maxS =
        "\1\u008e\1\45\1\uffff\1\u00b3\1\uffff\3\45\3\0";
    static final String DFA86_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\6\uffff";
    static final String DFA86_specialS =
        "\10\uffff\1\2\1\1\1\0}>";
    static final String[] DFA86_transitionS = {
            "\1\1\71\uffff\1\2",
            "\1\3",
            "",
            "\56\4\1\6\61\4\1\7\1\4\1\5\53\4",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_static.DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_static.DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_static.DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_static.DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_static.DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_static.DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "152:1: oscarCompoundStructure : ( nestedOscarCM | oscarcm );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA86_10 = input.LA(1);

                         
                        int index86_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index86_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA86_9 = input.LA(1);

                         
                        int index86_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index86_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA86_8 = input.LA(1);

                         
                        int index86_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index86_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA95_static {
    static final String DFA95_eotS =
        "\17\uffff";
    static final String DFA95_eofS =
        "\17\uffff";
    static final String DFA95_minS =
        "\1\46\5\0\11\uffff";
    static final String DFA95_maxS =
        "\1\u0098\5\0\11\uffff";
    static final String DFA95_acceptS =
        "\6\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA95_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\11\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\4\2\6\4\uffff\1\6\33\uffff\1\3\12\uffff\1\6\60\uffff\1\5"+
            "\10\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_static.DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_static.DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_static.DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_static.DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_static.DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_static.DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_static.DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_static.DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "160:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA95_1 = input.LA(1);

                         
                        int index95_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index95_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA95_2 = input.LA(1);

                         
                        int index95_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index95_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA95_3 = input.LA(1);

                         
                        int index95_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index95_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA95_4 = input.LA(1);

                         
                        int index95_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index95_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA95_5 = input.LA(1);

                         
                        int index95_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred282_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index95_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA98_static {
    static final String DFA98_eotS =
        "\13\uffff";
    static final String DFA98_eofS =
        "\13\uffff";
    static final String DFA98_minS =
        "\1\47\1\uffff\1\0\10\uffff";
    static final String DFA98_maxS =
        "\1\u0098\1\uffff\1\0\10\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\6\uffff";
    static final String DFA98_specialS =
        "\2\uffff\1\0\10\uffff}>";
    static final String[] DFA98_transitionS = {
            "\2\4\4\uffff\1\4\46\uffff\1\4\60\uffff\1\1\10\uffff\1\2\2\uffff"+
            "\1\1\4\uffff\3\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_static.DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_static.DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_static.DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_static.DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_static.DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_static.DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_static.DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "163:54: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA98_2 = input.LA(1);

                         
                        int index98_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index98_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA103_static {
    static final String DFA103_eotS =
        "\15\uffff";
    static final String DFA103_eofS =
        "\15\uffff";
    static final String DFA103_minS =
        "\1\46\7\uffff\2\0\3\uffff";
    static final String DFA103_maxS =
        "\1\u0098\7\uffff\2\0\3\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\uffff\1\2";
    static final String DFA103_specialS =
        "\10\uffff\1\0\1\1\3\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\12\2\1\4\uffff\1\1\33\uffff\1\12\12\uffff\1\1\60\uffff\1"+
            "\14\10\uffff\1\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_static.DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_static.DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_static.DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_static.DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_static.DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_static.DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "()* loopback of 169:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA103_8 = input.LA(1);

                         
                        int index103_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index103_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA103_9 = input.LA(1);

                         
                        int index103_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred294_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index103_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\13\uffff";
    static final String DFA104_eofS =
        "\1\1\12\uffff";
    static final String DFA104_minS =
        "\1\46\1\uffff\10\0\1\uffff";
    static final String DFA104_maxS =
        "\1\u00b3\1\uffff\10\0\1\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA104_specialS =
        "\2\uffff\1\6\1\4\1\1\1\7\1\2\1\5\1\0\1\3\1\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\1\1\6\1\10\4\1\1\7\46\1\1\11\71\1\1\2\7\1\1\3\1\4\1\5\33"+
            "\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()+ loopback of 169:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_8 = input.LA(1);

                         
                        int index104_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA104_4 = input.LA(1);

                         
                        int index104_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA104_6 = input.LA(1);

                         
                        int index104_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA104_9 = input.LA(1);

                         
                        int index104_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA104_3 = input.LA(1);

                         
                        int index104_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_3);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA104_7 = input.LA(1);

                         
                        int index104_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA104_2 = input.LA(1);

                         
                        int index104_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_2);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA104_5 = input.LA(1);

                         
                        int index104_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\u0091\uffff";
    static final String DFA107_eofS =
        "\1\6\u0090\uffff";
    static final String DFA107_minS =
        "\1\46\5\0\u008b\uffff";
    static final String DFA107_maxS =
        "\1\u00b3\5\0\u008b\uffff";
    static final String DFA107_acceptS =
        "\6\uffff\1\2\u0089\uffff\1\1";
    static final String DFA107_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008b\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\2\40\6\1\5\103\6\1\4\2\6\1\3\2\6\1\1\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "171:34: ( ( numericCompoundReference | nnchementity ) ( quantity )+ )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_2 = input.LA(1);

                         
                        int index107_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index107_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA107_4 = input.LA(1);

                         
                        int index107_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index107_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA107_5 = input.LA(1);

                         
                        int index107_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index107_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA106_static {
    static final String DFA106_eotS =
        "\u0091\uffff";
    static final String DFA106_eofS =
        "\1\2\u0090\uffff";
    static final String DFA106_minS =
        "\1\46\1\0\1\uffff\3\0\u008b\uffff";
    static final String DFA106_maxS =
        "\1\u00b3\1\0\1\uffff\3\0\u008b\uffff";
    static final String DFA106_acceptS =
        "\2\uffff\1\2\u008d\uffff\1\1";
    static final String DFA106_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\u008b\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\5\42\2\1\4\104\2\1\1\2\2\1\3\42\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_static.DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_static.DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_static.DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_static.DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_static.DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_static.DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "()+ loopback of 171:74: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA106_3 = input.LA(1);

                         
                        int index106_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA106_4 = input.LA(1);

                         
                        int index106_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA106_5 = input.LA(1);

                         
                        int index106_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA109_static {
    static final String DFA109_eotS =
        "\u0094\uffff";
    static final String DFA109_eofS =
        "\1\1\u0093\uffff";
    static final String DFA109_minS =
        "\1\46\2\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA109_maxS =
        "\1\u00b3\2\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA109_acceptS =
        "\1\uffff\1\5\u008e\uffff\1\1\1\3\1\4\1\2";
    static final String DFA109_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0081\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\22\42\1\1\21\73\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_static.DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_static.DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_static.DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_static.DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_static.DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_static.DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "()* loopback of 171:85: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA109_3 = input.LA(1);

                         
                        int index109_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred303_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA109_15 = input.LA(1);

                         
                        int index109_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred303_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA109_16 = input.LA(1);

                         
                        int index109_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred303_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA109_17 = input.LA(1);

                         
                        int index109_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA109_18 = input.LA(1);

                         
                        int index109_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA108_static {
    static final String DFA108_eotS =
        "\11\uffff";
    static final String DFA108_eofS =
        "\11\uffff";
    static final String DFA108_minS =
        "\1\u008e\1\45\1\46\1\uffff\1\45\1\uffff\1\54\1\45\1\101";
    static final String DFA108_maxS =
        "\1\u008e\1\45\1\u009d\1\uffff\1\45\1\uffff\1\u009d\1\45\1\u009d";
    static final String DFA108_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\3\uffff";
    static final String DFA108_specialS =
        "\11\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\1",
            "\1\2",
            "\1\5\42\uffff\1\5\73\uffff\1\3\12\uffff\1\3\1\4\2\uffff\1"+
            "\3\10\uffff\1\3",
            "",
            "\1\6",
            "",
            "\1\5\24\uffff\3\5\1\uffff\2\5\76\uffff\1\3\4\uffff\1\5\5\uffff"+
            "\1\3\1\7\2\uffff\1\3\6\uffff\1\5\1\uffff\1\3",
            "\1\10",
            "\3\5\1\uffff\2\5\76\uffff\1\3\11\uffff\2\3\1\7\2\uffff\1\3"+
            "\10\uffff\1\3"
    };
    }

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_static.DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_static.DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_static.DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_static.DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_static.DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_static.DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_static.DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_static.DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "171:110: ( quantity1Node | citationStructure )";
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\27\uffff";
    static final String DFA110_eofS =
        "\27\uffff";
    static final String DFA110_minS =
        "\1\46\1\uffff\4\45\1\uffff\1\46\2\0\1\46\4\45\2\46\2\u008c\2\45"+
        "\2\0";
    static final String DFA110_maxS =
        "\1\u0091\1\uffff\4\45\1\uffff\1\u00b3\2\0\1\u0091\4\45\2\u00b3"+
        "\2\u008c\2\45\2\0";
    static final String DFA110_acceptS =
        "\1\uffff\1\1\4\uffff\1\2\20\uffff";
    static final String DFA110_specialS =
        "\10\uffff\1\0\1\2\13\uffff\1\3\1\1}>";
    static final String[] DFA110_transitionS = {
            "\1\4\7\uffff\1\1\30\uffff\1\6\1\uffff\1\1\73\uffff\1\1\5\uffff"+
            "\1\5\2\uffff\1\2\2\uffff\1\3",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "",
            "\1\14\5\1\1\uffff\24\1\1\uffff\1\1\1\uffff\77\1\1\uffff\2"+
            "\1\2\uffff\4\1\2\uffff\1\1\2\uffff\1\13\21\1\4\uffff\2\1\1\uffff"+
            "\12\1",
            "\1\uffff",
            "\1\uffff",
            "\1\16\152\uffff\1\15",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\135\1\1\uffff\2\1\2\uffff\4\1\2\uffff\1\1\1\23\1\uffff\22"+
            "\1\4\uffff\2\1\1\uffff\12\1",
            "\6\1\1\uffff\24\1\1\uffff\1\1\1\uffff\77\1\1\uffff\2\1\2\uffff"+
            "\4\1\2\uffff\1\1\1\23\1\uffff\22\1\4\uffff\2\1\1\uffff\12\1",
            "\1\24",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "174:4: ( unnamedmoleculeamount | referenceToCompound )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_8 = input.LA(1);

                         
                        int index110_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 1;}

                        else if ( (("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))) ) {s = 6;}

                         
                        input.seek(index110_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_22 = input.LA(1);

                         
                        int index110_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 1;}

                        else if ( (("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))) ) {s = 6;}

                         
                        input.seek(index110_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_9 = input.LA(1);

                         
                        int index110_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 1;}

                        else if ( (("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))) ) {s = 6;}

                         
                        input.seek(index110_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_21 = input.LA(1);

                         
                        int index110_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 1;}

                        else if ( (("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))) ) {s = 6;}

                         
                        input.seek(index110_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\13\uffff";
    static final String DFA111_eofS =
        "\13\uffff";
    static final String DFA111_minS =
        "\1\46\1\uffff\4\0\5\uffff";
    static final String DFA111_maxS =
        "\1\u0091\1\uffff\4\0\5\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\1\4\uffff\1\3\1\6\1\2\1\5\1\4";
    static final String DFA111_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\5\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\5\7\uffff\1\1\32\uffff\1\4\73\uffff\1\7\5\uffff\1\6\2\uffff"+
            "\1\2\2\uffff\1\3",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "177:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\u0091\uffff";
    static final String DFA112_eofS =
        "\1\5\u0090\uffff";
    static final String DFA112_minS =
        "\1\46\4\0\u008c\uffff";
    static final String DFA112_maxS =
        "\1\u00b3\4\0\u008c\uffff";
    static final String DFA112_acceptS =
        "\5\uffff\1\2\u008a\uffff\1\1";
    static final String DFA112_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008c\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\144\5\1\4\2\5\1\3\2\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "180:31: ( numericCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_2 = input.LA(1);

                         
                        int index112_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\u0092\uffff";
    static final String DFA113_eofS =
        "\1\1\u0091\uffff";
    static final String DFA113_minS =
        "\1\46\2\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA113_maxS =
        "\1\u00b3\2\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\2\1\1";
    static final String DFA113_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\22\42\1\1\21\73\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:57: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_3 = input.LA(1);

                         
                        int index113_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA113_15 = input.LA(1);

                         
                        int index113_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA113_16 = input.LA(1);

                         
                        int index113_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA113_17 = input.LA(1);

                         
                        int index113_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA113_18 = input.LA(1);

                         
                        int index113_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA115_static {
    static final String DFA115_eotS =
        "\u0093\uffff";
    static final String DFA115_eofS =
        "\1\1\u0092\uffff";
    static final String DFA115_minS =
        "\1\46\2\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA115_maxS =
        "\1\u00b3\2\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\4\u008e\uffff\1\1\1\3\1\2";
    static final String DFA115_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0080\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\22\42\1\1\21\73\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_static.DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_static.DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_static.DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_static.DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_static.DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_static.DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "()* loopback of 186:46: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA115_3 = input.LA(1);

                         
                        int index115_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA115_15 = input.LA(1);

                         
                        int index115_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA115_16 = input.LA(1);

                         
                        int index115_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA115_17 = input.LA(1);

                         
                        int index115_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA115_18 = input.LA(1);

                         
                        int index115_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index115_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\12\uffff";
    static final String DFA117_eofS =
        "\12\uffff";
    static final String DFA117_minS =
        "\1\46\5\0\4\uffff";
    static final String DFA117_maxS =
        "\1\u0091\5\0\4\uffff";
    static final String DFA117_acceptS =
        "\6\uffff\1\1\1\2\1\3\1\4";
    static final String DFA117_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\4\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\4\42\uffff\1\3\73\uffff\1\5\10\uffff\1\1\2\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:28: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred320_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_3 = input.LA(1);

                         
                        int index117_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index117_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_4 = input.LA(1);

                         
                        int index117_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index117_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 6;}

                        else if ( (synpred321_ChemicalChunker()) ) {s = 8;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\u0093\uffff";
    static final String DFA118_eofS =
        "\1\1\u0092\uffff";
    static final String DFA118_minS =
        "\1\46\2\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA118_maxS =
        "\1\u00b3\2\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\4\u008e\uffff\1\1\1\3\1\2";
    static final String DFA118_specialS =
        "\3\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0080\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\22\42\1\1\21\73\1\1\3\10\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:66: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_3 = input.LA(1);

                         
                        int index118_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred324_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_15 = input.LA(1);

                         
                        int index118_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred323_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred324_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_16 = input.LA(1);

                         
                        int index118_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred324_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_17 = input.LA(1);

                         
                        int index118_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_17);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA120_static {
    static final String DFA120_eotS =
        "\104\uffff";
    static final String DFA120_eofS =
        "\1\1\103\uffff";
    static final String DFA120_minS =
        "\1\46\1\uffff\101\0\1\uffff";
    static final String DFA120_maxS =
        "\1\u00b3\1\uffff\101\0\1\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA120_specialS =
        "\2\uffff\1\31\1\26\1\40\1\1\1\15\1\50\1\20\1\51\1\56\1\24\1\13"+
        "\1\37\1\32\1\47\1\16\1\23\1\74\1\22\1\64\1\67\1\3\1\63\1\7\1\21"+
        "\1\25\1\42\1\41\1\76\1\0\1\14\1\5\1\34\1\43\1\73\1\66\1\57\1\11"+
        "\1\75\1\12\1\17\1\100\1\45\1\6\1\30\1\55\1\70\1\4\1\62\1\61\1\44"+
        "\1\27\1\46\1\65\1\60\1\33\1\10\1\36\1\72\1\2\1\35\1\71\1\54\1\77"+
        "\1\53\1\52\1\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\15\1\6\1\10\1\102\1\40\1\43\1\1\1\7\1\17\20\1\1\27\1\41"+
            "\1\1\1\46\1\1\1\42\1\47\1\56\1\21\1\44\1\14\1\45\1\33\1\34\1"+
            "\25\1\50\1\51\1\52\1\53\1\54\1\35\1\16\4\1\1\26\1\61\11\1\1"+
            "\31\1\1\1\55\4\1\1\62\1\1\1\63\1\1\1\64\5\1\1\65\1\1\1\57\3"+
            "\1\1\66\1\1\1\37\1\60\3\1\1\32\2\1\1\2\5\1\1\20\2\1\1\12\2\1"+
            "\1\13\1\24\1\74\1\67\1\1\1\3\1\4\1\5\1\77\1\1\1\30\1\36\1\11"+
            "\1\100\1\75\1\101\1\22\1\23\4\1\1\70\10\1\1\71\1\76\1\72\1\73",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_static.DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_static.DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_static.DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_static.DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_static.DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_static.DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()+ loopback of 198:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA120_30 = input.LA(1);

                         
                        int index120_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_30);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA120_5 = input.LA(1);

                         
                        int index120_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA120_60 = input.LA(1);

                         
                        int index120_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_60);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA120_22 = input.LA(1);

                         
                        int index120_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_22);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA120_48 = input.LA(1);

                         
                        int index120_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_48);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA120_32 = input.LA(1);

                         
                        int index120_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_32);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA120_44 = input.LA(1);

                         
                        int index120_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_44);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA120_24 = input.LA(1);

                         
                        int index120_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_24);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA120_57 = input.LA(1);

                         
                        int index120_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_57);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA120_38 = input.LA(1);

                         
                        int index120_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_38);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA120_40 = input.LA(1);

                         
                        int index120_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_40);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA120_12 = input.LA(1);

                         
                        int index120_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA120_31 = input.LA(1);

                         
                        int index120_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_31);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA120_6 = input.LA(1);

                         
                        int index120_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_6);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA120_16 = input.LA(1);

                         
                        int index120_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred326_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred326_ChemicalChunker())) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_16);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA120_41 = input.LA(1);

                         
                        int index120_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_41);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA120_8 = input.LA(1);

                         
                        int index120_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_8);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA120_25 = input.LA(1);

                         
                        int index120_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_25);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA120_19 = input.LA(1);

                         
                        int index120_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA120_17 = input.LA(1);

                         
                        int index120_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_17);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA120_11 = input.LA(1);

                         
                        int index120_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred326_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred326_ChemicalChunker())) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_11);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA120_26 = input.LA(1);

                         
                        int index120_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_26);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA120_3 = input.LA(1);

                         
                        int index120_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_3);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA120_52 = input.LA(1);

                         
                        int index120_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_52);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA120_45 = input.LA(1);

                         
                        int index120_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_45);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA120_2 = input.LA(1);

                         
                        int index120_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_2);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA120_14 = input.LA(1);

                         
                        int index120_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_14);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA120_56 = input.LA(1);

                         
                        int index120_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_56);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA120_33 = input.LA(1);

                         
                        int index120_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_33);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA120_61 = input.LA(1);

                         
                        int index120_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_61);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA120_58 = input.LA(1);

                         
                        int index120_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_58);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA120_13 = input.LA(1);

                         
                        int index120_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred326_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred326_ChemicalChunker())) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_13);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA120_4 = input.LA(1);

                         
                        int index120_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_4);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA120_28 = input.LA(1);

                         
                        int index120_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_28);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA120_27 = input.LA(1);

                         
                        int index120_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_27);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA120_34 = input.LA(1);

                         
                        int index120_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_34);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA120_51 = input.LA(1);

                         
                        int index120_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_51);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA120_43 = input.LA(1);

                         
                        int index120_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_43);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA120_53 = input.LA(1);

                         
                        int index120_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_53);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA120_15 = input.LA(1);

                         
                        int index120_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_15);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA120_7 = input.LA(1);

                         
                        int index120_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_7);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA120_9 = input.LA(1);

                         
                        int index120_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_9);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA120_66 = input.LA(1);

                         
                        int index120_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_66);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA120_65 = input.LA(1);

                         
                        int index120_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_65);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA120_63 = input.LA(1);

                         
                        int index120_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_63);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA120_46 = input.LA(1);

                         
                        int index120_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA120_10 = input.LA(1);

                         
                        int index120_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred326_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred326_ChemicalChunker())) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_10);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA120_37 = input.LA(1);

                         
                        int index120_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_37);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA120_55 = input.LA(1);

                         
                        int index120_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_55);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA120_50 = input.LA(1);

                         
                        int index120_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA120_49 = input.LA(1);

                         
                        int index120_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_49);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA120_23 = input.LA(1);

                         
                        int index120_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_23);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA120_20 = input.LA(1);

                         
                        int index120_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_20);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA120_54 = input.LA(1);

                         
                        int index120_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA120_36 = input.LA(1);

                         
                        int index120_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_36);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA120_21 = input.LA(1);

                         
                        int index120_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_21);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA120_47 = input.LA(1);

                         
                        int index120_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_47);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA120_62 = input.LA(1);

                         
                        int index120_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_62);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA120_59 = input.LA(1);

                         
                        int index120_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA120_35 = input.LA(1);

                         
                        int index120_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_35);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA120_18 = input.LA(1);

                         
                        int index120_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_18);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA120_39 = input.LA(1);

                         
                        int index120_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_39);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA120_29 = input.LA(1);

                         
                        int index120_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_29);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA120_64 = input.LA(1);

                         
                        int index120_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA120_42 = input.LA(1);

                         
                        int index120_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\u0091\uffff";
    static final String DFA128_eofS =
        "\1\1\u0090\uffff";
    static final String DFA128_minS =
        "\1\46\2\uffff\1\0\u008d\uffff";
    static final String DFA128_maxS =
        "\1\u00b3\2\uffff\1\0\u008d\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\2\u008e\uffff\1\1";
    static final String DFA128_specialS =
        "\3\uffff\1\0\u008d\uffff}>";
    static final String[] DFA128_transitionS = {
            "\137\1\1\3\56\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()* loopback of 222:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_3 = input.LA(1);

                         
                        int index128_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index128_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u0091\uffff";
    static final String DFA132_eofS =
        "\1\4\u0090\uffff";
    static final String DFA132_minS =
        "\1\46\3\0\u008d\uffff";
    static final String DFA132_maxS =
        "\1\u00b3\3\0\u008d\uffff";
    static final String DFA132_acceptS =
        "\4\uffff\1\2\u008b\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\1\1\1\2\u008d\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\3\42\4\1\2\107\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "226:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_2 = input.LA(1);

                         
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 144;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA133_static {
    static final String DFA133_eotS =
        "\25\uffff";
    static final String DFA133_eofS =
        "\20\uffff\1\22\4\uffff";
    static final String DFA133_minS =
        "\1\46\1\45\1\uffff\1\45\1\101\1\u008a\1\uffff\3\45\4\uffff\1\101"+
        "\1\u008a\1\46\1\45\1\uffff\1\0\1\uffff";
    static final String DFA133_maxS =
        "\1\u0091\1\45\1\uffff\1\45\2\u009b\1\uffff\3\45\4\uffff\1\u0091"+
        "\1\u008a\1\u00b3\1\45\1\uffff\1\0\1\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\5\3\uffff\1\4\3\uffff\1\6\1\3\1\2\1\1\4\uffff\1\10\1"+
        "\uffff\1\7";
    static final String DFA133_specialS =
        "\23\uffff\1\0\1\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\42\uffff\1\2\107\uffff\1\1",
            "\1\4",
            "",
            "\1\5",
            "\1\13\1\14\1\15\1\uffff\1\12\1\6\103\uffff\1\11\6\uffff\1"+
            "\7\11\uffff\1\10",
            "\1\11\20\uffff\1\10",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "",
            "",
            "",
            "\1\13\1\14\1\15\1\uffff\1\12\1\6\112\uffff\1\7",
            "\1\11",
            "\134\22\1\21\61\22",
            "\1\23",
            "",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_static.DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_static.DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_static.DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_static.DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_static.DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_static.DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_static.DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "227:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA133_19 = input.LA(1);

                         
                        int index133_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index133_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA142_static {
    static final String DFA142_eotS =
        "\u008d\uffff";
    static final String DFA142_eofS =
        "\u008d\uffff";
    static final String DFA142_minS =
        "\1\46\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\15\0\1\uffff\1\0\116"+
        "\uffff";
    static final String DFA142_maxS =
        "\1\u00b3\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\15\0\1\uffff\1\0"+
        "\116\uffff";
    static final String DFA142_acceptS =
        "\2\uffff\1\2\53\uffff\1\5\1\6\15\uffff\1\13\1\uffff\1\16\55\uffff"+
        "\1\17\21\uffff\1\23\1\1\1\3\1\4\1\11\1\12\1\15\1\20\1\7\1\24\1\10"+
        "\1\22\1\21\1\14";
    static final String DFA142_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\116\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\55\1\64\1\66\3\77\1\uffff\1\65\1\72\20\155\2\77\1\uffff"+
            "\1\77\1\uffff\3\77\1\74\1\77\1\54\12\77\1\67\4\2\2\77\11\2\1"+
            "\77\1\2\1\77\4\2\1\77\1\2\1\77\1\2\1\77\5\2\1\77\1\2\1\77\3"+
            "\2\1\77\1\2\1\45\1\77\3\2\1\77\1\uffff\1\177\1\71\2\uffff\1"+
            "\75\1\60\1\57\1\73\2\uffff\1\70\2\uffff\1\53\2\77\1\1\1\155"+
            "\1\61\1\62\1\63\1\77\1\56\1\52\7\77\4\uffff\1\76\1\155\1\uffff"+
            "\6\2\4\77",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_static.DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_static.DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_static.DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_static.DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_static.DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_static.DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "247:19: ( fw | verb | nn | quantity2Node | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA142_1 = input.LA(1);

                         
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA142_37 = input.LA(1);

                         
                        int index142_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA142_42 = input.LA(1);

                         
                        int index142_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA142_43 = input.LA(1);

                         
                        int index142_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (((synpred364_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred364_ChemicalChunker())) ) {s = 132;}

                        else if ( (synpred367_ChemicalChunker()) ) {s = 133;}

                        else if ( (((synpred368_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred368_ChemicalChunker())) ) {s = 63;}

                        else if ( (synpred370_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index142_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA142_44 = input.LA(1);

                         
                        int index142_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA142_45 = input.LA(1);

                         
                        int index142_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred358_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (((synpred364_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred364_ChemicalChunker())) ) {s = 132;}

                        else if ( (((synpred368_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred368_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index142_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA142_48 = input.LA(1);

                         
                        int index142_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 136;}

                         
                        input.seek(index142_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA142_49 = input.LA(1);

                         
                        int index142_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index142_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA142_50 = input.LA(1);

                         
                        int index142_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index142_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA142_51 = input.LA(1);

                         
                        int index142_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index142_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA142_52 = input.LA(1);

                         
                        int index142_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index142_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA142_53 = input.LA(1);

                         
                        int index142_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index142_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA142_54 = input.LA(1);

                         
                        int index142_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred372_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index142_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA142_55 = input.LA(1);

                         
                        int index142_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA142_56 = input.LA(1);

                         
                        int index142_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (((synpred364_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred364_ChemicalChunker())) ) {s = 132;}

                        else if ( (((synpred368_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred368_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index142_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA142_57 = input.LA(1);

                         
                        int index142_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred363_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred364_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred371_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index142_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA142_58 = input.LA(1);

                         
                        int index142_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA142_59 = input.LA(1);

                         
                        int index142_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred364_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred364_ChemicalChunker())) ) {s = 132;}

                        else if ( (((synpred368_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred368_ChemicalChunker())) ) {s = 63;}

                         
                        input.seek(index142_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA142_60 = input.LA(1);

                         
                        int index142_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred364_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA142_62 = input.LA(1);

                         
                        int index142_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index142_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA143_static {
    static final String DFA143_eotS =
        "\u008f\uffff";
    static final String DFA143_eofS =
        "\u008f\uffff";
    static final String DFA143_minS =
        "\1\46\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\117\uffff";
    static final String DFA143_maxS =
        "\1\u00b3\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\117\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\26\3\uffff\1\3\53\uffff\1\6\1\7\13\uffff\1\14\1\uffff"+
        "\1\17\55\uffff\1\20\21\uffff\1\24\1\1\1\12\1\13\1\22\1\11\1\2\1"+
        "\4\1\16\1\21\1\5\1\10\1\25\1\23\1\15";
    static final String DFA143_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\117\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\57\1\67\1\71\3\100\1\uffff\1\70\1\73\20\156\2\100\1\uffff"+
            "\1\100\1\uffff\3\100\1\75\1\100\1\56\12\100\1\72\4\5\2\100\11"+
            "\5\1\100\1\5\1\100\4\5\1\100\1\5\1\100\1\5\1\100\5\5\1\100\1"+
            "\5\1\100\3\5\1\100\1\5\1\50\1\100\3\5\1\60\1\uffff\1\u0080\1"+
            "\2\2\uffff\1\76\1\63\1\62\1\74\2\uffff\1\3\1\1\1\uffff\1\55"+
            "\2\100\1\4\1\156\1\64\1\65\1\66\1\100\1\61\10\100\4\uffff\1"+
            "\77\1\156\1\uffff\6\5\4\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_static.DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_static.DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_static.DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_static.DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_static.DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_static.DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()+ loopback of 247:150: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred374_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred384_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred374_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (((synpred384_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred384_ChemicalChunker())) ) {s = 131;}

                        else if ( ((synpred388_ChemicalChunker()||(synpred388_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 64;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA143_4 = input.LA(1);

                         
                        int index143_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA143_40 = input.LA(1);

                         
                        int index143_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred376_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA143_45 = input.LA(1);

                         
                        int index143_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (((synpred384_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred384_ChemicalChunker())) ) {s = 131;}

                        else if ( (synpred387_ChemicalChunker()) ) {s = 136;}

                        else if ( ((synpred388_ChemicalChunker()||(synpred388_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 64;}

                        else if ( (synpred390_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index143_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA143_46 = input.LA(1);

                         
                        int index143_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred384_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA143_47 = input.LA(1);

                         
                        int index143_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred377_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (((synpred384_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred384_ChemicalChunker())) ) {s = 131;}

                        else if ( ((synpred388_ChemicalChunker()||(synpred388_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 64;}

                         
                        input.seek(index143_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA143_48 = input.LA(1);

                         
                        int index143_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA143_51 = input.LA(1);

                         
                        int index143_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred381_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred394_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index143_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA143_52 = input.LA(1);

                         
                        int index143_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index143_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA143_53 = input.LA(1);

                         
                        int index143_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index143_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA143_54 = input.LA(1);

                         
                        int index143_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index143_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA143_55 = input.LA(1);

                         
                        int index143_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index143_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA143_56 = input.LA(1);

                         
                        int index143_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index143_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA143_57 = input.LA(1);

                         
                        int index143_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index143_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA143_58 = input.LA(1);

                         
                        int index143_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred383_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA143_59 = input.LA(1);

                         
                        int index143_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA143_60 = input.LA(1);

                         
                        int index143_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred384_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null)))||synpred384_ChemicalChunker())) ) {s = 131;}

                        else if ( ((synpred388_ChemicalChunker()||(synpred388_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 64;}

                         
                        input.seek(index143_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA143_61 = input.LA(1);

                         
                        int index143_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA143_63 = input.LA(1);

                         
                        int index143_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred388_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index143_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\13\uffff";
    static final String DFA153_eofS =
        "\13\uffff";
    static final String DFA153_minS =
        "\1\46\1\45\1\uffff\1\46\1\45\1\46\2\45\2\0\1\uffff";
    static final String DFA153_maxS =
        "\1\u00b3\1\45\1\uffff\1\u009b\1\45\1\u00b3\2\45\2\0\1\uffff";
    static final String DFA153_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA153_specialS =
        "\10\uffff\1\1\1\0\1\uffff}>";
    static final String[] DFA153_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\21\2\4\uffff"+
            "\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\1\3\2\1\uffff"+
            "\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\3",
            "",
            "\3\2\3\uffff\2\2\23\uffff\3\2\1\uffff\2\2\2\uffff\1\2\7\uffff"+
            "\1\2\62\uffff\1\4\1\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2"+
            "\uffff\1\2\4\uffff\3\2\2\uffff\1\2",
            "\1\5",
            "\1\7\5\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\21\2"+
            "\4\uffff\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1"+
            "\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\6\3\2\1\uffff\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "263:9: ( numericratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_9 = input.LA(1);

                         
                        int index153_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index153_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA153_8 = input.LA(1);

                         
                        int index153_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index153_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA167_static {
    static final String DFA167_eotS =
        "\107\uffff";
    static final String DFA167_eofS =
        "\107\uffff";
    static final String DFA167_minS =
        "\1\46\17\uffff\1\0\66\uffff";
    static final String DFA167_maxS =
        "\1\u00b3\17\uffff\1\0\66\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\2\104\uffff\1\1";
    static final String DFA167_specialS =
        "\20\uffff\1\0\66\uffff}>";
    static final String[] DFA167_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\2\uffff\1\1\1\uffff\1\106\4\1"+
            "\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_static.DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_static.DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_static.DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_static.DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_static.DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_static.DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_static.DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_static.DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "()* loopback of 78:65: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA167_16 = input.LA(1);

                         
                        int index167_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA168_static {
    static final String DFA168_eotS =
        "\17\uffff";
    static final String DFA168_eofS =
        "\17\uffff";
    static final String DFA168_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA168_maxS =
        "\1\u00b3\6\45\2\uffff\6\0";
    static final String DFA168_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA168_specialS =
        "\11\uffff\1\0\1\1\1\5\1\3\1\4\1\2}>";
    static final String[] DFA168_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\2\uffff\1\7"+
            "\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10\7\4\10\1\7\10"+
            "\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_static.DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_static.DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_static.DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_static.DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_static.DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_static.DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "()* loopback of 78:78: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA168_9 = input.LA(1);

                         
                        int index168_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA168_10 = input.LA(1);

                         
                        int index168_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA168_14 = input.LA(1);

                         
                        int index168_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA168_12 = input.LA(1);

                         
                        int index168_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA168_13 = input.LA(1);

                         
                        int index168_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA168_11 = input.LA(1);

                         
                        int index168_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index168_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\106\uffff";
    static final String DFA169_eofS =
        "\106\uffff";
    static final String DFA169_minS =
        "\1\46\101\0\4\uffff";
    static final String DFA169_maxS =
        "\1\u00b3\101\0\4\uffff";
    static final String DFA169_acceptS =
        "\102\uffff\1\1\1\2\1\3\1\4";
    static final String DFA169_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\4\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\13\1\4\1\6\1\101\1\37\1\42\1\uffff\1\5\1\16\20\uffff\1\26"+
            "\1\40\1\uffff\1\45\1\uffff\1\41\1\46\1\55\1\20\1\43\1\12\1\44"+
            "\1\32\1\33\1\24\1\47\1\50\1\51\1\52\1\53\1\34\1\15\4\uffff\1"+
            "\25\1\60\11\uffff\1\30\1\uffff\1\54\4\uffff\1\61\1\uffff\1\62"+
            "\1\uffff\1\63\5\uffff\1\64\1\uffff\1\56\3\uffff\1\65\1\uffff"+
            "\1\36\1\57\3\uffff\1\31\2\uffff\1\14\5\uffff\1\17\2\uffff\1"+
            "\10\2\uffff\1\11\1\23\1\73\1\66\1\uffff\1\1\1\2\1\3\1\76\1\uffff"+
            "\1\27\1\35\1\7\1\77\1\74\1\100\1\21\1\22\4\uffff\1\67\10\uffff"+
            "\1\70\1\75\1\71\1\72",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "78:86: ( dissolvePhrase | ratio | noun | numeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_2 = input.LA(1);

                         
                        int index169_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_3 = input.LA(1);

                         
                        int index169_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_4 = input.LA(1);

                         
                        int index169_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA169_5 = input.LA(1);

                         
                        int index169_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA169_6 = input.LA(1);

                         
                        int index169_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA169_7 = input.LA(1);

                         
                        int index169_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA169_8 = input.LA(1);

                         
                        int index169_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 68;}

                         
                        input.seek(index169_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA169_9 = input.LA(1);

                         
                        int index169_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index169_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA169_10 = input.LA(1);

                         
                        int index169_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA169_11 = input.LA(1);

                         
                        int index169_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 68;}

                        else if ( (true) ) {s = 69;}

                         
                        input.seek(index169_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA169_12 = input.LA(1);

                         
                        int index169_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA169_13 = input.LA(1);

                         
                        int index169_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA169_14 = input.LA(1);

                         
                        int index169_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA169_15 = input.LA(1);

                         
                        int index169_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 66;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&("IN-OF".equals(input.LT(-2) !=null ? input.LT(-2).getText() : null))))) ) {s = 68;}

                         
                        input.seek(index169_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA169_16 = input.LA(1);

                         
                        int index169_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA169_17 = input.LA(1);

                         
                        int index169_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA169_18 = input.LA(1);

                         
                        int index169_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA169_19 = input.LA(1);

                         
                        int index169_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA169_20 = input.LA(1);

                         
                        int index169_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA169_21 = input.LA(1);

                         
                        int index169_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA169_22 = input.LA(1);

                         
                        int index169_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA169_23 = input.LA(1);

                         
                        int index169_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA169_24 = input.LA(1);

                         
                        int index169_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA169_25 = input.LA(1);

                         
                        int index169_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA169_26 = input.LA(1);

                         
                        int index169_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA169_27 = input.LA(1);

                         
                        int index169_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA169_28 = input.LA(1);

                         
                        int index169_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA169_29 = input.LA(1);

                         
                        int index169_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA169_30 = input.LA(1);

                         
                        int index169_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA169_31 = input.LA(1);

                         
                        int index169_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA169_32 = input.LA(1);

                         
                        int index169_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA169_33 = input.LA(1);

                         
                        int index169_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA169_34 = input.LA(1);

                         
                        int index169_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA169_35 = input.LA(1);

                         
                        int index169_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA169_36 = input.LA(1);

                         
                        int index169_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA169_37 = input.LA(1);

                         
                        int index169_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA169_38 = input.LA(1);

                         
                        int index169_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA169_39 = input.LA(1);

                         
                        int index169_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA169_40 = input.LA(1);

                         
                        int index169_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA169_41 = input.LA(1);

                         
                        int index169_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA169_42 = input.LA(1);

                         
                        int index169_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA169_43 = input.LA(1);

                         
                        int index169_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA169_44 = input.LA(1);

                         
                        int index169_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA169_45 = input.LA(1);

                         
                        int index169_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA169_46 = input.LA(1);

                         
                        int index169_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA169_47 = input.LA(1);

                         
                        int index169_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA169_48 = input.LA(1);

                         
                        int index169_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA169_49 = input.LA(1);

                         
                        int index169_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA169_50 = input.LA(1);

                         
                        int index169_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA169_51 = input.LA(1);

                         
                        int index169_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA169_52 = input.LA(1);

                         
                        int index169_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA169_53 = input.LA(1);

                         
                        int index169_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA169_54 = input.LA(1);

                         
                        int index169_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA169_55 = input.LA(1);

                         
                        int index169_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA169_56 = input.LA(1);

                         
                        int index169_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA169_57 = input.LA(1);

                         
                        int index169_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA169_58 = input.LA(1);

                         
                        int index169_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA169_59 = input.LA(1);

                         
                        int index169_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA169_60 = input.LA(1);

                         
                        int index169_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA169_61 = input.LA(1);

                         
                        int index169_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA169_62 = input.LA(1);

                         
                        int index169_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA169_63 = input.LA(1);

                         
                        int index169_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA169_64 = input.LA(1);

                         
                        int index169_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA169_65 = input.LA(1);

                         
                        int index169_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index169_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA173_static {
    static final String DFA173_eotS =
        "\17\uffff";
    static final String DFA173_eofS =
        "\17\uffff";
    static final String DFA173_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA173_maxS =
        "\1\u009d\6\45\1\uffff\6\0\1\uffff";
    static final String DFA173_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA173_specialS =
        "\10\uffff\1\0\1\5\1\4\1\2\1\1\1\3\1\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\2\uffff\1\7\2\uffff\1\7\4\uffff"+
            "\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_static.DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_static.DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_static.DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_static.DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_static.DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_static.DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_static.DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_static.DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "83:73: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA173_8 = input.LA(1);

                         
                        int index173_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index173_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA173_12 = input.LA(1);

                         
                        int index173_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index173_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA173_11 = input.LA(1);

                         
                        int index173_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index173_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA173_13 = input.LA(1);

                         
                        int index173_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index173_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA173_10 = input.LA(1);

                         
                        int index173_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index173_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA173_9 = input.LA(1);

                         
                        int index173_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index173_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA175_static {
    static final String DFA175_eotS =
        "\20\uffff";
    static final String DFA175_eofS =
        "\20\uffff";
    static final String DFA175_minS =
        "\1\46\5\0\12\uffff";
    static final String DFA175_maxS =
        "\1\u0098\5\0\12\uffff";
    static final String DFA175_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String DFA175_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\12\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\2\uffff\1\1\2\uffff\1\2\4\uffff"+
            "\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_static.DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_static.DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_static.DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_static.DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_static.DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_static.DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_static.DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_static.DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "83:83: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA175_1 = input.LA(1);

                         
                        int index175_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index175_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA175_2 = input.LA(1);

                         
                        int index175_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index175_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA175_3 = input.LA(1);

                         
                        int index175_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index175_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA175_4 = input.LA(1);

                         
                        int index175_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index175_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA175_5 = input.LA(1);

                         
                        int index175_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index175_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA188_static {
    static final String DFA188_eotS =
        "\25\uffff";
    static final String DFA188_eofS =
        "\25\uffff";
    static final String DFA188_minS =
        "\1\46\15\uffff\1\0\6\uffff";
    static final String DFA188_maxS =
        "\1\u009b\15\uffff\1\0\6\uffff";
    static final String DFA188_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA188_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA188_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\10\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_static.DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_static.DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_static.DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_static.DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_static.DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_static.DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_static.DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_static.DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "()* loopback of 139:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA188_14 = input.LA(1);

                         
                        int index188_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index188_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA197_static {
    static final String DFA197_eotS =
        "\11\uffff";
    static final String DFA197_eofS =
        "\11\uffff";
    static final String DFA197_minS =
        "\1\u008e\1\45\1\46\1\45\2\uffff\1\54\1\45\1\101";
    static final String DFA197_maxS =
        "\1\u008e\1\45\1\u009d\1\45\2\uffff\1\u009d\1\45\1\u009d";
    static final String DFA197_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA197_specialS =
        "\11\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\1",
            "\1\2",
            "\1\4\42\uffff\1\4\73\uffff\1\5\12\uffff\1\5\1\3\2\uffff\1"+
            "\5\10\uffff\1\5",
            "\1\6",
            "",
            "",
            "\1\4\24\uffff\3\4\1\uffff\2\4\76\uffff\1\5\4\uffff\1\4\5\uffff"+
            "\1\5\1\7\2\uffff\1\5\6\uffff\1\4\1\uffff\1\5",
            "\1\10",
            "\3\4\1\uffff\2\4\76\uffff\1\5\11\uffff\2\5\1\7\2\uffff\1\5"+
            "\10\uffff\1\5"
    };
    }

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_static.DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_static.DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_static.DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_static.DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_static.DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_static.DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_static.DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_static.DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "171:110: ( quantity1Node | citationStructure )";
        }
    }
 

    static class FOLLOW_sentences_in_document195_static {
    public static final BitSet FOLLOW_sentences_in_document195 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x000FFFFFFFFFFDFFL});

    }static class FOLLOW_sentenceStructure_in_sentences216_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences216 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x000FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences218_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences218 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x000FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentences222_static {
    public static final BitSet FOLLOW_stop_in_sentences222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure232_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure232 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFF68BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure234_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure234 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFF68BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure236_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure236 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFF68BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure238_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure238 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFF68BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure243 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x0000007801C10038L});

    }static class FOLLOW_colon_in_sentenceStructure245_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure245 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x0000007801C10038L});

    }static class FOLLOW_conjunction_in_sentenceStructure250_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010028L});

    }static class FOLLOW_rbconj_in_sentenceStructure252_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010028L});

    }static class FOLLOW_comma_in_sentenceStructure254_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure254 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase266_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken285_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken285 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken287_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken287 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken289_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken291_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken293_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken295_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken299_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken301_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken303_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken305_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken307_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken309_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken309 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken311_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken311 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken313_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken315_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken317_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken319_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken321_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken323_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken325_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken327_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken329_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken331_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken333_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken335_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken337_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken339_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken343_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken345_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken347_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken349_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken351_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken351 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken353_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken355_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken357_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken359_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken361_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken363_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken365_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken367_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken369_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken371_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken373_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken375_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken377_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken379_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken381_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken383_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken385_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken387_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken389_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken391_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken395_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken397_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken399_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken401_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken403_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken405_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken407_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken409_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken411_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken413_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken415_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken417_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken419_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken421_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken423_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken425_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken427_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken429_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase439_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure458_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure460_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1469_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2486_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2486 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE4824L});

    }static class FOLLOW_dt_in_nounphraseStructure2489_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2489 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE4824L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2492_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2492 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE4824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2497_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2497 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_ratio_in_nounphraseStructure2499_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2499 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_noun_in_nounphraseStructure2501_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2501 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_numeric_in_nounphraseStructure2503_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseStructure2503 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2511_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2511 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2514_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2514 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE4824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2518_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2518 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_ratio_in_nounphraseStructure2520_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2520 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_noun_in_nounphraseStructure2522_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2522 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_numeric_in_nounphraseStructure2524_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseStructure2524 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2534_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2534 = new BitSet(new long[]{0x010461C000000002L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2537_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2537 = new BitSet(new long[]{0x010461C000000002L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2540_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2540 = new BitSet(new long[]{0x0104000000000002L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase554_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase556_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase556 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase558_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_rrb_in_dissolvePhrase560_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure585_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure585 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_nnp_in_dissolveStructure589_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure591_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure591 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure594_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure594 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_molecule_in_dissolveStructure597_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure597 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure599_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure599 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inin_in_dissolveStructure604_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure604 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C26820L});

    }static class FOLLOW_dtTHE_in_dissolveStructure606_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure606 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_adj_in_dissolveStructure609_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure609 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_nnp_in_dissolveStructure612_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure612 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_molecule_in_dissolveStructure616_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure616 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000010020L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure618_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure618 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000010020L});

    }static class FOLLOW_conjunction_in_dissolveStructure622_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure622 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_molecule_in_dissolveStructure624_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure624 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000010020L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase639_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure657_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure657 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_to_in_verbphraseStructure660_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure660 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure663_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure663 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure666_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure666 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_md_in_verbphraseStructure670_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure670 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure673_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure673 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_adv_in_verbphraseStructure676_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure676 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_adj_in_verbphraseStructure679_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure679 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_verb_in_verbphraseStructure682_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure682 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0000FD7805E700ABL});

    }static class FOLLOW_md_in_verbphraseStructure685_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure685 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0000FD7805E700ABL});

    }static class FOLLOW_adv_in_verbphraseStructure688_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure688 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0000FD7805E700ABL});

    }static class FOLLOW_adj_in_verbphraseStructure691_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure691 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0000FD7805E700ABL});

    }static class FOLLOW_neg_in_verbphraseStructure694_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure694 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0000FD7805E700ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure700_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure700 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x0000017801E700A0L});

    }static class FOLLOW_cc_in_verbphraseStructure704_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure704 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x0000017801E600A0L});

    }static class FOLLOW_comma_in_verbphraseStructure707_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure707 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x0000017801E60080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure710_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure710 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x0000017801E700A0L});

    }static class FOLLOW_vb_in_verb722_static {
    public static final BitSet FOLLOW_vb_in_verb722 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb724_static {
    public static final BitSet FOLLOW_vbp_in_verb724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb726_static {
    public static final BitSet FOLLOW_vbg_in_verb726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb728_static {
    public static final BitSet FOLLOW_vbd_in_verb728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb730_static {
    public static final BitSet FOLLOW_vbz_in_verb730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb732_static {
    public static final BitSet FOLLOW_vbn_in_verb732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb734_static {
    public static final BitSet FOLLOW_vbuse_in_verb734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb736_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb738_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb740_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb742_static {
    public static final BitSet FOLLOW_vbsubject_in_verb742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb744_static {
    public static final BitSet FOLLOW_vbadd_in_verb744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb746_static {
    public static final BitSet FOLLOW_vbdilute_in_verb746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb748_static {
    public static final BitSet FOLLOW_vbcharge_in_verb748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb750_static {
    public static final BitSet FOLLOW_vbcontain_in_verb750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb752_static {
    public static final BitSet FOLLOW_vbdrop_in_verb752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb754_static {
    public static final BitSet FOLLOW_vbfill_in_verb754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb756_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb758_static {
    public static final BitSet FOLLOW_vbtreat_in_verb758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb760_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb762_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb764_static {
    public static final BitSet FOLLOW_vbcool_in_verb764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb766_static {
    public static final BitSet FOLLOW_vbdegass_in_verb766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb768_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb770_static {
    public static final BitSet FOLLOW_vbdry_in_verb770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb772_static {
    public static final BitSet FOLLOW_vbextract_in_verb772 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb774_static {
    public static final BitSet FOLLOW_vbfilter_in_verb774 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb777_static {
    public static final BitSet FOLLOW_vbheat_in_verb777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb779_static {
    public static final BitSet FOLLOW_vbincrease_in_verb779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb781_static {
    public static final BitSet FOLLOW_vbpartition_in_verb781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb783_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb785_static {
    public static final BitSet FOLLOW_vbpurify_in_verb785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb787_static {
    public static final BitSet FOLLOW_vbquench_in_verb787 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb789_static {
    public static final BitSet FOLLOW_vbrecover_in_verb789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb791_static {
    public static final BitSet FOLLOW_vbremove_in_verb791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb793_static {
    public static final BitSet FOLLOW_vbstir_in_verb793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb795_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb795 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb797_static {
    public static final BitSet FOLLOW_vbwait_in_verb797 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb799_static {
    public static final BitSet FOLLOW_vbwash_in_verb799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb801_static {
    public static final BitSet FOLLOW_vbyield_in_verb801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb803_static {
    public static final BitSet FOLLOW_vbchange_in_verb803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb812_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_cc_in_degassMultiVerb814_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb814 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb816_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb816 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun825_static {
    public static final BitSet FOLLOW_nounStructure_in_noun825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun828_static {
    public static final BitSet FOLLOW_dash_in_noun828 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_nounStructure_in_noun830_static {
    public static final BitSet FOLLOW_nounStructure_in_noun830 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure841_static {
    public static final BitSet FOLLOW_prp_in_nounStructure841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure843_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure845_static {
    public static final BitSet FOLLOW_citation_in_nounStructure845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure847_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure849_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure851_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure853_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure855_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure857_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure859_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure861_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure863_static {
    public static final BitSet FOLLOW_nn_in_nounStructure863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure865_static {
    public static final BitSet FOLLOW_nns_in_nounStructure865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure867_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure869_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure871_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure873_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure875_static {
    public static final BitSet FOLLOW_range_in_nounStructure875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure877_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure879_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure881_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure883_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure885_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure887_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure889_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure891_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure893_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure895_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure897_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure899_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure899 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure901_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure903_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure905_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure907_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure909_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure911_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure913_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure915_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure917_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure919_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure921_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure923_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure925_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_nounStructure927_static {
    public static final BitSet FOLLOW_numeric_in_nounStructure927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_nounStructure929_static {
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure931_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure931 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure933_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure935_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure937_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure939_static {
    public static final BitSet FOLLOW_fw_in_nounStructure939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure941_static {
    public static final BitSet FOLLOW_sym_in_nounStructure941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure943_static {
    public static final BitSet FOLLOW_clause_in_nounStructure943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure945_static {
    public static final BitSet FOLLOW_ls_in_nounStructure945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure947_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure949_static {
    public static final BitSet FOLLOW_pos_in_nounStructure949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure951_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase963_static {
    public static final BitSet FOLLOW_neg_in_prepphrase963 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x0000017801E60080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase967_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase969_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase971_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase973_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase975_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase977_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1009_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1009 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000007801C64020L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1012_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1012 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000007801C24020L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1015_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1015 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000007801C24020L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1018_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1048_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1048 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x0000017801E60000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1051_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1051 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x0000007801C60000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1055_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1055 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x0000007801C20000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1058_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1058 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x0000007801C20000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1061_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1064_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1074_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1095_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1095 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x0000017801E60000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1098_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1098 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x0000007801C60000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1101_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1101 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x0000007801C20000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1104_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000020000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1107_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1110_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1119_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1119 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_molecule_in_prepphraseIN1121_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1121 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1142_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000040000L});

    }static class FOLLOW_dt_in_prepphraseRole1144_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1147_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1170_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1170 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x0000017801E60080L});

    }static class FOLLOW_inMost_in_prepphraseOther1173_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1173 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x000F01FFFBFE68A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1177_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1177 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1203_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1203 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE6824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1206_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1228_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1228 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1231_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1231 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE6824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1234_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1259_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1259 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1261_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1261 = new BitSet(new long[]{0xFFFFA1C000000000L,0x0000000002183B81L,0x0000017809E640A0L});

    }static class FOLLOW_nnexample_in_preparationphrase1264_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cd_in_preparationphrase1266_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1269_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1280_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1280 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x0000000009C74020L});

    }static class FOLLOW_conjunction_in_multiApparatus1283_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1283 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x0000000009C74020L});

    }static class FOLLOW_apparatus_in_multiApparatus1286_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1286 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x0000000009C74020L});

    }static class FOLLOW_dt_in_apparatus1297_static {
    public static final BitSet FOLLOW_dt_in_apparatus1297 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x0000000009C64020L});

    }static class FOLLOW_preapparatus_in_apparatus1300_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1300 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x0000000009C64020L});

    }static class FOLLOW_nnApp_in_apparatus1303_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1303 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x0000000009C64020L});

    }static class FOLLOW_nnapparatus_in_nnApp1330_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1330 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x0000000009C64120L});

    }static class FOLLOW_dash_in_nnApp1334_static {
    public static final BitSet FOLLOW_dash_in_nnApp1334 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x0000000009C64020L});

    }static class FOLLOW_nnapparatus_in_nnApp1336_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1350_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1350 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_adj_in_preapparatus1352_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1352 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_nnpressure_in_preapparatus1354_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1354 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_nnadd_in_preapparatus1356_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1356 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_molecule_in_preapparatus1358_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1358 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_nnchementity_in_preapparatus1360_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1360 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_nnstate_in_preapparatus1362_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1362 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_nn_in_preapparatus1364_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1364 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_oscaront_in_oscaronts1376_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1376 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_adj_in_oscarCompound1396_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1396 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1399_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1399 = new BitSet(new long[]{0x000021C000000002L,0x0000000000000000L,0x0000000001C24800L});

    }static class FOLLOW_adj_in_oscarCompound1401_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1401 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x0000000000024800L});

    }static class FOLLOW_alphanumericOrBrackettedCompoundReference_in_oscarCompound1404_static {
    public static final BitSet FOLLOW_alphanumericOrBrackettedCompoundReference_in_oscarCompound1404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nestedOscarCM_in_oscarCompoundStructure1412_static {
    public static final BitSet FOLLOW_nestedOscarCM_in_oscarCompoundStructure1412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1414_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_nestedOscarCM1421_static {
    public static final BitSet FOLLOW_oscarcm_in_nestedOscarCM1421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000000140L});

    }static class FOLLOW_afterOscarCompoundStructure_in_nestedOscarCM1423_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_nestedOscarCM1423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_nestedOscarCM1427_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_nestedOscarCM1427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1449_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1453_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1455_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1460_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1464_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1466_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1475_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1478_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000008000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1481_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1491_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1491 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1508_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1510_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1514_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31524_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31524 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_mixture_in_moleculeamount31526_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31526 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_moleculeamount31529_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000062000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31532_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_dt_in_moleculeamount31536_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_mixtureRatio_in_moleculeamount31540_static {
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount31540 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_mixture_in_moleculeamount31542_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31542 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31545_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount11555_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11555 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixture_in_moleculeamount11557_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11557 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_inof_in_moleculeamount11561_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11561 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C66020L});

    }static class FOLLOW_quantity_in_moleculeamount11564_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11564 = new BitSet(new long[]{0x010021C000000000L,0x0000000000100200L,0x0000000001C66020L});

    }static class FOLLOW_inof_in_moleculeamount11566_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11566 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C66020L});

    }static class FOLLOW_dtTHE_in_moleculeamount11572_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11572 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_dt_in_moleculeamount11576_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11576 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11580_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11580 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11582_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21591_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21591 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_mixture_in_moleculeamount21593_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21593 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21597_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21597 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21600_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21600 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericCompoundReference_in_afterCompoundCitationOrQuantity1609_static {
    public static final BitSet FOLLOW_numericCompoundReference_in_afterCompoundCitationOrQuantity1609 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_nnchementity_in_afterCompoundCitationOrQuantity1611_static {
    public static final BitSet FOLLOW_nnchementity_in_afterCompoundCitationOrQuantity1611 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1613_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1613 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1618_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1618 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1620 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1622_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1625 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1627 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630_static {
    public static final BitSet FOLLOW_mixture_in_afterCompoundCitationOrQuantity1630 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1642_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule1642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToCompound_in_unnamedmolecule1644_static {
    public static final BitSet FOLLOW_referenceToCompound_in_unnamedmolecule1644 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1666_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount1666 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1668_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount1668 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1670_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount1670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1672_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount1672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1674_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeamount1674 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeamount1676_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeamount1676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount11696_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount11696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount11698_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount11698 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_numericCompoundReference_in_unnamedmoleculeamount11700_static {
    public static final BitSet FOLLOW_numericCompoundReference_in_unnamedmoleculeamount11700 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount11704_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11704 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount11706_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount11706 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount21718_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount21718 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount21720_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount21720 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount21722_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount21722 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_numericCompoundReference_in_unnamedmoleculeamount21725_static {
    public static final BitSet FOLLOW_numericCompoundReference_in_unnamedmoleculeamount21725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrBrackettedCompoundReference_in_unnamedmoleculeamount31734_static {
    public static final BitSet FOLLOW_alphanumericOrBrackettedCompoundReference_in_unnamedmoleculeamount31734 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount31737_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount31737 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount31739_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount31739 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount31741_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount31741 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_cdAlphanum_in_alphanumericOrBrackettedCompoundReference1754_static {
    public static final BitSet FOLLOW_cdAlphanum_in_alphanumericOrBrackettedCompoundReference1754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_alphanumericOrBrackettedCompoundReference1756_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_alphanumericOrBrackettedCompoundReference1756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_alphanumericOrBrackettedCompoundReference1758_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_alphanumericOrBrackettedCompoundReference1758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_unnamedmoleculeamount41783_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_unnamedmoleculeamount41783 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount41786_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount41786 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41788_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41788 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount41790_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount41790 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41794_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41794 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount41797_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount41797 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41799_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41799 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount41801_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount41801 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_cd_in_numberCompoundReference1813_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference1813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51829_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51829 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeamount51831_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount51831 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount51834_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount51834 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_noun_in_unnamedmoleculeamount51837_static {
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount51837 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61848_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61850_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount61853_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount61853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_referenceToCompound1863_static {
    public static final BitSet FOLLOW_nnchementity_in_referenceToCompound1863 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_numericCompoundReference_in_referenceToCompound1870_static {
    public static final BitSet FOLLOW_numericCompoundReference_in_referenceToCompound1870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrBracketedNumeric_in_numericCompoundReference1881_static {
    public static final BitSet FOLLOW_numericOrBracketedNumeric_in_numericCompoundReference1881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_numericCompoundReference1884_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_numericCompoundReference1884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference1906_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference1906 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_squareBracketedReference1908_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference1908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference1910_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference1910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity1921_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity1921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity1923_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity1923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node1932_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node1932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity11952_static {
    public static final BitSet FOLLOW_lrb_in_quantity11952 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_measurements_in_quantity11954_static {
    public static final BitSet FOLLOW_measurements_in_quantity11954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008220L});

    }static class FOLLOW_comma_in_quantity11957_static {
    public static final BitSet FOLLOW_comma_in_quantity11957 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_measurements_in_quantity11960_static {
    public static final BitSet FOLLOW_measurements_in_quantity11960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008220L});

    }static class FOLLOW_comma_in_quantity11965_static {
    public static final BitSet FOLLOW_comma_in_quantity11965 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity11967_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity11967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008220L});

    }static class FOLLOW_stop_in_quantity11972_static {
    public static final BitSet FOLLOW_stop_in_quantity11972 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity11974_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity11974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008200L});

    }static class FOLLOW_rrb_in_quantity11979_static {
    public static final BitSet FOLLOW_rrb_in_quantity11979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node1987_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node1987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22008_static {
    public static final BitSet FOLLOW_measurements_in_quantity22008 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22011_static {
    public static final BitSet FOLLOW_comma_in_quantity22011 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_measurements_in_quantity22014_static {
    public static final BitSet FOLLOW_measurements_in_quantity22014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2027_static {
    public static final BitSet FOLLOW_cd_in_measurements2027 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_nn_in_measurements2029_static {
    public static final BitSet FOLLOW_nn_in_measurements2029 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_multiple_in_measurements2034_static {
    public static final BitSet FOLLOW_multiple_in_measurements2034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_measurementtypes_in_measurements2036_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_dt_in_measurements2042_static {
    public static final BitSet FOLLOW_dt_in_measurements2042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2050_static {
    public static final BitSet FOLLOW_cd_in_multiple2050 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2052_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2052 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_measurementtypes_in_multiple2054_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2079_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2079 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2081_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2083_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2083 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2085_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2087_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2089_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2091_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2091 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2093_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2093 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2101_static {
    public static final BitSet FOLLOW_cd_in_molar2101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000020000L});

    }static class FOLLOW_nnmolar_in_molar2104_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2125_static {
    public static final BitSet FOLLOW_cd_in_amount2125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000020000L});

    }static class FOLLOW_nnamount_in_amount2128_static {
    public static final BitSet FOLLOW_nnamount_in_amount2128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2149_static {
    public static final BitSet FOLLOW_cd_in_mass2149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000020000L});

    }static class FOLLOW_nnmass_in_mass2152_static {
    public static final BitSet FOLLOW_nnmass_in_mass2152 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2172_static {
    public static final BitSet FOLLOW_cd_in_volume2172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000020000L});

    }static class FOLLOW_nnvol_in_volume2175_static {
    public static final BitSet FOLLOW_nnvol_in_volume2175 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2196_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2198_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2198 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2217_static {
    public static final BitSet FOLLOW_cd_in_equivalent2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000020000L});

    }static class FOLLOW_nneq_in_equivalent2220_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2220 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield2238_static {
    public static final BitSet FOLLOW_percent_in_yield2238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield2240_static {
    public static final BitSet FOLLOW_nnyield_in_yield2240 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_percent2258_static {
    public static final BitSet FOLLOW_numeric_in_percent2258 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000009C24420L});

    }static class FOLLOW_nn_in_percent2260_static {
    public static final BitSet FOLLOW_nn_in_percent2260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_percent2263_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2263 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureRatio_in_mixture2286_static {
    public static final BitSet FOLLOW_mixtureRatio_in_mixture2286 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024020L});

    }static class FOLLOW_mixtureStructure3_in_mixture2291_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2291 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2293_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture2295_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22322_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_lrb_in_mixtureStructure22324_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22324 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22326_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_rrb_in_mixtureStructure22328_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureStructure22330_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12336_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12336 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure12338_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure12338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_rrb_in_mixtureStructure12340_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32348_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_mixtureStructure32351_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure32351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_rrb_in_mixtureStructure32353_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mixtureRatio2362_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio2362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_mixtureRatio2364_static {
    public static final BitSet FOLLOW_colon_in_mixtureRatio2364 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_mixtureRatio2366_static {
    public static final BitSet FOLLOW_numeric_in_mixtureRatio2366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent2375_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2375 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_verb_in_mixtureContent2377_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2377 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_nn_in_mixtureContent2379_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent2379 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2381_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2381 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_md_in_mixtureContent2383_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2383 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2385_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2385 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_stop_in_mixtureContent2387_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2387 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2389_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2389 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_molecule_in_mixtureContent2391_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2391 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2393_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2393 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_dash_in_mixtureContent2395_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2395 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_sym_in_mixtureContent2397_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2397 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_cd_in_mixtureContent2399_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2399 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_noun_in_mixtureContent2401_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2401 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_inAll_in_mixtureContent2403_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2403 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_cd_in_mixtureContent2405_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2405 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_comma_in_mixtureContent2407_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2407 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_adj_in_mixtureContent2409_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2409 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_colon_in_mixtureContent2411_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2411 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_stop_in_mixtureContent2413_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2413 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_minimixture_in_mixtureContent2417_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent2417 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_fw_in_mixtureContent2419_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2419 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_verb_in_mixtureContent2421_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2421 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2423_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2423 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_nnyield_in_mixtureContent2425_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent2425 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_md_in_mixtureContent2427_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2427 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2429_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2429 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_stop_in_mixtureContent2431_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2431 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2433_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2433 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_molecule_in_mixtureContent2435_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2435 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2437_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2437 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_dash_in_mixtureContent2439_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2439 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_sym_in_mixtureContent2441_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2441 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_cd_in_mixtureContent2443_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2443 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_noun_in_mixtureContent2445_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2445 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_inAll_in_mixtureContent2447_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2447 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_cd_in_mixtureContent2449_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2449 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_comma_in_mixtureContent2451_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2451 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_adj_in_mixtureContent2453_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2453 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_colon_in_mixtureContent2455_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2455 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_stop_in_mixtureContent2457_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2457 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x000FFDFFFFFE4F3FL});

    }static class FOLLOW_mixtureStructure2_in_minimixture2468_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture2468 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture2470_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture2470 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2491_static {
    public static final BitSet FOLLOW_method_in_procedureNode2491 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2511_static {
    public static final BitSet FOLLOW_nngeneral_in_method2511 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000009C24020L});

    }static class FOLLOW_nn_in_method2513_static {
    public static final BitSet FOLLOW_nn_in_method2513 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000009C24020L});

    }static class FOLLOW_nnmethod_in_method2517_static {
    public static final BitSet FOLLOW_nnmethod_in_method2517 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_method2519_static {
    public static final BitSet FOLLOW_numeric_in_method2519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_method2524_static {
    public static final BitSet FOLLOW_nnexample_in_method2524 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_method2526_static {
    public static final BitSet FOLLOW_numeric_in_method2526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2535_static {
    public static final BitSet FOLLOW_adv_in_advAdj2535 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2537_static {
    public static final BitSet FOLLOW_adj_in_advAdj2537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2544_static {
    public static final BitSet FOLLOW_numeric_in_range2544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2546_static {
    public static final BitSet FOLLOW_dash_in_range2546 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_range2548_static {
    public static final BitSet FOLLOW_numeric_in_range2548 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2555_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2555 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2572_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2572 = new BitSet(new long[]{0x800021C000000000L,0x0000000002122280L,0x0000000009C24020L});

    }static class FOLLOW_dashNN_in_cycleStructure2574_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure2577_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2577 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2585_static {
    public static final BitSet FOLLOW_adj_in_dashNN2585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2587_static {
    public static final BitSet FOLLOW_nn_in_dashNN2587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2589_static {
    public static final BitSet FOLLOW_cd_in_dashNN2589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN2593_static {
    public static final BitSet FOLLOW_dash_in_dashNN2593 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000009C24020L});

    }static class FOLLOW_adj_in_dashNN2596_static {
    public static final BitSet FOLLOW_adj_in_dashNN2596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2598_static {
    public static final BitSet FOLLOW_nn_in_dashNN2598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2600_static {
    public static final BitSet FOLLOW_cd_in_dashNN2600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_numericratio_in_ratio2611_static {
    public static final BitSet FOLLOW_numericratio_in_ratio2611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio2613_static {
    public static final BitSet FOLLOW_nounratio_in_ratio2613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numericratio2636_static {
    public static final BitSet FOLLOW_cd_in_numericratio2636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_numericratio2639_static {
    public static final BitSet FOLLOW_colon_in_numericratio2639 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_numericratio2641_static {
    public static final BitSet FOLLOW_numeric_in_numericratio2641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_noun_in_nounratio2653_static {
    public static final BitSet FOLLOW_noun_in_nounratio2653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_nounratio2657_static {
    public static final BitSet FOLLOW_colon_in_nounratio2657 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_noun_in_nounratio2659_static {
    public static final BitSet FOLLOW_noun_in_nounratio2659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation2671_static {
    public static final BitSet FOLLOW_citationStructure_in_citation2671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation2673_static {
    public static final BitSet FOLLOW_comma_in_citation2673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_citationContent_in_citation2675_static {
    public static final BitSet FOLLOW_citationContent_in_citation2675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation2677_static {
    public static final BitSet FOLLOW_comma_in_citation2677 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure2685_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure2685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent2701_static {
    public static final BitSet FOLLOW_lrb_in_citationContent2701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020130020L});

    }static class FOLLOW_nnp_in_citationContent2704_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020130020L});

    }static class FOLLOW_fw_in_citationContent2706_static {
    public static final BitSet FOLLOW_fw_in_citationContent2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020130020L});

    }static class FOLLOW_cd_in_citationContent2708_static {
    public static final BitSet FOLLOW_cd_in_citationContent2708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020130020L});

    }static class FOLLOW_conjunction_in_citationContent2710_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020130020L});

    }static class FOLLOW_nnp_in_citationContent2714_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020138020L});

    }static class FOLLOW_fw_in_citationContent2716_static {
    public static final BitSet FOLLOW_fw_in_citationContent2716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020138020L});

    }static class FOLLOW_cd_in_citationContent2718_static {
    public static final BitSet FOLLOW_cd_in_citationContent2718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020138020L});

    }static class FOLLOW_conjunction_in_citationContent2720_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020138020L});

    }static class FOLLOW_rrb_in_citationContent2724_static {
    public static final BitSet FOLLOW_rrb_in_citationContent2724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric2734_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric2734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2738_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric2746_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric2746 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_bracketedNumeric2748_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric2748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_rrb_in_bracketedNumeric2750_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric2750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj2758_static {
    public static final BitSet FOLLOW_jj_in_adj2758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj2760_static {
    public static final BitSet FOLLOW_jjr_in_adj2760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj2762_static {
    public static final BitSet FOLLOW_jjs_in_adj2762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj2764_static {
    public static final BitSet FOLLOW_oscarcj_in_adj2764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj2766_static {
    public static final BitSet FOLLOW_jjchem_in_adj2766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj2768_static {
    public static final BitSet FOLLOW_oscarrn_in_adj2768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv2775_static {
    public static final BitSet FOLLOW_rb_in_adv2775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv2777_static {
    public static final BitSet FOLLOW_rbr_in_adv2777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv2779_static {
    public static final BitSet FOLLOW_rp_in_adv2779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv2781_static {
    public static final BitSet FOLLOW_rbs_in_adv2781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause2788_static {
    public static final BitSet FOLLOW_wdt_in_clause2788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause2790_static {
    public static final BitSet FOLLOW_wp_poss_in_clause2790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause2792_static {
    public static final BitSet FOLLOW_wrb_in_clause2792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause2794_static {
    public static final BitSet FOLLOW_ex_in_clause2794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause2796_static {
    public static final BitSet FOLLOW_pdt_in_clause2796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause2798_static {
    public static final BitSet FOLLOW_wp_in_clause2798 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction2805_static {
    public static final BitSet FOLLOW_cc_in_conjunction2805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction2807_static {
    public static final BitSet FOLLOW_comma_in_conjunction2807 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll2814_static {
    public static final BitSet FOLLOW_in_in_inAll2814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll2816_static {
    public static final BitSet FOLLOW_inafter_in_inAll2816 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll2818_static {
    public static final BitSet FOLLOW_inas_in_inAll2818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll2820_static {
    public static final BitSet FOLLOW_inbefore_in_inAll2820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll2822_static {
    public static final BitSet FOLLOW_inby_in_inAll2822 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll2824_static {
    public static final BitSet FOLLOW_infor_in_inAll2824 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll2826_static {
    public static final BitSet FOLLOW_infrom_in_inAll2826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll2828_static {
    public static final BitSet FOLLOW_inin_in_inAll2828 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll2830_static {
    public static final BitSet FOLLOW_ininto_in_inAll2830 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll2832_static {
    public static final BitSet FOLLOW_inof_in_inAll2832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll2834_static {
    public static final BitSet FOLLOW_inoff_in_inAll2834 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll2836_static {
    public static final BitSet FOLLOW_inon_in_inAll2836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll2838_static {
    public static final BitSet FOLLOW_inover_in_inAll2838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll2840_static {
    public static final BitSet FOLLOW_inunder_in_inAll2840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll2842_static {
    public static final BitSet FOLLOW_invia_in_inAll2842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll2844_static {
    public static final BitSet FOLLOW_inwith_in_inAll2844 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll2846_static {
    public static final BitSet FOLLOW_inwithout_in_inAll2846 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll2848_static {
    public static final BitSet FOLLOW_to_in_inAll2848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost2855_static {
    public static final BitSet FOLLOW_in_in_inMost2855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost2857_static {
    public static final BitSet FOLLOW_inas_in_inMost2857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost2859_static {
    public static final BitSet FOLLOW_inbefore_in_inMost2859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost2861_static {
    public static final BitSet FOLLOW_inby_in_inMost2861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost2863_static {
    public static final BitSet FOLLOW_infor_in_inMost2863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost2865_static {
    public static final BitSet FOLLOW_infrom_in_inMost2865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost2867_static {
    public static final BitSet FOLLOW_inin_in_inMost2867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost2869_static {
    public static final BitSet FOLLOW_ininto_in_inMost2869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost2871_static {
    public static final BitSet FOLLOW_inof_in_inMost2871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost2873_static {
    public static final BitSet FOLLOW_inoff_in_inMost2873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost2875_static {
    public static final BitSet FOLLOW_inon_in_inMost2875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost2877_static {
    public static final BitSet FOLLOW_inover_in_inMost2877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost2879_static {
    public static final BitSet FOLLOW_inunder_in_inMost2879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost2881_static {
    public static final BitSet FOLLOW_invia_in_inMost2881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost2883_static {
    public static final BitSet FOLLOW_inwith_in_inMost2883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost2885_static {
    public static final BitSet FOLLOW_inwithout_in_inMost2885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost2887_static {
    public static final BitSet FOLLOW_to_in_inMost2887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric2894_static {
    public static final BitSet FOLLOW_cd_in_numeric2894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric2896_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric2896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum2904_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum2904 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum2906_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum2906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj2919_static {
    public static final BitSet FOLLOW_39_in_oscarcj2919 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj2921_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn2934_static {
    public static final BitSet FOLLOW_40_in_oscarrn2934 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn2936_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase2949_static {
    public static final BitSet FOLLOW_41_in_oscarase2949 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase2951_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase2951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront2964_static {
    public static final BitSet FOLLOW_42_in_oscaront2964 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront2966_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront2966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode2979_static {
    public static final BitSet FOLLOW_43_in_tmunicode2979 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode2981_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode2994_static {
    public static final BitSet FOLLOW_44_in_cdunicode2994 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode2996_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3009_static {
    public static final BitSet FOLLOW_45_in_jjchem3009 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3011_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3024_static {
    public static final BitSet FOLLOW_46_in_jjcomp3024 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3026_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3040_static {
    public static final BitSet FOLLOW_47_in_inas3040 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3042_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3055_static {
    public static final BitSet FOLLOW_48_in_inbefore3055 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3057_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3070_static {
    public static final BitSet FOLLOW_49_in_inafter3070 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3072_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3085_static {
    public static final BitSet FOLLOW_50_in_inin3085 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3087_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3100_static {
    public static final BitSet FOLLOW_51_in_ininto3100 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3102_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3115_static {
    public static final BitSet FOLLOW_52_in_inwith3115 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3117_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3117 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3130_static {
    public static final BitSet FOLLOW_53_in_inwithout3130 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3132_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3145_static {
    public static final BitSet FOLLOW_54_in_inby3145 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3147_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3160_static {
    public static final BitSet FOLLOW_55_in_invia3160 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3162_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3162 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3175_static {
    public static final BitSet FOLLOW_56_in_inof3175 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3177_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3177 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3190_static {
    public static final BitSet FOLLOW_57_in_inon3190 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3192_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3192 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3205_static {
    public static final BitSet FOLLOW_58_in_infor3205 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3207_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3220_static {
    public static final BitSet FOLLOW_59_in_infrom3220 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3222_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3235_static {
    public static final BitSet FOLLOW_60_in_inunder3235 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3237_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3250_static {
    public static final BitSet FOLLOW_61_in_inover3250 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3252_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3265_static {
    public static final BitSet FOLLOW_62_in_inoff3265 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3267_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3282_static {
    public static final BitSet FOLLOW_63_in_nnstate3282 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3284_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3297_static {
    public static final BitSet FOLLOW_64_in_nntime3297 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3299_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3312_static {
    public static final BitSet FOLLOW_65_in_nnmass3312 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3314_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3327_static {
    public static final BitSet FOLLOW_66_in_nnamount3327 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3329_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3342_static {
    public static final BitSet FOLLOW_67_in_nnmolar3342 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3344_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3357_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3357 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3359_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3372_static {
    public static final BitSet FOLLOW_69_in_nneq3372 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3374_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3387_static {
    public static final BitSet FOLLOW_70_in_nnvol3387 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3389_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3402_static {
    public static final BitSet FOLLOW_71_in_nnchementity3402 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3404_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3417_static {
    public static final BitSet FOLLOW_72_in_nntemp3417 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3419_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3432_static {
    public static final BitSet FOLLOW_73_in_nnph3432 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3434_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3447_static {
    public static final BitSet FOLLOW_74_in_nnflash3447 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3449_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3449 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3462_static {
    public static final BitSet FOLLOW_75_in_nngeneral3462 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3464_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3477_static {
    public static final BitSet FOLLOW_76_in_nnmethod3477 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3479_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3492_static {
    public static final BitSet FOLLOW_77_in_nnpressure3492 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3494_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3507_static {
    public static final BitSet FOLLOW_78_in_nncolumn3507 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3509_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3509 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography3522_static {
    public static final BitSet FOLLOW_79_in_nnchromatography3522 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3524_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum3537_static {
    public static final BitSet FOLLOW_80_in_nnvacuum3537 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3539_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle3552_static {
    public static final BitSet FOLLOW_81_in_nncycle3552 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3554_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes3567_static {
    public static final BitSet FOLLOW_82_in_nntimes3567 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes3569_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3569 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample3582_static {
    public static final BitSet FOLLOW_83_in_nnexample3582 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample3584_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm3599_static {
    public static final BitSet FOLLOW_84_in_oscarcm3599 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3601_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse3616_static {
    public static final BitSet FOLLOW_85_in_vbuse3616 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse3618_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3618 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange3631_static {
    public static final BitSet FOLLOW_86_in_vbchange3631 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange3633_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge3646_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge3646 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3648_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject3661_static {
    public static final BitSet FOLLOW_88_in_vbsubject3661 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3663_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd3678_static {
    public static final BitSet FOLLOW_89_in_nnadd3678 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd3680_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture3693_static {
    public static final BitSet FOLLOW_90_in_nnmixture3693 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3695_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute3708_static {
    public static final BitSet FOLLOW_91_in_vbdilute3708 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3710_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd3723_static {
    public static final BitSet FOLLOW_92_in_vbadd3723 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd3725_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd3725 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge3738_static {
    public static final BitSet FOLLOW_93_in_vbcharge3738 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge3740_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain3753_static {
    public static final BitSet FOLLOW_94_in_vbcontain3753 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain3755_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop3768_static {
    public static final BitSet FOLLOW_95_in_vbdrop3768 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop3770_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill3783_static {
    public static final BitSet FOLLOW_96_in_vbfill3783 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill3785_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill3785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend3798_static {
    public static final BitSet FOLLOW_97_in_vbsuspend3798 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend3800_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat3813_static {
    public static final BitSet FOLLOW_98_in_vbtreat3813 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat3815_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3815 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus3830_static {
    public static final BitSet FOLLOW_99_in_vbapparatus3830 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus3832_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus3845_static {
    public static final BitSet FOLLOW_100_in_nnapparatus3845 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus3847_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate3862_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate3862 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate3864_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate3877_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate3877 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate3879_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool3894_static {
    public static final BitSet FOLLOW_103_in_vbcool3894 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool3896_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool3896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass3911_static {
    public static final BitSet FOLLOW_104_in_vbdegass3911 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass3913_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass3913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve3928_static {
    public static final BitSet FOLLOW_105_in_vbdissolve3928 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve3930_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve3930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry3945_static {
    public static final BitSet FOLLOW_106_in_vbdry3945 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry3947_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry3947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry3960_static {
    public static final BitSet FOLLOW_107_in_nndry3960 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry3962_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry3962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract3977_static {
    public static final BitSet FOLLOW_108_in_vbextract3977 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract3979_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract3979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract3992_static {
    public static final BitSet FOLLOW_109_in_nnextract3992 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract3994_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract3994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4009_static {
    public static final BitSet FOLLOW_110_in_vbfilter4009 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4011_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4024_static {
    public static final BitSet FOLLOW_111_in_nnfilter4024 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4026_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4041_static {
    public static final BitSet FOLLOW_112_in_vbheat4041 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4043_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4056_static {
    public static final BitSet FOLLOW_113_in_vbincrease4056 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4058_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4073_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4073 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4075_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4075 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4090_static {
    public static final BitSet FOLLOW_115_in_vbpartition4090 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4092_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4107_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4107 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4109_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4109 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4122_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4122 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4124_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4124 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4139_static {
    public static final BitSet FOLLOW_118_in_vbpurify4139 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4141_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4141 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4154_static {
    public static final BitSet FOLLOW_119_in_nnpurify4154 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4156_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4156 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4171_static {
    public static final BitSet FOLLOW_120_in_vbquench4171 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4173_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4173 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4188_static {
    public static final BitSet FOLLOW_121_in_vbrecover4188 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4190_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4190 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4205_static {
    public static final BitSet FOLLOW_122_in_vbremove4205 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4207_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4220_static {
    public static final BitSet FOLLOW_123_in_nnremove4220 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4222_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4237_static {
    public static final BitSet FOLLOW_124_in_vbstir4237 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4239_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4254_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4254 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4256_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4256 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4269_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4269 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4271_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4271 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4286_static {
    public static final BitSet FOLLOW_127_in_vbwait4286 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4288_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4288 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4303_static {
    public static final BitSet FOLLOW_128_in_vbwash4303 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4305_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4320_static {
    public static final BitSet FOLLOW_129_in_vbyield4320 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4322_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4337_static {
    public static final BitSet FOLLOW_130_in_nnyield4337 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4339_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4355_static {
    public static final BitSet FOLLOW_131_in_rbconj4355 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4357_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4370_static {
    public static final BitSet FOLLOW_132_in_colon4370 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4372_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4385_static {
    public static final BitSet FOLLOW_133_in_comma4385 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4387_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4400_static {
    public static final BitSet FOLLOW_134_in_apost4400 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4402_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4415_static {
    public static final BitSet FOLLOW_135_in_neg4415 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4417_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4430_static {
    public static final BitSet FOLLOW_136_in_dash4430 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4432_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4445_static {
    public static final BitSet FOLLOW_137_in_stop4445 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4447_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4447 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_nnpercent4460_static {
    public static final BitSet FOLLOW_138_in_nnpercent4460 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4462_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4475_static {
    public static final BitSet FOLLOW_139_in_lsqb4475 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4477_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4490_static {
    public static final BitSet FOLLOW_140_in_rsqb4490 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4492_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_dtTHE4507_static {
    public static final BitSet FOLLOW_141_in_dtTHE4507 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4509_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4509 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_lrb4523_static {
    public static final BitSet FOLLOW_142_in_lrb4523 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb4525_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_rrb4538_static {
    public static final BitSet FOLLOW_143_in_rrb4538 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb4540_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_cc4557_static {
    public static final BitSet FOLLOW_144_in_cc4557 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc4559_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4559 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cd4574_static {
    public static final BitSet FOLLOW_145_in_cd4574 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd4576_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_dt4591_static {
    public static final BitSet FOLLOW_146_in_dt4591 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt4593_static {
    public static final BitSet FOLLOW_TOKEN_in_dt4593 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_ex4608_static {
    public static final BitSet FOLLOW_147_in_ex4608 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex4610_static {
    public static final BitSet FOLLOW_TOKEN_in_ex4610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_fw4625_static {
    public static final BitSet FOLLOW_148_in_fw4625 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw4627_static {
    public static final BitSet FOLLOW_TOKEN_in_fw4627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_in4642_static {
    public static final BitSet FOLLOW_149_in_in4642 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in4644_static {
    public static final BitSet FOLLOW_TOKEN_in_in4644 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_jj4659_static {
    public static final BitSet FOLLOW_150_in_jj4659 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj4661_static {
    public static final BitSet FOLLOW_TOKEN_in_jj4661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jjr4676_static {
    public static final BitSet FOLLOW_151_in_jjr4676 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr4678_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr4678 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjs4693_static {
    public static final BitSet FOLLOW_152_in_jjs4693 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs4695_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs4695 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_ls4710_static {
    public static final BitSet FOLLOW_153_in_ls4710 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls4712_static {
    public static final BitSet FOLLOW_TOKEN_in_ls4712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_md4727_static {
    public static final BitSet FOLLOW_154_in_md4727 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md4729_static {
    public static final BitSet FOLLOW_TOKEN_in_md4729 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_nn4744_static {
    public static final BitSet FOLLOW_155_in_nn4744 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn4746_static {
    public static final BitSet FOLLOW_TOKEN_in_nn4746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nns4761_static {
    public static final BitSet FOLLOW_156_in_nns4761 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns4763_static {
    public static final BitSet FOLLOW_TOKEN_in_nns4763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nnp4778_static {
    public static final BitSet FOLLOW_157_in_nnp4778 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp4780_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp4780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnps4795_static {
    public static final BitSet FOLLOW_158_in_nnps4795 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps4797_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps4797 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_pdt4812_static {
    public static final BitSet FOLLOW_159_in_pdt4812 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt4814_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt4814 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pos4829_static {
    public static final BitSet FOLLOW_160_in_pos4829 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos4831_static {
    public static final BitSet FOLLOW_TOKEN_in_pos4831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_prp4846_static {
    public static final BitSet FOLLOW_161_in_prp4846 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp4848_static {
    public static final BitSet FOLLOW_TOKEN_in_prp4848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp_poss4863_static {
    public static final BitSet FOLLOW_162_in_prp_poss4863 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss4865_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss4865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_rb4880_static {
    public static final BitSet FOLLOW_163_in_rb4880 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb4882_static {
    public static final BitSet FOLLOW_TOKEN_in_rb4882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rbr4897_static {
    public static final BitSet FOLLOW_164_in_rbr4897 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr4899_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr4899 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbs4914_static {
    public static final BitSet FOLLOW_165_in_rbs4914 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs4916_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs4916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rp4931_static {
    public static final BitSet FOLLOW_166_in_rp4931 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp4933_static {
    public static final BitSet FOLLOW_TOKEN_in_rp4933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_sym4948_static {
    public static final BitSet FOLLOW_167_in_sym4948 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym4950_static {
    public static final BitSet FOLLOW_TOKEN_in_sym4950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_to4965_static {
    public static final BitSet FOLLOW_168_in_to4965 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to4967_static {
    public static final BitSet FOLLOW_TOKEN_in_to4967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_uh4982_static {
    public static final BitSet FOLLOW_169_in_uh4982 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh4984_static {
    public static final BitSet FOLLOW_TOKEN_in_uh4984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_vb4999_static {
    public static final BitSet FOLLOW_170_in_vb4999 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5001_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5001 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vbd5016_static {
    public static final BitSet FOLLOW_171_in_vbd5016 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5018_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbg5033_static {
    public static final BitSet FOLLOW_172_in_vbg5033 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5035_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbn5050_static {
    public static final BitSet FOLLOW_173_in_vbn5050 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5052_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbp5067_static {
    public static final BitSet FOLLOW_174_in_vbp5067 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5069_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbz5084_static {
    public static final BitSet FOLLOW_175_in_vbz5084 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5086_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_wdt5101_static {
    public static final BitSet FOLLOW_176_in_wdt5101 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5103_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5103 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wp5118_static {
    public static final BitSet FOLLOW_177_in_wp5118 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5120_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp_poss5135_static {
    public static final BitSet FOLLOW_178_in_wp_poss5135 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5137_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wrb5152_static {
    public static final BitSet FOLLOW_179_in_wrb5152 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5154_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker216_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker216 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker218_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker218 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker232_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker234_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker236_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker238_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker238 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker243_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker245_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker250_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker252_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker254_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker254 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred83_ChemicalChunker458_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred83_ChemicalChunker458 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred85_ChemicalChunker489_static {
    public static final BitSet FOLLOW_dt_in_synpred85_ChemicalChunker489 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred86_ChemicalChunker492_static {
    public static final BitSet FOLLOW_advAdj_in_synpred86_ChemicalChunker492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred87_ChemicalChunker497_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred87_ChemicalChunker497 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred88_ChemicalChunker499_static {
    public static final BitSet FOLLOW_ratio_in_synpred88_ChemicalChunker499 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred89_ChemicalChunker501_static {
    public static final BitSet FOLLOW_noun_in_synpred89_ChemicalChunker501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred90_ChemicalChunker503_static {
    public static final BitSet FOLLOW_numeric_in_synpred90_ChemicalChunker503 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred91_ChemicalChunker511_static {
    public static final BitSet FOLLOW_conjunction_in_synpred91_ChemicalChunker511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred92_ChemicalChunker514_static {
    public static final BitSet FOLLOW_advAdj_in_synpred92_ChemicalChunker514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred93_ChemicalChunker518_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred93_ChemicalChunker518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred94_ChemicalChunker520_static {
    public static final BitSet FOLLOW_ratio_in_synpred94_ChemicalChunker520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred95_ChemicalChunker522_static {
    public static final BitSet FOLLOW_noun_in_synpred95_ChemicalChunker522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred96_ChemicalChunker511_static {
    public static final BitSet FOLLOW_conjunction_in_synpred96_ChemicalChunker511 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDF4824L});

    }static class FOLLOW_advAdj_in_synpred96_ChemicalChunker514_static {
    public static final BitSet FOLLOW_advAdj_in_synpred96_ChemicalChunker514 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F00FFFBDE4824L});

    }static class FOLLOW_dissolvePhrase_in_synpred96_ChemicalChunker518_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred96_ChemicalChunker518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred96_ChemicalChunker520_static {
    public static final BitSet FOLLOW_ratio_in_synpred96_ChemicalChunker520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred96_ChemicalChunker522_static {
    public static final BitSet FOLLOW_noun_in_synpred96_ChemicalChunker522 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred96_ChemicalChunker524_static {
    public static final BitSet FOLLOW_numeric_in_synpred96_ChemicalChunker524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker540_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred98_ChemicalChunker540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred99_ChemicalChunker534_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred99_ChemicalChunker534 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker537_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred99_ChemicalChunker537 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker540_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred100_ChemicalChunker554_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred100_ChemicalChunker554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred101_ChemicalChunker585_static {
    public static final BitSet FOLLOW_adj_in_synpred101_ChemicalChunker585 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred104_ChemicalChunker597_static {
    public static final BitSet FOLLOW_molecule_in_synpred104_ChemicalChunker597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred106_ChemicalChunker609_static {
    public static final BitSet FOLLOW_adj_in_synpred106_ChemicalChunker609 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker616_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker622_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker622 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker624_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred110_ChemicalChunker604_static {
    public static final BitSet FOLLOW_inin_in_synpred110_ChemicalChunker604 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C26820L});

    }static class FOLLOW_dtTHE_in_synpred110_ChemicalChunker606_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred110_ChemicalChunker606 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_adj_in_synpred110_ChemicalChunker609_static {
    public static final BitSet FOLLOW_adj_in_synpred110_ChemicalChunker609 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_nnp_in_synpred110_ChemicalChunker612_static {
    public static final BitSet FOLLOW_nnp_in_synpred110_ChemicalChunker612 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x0000000021C24820L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker616_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010020L});

    }static class FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker618_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred110_ChemicalChunker618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010020L});

    }static class FOLLOW_conjunction_in_synpred110_ChemicalChunker622_static {
    public static final BitSet FOLLOW_conjunction_in_synpred110_ChemicalChunker622 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000001C24020L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker624_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker624 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010020L});

    }static class FOLLOW_to_in_synpred112_ChemicalChunker660_static {
    public static final BitSet FOLLOW_to_in_synpred112_ChemicalChunker660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred113_ChemicalChunker663_static {
    public static final BitSet FOLLOW_inAll_in_synpred113_ChemicalChunker663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred119_ChemicalChunker682_static {
    public static final BitSet FOLLOW_verb_in_synpred119_ChemicalChunker682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred120_ChemicalChunker685_static {
    public static final BitSet FOLLOW_md_in_synpred120_ChemicalChunker685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred121_ChemicalChunker688_static {
    public static final BitSet FOLLOW_adv_in_synpred121_ChemicalChunker688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred122_ChemicalChunker691_static {
    public static final BitSet FOLLOW_adj_in_synpred122_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred123_ChemicalChunker694_static {
    public static final BitSet FOLLOW_neg_in_synpred123_ChemicalChunker694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred124_ChemicalChunker670_static {
    public static final BitSet FOLLOW_md_in_synpred124_ChemicalChunker670 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_rbconj_in_synpred124_ChemicalChunker673_static {
    public static final BitSet FOLLOW_rbconj_in_synpred124_ChemicalChunker673 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_adv_in_synpred124_ChemicalChunker676_static {
    public static final BitSet FOLLOW_adv_in_synpred124_ChemicalChunker676 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_adj_in_synpred124_ChemicalChunker679_static {
    public static final BitSet FOLLOW_adj_in_synpred124_ChemicalChunker679 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0000FD7805E4000BL});

    }static class FOLLOW_verb_in_synpred124_ChemicalChunker682_static {
    public static final BitSet FOLLOW_verb_in_synpred124_ChemicalChunker682 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0000FD7805E4008BL});

    }static class FOLLOW_md_in_synpred124_ChemicalChunker685_static {
    public static final BitSet FOLLOW_md_in_synpred124_ChemicalChunker685 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x0000007805C00080L});

    }static class FOLLOW_adv_in_synpred124_ChemicalChunker688_static {
    public static final BitSet FOLLOW_adv_in_synpred124_ChemicalChunker688 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x0000007801C00080L});

    }static class FOLLOW_adj_in_synpred124_ChemicalChunker691_static {
    public static final BitSet FOLLOW_adj_in_synpred124_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred124_ChemicalChunker694_static {
    public static final BitSet FOLLOW_neg_in_synpred124_ChemicalChunker694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred125_ChemicalChunker700_static {
    public static final BitSet FOLLOW_inoff_in_synpred125_ChemicalChunker700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred128_ChemicalChunker704_static {
    public static final BitSet FOLLOW_cc_in_synpred128_ChemicalChunker704 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x0000017801E600A0L});

    }static class FOLLOW_comma_in_synpred128_ChemicalChunker707_static {
    public static final BitSet FOLLOW_comma_in_synpred128_ChemicalChunker707 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x0000017801E60080L});

    }static class FOLLOW_prepphrase_in_synpred128_ChemicalChunker710_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred128_ChemicalChunker710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker740_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred138_ChemicalChunker740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred151_ChemicalChunker766_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred151_ChemicalChunker766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred169_ChemicalChunker828_static {
    public static final BitSet FOLLOW_dash_in_synpred169_ChemicalChunker828 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_nounStructure_in_synpred169_ChemicalChunker830_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred169_ChemicalChunker830 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred172_ChemicalChunker845_static {
    public static final BitSet FOLLOW_citation_in_synpred172_ChemicalChunker845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred173_ChemicalChunker847_static {
    public static final BitSet FOLLOW_cycles_in_synpred173_ChemicalChunker847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred174_ChemicalChunker849_static {
    public static final BitSet FOLLOW_molecule_in_synpred174_ChemicalChunker849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred175_ChemicalChunker851_static {
    public static final BitSet FOLLOW_apparatus_in_synpred175_ChemicalChunker851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred176_ChemicalChunker853_static {
    public static final BitSet FOLLOW_mixture_in_synpred176_ChemicalChunker853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker855_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred177_ChemicalChunker855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred179_ChemicalChunker859_static {
    public static final BitSet FOLLOW_nnstate_in_synpred179_ChemicalChunker859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred180_ChemicalChunker861_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred180_ChemicalChunker861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred181_ChemicalChunker863_static {
    public static final BitSet FOLLOW_nn_in_synpred181_ChemicalChunker863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred184_ChemicalChunker869_static {
    public static final BitSet FOLLOW_nnadd_in_synpred184_ChemicalChunker869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred186_ChemicalChunker873_static {
    public static final BitSet FOLLOW_nnexample_in_synpred186_ChemicalChunker873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred187_ChemicalChunker875_static {
    public static final BitSet FOLLOW_range_in_synpred187_ChemicalChunker875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred192_ChemicalChunker885_static {
    public static final BitSet FOLLOW_quantity_in_synpred192_ChemicalChunker885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred193_ChemicalChunker887_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred193_ChemicalChunker887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred195_ChemicalChunker891_static {
    public static final BitSet FOLLOW_nnph_in_synpred195_ChemicalChunker891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred197_ChemicalChunker895_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred197_ChemicalChunker895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred200_ChemicalChunker901_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred200_ChemicalChunker901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker923_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred211_ChemicalChunker923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred213_ChemicalChunker927_static {
    public static final BitSet FOLLOW_numeric_in_synpred213_ChemicalChunker927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred214_ChemicalChunker929_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred214_ChemicalChunker929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker967_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker969_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker971_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker973_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker975_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred232_ChemicalChunker1015_static {
    public static final BitSet FOLLOW_advAdj_in_synpred232_ChemicalChunker1015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1020_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred234_ChemicalChunker1048_static {
    public static final BitSet FOLLOW_advAdj_in_synpred234_ChemicalChunker1048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred239_ChemicalChunker1064_static {
    public static final BitSet FOLLOW_nntime_in_synpred239_ChemicalChunker1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred240_ChemicalChunker1095_static {
    public static final BitSet FOLLOW_advAdj_in_synpred240_ChemicalChunker1095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred245_ChemicalChunker1110_static {
    public static final BitSet FOLLOW_nntemp_in_synpred245_ChemicalChunker1110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred251_ChemicalChunker1283_static {
    public static final BitSet FOLLOW_conjunction_in_synpred251_ChemicalChunker1283 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred252_ChemicalChunker1283_static {
    public static final BitSet FOLLOW_conjunction_in_synpred252_ChemicalChunker1283 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x0000000009C74020L});

    }static class FOLLOW_apparatus_in_synpred252_ChemicalChunker1286_static {
    public static final BitSet FOLLOW_apparatus_in_synpred252_ChemicalChunker1286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred255_ChemicalChunker1303_static {
    public static final BitSet FOLLOW_nnApp_in_synpred255_ChemicalChunker1303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1330_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred257_ChemicalChunker1334_static {
    public static final BitSet FOLLOW_dash_in_synpred257_ChemicalChunker1334 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x0000000009C64020L});

    }static class FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1336_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred258_ChemicalChunker1350_static {
    public static final BitSet FOLLOW_quantity_in_synpred258_ChemicalChunker1350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred259_ChemicalChunker1352_static {
    public static final BitSet FOLLOW_adj_in_synpred259_ChemicalChunker1352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred260_ChemicalChunker1354_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred260_ChemicalChunker1354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred261_ChemicalChunker1356_static {
    public static final BitSet FOLLOW_nnadd_in_synpred261_ChemicalChunker1356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred262_ChemicalChunker1358_static {
    public static final BitSet FOLLOW_molecule_in_synpred262_ChemicalChunker1358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred263_ChemicalChunker1360_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred263_ChemicalChunker1360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred264_ChemicalChunker1362_static {
    public static final BitSet FOLLOW_nnstate_in_synpred264_ChemicalChunker1362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred265_ChemicalChunker1364_static {
    public static final BitSet FOLLOW_nn_in_synpred265_ChemicalChunker1364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred266_ChemicalChunker1376_static {
    public static final BitSet FOLLOW_oscaront_in_synpred266_ChemicalChunker1376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred268_ChemicalChunker1401_static {
    public static final BitSet FOLLOW_adj_in_synpred268_ChemicalChunker1401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrBrackettedCompoundReference_in_synpred269_ChemicalChunker1404_static {
    public static final BitSet FOLLOW_alphanumericOrBrackettedCompoundReference_in_synpred269_ChemicalChunker1404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nestedOscarCM_in_synpred270_ChemicalChunker1412_static {
    public static final BitSet FOLLOW_nestedOscarCM_in_synpred270_ChemicalChunker1412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred272_ChemicalChunker1449_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred272_ChemicalChunker1449 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred274_ChemicalChunker1455_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred274_ChemicalChunker1455 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred275_ChemicalChunker1453_static {
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred275_ChemicalChunker1455_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred275_ChemicalChunker1455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred276_ChemicalChunker1460_static {
    public static final BitSet FOLLOW_dash_in_synpred276_ChemicalChunker1460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred277_ChemicalChunker1453_static {
    public static final BitSet FOLLOW_dash_in_synpred277_ChemicalChunker1453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred277_ChemicalChunker1455_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred277_ChemicalChunker1455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred277_ChemicalChunker1460_static {
    public static final BitSet FOLLOW_dash_in_synpred277_ChemicalChunker1460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred278_ChemicalChunker1464_static {
    public static final BitSet FOLLOW_dash_in_synpred278_ChemicalChunker1464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred279_ChemicalChunker1466_static {
    public static final BitSet FOLLOW_apost_in_synpred279_ChemicalChunker1466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred281_ChemicalChunker1508_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred281_ChemicalChunker1508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred282_ChemicalChunker1510_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred282_ChemicalChunker1510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred283_ChemicalChunker1524_static {
    public static final BitSet FOLLOW_quantity_in_synpred283_ChemicalChunker1524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred286_ChemicalChunker1542_static {
    public static final BitSet FOLLOW_mixture_in_synpred286_ChemicalChunker1542 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred287_ChemicalChunker1555_static {
    public static final BitSet FOLLOW_quantity_in_synpred287_ChemicalChunker1555 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred288_ChemicalChunker1557_static {
    public static final BitSet FOLLOW_mixture_in_synpred288_ChemicalChunker1557 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred293_ChemicalChunker1591_static {
    public static final BitSet FOLLOW_quantity_in_synpred293_ChemicalChunker1591 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred294_ChemicalChunker1593_static {
    public static final BitSet FOLLOW_mixture_in_synpred294_ChemicalChunker1593 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1597_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1597 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred297_ChemicalChunker1613_static {
    public static final BitSet FOLLOW_quantity_in_synpred297_ChemicalChunker1613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericCompoundReference_in_synpred298_ChemicalChunker1609_static {
    public static final BitSet FOLLOW_numericCompoundReference_in_synpred298_ChemicalChunker1609 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_nnchementity_in_synpred298_ChemicalChunker1611_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred298_ChemicalChunker1611 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_quantity_in_synpred298_ChemicalChunker1613_static {
    public static final BitSet FOLLOW_quantity_in_synpred298_ChemicalChunker1613 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_citation_in_synpred299_ChemicalChunker1618_static {
    public static final BitSet FOLLOW_citation_in_synpred299_ChemicalChunker1618 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred300_ChemicalChunker1620_static {
    public static final BitSet FOLLOW_quantity_in_synpred300_ChemicalChunker1620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred302_ChemicalChunker1622_static {
    public static final BitSet FOLLOW_comma_in_synpred302_ChemicalChunker1622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});

    }static class FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1625_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred302_ChemicalChunker1627_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred302_ChemicalChunker1627 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred303_ChemicalChunker1630_static {
    public static final BitSet FOLLOW_mixture_in_synpred303_ChemicalChunker1630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount_in_synpred304_ChemicalChunker1642_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_synpred304_ChemicalChunker1642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred306_ChemicalChunker1668_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred306_ChemicalChunker1668 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_synpred307_ChemicalChunker1670_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred307_ChemicalChunker1670 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_synpred308_ChemicalChunker1672_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_synpred308_ChemicalChunker1672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_synpred309_ChemicalChunker1674_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_synpred309_ChemicalChunker1674 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericCompoundReference_in_synpred310_ChemicalChunker1700_static {
    public static final BitSet FOLLOW_numericCompoundReference_in_synpred310_ChemicalChunker1700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred311_ChemicalChunker1704_static {
    public static final BitSet FOLLOW_quantity_in_synpred311_ChemicalChunker1704 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred312_ChemicalChunker1706_static {
    public static final BitSet FOLLOW_mixture_in_synpred312_ChemicalChunker1706 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred314_ChemicalChunker1737_static {
    public static final BitSet FOLLOW_citation_in_synpred314_ChemicalChunker1737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred315_ChemicalChunker1739_static {
    public static final BitSet FOLLOW_quantity_in_synpred315_ChemicalChunker1739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred316_ChemicalChunker1741_static {
    public static final BitSet FOLLOW_mixture_in_synpred316_ChemicalChunker1741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred319_ChemicalChunker1786_static {
    public static final BitSet FOLLOW_citation_in_synpred319_ChemicalChunker1786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred320_ChemicalChunker1788_static {
    public static final BitSet FOLLOW_quantity_in_synpred320_ChemicalChunker1788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred321_ChemicalChunker1790_static {
    public static final BitSet FOLLOW_mixture_in_synpred321_ChemicalChunker1790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred322_ChemicalChunker1797_static {
    public static final BitSet FOLLOW_citation_in_synpred322_ChemicalChunker1797 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred323_ChemicalChunker1799_static {
    public static final BitSet FOLLOW_quantity_in_synpred323_ChemicalChunker1799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred324_ChemicalChunker1801_static {
    public static final BitSet FOLLOW_mixture_in_synpred324_ChemicalChunker1801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred325_ChemicalChunker1834_static {
    public static final BitSet FOLLOW_jj_in_synpred325_ChemicalChunker1834 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_synpred326_ChemicalChunker1834_static {
    public static final BitSet FOLLOW_jj_in_synpred326_ChemicalChunker1834 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_noun_in_synpred326_ChemicalChunker1837_static {
    public static final BitSet FOLLOW_noun_in_synpred326_ChemicalChunker1837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred327_ChemicalChunker1848_static {
    public static final BitSet FOLLOW_quantity_in_synpred327_ChemicalChunker1848 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred334_ChemicalChunker2011_static {
    public static final BitSet FOLLOW_comma_in_synpred334_ChemicalChunker2011 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000024000L});

    }static class FOLLOW_measurements_in_synpred334_ChemicalChunker2014_static {
    public static final BitSet FOLLOW_measurements_in_synpred334_ChemicalChunker2014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred337_ChemicalChunker2042_static {
    public static final BitSet FOLLOW_dt_in_synpred337_ChemicalChunker2042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred338_ChemicalChunker2054_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred338_ChemicalChunker2054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred345_ChemicalChunker2091_static {
    public static final BitSet FOLLOW_yield_in_synpred345_ChemicalChunker2091 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred355_ChemicalChunker2375_static {
    public static final BitSet FOLLOW_fw_in_synpred355_ChemicalChunker2375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred356_ChemicalChunker2377_static {
    public static final BitSet FOLLOW_verb_in_synpred356_ChemicalChunker2377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred357_ChemicalChunker2379_static {
    public static final BitSet FOLLOW_nn_in_synpred357_ChemicalChunker2379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2381_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred358_ChemicalChunker2381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred361_ChemicalChunker2387_static {
    public static final BitSet FOLLOW_stop_in_synpred361_ChemicalChunker2387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred362_ChemicalChunker2389_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred362_ChemicalChunker2389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred363_ChemicalChunker2391_static {
    public static final BitSet FOLLOW_molecule_in_synpred363_ChemicalChunker2391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred364_ChemicalChunker2393_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred364_ChemicalChunker2393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred366_ChemicalChunker2397_static {
    public static final BitSet FOLLOW_sym_in_synpred366_ChemicalChunker2397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred367_ChemicalChunker2399_static {
    public static final BitSet FOLLOW_cd_in_synpred367_ChemicalChunker2399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred368_ChemicalChunker2401_static {
    public static final BitSet FOLLOW_noun_in_synpred368_ChemicalChunker2401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred370_ChemicalChunker2405_static {
    public static final BitSet FOLLOW_cd_in_synpred370_ChemicalChunker2405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred371_ChemicalChunker2407_static {
    public static final BitSet FOLLOW_comma_in_synpred371_ChemicalChunker2407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred372_ChemicalChunker2409_static {
    public static final BitSet FOLLOW_adj_in_synpred372_ChemicalChunker2409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred374_ChemicalChunker2417_static {
    public static final BitSet FOLLOW_minimixture_in_synpred374_ChemicalChunker2417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred375_ChemicalChunker2419_static {
    public static final BitSet FOLLOW_fw_in_synpred375_ChemicalChunker2419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred376_ChemicalChunker2421_static {
    public static final BitSet FOLLOW_verb_in_synpred376_ChemicalChunker2421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred377_ChemicalChunker2423_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred377_ChemicalChunker2423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred378_ChemicalChunker2425_static {
    public static final BitSet FOLLOW_nnyield_in_synpred378_ChemicalChunker2425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred381_ChemicalChunker2431_static {
    public static final BitSet FOLLOW_stop_in_synpred381_ChemicalChunker2431 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred382_ChemicalChunker2433_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred382_ChemicalChunker2433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred383_ChemicalChunker2435_static {
    public static final BitSet FOLLOW_molecule_in_synpred383_ChemicalChunker2435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred384_ChemicalChunker2437_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred384_ChemicalChunker2437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred386_ChemicalChunker2441_static {
    public static final BitSet FOLLOW_sym_in_synpred386_ChemicalChunker2441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred387_ChemicalChunker2443_static {
    public static final BitSet FOLLOW_cd_in_synpred387_ChemicalChunker2443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred388_ChemicalChunker2445_static {
    public static final BitSet FOLLOW_noun_in_synpred388_ChemicalChunker2445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred390_ChemicalChunker2449_static {
    public static final BitSet FOLLOW_cd_in_synpred390_ChemicalChunker2449 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred391_ChemicalChunker2451_static {
    public static final BitSet FOLLOW_comma_in_synpred391_ChemicalChunker2451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred392_ChemicalChunker2453_static {
    public static final BitSet FOLLOW_adj_in_synpred392_ChemicalChunker2453 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_synpred394_ChemicalChunker2457_static {
    public static final BitSet FOLLOW_stop_in_synpred394_ChemicalChunker2457 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred398_ChemicalChunker2519_static {
    public static final BitSet FOLLOW_numeric_in_synpred398_ChemicalChunker2519 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericratio_in_synpred407_ChemicalChunker2611_static {
    public static final BitSet FOLLOW_numericratio_in_synpred407_ChemicalChunker2611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred408_ChemicalChunker2639_static {
    public static final BitSet FOLLOW_colon_in_synpred408_ChemicalChunker2639 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_numeric_in_synpred408_ChemicalChunker2641_static {
    public static final BitSet FOLLOW_numeric_in_synpred408_ChemicalChunker2641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred409_ChemicalChunker2657_static {
    public static final BitSet FOLLOW_colon_in_synpred409_ChemicalChunker2657 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x000F0087FBDE4824L});

    }static class FOLLOW_noun_in_synpred409_ChemicalChunker2659_static {
    public static final BitSet FOLLOW_noun_in_synpred409_ChemicalChunker2659 = new BitSet(new long[]{0x0000000000000002L});

    }
}