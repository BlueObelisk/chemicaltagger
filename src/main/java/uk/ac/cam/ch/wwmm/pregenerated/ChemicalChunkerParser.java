// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-09-20 19:14:33

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[771+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean isAtTokenPositionZero(TokenStream stream){
    	return stream.index()==0;
    }

    public boolean followedByNumberWhichIsNotAReference(TokenStream stream){
    	if ("CD".equals(stream.LT(1).getText())){
    		String tokenTypeFollowingTheCD = stream.LT(3).getText();
    		if ("NN-TIMES".equals(tokenTypeFollowingTheCD) || "COLON".equals(tokenTypeFollowingTheCD)){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean precededByProduct(TokenStream stream){
    	Token previousToken = stream.LT(-1);
    	if (previousToken !=null && previousToken.getText().equalsIgnoreCase("product")){
    		return true;
    	}
    	return false;
    }

    public boolean suitableVbYieldOrSynthesizeForReference(TokenStream stream){
    	Token nextTokenType = stream.LT(1);
    	if ("VB-YIELD".equals(nextTokenType.getText()) || "VB-SYNTHESIZE".equals(nextTokenType.getText())){
    		String nextTokenText = stream.LT(2).getText();
    		if (nextTokenText !=null && nextTokenText.toLowerCase().endsWith("ed")){
    			return true;
    		}
    	}
    	return false;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:1: document : ( sentence )+ -> ( ^( Sentence sentence ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence1 = null;


        RewriteRuleSubtreeStream stream_sentence=new RewriteRuleSubtreeStream(adaptor,"rule sentence");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:9: ( ( sentence )+ -> ( ^( Sentence sentence ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:11: ( sentence )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:11: ( sentence )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_document202_static.FOLLOW_sentence_in_document202);
            	    sentence1=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentence.add(sentence1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentence
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 91:20: -> ( ^( Sentence sentence ) )+
            {
                if ( !(stream_sentence.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentence.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:23: ^( Sentence sentence )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentence.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentence.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:1: sentence : ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ( stop )* );
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);
        int sentence_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase2 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure3 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:9: ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            int alt4=2;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:11: procedureNounPhrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNounPhrase_in_sentence221_static.FOLLOW_procedureNounPhrase_in_sentence221);
                    procedureNounPhrase2=procedureNounPhrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNounPhrase2.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:33: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:33: ( sentenceStructure | unmatchedPhrase )+
                    int cnt2=0;
                    loop2:
                    do {
                        int alt2=3;
                        alt2 = dfa2.predict(input);
                        switch (alt2) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:34: sentenceStructure
                    	    {
                    	    pushFollow(FOLLOW_sentenceStructure_in_sentence226_static.FOLLOW_sentenceStructure_in_sentence226);
                    	    sentenceStructure3=sentenceStructure();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure3.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:52: unmatchedPhrase
                    	    {
                    	    pushFollow(FOLLOW_unmatchedPhrase_in_sentence228_static.FOLLOW_unmatchedPhrase_in_sentence228);
                    	    unmatchedPhrase4=unmatchedPhrase();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase4.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt2 >= 1 ) break loop2;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(2, input);
                                throw eee;
                        }
                        cnt2++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:70: ( stop )*
                    loop3:
                    do {
                        int alt3=2;
                        switch ( input.LA(1) ) {
                        case 137:
                            {
                            alt3=1;
                            }
                            break;

                        }

                        switch (alt3) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
                    	    {
                    	    pushFollow(FOLLOW_stop_in_sentence232_static.FOLLOW_stop_in_sentence232);
                    	    stop5=stop();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop3;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentence_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter9 = null;

        ChemicalChunkerParser.advAdj_return advAdj10 = null;

        ChemicalChunkerParser.colon_return colon11 = null;

        ChemicalChunkerParser.conjunction_return conjunction12 = null;

        ChemicalChunkerParser.rbconj_return rbconj13 = null;

        ChemicalChunkerParser.comma_return comma14 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure242_static.FOLLOW_nounphrase_in_sentenceStructure242);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure244_static.FOLLOW_verbphrase_in_sentenceStructure244);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure246_static.FOLLOW_prepphrase_in_sentenceStructure246);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure248_static.FOLLOW_prepphraseAfter_in_sentenceStructure248);
            	    prepphraseAfter9=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:73: ( advAdj | colon )*
            loop6:
            do {
                int alt6=3;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure253_static.FOLLOW_advAdj_in_sentenceStructure253);
            	    advAdj10=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj10.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure255_static.FOLLOW_colon_in_sentenceStructure255);
            	    colon11=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:89: ( conjunction | rbconj | comma )*
            loop7:
            do {
                int alt7=4;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure260_static.FOLLOW_conjunction_in_sentenceStructure260);
            	    conjunction12=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction12.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure262_static.FOLLOW_rbconj_in_sentenceStructure262);
            	    rbconj13=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj13.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure264_static.FOLLOW_comma_in_sentenceStructure264);
            	    comma14=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma14.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken15 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase276_static.FOLLOW_unmatchedToken_in_unmatchedPhrase276);
            unmatchedToken15=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken15.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 98:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric16 = null;

        ChemicalChunkerParser.advAdj_return advAdj17 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode18 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode19 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp20 = null;

        ChemicalChunkerParser.inAll_return inAll21 = null;

        ChemicalChunkerParser.nnexample_return nnexample22 = null;

        ChemicalChunkerParser.nnstate_return nnstate23 = null;

        ChemicalChunkerParser.nntime_return nntime24 = null;

        ChemicalChunkerParser.nnmass_return nnmass25 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar26 = null;

        ChemicalChunkerParser.nnamount_return nnamount27 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere28 = null;

        ChemicalChunkerParser.nneq_return nneq29 = null;

        ChemicalChunkerParser.nnvol_return nnvol30 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity31 = null;

        ChemicalChunkerParser.nntemp_return nntemp32 = null;

        ChemicalChunkerParser.nnph_return nnph33 = null;

        ChemicalChunkerParser.nnflash_return nnflash34 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral35 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod36 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure37 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn38 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography39 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum40 = null;

        ChemicalChunkerParser.nncycle_return nncycle41 = null;

        ChemicalChunkerParser.nntimes_return nntimes42 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm43 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts44 = null;

        ChemicalChunkerParser.oscarase_return oscarase45 = null;

        ChemicalChunkerParser.verb_return verb46 = null;

        ChemicalChunkerParser.nnadd_return nnadd47 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture48 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus49 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate50 = null;

        ChemicalChunkerParser.nndry_return nndry51 = null;

        ChemicalChunkerParser.nnextract_return nnextract52 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter53 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate54 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify55 = null;

        ChemicalChunkerParser.nnremove_return nnremove56 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize57 = null;

        ChemicalChunkerParser.nnyield_return nnyield58 = null;

        ChemicalChunkerParser.colon_return colon59 = null;

        ChemicalChunkerParser.apost_return apost60 = null;

        ChemicalChunkerParser.neg_return neg61 = null;

        ChemicalChunkerParser.dash_return dash62 = null;

        ChemicalChunkerParser.percentsign_return percentsign63 = null;

        ChemicalChunkerParser.lsqb_return lsqb64 = null;

        ChemicalChunkerParser.rsqb_return rsqb65 = null;

        ChemicalChunkerParser.lrb_return lrb66 = null;

        ChemicalChunkerParser.rrb_return rrb67 = null;

        ChemicalChunkerParser.cc_return cc68 = null;

        ChemicalChunkerParser.dt_return dt69 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE70 = null;

        ChemicalChunkerParser.fw_return fw71 = null;

        ChemicalChunkerParser.md_return md72 = null;

        ChemicalChunkerParser.nn_return nn73 = null;

        ChemicalChunkerParser.nns_return nns74 = null;

        ChemicalChunkerParser.nnp_return nnp75 = null;

        ChemicalChunkerParser.prp_return prp76 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss77 = null;

        ChemicalChunkerParser.rbconj_return rbconj78 = null;

        ChemicalChunkerParser.sym_return sym79 = null;

        ChemicalChunkerParser.uh_return uh80 = null;

        ChemicalChunkerParser.clause_return clause81 = null;

        ChemicalChunkerParser.comma_return comma82 = null;

        ChemicalChunkerParser.ls_return ls83 = null;

        ChemicalChunkerParser.nnps_return nnps84 = null;

        ChemicalChunkerParser.pos_return pos85 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier86 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | percentsign | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt8=71;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt8=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt8=2;
                }
                break;
            case 43:
                {
                alt8=3;
                }
                break;
            case 44:
                {
                alt8=4;
                }
                break;
            case 46:
                {
                alt8=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt8=6;
                }
                break;
            case 83:
                {
                alt8=7;
                }
                break;
            case 63:
                {
                alt8=8;
                }
                break;
            case 64:
                {
                alt8=9;
                }
                break;
            case 65:
                {
                alt8=10;
                }
                break;
            case 67:
                {
                alt8=11;
                }
                break;
            case 66:
                {
                alt8=12;
                }
                break;
            case 68:
                {
                alt8=13;
                }
                break;
            case 69:
                {
                alt8=14;
                }
                break;
            case 70:
                {
                alt8=15;
                }
                break;
            case 71:
                {
                alt8=16;
                }
                break;
            case 72:
                {
                alt8=17;
                }
                break;
            case 73:
                {
                alt8=18;
                }
                break;
            case 74:
                {
                alt8=19;
                }
                break;
            case 75:
                {
                alt8=20;
                }
                break;
            case 76:
                {
                alt8=21;
                }
                break;
            case 77:
                {
                alt8=22;
                }
                break;
            case 78:
                {
                alt8=23;
                }
                break;
            case 79:
                {
                alt8=24;
                }
                break;
            case 80:
                {
                alt8=25;
                }
                break;
            case 81:
                {
                alt8=26;
                }
                break;
            case 82:
                {
                alt8=27;
                }
                break;
            case 84:
                {
                alt8=28;
                }
                break;
            case 42:
                {
                alt8=29;
                }
                break;
            case 41:
                {
                alt8=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt8=31;
                }
                break;
            case 89:
                {
                alt8=32;
                }
                break;
            case 90:
                {
                alt8=33;
                }
                break;
            case 100:
                {
                alt8=34;
                }
                break;
            case 102:
                {
                alt8=35;
                }
                break;
            case 107:
                {
                alt8=36;
                }
                break;
            case 109:
                {
                alt8=37;
                }
                break;
            case 111:
                {
                alt8=38;
                }
                break;
            case 117:
                {
                alt8=39;
                }
                break;
            case 119:
                {
                alt8=40;
                }
                break;
            case 123:
                {
                alt8=41;
                }
                break;
            case 126:
                {
                alt8=42;
                }
                break;
            case 130:
                {
                alt8=43;
                }
                break;
            case 132:
                {
                alt8=44;
                }
                break;
            case 134:
                {
                alt8=45;
                }
                break;
            case 135:
                {
                alt8=46;
                }
                break;
            case 136:
                {
                alt8=47;
                }
                break;
            case 138:
                {
                alt8=48;
                }
                break;
            case 139:
                {
                alt8=49;
                }
                break;
            case 140:
                {
                alt8=50;
                }
                break;
            case 143:
                {
                alt8=51;
                }
                break;
            case 144:
                {
                alt8=52;
                }
                break;
            case 145:
                {
                alt8=53;
                }
                break;
            case 147:
                {
                alt8=54;
                }
                break;
            case 142:
                {
                alt8=55;
                }
                break;
            case 149:
                {
                alt8=56;
                }
                break;
            case 155:
                {
                alt8=57;
                }
                break;
            case 156:
                {
                alt8=58;
                }
                break;
            case 157:
                {
                alt8=59;
                }
                break;
            case 158:
                {
                alt8=60;
                }
                break;
            case 162:
                {
                alt8=61;
                }
                break;
            case 163:
                {
                alt8=62;
                }
                break;
            case 131:
                {
                alt8=63;
                }
                break;
            case 168:
                {
                alt8=64;
                }
                break;
            case 170:
                {
                alt8=65;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt8=66;
                }
                break;
            case 133:
                {
                alt8=67;
                }
                break;
            case 154:
                {
                alt8=68;
                }
                break;
            case 159:
                {
                alt8=69;
                }
                break;
            case 161:
                {
                alt8=70;
                }
                break;
            case 141:
                {
                alt8=71;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken295_static.FOLLOW_numeric_in_unmatchedToken295);
                    numeric16=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric16.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken297_static.FOLLOW_advAdj_in_unmatchedToken297);
                    advAdj17=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj17.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken299_static.FOLLOW_tmunicode_in_unmatchedToken299);
                    tmunicode18=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode18.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken301_static.FOLLOW_cdunicode_in_unmatchedToken301);
                    cdunicode19=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode19.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken303_static.FOLLOW_jjcomp_in_unmatchedToken303);
                    jjcomp20=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp20.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken305_static.FOLLOW_inAll_in_unmatchedToken305);
                    inAll21=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll21.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken309_static.FOLLOW_nnexample_in_unmatchedToken309);
                    nnexample22=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample22.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken311_static.FOLLOW_nnstate_in_unmatchedToken311);
                    nnstate23=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate23.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken313_static.FOLLOW_nntime_in_unmatchedToken313);
                    nntime24=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime24.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken315_static.FOLLOW_nnmass_in_unmatchedToken315);
                    nnmass25=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass25.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken317_static.FOLLOW_nnmolar_in_unmatchedToken317);
                    nnmolar26=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar26.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken319_static.FOLLOW_nnamount_in_unmatchedToken319);
                    nnamount27=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount27.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken321_static.FOLLOW_nnatmosphere_in_unmatchedToken321);
                    nnatmosphere28=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere28.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken323_static.FOLLOW_nneq_in_unmatchedToken323);
                    nneq29=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq29.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken325_static.FOLLOW_nnvol_in_unmatchedToken325);
                    nnvol30=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol30.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken327_static.FOLLOW_nnchementity_in_unmatchedToken327);
                    nnchementity31=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity31.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken329_static.FOLLOW_nntemp_in_unmatchedToken329);
                    nntemp32=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp32.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken331_static.FOLLOW_nnph_in_unmatchedToken331);
                    nnph33=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph33.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken333_static.FOLLOW_nnflash_in_unmatchedToken333);
                    nnflash34=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash34.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken335_static.FOLLOW_nngeneral_in_unmatchedToken335);
                    nngeneral35=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral35.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken337_static.FOLLOW_nnmethod_in_unmatchedToken337);
                    nnmethod36=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod36.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken339_static.FOLLOW_nnpressure_in_unmatchedToken339);
                    nnpressure37=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure37.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken341_static.FOLLOW_nncolumn_in_unmatchedToken341);
                    nncolumn38=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn38.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken343_static.FOLLOW_nnchromatography_in_unmatchedToken343);
                    nnchromatography39=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography39.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken345_static.FOLLOW_nnvacuum_in_unmatchedToken345);
                    nnvacuum40=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum40.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken347_static.FOLLOW_nncycle_in_unmatchedToken347);
                    nncycle41=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle41.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken349_static.FOLLOW_nntimes_in_unmatchedToken349);
                    nntimes42=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes42.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken353_static.FOLLOW_oscarcm_in_unmatchedToken353);
                    oscarcm43=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm43.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken355_static.FOLLOW_oscaronts_in_unmatchedToken355);
                    oscaronts44=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts44.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken357_static.FOLLOW_oscarase_in_unmatchedToken357);
                    oscarase45=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase45.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken359_static.FOLLOW_verb_in_unmatchedToken359);
                    verb46=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb46.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken361_static.FOLLOW_nnadd_in_unmatchedToken361);
                    nnadd47=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd47.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken363_static.FOLLOW_nnmixture_in_unmatchedToken363);
                    nnmixture48=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture48.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken365_static.FOLLOW_nnapparatus_in_unmatchedToken365);
                    nnapparatus49=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus49.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken367_static.FOLLOW_nnconcentrate_in_unmatchedToken367);
                    nnconcentrate50=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate50.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken369_static.FOLLOW_nndry_in_unmatchedToken369);
                    nndry51=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry51.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken371_static.FOLLOW_nnextract_in_unmatchedToken371);
                    nnextract52=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract52.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken373_static.FOLLOW_nnfilter_in_unmatchedToken373);
                    nnfilter53=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter53.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken375_static.FOLLOW_nnprecipitate_in_unmatchedToken375);
                    nnprecipitate54=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate54.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken377_static.FOLLOW_nnpurify_in_unmatchedToken377);
                    nnpurify55=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify55.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken379_static.FOLLOW_nnremove_in_unmatchedToken379);
                    nnremove56=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove56.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken381_static.FOLLOW_nnsynthesize_in_unmatchedToken381);
                    nnsynthesize57=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize57.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken383_static.FOLLOW_nnyield_in_unmatchedToken383);
                    nnyield58=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield58.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken385_static.FOLLOW_colon_in_unmatchedToken385);
                    colon59=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon59.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken387_static.FOLLOW_apost_in_unmatchedToken387);
                    apost60=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost60.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken389_static.FOLLOW_neg_in_unmatchedToken389);
                    neg61=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg61.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken391_static.FOLLOW_dash_in_unmatchedToken391);
                    dash62=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash62.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:175: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_unmatchedToken393_static.FOLLOW_percentsign_in_unmatchedToken393);
                    percentsign63=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign63.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:187: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken395_static.FOLLOW_lsqb_in_unmatchedToken395);
                    lsqb64=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb64.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:192: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken397_static.FOLLOW_rsqb_in_unmatchedToken397);
                    rsqb65=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb65.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:197: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken399_static.FOLLOW_lrb_in_unmatchedToken399);
                    lrb66=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb66.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:201: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken401_static.FOLLOW_rrb_in_unmatchedToken401);
                    rrb67=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb67.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken405_static.FOLLOW_cc_in_unmatchedToken405);
                    cc68=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc68.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken407_static.FOLLOW_dt_in_unmatchedToken407);
                    dt69=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt69.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken409_static.FOLLOW_dtTHE_in_unmatchedToken409);
                    dtTHE70=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE70.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken411_static.FOLLOW_fw_in_unmatchedToken411);
                    fw71=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw71.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken413_static.FOLLOW_md_in_unmatchedToken413);
                    md72=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md72.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken415_static.FOLLOW_nn_in_unmatchedToken415);
                    nn73=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn73.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken417_static.FOLLOW_nns_in_unmatchedToken417);
                    nns74=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns74.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken419_static.FOLLOW_nnp_in_unmatchedToken419);
                    nnp75=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp75.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken421_static.FOLLOW_prp_in_unmatchedToken421);
                    prp76=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp76.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken423_static.FOLLOW_prp_poss_in_unmatchedToken423);
                    prp_poss77=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss77.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken425_static.FOLLOW_rbconj_in_unmatchedToken425);
                    rbconj78=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj78.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken427_static.FOLLOW_sym_in_unmatchedToken427);
                    sym79=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym79.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken429_static.FOLLOW_uh_in_unmatchedToken429);
                    uh80=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh80.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken431_static.FOLLOW_clause_in_unmatchedToken431);
                    clause81=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause81.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken433_static.FOLLOW_comma_in_unmatchedToken433);
                    comma82=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma82.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken435_static.FOLLOW_ls_in_unmatchedToken435);
                    ls83=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls83.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken437_static.FOLLOW_nnps_in_unmatchedToken437);
                    nnps84=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps84.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken439_static.FOLLOW_pos_in_unmatchedToken439);
                    pos85=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos85.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken441_static.FOLLOW_nnidentifier_in_unmatchedToken441);
                    nnidentifier86=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier86.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class procedureNounPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNounPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:1: procedureNounPhrase : {...}? headingProcedure -> ^( NounPhrase headingProcedure ) ;
    public final ChemicalChunkerParser.procedureNounPhrase_return procedureNounPhrase() throws RecognitionException {
        ChemicalChunkerParser.procedureNounPhrase_return retval = new ChemicalChunkerParser.procedureNounPhrase_return();
        retval.start = input.LT(1);
        int procedureNounPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedure_return headingProcedure87 = null;


        RewriteRuleSubtreeStream stream_headingProcedure=new RewriteRuleSubtreeStream(adaptor,"rule headingProcedure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:2: ({...}? headingProcedure -> ^( NounPhrase headingProcedure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:4: {...}? headingProcedure
            {
            if ( !((isAtTokenPositionZero(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "procedureNounPhrase", "isAtTokenPositionZero(input)");
            }
            pushFollow(FOLLOW_headingProcedure_in_procedureNounPhrase454_static.FOLLOW_headingProcedure_in_procedureNounPhrase454);
            headingProcedure87=headingProcedure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_headingProcedure.add(headingProcedure87.getTree());


            // AST REWRITE
            // elements: headingProcedure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:54: -> ^( NounPhrase headingProcedure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:57: ^( NounPhrase headingProcedure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_headingProcedure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, procedureNounPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNounPhrase"

    public static class headingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:109:1: headingProcedure : ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? );
    public final ChemicalChunkerParser.headingProcedure_return headingProcedure() throws RecognitionException {
        ChemicalChunkerParser.headingProcedure_return retval = new ChemicalChunkerParser.headingProcedure_return();
        retval.start = input.LT(1);
        int headingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator88 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators89 = null;

        ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure90 = null;

        ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators91 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:2: ( headingProcedureRequiringTerminator headingProcedureTerminators | bracketedHeadingProcedure ( headingProcedureTerminators )? )
            int alt10=2;
            switch ( input.LA(1) ) {
            case 38:
            case 141:
            case 146:
                {
                alt10=1;
                }
                break;
            case 139:
            case 143:
                {
                alt10=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:4: headingProcedureRequiringTerminator headingProcedureTerminators
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473_static.FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473);
                    headingProcedureRequiringTerminator88=headingProcedureRequiringTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureRequiringTerminator88.getTree());
                    pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure475_static.FOLLOW_headingProcedureTerminators_in_headingProcedure475);
                    headingProcedureTerminators89=headingProcedureTerminators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators89.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:70: bracketedHeadingProcedure ( headingProcedureTerminators )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedHeadingProcedure_in_headingProcedure479_static.FOLLOW_bracketedHeadingProcedure_in_headingProcedure479);
                    bracketedHeadingProcedure90=bracketedHeadingProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedHeadingProcedure90.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:96: ( headingProcedureTerminators )?
                    int alt9=2;
                    switch ( input.LA(1) ) {
                        case 144:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_5 = input.LA(3);

                                    if ( (synpred86_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 137:
                            {
                            alt9=1;
                            }
                            break;
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA9_6 = input.LA(3);

                                    if ( (synpred86_ChemicalChunker()) ) {
                                        alt9=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt9) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: headingProcedureTerminators
                            {
                            pushFollow(FOLLOW_headingProcedureTerminators_in_headingProcedure481_static.FOLLOW_headingProcedureTerminators_in_headingProcedure481);
                            headingProcedureTerminators91=headingProcedureTerminators();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, headingProcedureTerminators91.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, headingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedure"

    public static class headingProcedureRequiringTerminator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureRequiringTerminator"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:1: headingProcedureRequiringTerminator : ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.headingProcedureRequiringTerminator_return headingProcedureRequiringTerminator() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureRequiringTerminator_return retval = new ChemicalChunkerParser.headingProcedureRequiringTerminator_return();
        retval.start = input.LT(1);
        int headingProcedureRequiringTerminator_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier92 = null;

        ChemicalChunkerParser.numeric_return numeric93 = null;


        RewriteRuleSubtreeStream stream_nnidentifier=new RewriteRuleSubtreeStream(adaptor,"rule nnidentifier");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:2: ( ( nnidentifier | numeric ) -> ^( PROCEDURE ( nnidentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:4: ( nnidentifier | numeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:4: ( nnidentifier | numeric )
            int alt11=2;
            switch ( input.LA(1) ) {
            case 141:
                {
                alt11=1;
                }
                break;
            case 38:
            case 146:
                {
                alt11=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:5: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492_static.FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492);
                    nnidentifier92=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nnidentifier.add(nnidentifier92.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:18: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_headingProcedureRequiringTerminator494_static.FOLLOW_numeric_in_headingProcedureRequiringTerminator494);
                    numeric93=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric93.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nnidentifier, numeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 113:27: -> ^( PROCEDURE ( nnidentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:30: ^( PROCEDURE ( nnidentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:42: ( nnidentifier )?
                if ( stream_nnidentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnidentifier.nextTree());

                }
                stream_nnidentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:56: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, headingProcedureRequiringTerminator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureRequiringTerminator"

    public static class bracketedHeadingProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedHeadingProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:1: bracketedHeadingProcedure : ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) ;
    public final ChemicalChunkerParser.bracketedHeadingProcedure_return bracketedHeadingProcedure() throws RecognitionException {
        ChemicalChunkerParser.bracketedHeadingProcedure_return retval = new ChemicalChunkerParser.bracketedHeadingProcedure_return();
        retval.start = input.LT(1);
        int bracketedHeadingProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier94 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric95 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference96 = null;


        RewriteRuleSubtreeStream stream_bracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule bracketedIdentifier");
        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:2: ( ( bracketedIdentifier | bracketedNumeric | squareBracketedReference ) -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:4: ( bracketedIdentifier | bracketedNumeric | squareBracketedReference )
            int alt12=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 144:
                                {
                                alt12=2;
                                }
                                break;
                            case 141:
                                {
                                alt12=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 12, 7, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 12, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt12=1;
                        }
                        break;
                    case 38:
                        {
                        alt12=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 12, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;
                }

                }
                break;
            case 139:
                {
                alt12=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:5: bracketedIdentifier
                    {
                    pushFollow(FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517_static.FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517);
                    bracketedIdentifier94=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedIdentifier.add(bracketedIdentifier94.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:27: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521_static.FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521);
                    bracketedNumeric95=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric95.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:46: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525_static.FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525);
                    squareBracketedReference96=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference96.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedIdentifier, bracketedNumeric, squareBracketedReference
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 116:72: -> ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:75: ^( PROCEDURE ( bracketedIdentifier )? ( bracketedNumeric )? ( squareBracketedReference )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:87: ( bracketedIdentifier )?
                if ( stream_bracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedIdentifier.nextTree());

                }
                stream_bracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:108: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:126: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bracketedHeadingProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedHeadingProcedure"

    public static class headingProcedureTerminators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headingProcedureTerminators"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:1: headingProcedureTerminators : ( rrb | stop | colon );
    public final ChemicalChunkerParser.headingProcedureTerminators_return headingProcedureTerminators() throws RecognitionException {
        ChemicalChunkerParser.headingProcedureTerminators_return retval = new ChemicalChunkerParser.headingProcedureTerminators_return();
        retval.start = input.LT(1);
        int headingProcedureTerminators_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rrb_return rrb97 = null;

        ChemicalChunkerParser.stop_return stop98 = null;

        ChemicalChunkerParser.colon_return colon99 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:2: ( rrb | stop | colon )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt13=1;
                }
                break;
            case 137:
                {
                alt13=2;
                }
                break;
            case 132:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:4: rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rrb_in_headingProcedureTerminators550_static.FOLLOW_rrb_in_headingProcedureTerminators550);
                    rrb97=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb97.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:8: stop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_stop_in_headingProcedureTerminators552_static.FOLLOW_stop_in_headingProcedureTerminators552);
                    stop98=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop98.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:13: colon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_colon_in_headingProcedureTerminators554_static.FOLLOW_colon_in_headingProcedureTerminators554);
                    colon99=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon99.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, headingProcedureTerminators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "headingProcedureTerminators"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure100 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase563_static.FOLLOW_nounphraseStructure_in_nounphrase563);
            nounphraseStructure100=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure100.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 122:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1101 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2102 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure582_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure582);
                    nounphraseStructure1101=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure1101.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure584_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure584);
                    nounphraseStructure2102=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure2102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus103 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1593_static.FOLLOW_multiApparatus_in_nounphraseStructure1593);
            multiApparatus103=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus103.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE104 = null;

        ChemicalChunkerParser.dt_return dt105 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent106 = null;

        ChemicalChunkerParser.conjunction_return conjunction107 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent108 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf109 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN110 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:4: ( dtTHE )?
            int alt15=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt15=1;
                    }
                    break;
            }

            switch (alt15) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2610_static.FOLLOW_dtTHE_in_nounphraseStructure2610);
                    dtTHE104=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE104.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:11: ( dt )?
            int alt16=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA16_3 = input.LA(3);

                            if ( (synpred94_ChemicalChunker()) ) {
                                alt16=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2613_static.FOLLOW_dt_in_nounphraseStructure2613);
                    dt105=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt105.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2616_static.FOLLOW_nounphraseContent_in_nounphraseStructure2616);
            nounphraseContent106=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent106.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:34: ( ( conjunction )* nounphraseContent )*
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( conjunction )* nounphraseContent
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( conjunction )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2620_static.FOLLOW_conjunction_in_nounphraseStructure2620);
            	    	    conjunction107=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction107.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2623_static.FOLLOW_nounphraseContent_in_nounphraseStructure2623);
            	    nounphraseContent108=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent108.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:68: ( prepphraseOf | prepphraseIN )?
            int alt19=3;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA19_1 = input.LA(2);

                    if ( (synpred97_ChemicalChunker()) ) {
                        alt19=1;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred98_ChemicalChunker()) ) {
                        alt19=2;
                    }
                    }
                    break;
            }

            switch (alt19) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:69: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2628_static.FOLLOW_prepphraseOf_in_nounphraseStructure2628);
                    prepphraseOf109=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf109.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:83: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2631_static.FOLLOW_prepphraseIN_in_nounphraseStructure2631);
                    prepphraseIN110=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN110.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj111 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase112 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio113 = null;

        ChemicalChunkerParser.noun_return noun114 = null;

        ChemicalChunkerParser.numeric_return numeric115 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:2: ( ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:4: ( advAdj )* ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:4: ( advAdj )*
            loop20:
            do {
                int alt20=2;
                alt20 = dfa20.predict(input);
                switch (alt20) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent643_static.FOLLOW_advAdj_in_nounphraseContent643);
            	    advAdj111=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj111.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+
            int cnt21=0;
            loop21:
            do {
                int alt21=5;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent648_static.FOLLOW_dissolvePhrase_in_nounphraseContent648);
            	    dissolvePhrase112=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase112.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:29: ratioOrBracketedRatio
            	    {
            	    pushFollow(FOLLOW_ratioOrBracketedRatio_in_nounphraseContent650_static.FOLLOW_ratioOrBracketedRatio_in_nounphraseContent650);
            	    ratioOrBracketedRatio113=ratioOrBracketedRatio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio113.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:51: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent652_static.FOLLOW_noun_in_nounphraseContent652);
            	    noun114=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun114.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:56: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent654_static.FOLLOW_numeric_in_nounphraseContent654);
            	    numeric115=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric115.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure116 = null;

        ChemicalChunkerParser.lrb_return lrb117 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure118 = null;

        ChemicalChunkerParser.rrb_return rrb119 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase666_static.FOLLOW_dissolveStructure_in_dissolvePhrase666);
                    dissolveStructure116=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure116.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase668_static.FOLLOW_lrb_in_dissolvePhrase668);
                    lrb117=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb117.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase670_static.FOLLOW_dissolveStructure_in_dissolvePhrase670);
                    dissolveStructure118=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure118.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase672_static.FOLLOW_rrb_in_dissolvePhrase672);
                    rrb119=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb119.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, lrb, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 135:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj120 = null;

        ChemicalChunkerParser.nnp_return nnp121 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity122 = null;

        ChemicalChunkerParser.nnp_return nnp123 = null;

        ChemicalChunkerParser.molecule_return molecule124 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule125 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule126 = null;

        ChemicalChunkerParser.conjunction_return conjunction127 = null;

        ChemicalChunkerParser.molecule_return molecule128 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:4: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure697_static.FOLLOW_adj_in_dissolveStructure697);
                    adj120=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj120.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt26=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 50:
                                {
                                alt26=1;
                                }
                                break;
                            case 38:
                            case 47:
                            case 56:
                            case 59:
                            case 73:
                            case 125:
                            case 129:
                            case 130:
                            case 133:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt26=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 26, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 26, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 73:
                    case 83:
                    case 84:
                    case 90:
                    case 130:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt26=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 73:
            case 83:
            case 84:
            case 90:
            case 130:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt26=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure701_static.FOLLOW_nnp_in_dissolveStructure701);
                    nnp121=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp121.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure703_static.FOLLOW_nnchementity_in_dissolveStructure703);
                    nnchementity122=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity122.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:28: ( nnp )?
                    int alt24=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt24=1;
                            }
                            break;
                    }

                    switch (alt24) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure706_static.FOLLOW_nnp_in_dissolveStructure706);
                            nnp123=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp123.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:32: ( molecule | unnamedmolecule )
                    int alt25=2;
                    alt25 = dfa25.predict(input);
                    switch (alt25) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure709_static.FOLLOW_molecule_in_dissolveStructure709);
                            molecule124=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule124.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure711_static.FOLLOW_unnamedmolecule_in_dissolveStructure711);
                            unnamedmolecule125=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule125.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure715_static.FOLLOW_inMolecule_in_dissolveStructure715);
            inMolecule126=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule126.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:71: ( conjunction molecule )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure718_static.FOLLOW_conjunction_in_dissolveStructure718);
            	    conjunction127=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction127.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure720_static.FOLLOW_molecule_in_dissolveStructure720);
            	    molecule128=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule128.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin129 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE130 = null;

        ChemicalChunkerParser.adj_return adj131 = null;

        ChemicalChunkerParser.nnp_return nnp132 = null;

        ChemicalChunkerParser.molecule_return molecule133 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule134 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule732_static.FOLLOW_inin_in_inMolecule732);
            inin129=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin129.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:9: ( dtTHE )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt28=1;
                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule734_static.FOLLOW_dtTHE_in_inMolecule734);
                    dtTHE130=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE130.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:16: ( adj )?
            int alt29=2;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule737_static.FOLLOW_adj_in_inMolecule737);
                    adj131=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj131.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:21: ( nnp )?
            int alt30=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt30=1;
                    }
                    break;
            }

            switch (alt30) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule740_static.FOLLOW_nnp_in_inMolecule740);
                    nnp132=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp132.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:26: ( molecule | unnamedmolecule )
            int alt31=2;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule744_static.FOLLOW_molecule_in_inMolecule744);
                    molecule133=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule133.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule746_static.FOLLOW_unnamedmolecule_in_inMolecule746);
                    unnamedmolecule134=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule134.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure135 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase756_static.FOLLOW_verbphraseStructure_in_verbphrase756);
            verbphraseStructure135=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure135.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt136 = null;

        ChemicalChunkerParser.to_return to137 = null;

        ChemicalChunkerParser.inAll_return inAll138 = null;

        ChemicalChunkerParser.inafter_return inafter139 = null;

        ChemicalChunkerParser.md_return md140 = null;

        ChemicalChunkerParser.rbconj_return rbconj141 = null;

        ChemicalChunkerParser.adv_return adv142 = null;

        ChemicalChunkerParser.adj_return adj143 = null;

        ChemicalChunkerParser.verb_return verb144 = null;

        ChemicalChunkerParser.md_return md145 = null;

        ChemicalChunkerParser.adv_return adv146 = null;

        ChemicalChunkerParser.adj_return adj147 = null;

        ChemicalChunkerParser.neg_return neg148 = null;

        ChemicalChunkerParser.inoff_return inoff149 = null;

        ChemicalChunkerParser.cc_return cc150 = null;

        ChemicalChunkerParser.comma_return comma151 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase152 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:24: ( dt )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt32=1;
                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure774_static.FOLLOW_dt_in_verbphraseStructure774);
                    dt136=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt136.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:28: ( to )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_3 = input.LA(3);

                            if ( (synpred115_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure777_static.FOLLOW_to_in_verbphraseStructure777);
                    to137=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to137.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:32: ( inAll )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt34=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA34_4 = input.LA(3);

                            if ( (synpred116_ChemicalChunker()) ) {
                                alt34=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure780_static.FOLLOW_inAll_in_verbphraseStructure780);
                    inAll138=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll138.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:39: ( inafter )?
            int alt35=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt35=1;
                    }
                    break;
            }

            switch (alt35) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure783_static.FOLLOW_inafter_in_verbphraseStructure783);
                    inafter139=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter139.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:49: ( md )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt36=1;
            	            }
            	            break;

            	        }

            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure787_static.FOLLOW_md_in_verbphraseStructure787);
            	    	    md140=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md140.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:53: ( rbconj )?
            	    int alt37=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt37=1;
            	            }
            	            break;
            	    }

            	    switch (alt37) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure790_static.FOLLOW_rbconj_in_verbphraseStructure790);
            	            rbconj141=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj141.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:61: ( adv )*
            	    loop38:
            	    do {
            	        int alt38=2;
            	        switch ( input.LA(1) ) {
            	        case 164:
            	        case 165:
            	        case 166:
            	        case 167:
            	            {
            	            alt38=1;
            	            }
            	            break;

            	        }

            	        switch (alt38) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure793_static.FOLLOW_adv_in_verbphraseStructure793);
            	    	    adv142=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv142.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop38;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:66: ( adj )?
            	    int alt39=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 151:
            	        case 152:
            	        case 153:
            	            {
            	            alt39=1;
            	            }
            	            break;
            	    }

            	    switch (alt39) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure796_static.FOLLOW_adj_in_verbphraseStructure796);
            	            adj143=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj143.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:71: ( verb )+
            	    int cnt40=0;
            	    loop40:
            	    do {
            	        int alt40=2;
            	        alt40 = dfa40.predict(input);
            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure799_static.FOLLOW_verb_in_verbphraseStructure799);
            	    	    verb144=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb144.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt40 >= 1 ) break loop40;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(40, input);
            	                throw eee;
            	        }
            	        cnt40++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:77: ( md )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA41_3 = input.LA(3);

            	                if ( (synpred123_ChemicalChunker()) ) {
            	                    alt41=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure802_static.FOLLOW_md_in_verbphraseStructure802);
            	    	    md145=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md145.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:81: ( adv )*
            	    loop42:
            	    do {
            	        int alt42=2;
            	        alt42 = dfa42.predict(input);
            	        switch (alt42) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure805_static.FOLLOW_adv_in_verbphraseStructure805);
            	    	    adv146=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv146.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop42;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:86: ( adj )?
            	    int alt43=2;
            	    alt43 = dfa43.predict(input);
            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure808_static.FOLLOW_adj_in_verbphraseStructure808);
            	            adj147=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj147.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:91: ( neg )?
            	    int alt44=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA44_3 = input.LA(3);

            	                    if ( (synpred126_ChemicalChunker()) ) {
            	                        alt44=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt44) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure811_static.FOLLOW_neg_in_verbphraseStructure811);
            	            neg148=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg148.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:99: ( inoff )?
            int alt46=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA46_3 = input.LA(3);

                            if ( (synpred128_ChemicalChunker()) ) {
                                alt46=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt46) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure817_static.FOLLOW_inoff_in_verbphraseStructure817);
                    inoff149=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff149.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:106: ( ( cc )? ( comma )? prepphrase )*
            loop49:
            do {
                int alt49=2;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:107: ( cc )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure821_static.FOLLOW_cc_in_verbphraseStructure821);
            	            cc150=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc150.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:111: ( comma )?
            	    int alt48=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt48=1;
            	            }
            	            break;
            	    }

            	    switch (alt48) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure824_static.FOLLOW_comma_in_verbphraseStructure824);
            	            comma151=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma151.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure827_static.FOLLOW_prepphrase_in_verbphraseStructure827);
            	    prepphrase152=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase152.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb153 = null;

        ChemicalChunkerParser.vbp_return vbp154 = null;

        ChemicalChunkerParser.vbg_return vbg155 = null;

        ChemicalChunkerParser.vbd_return vbd156 = null;

        ChemicalChunkerParser.vbz_return vbz157 = null;

        ChemicalChunkerParser.vbn_return vbn158 = null;

        ChemicalChunkerParser.vbuse_return vbuse159 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge160 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse161 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb162 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject163 = null;

        ChemicalChunkerParser.vbadd_return vbadd164 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute165 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge166 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain167 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop168 = null;

        ChemicalChunkerParser.vbfill_return vbfill169 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend170 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat171 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus172 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate173 = null;

        ChemicalChunkerParser.vbcool_return vbcool174 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass175 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve176 = null;

        ChemicalChunkerParser.vbdry_return vbdry177 = null;

        ChemicalChunkerParser.vbextract_return vbextract178 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter179 = null;

        ChemicalChunkerParser.vbheat_return vbheat180 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease181 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition182 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate183 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify184 = null;

        ChemicalChunkerParser.vbquench_return vbquench185 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover186 = null;

        ChemicalChunkerParser.vbremove_return vbremove187 = null;

        ChemicalChunkerParser.vbstir_return vbstir188 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize189 = null;

        ChemicalChunkerParser.vbwait_return vbwait190 = null;

        ChemicalChunkerParser.vbwash_return vbwash191 = null;

        ChemicalChunkerParser.vbyield_return vbyield192 = null;

        ChemicalChunkerParser.vbchange_return vbchange193 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt50=41;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb839_static.FOLLOW_vb_in_verb839);
                    vb153=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb153.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb841_static.FOLLOW_vbp_in_verb841);
                    vbp154=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp154.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb843_static.FOLLOW_vbg_in_verb843);
                    vbg155=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg155.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb845_static.FOLLOW_vbd_in_verb845);
                    vbd156=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd156.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb847_static.FOLLOW_vbz_in_verb847);
                    vbz157=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz157.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb849_static.FOLLOW_vbn_in_verb849);
                    vbn158=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn158.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb851_static.FOLLOW_vbuse_in_verb851);
                    vbuse159=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse159.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb853_static.FOLLOW_vbsubmerge_in_verb853);
                    vbsubmerge160=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge160.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb855_static.FOLLOW_vbimmerse_in_verb855);
                    vbimmerse161=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse161.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb857_static.FOLLOW_degassMultiVerb_in_verb857);
                    degassMultiVerb162=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb162.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb859_static.FOLLOW_vbsubject_in_verb859);
                    vbsubject163=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject163.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb861_static.FOLLOW_vbadd_in_verb861);
                    vbadd164=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd164.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb863_static.FOLLOW_vbdilute_in_verb863);
                    vbdilute165=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute165.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb865_static.FOLLOW_vbcharge_in_verb865);
                    vbcharge166=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge166.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb867_static.FOLLOW_vbcontain_in_verb867);
                    vbcontain167=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain167.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb869_static.FOLLOW_vbdrop_in_verb869);
                    vbdrop168=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop168.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb871_static.FOLLOW_vbfill_in_verb871);
                    vbfill169=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill169.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb873_static.FOLLOW_vbsuspend_in_verb873);
                    vbsuspend170=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend170.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb875_static.FOLLOW_vbtreat_in_verb875);
                    vbtreat171=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat171.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb877_static.FOLLOW_vbapparatus_in_verb877);
                    vbapparatus172=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus172.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb879_static.FOLLOW_vbconcentrate_in_verb879);
                    vbconcentrate173=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate173.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb881_static.FOLLOW_vbcool_in_verb881);
                    vbcool174=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool174.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb883_static.FOLLOW_vbdegass_in_verb883);
                    vbdegass175=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass175.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb885_static.FOLLOW_vbdissolve_in_verb885);
                    vbdissolve176=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve176.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb887_static.FOLLOW_vbdry_in_verb887);
                    vbdry177=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry177.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb889_static.FOLLOW_vbextract_in_verb889);
                    vbextract178=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract178.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb891_static.FOLLOW_vbfilter_in_verb891);
                    vbfilter179=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter179.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb894_static.FOLLOW_vbheat_in_verb894);
                    vbheat180=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat180.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb896_static.FOLLOW_vbincrease_in_verb896);
                    vbincrease181=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease181.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb898_static.FOLLOW_vbpartition_in_verb898);
                    vbpartition182=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition182.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb900_static.FOLLOW_vbprecipitate_in_verb900);
                    vbprecipitate183=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate183.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb902_static.FOLLOW_vbpurify_in_verb902);
                    vbpurify184=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify184.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb904_static.FOLLOW_vbquench_in_verb904);
                    vbquench185=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench185.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb906_static.FOLLOW_vbrecover_in_verb906);
                    vbrecover186=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover186.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb908_static.FOLLOW_vbremove_in_verb908);
                    vbremove187=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove187.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb910_static.FOLLOW_vbstir_in_verb910);
                    vbstir188=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir188.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb912_static.FOLLOW_vbsynthesize_in_verb912);
                    vbsynthesize189=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize189.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb914_static.FOLLOW_vbwait_in_verb914);
                    vbwait190=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait190.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb916_static.FOLLOW_vbwash_in_verb916);
                    vbwash191=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash191.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb918_static.FOLLOW_vbyield_in_verb918);
                    vbyield192=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield192.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb920_static.FOLLOW_vbchange_in_verb920);
                    vbchange193=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange193.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass194 = null;

        ChemicalChunkerParser.cc_return cc195 = null;

        ChemicalChunkerParser.vbfill_return vbfill196 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:149:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb929_static.FOLLOW_vbdegass_in_degassMultiVerb929);
            vbdegass194=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass194.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb931_static.FOLLOW_cc_in_degassMultiVerb931);
            cc195=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc195.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb933_static.FOLLOW_vbfill_in_degassMultiVerb933);
            vbfill196=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill196.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure197 = null;

        ChemicalChunkerParser.dash_return dash198 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure199 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun942_static.FOLLOW_nounStructure_in_noun942);
            nounStructure197=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure197.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:23: ( dash nounStructure )*
            loop51:
            do {
                int alt51=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA51_2 = input.LA(2);

                    if ( (synpred172_ChemicalChunker()) ) {
                        alt51=1;
                    }


                    }
                    break;

                }

                switch (alt51) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun945_static.FOLLOW_dash_in_noun945);
            	    dash198=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash198.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun947_static.FOLLOW_nounStructure_in_noun947);
            	    nounStructure199=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure199.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp200 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss201 = null;

        ChemicalChunkerParser.citation_return citation202 = null;

        ChemicalChunkerParser.cycles_return cycles203 = null;

        ChemicalChunkerParser.molecule_return molecule204 = null;

        ChemicalChunkerParser.apparatus_return apparatus205 = null;

        ChemicalChunkerParser.mixture_return mixture206 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule207 = null;

        ChemicalChunkerParser.nnstate_return nnstate208 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode209 = null;

        ChemicalChunkerParser.nn_return nn210 = null;

        ChemicalChunkerParser.nns_return nns211 = null;

        ChemicalChunkerParser.nnp_return nnp212 = null;

        ChemicalChunkerParser.nnadd_return nnadd213 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase214 = null;

        ChemicalChunkerParser.nnexample_return nnexample215 = null;

        ChemicalChunkerParser.range_return range216 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts217 = null;

        ChemicalChunkerParser.nntime_return nntime218 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere219 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode220 = null;

        ChemicalChunkerParser.quantity_return quantity221 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity222 = null;

        ChemicalChunkerParser.nntemp_return nntemp223 = null;

        ChemicalChunkerParser.nnph_return nnph224 = null;

        ChemicalChunkerParser.nnflash_return nnflash225 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral226 = null;

        ChemicalChunkerParser.nnamount_return nnamount227 = null;

        ChemicalChunkerParser.nneq_return nneq228 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure229 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn230 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography231 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum232 = null;

        ChemicalChunkerParser.nncycle_return nncycle233 = null;

        ChemicalChunkerParser.nntimes_return nntimes234 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate235 = null;

        ChemicalChunkerParser.nnvol_return nnvol236 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify237 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize238 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture239 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference240 = null;

        ChemicalChunkerParser.nndry_return nndry241 = null;

        ChemicalChunkerParser.numeric_return numeric242 = null;

        ChemicalChunkerParser.nnextract_return nnextract243 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter244 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate245 = null;

        ChemicalChunkerParser.nnremove_return nnremove246 = null;

        ChemicalChunkerParser.nnyield_return nnyield247 = null;

        ChemicalChunkerParser.fw_return fw248 = null;

        ChemicalChunkerParser.sym_return sym249 = null;

        ChemicalChunkerParser.clause_return clause250 = null;

        ChemicalChunkerParser.ls_return ls251 = null;

        ChemicalChunkerParser.nnps_return nnps252 = null;

        ChemicalChunkerParser.pos_return pos253 = null;

        ChemicalChunkerParser.oscarase_return oscarase254 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt52=55;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure958_static.FOLLOW_prp_in_nounStructure958);
                    prp200=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp200.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure960_static.FOLLOW_prp_poss_in_nounStructure960);
                    prp_poss201=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss201.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure962_static.FOLLOW_citation_in_nounStructure962);
                    citation202=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation202.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure964_static.FOLLOW_cycles_in_nounStructure964);
                    cycles203=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles203.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure966_static.FOLLOW_molecule_in_nounStructure966);
                    molecule204=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule204.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure968_static.FOLLOW_apparatus_in_nounStructure968);
                    apparatus205=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus205.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure970_static.FOLLOW_mixture_in_nounStructure970);
                    mixture206=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture206.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure972_static.FOLLOW_unnamedmolecule_in_nounStructure972);
                    unnamedmolecule207=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule207.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:90: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure974_static.FOLLOW_nnstate_in_nounStructure974);
                    nnstate208=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate208.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:98: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure976_static.FOLLOW_procedureNode_in_nounStructure976);
                    procedureNode209=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode209.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:112: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure978_static.FOLLOW_nn_in_nounStructure978);
                    nn210=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn210.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:115: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure980_static.FOLLOW_nns_in_nounStructure980);
                    nns211=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns211.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:119: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure982_static.FOLLOW_nnp_in_nounStructure982);
                    nnp212=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp212.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:123: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure984_static.FOLLOW_nnadd_in_nounStructure984);
                    nnadd213=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd213.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:129: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure986_static.FOLLOW_preparationphrase_in_nounStructure986);
                    preparationphrase214=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase214.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:147: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure988_static.FOLLOW_nnexample_in_nounStructure988);
                    nnexample215=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample215.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:157: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure990_static.FOLLOW_range_in_nounStructure990);
                    range216=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range216.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:163: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure992_static.FOLLOW_oscaronts_in_nounStructure992);
                    oscaronts217=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts217.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:173: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure994_static.FOLLOW_nntime_in_nounStructure994);
                    nntime218=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime218.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:180: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure996_static.FOLLOW_nnatmosphere_in_nounStructure996);
                    nnatmosphere219=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere219.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:193: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure998_static.FOLLOW_tmunicode_in_nounStructure998);
                    tmunicode220=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode220.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:203: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure1000_static.FOLLOW_quantity_in_nounStructure1000);
                    quantity221=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity221.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:212: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure1002_static.FOLLOW_nnchementity_in_nounStructure1002);
                    nnchementity222=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity222.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:225: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure1004_static.FOLLOW_nntemp_in_nounStructure1004);
                    nntemp223=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp223.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:232: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure1006_static.FOLLOW_nnph_in_nounStructure1006);
                    nnph224=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph224.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:237: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure1008_static.FOLLOW_nnflash_in_nounStructure1008);
                    nnflash225=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash225.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:245: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure1010_static.FOLLOW_nngeneral_in_nounStructure1010);
                    nngeneral226=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral226.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:255: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure1012_static.FOLLOW_nnamount_in_nounStructure1012);
                    nnamount227=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount227.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:264: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure1014_static.FOLLOW_nneq_in_nounStructure1014);
                    nneq228=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq228.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:269: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure1016_static.FOLLOW_nnpressure_in_nounStructure1016);
                    nnpressure229=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure229.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:280: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure1018_static.FOLLOW_nncolumn_in_nounStructure1018);
                    nncolumn230=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn230.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:289: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure1020_static.FOLLOW_nnchromatography_in_nounStructure1020);
                    nnchromatography231=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography231.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:306: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure1022_static.FOLLOW_nnvacuum_in_nounStructure1022);
                    nnvacuum232=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum232.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:315: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure1024_static.FOLLOW_nncycle_in_nounStructure1024);
                    nncycle233=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle233.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:323: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure1026_static.FOLLOW_nntimes_in_nounStructure1026);
                    nntimes234=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes234.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:331: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure1028_static.FOLLOW_nnconcentrate_in_nounStructure1028);
                    nnconcentrate235=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate235.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:345: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure1030_static.FOLLOW_nnvol_in_nounStructure1030);
                    nnvol236=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol236.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:351: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure1032_static.FOLLOW_nnpurify_in_nounStructure1032);
                    nnpurify237=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify237.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:360: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1034_static.FOLLOW_nnsynthesize_in_nounStructure1034);
                    nnsynthesize238=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize238.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:373: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1036_static.FOLLOW_nnmixture_in_nounStructure1036);
                    nnmixture239=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture239.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:383: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure1038_static.FOLLOW_squareBracketedReference_in_nounStructure1038);
                    squareBracketedReference240=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference240.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:408: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1040_static.FOLLOW_nndry_in_nounStructure1040);
                    nndry241=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry241.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:414: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_nounStructure1042_static.FOLLOW_numeric_in_nounStructure1042);
                    numeric242=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric242.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:422: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1044_static.FOLLOW_nnextract_in_nounStructure1044);
                    nnextract243=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract243.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:432: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1046_static.FOLLOW_nnfilter_in_nounStructure1046);
                    nnfilter244=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter244.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:441: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1048_static.FOLLOW_nnprecipitate_in_nounStructure1048);
                    nnprecipitate245=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate245.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:455: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1050_static.FOLLOW_nnremove_in_nounStructure1050);
                    nnremove246=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove246.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:464: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure1052_static.FOLLOW_nnyield_in_nounStructure1052);
                    nnyield247=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield247.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:472: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1054_static.FOLLOW_fw_in_nounStructure1054);
                    fw248=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw248.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:475: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1056_static.FOLLOW_sym_in_nounStructure1056);
                    sym249=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym249.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:479: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1058_static.FOLLOW_clause_in_nounStructure1058);
                    clause250=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause250.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:486: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure1060_static.FOLLOW_ls_in_nounStructure1060);
                    ls251=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls251.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:489: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure1062_static.FOLLOW_nnps_in_nounStructure1062);
                    nnps252=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps252.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:494: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure1064_static.FOLLOW_pos_in_nounStructure1064);
                    pos253=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos253.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:498: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure1066_static.FOLLOW_oscarase_in_nounStructure1066);
                    oscarase254=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase254.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg255 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere256 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime257 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp258 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN259 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole260 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther261 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:5: ( neg )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1078_static.FOLLOW_neg_in_prepphrase1078);
                    neg255=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg255.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt54=6;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1082_static.FOLLOW_prepphraseAtmosphere_in_prepphrase1082);
                    prepphraseAtmosphere256=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere256.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1084_static.FOLLOW_prepphraseTime_in_prepphrase1084);
                    prepphraseTime257=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime257.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1086_static.FOLLOW_prepphraseTemp_in_prepphrase1086);
                    prepphraseTemp258=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp258.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1088_static.FOLLOW_prepphraseIN_in_prepphrase1088);
                    prepphraseIN259=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN259.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1090_static.FOLLOW_prepphraseRole_in_prepphrase1090);
                    prepphraseRole260=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole260.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1092_static.FOLLOW_prepphraseOther_in_prepphrase1092);
                    prepphraseOther261=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther261.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent262 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1104_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1104);
            prepphraseAtmosphereContent262=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent262.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:161:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder263 = null;

        ChemicalChunkerParser.dt_return dt264 = null;

        ChemicalChunkerParser.advAdj_return advAdj265 = null;

        ChemicalChunkerParser.molecule_return molecule266 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere267 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1124_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1124);
            inunder263=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder263.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:12: ( dt )?
            int alt55=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt55=1;
                    }
                    break;
            }

            switch (alt55) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1127_static.FOLLOW_dt_in_prepphraseAtmosphereContent1127);
                    dt264=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt264.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:16: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1130_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1130);
            	    advAdj265=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj265.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1133_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1133);
            molecule266=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule266.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:33: ( nnatmosphere )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA57_3 = input.LA(3);

                            if ( (synpred235_ChemicalChunker()) ) {
                                alt57=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1135_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1135);
                    nnatmosphere267=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere267.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure268 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1145_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1145);
            prepPhraseTimeStructure268=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure268.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 167:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj269 = null;

        ChemicalChunkerParser.inAll_return inAll270 = null;

        ChemicalChunkerParser.dt_return dt271 = null;

        ChemicalChunkerParser.advAdj_return advAdj272 = null;

        ChemicalChunkerParser.cd_return cd273 = null;

        ChemicalChunkerParser.nntime_return nntime274 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:3: ( advAdj )*
            loop58:
            do {
                int alt58=2;
                alt58 = dfa58.predict(input);
                switch (alt58) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1163_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1163);
            	    advAdj269=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj269.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:11: ( inAll )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1166_static.FOLLOW_inAll_in_prepPhraseTimeStructure1166);
                    inAll270=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll270.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:19: ( dt )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1170_static.FOLLOW_dt_in_prepPhraseTimeStructure1170);
                    dt271=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt271.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:23: ( advAdj )*
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt61=1;
                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1173_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1173);
            	    advAdj272=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj272.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:31: ( cd )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1176_static.FOLLOW_cd_in_prepPhraseTimeStructure1176);
                    cd273=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd273.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:35: ( nntime )+
            int cnt63=0;
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA63_2 = input.LA(2);

                    if ( (synpred241_ChemicalChunker()) ) {
                        alt63=1;
                    }


                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1179_static.FOLLOW_nntime_in_prepPhraseTimeStructure1179);
            	    nntime274=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime274.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        throw eee;
                }
                cnt63++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent275 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1189_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1189);
            prepphraseTempContent275=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent275.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 172:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj276 = null;

        ChemicalChunkerParser.inAll_return inAll277 = null;

        ChemicalChunkerParser.dt_return dt278 = null;

        ChemicalChunkerParser.advAdj_return advAdj279 = null;

        ChemicalChunkerParser.cd_return cd280 = null;

        ChemicalChunkerParser.nntemp_return nntemp281 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: ( advAdj )?
            int alt64=2;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1210_static.FOLLOW_advAdj_in_prepphraseTempContent1210);
                    advAdj276=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj276.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:13: ( inAll )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1213_static.FOLLOW_inAll_in_prepphraseTempContent1213);
                    inAll277=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll277.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:20: ( dt )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1216_static.FOLLOW_dt_in_prepphraseTempContent1216);
                    dt278=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt278.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:24: ( advAdj )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1219_static.FOLLOW_advAdj_in_prepphraseTempContent1219);
                    advAdj279=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj279.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:32: ( cd )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1222_static.FOLLOW_cd_in_prepphraseTempContent1222);
                    cd280=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd280.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:36: ( nntemp )+
            int cnt69=0;
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred247_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1225_static.FOLLOW_nntemp_in_prepphraseTempContent1225);
            	    nntemp281=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp281.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        throw eee;
                }
                cnt69++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin282 = null;

        ChemicalChunkerParser.molecule_return molecule283 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1234_static.FOLLOW_inin_in_prepphraseIN1234);
            inin282=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin282.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1236_static.FOLLOW_molecule_in_prepphraseIN1236);
            molecule283=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule283.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas284 = null;

        ChemicalChunkerParser.dt_return dt285 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity286 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1257_static.FOLLOW_inas_in_prepphraseRole1257);
            inas284=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas284.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:8: ( dt )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1259_static.FOLLOW_dt_in_prepphraseRole1259);
                    dt285=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt285.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1262_static.FOLLOW_nnchementity_in_prepphraseRole1262);
            nnchementity286=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity286.getTree());


            // AST REWRITE
            // elements: dt, nnchementity, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 181:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj287 = null;

        ChemicalChunkerParser.inMost_return inMost288 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase289 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:4: ( advAdj )*
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1285_static.FOLLOW_advAdj_in_prepphraseOther1285);
            	    advAdj287=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj287.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:12: ( inMost )+
            int cnt72=0;
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1288_static.FOLLOW_inMost_in_prepphraseOther1288);
            	    inMost288=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost288.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1292_static.FOLLOW_nounphrase_in_prepphraseOther1292);
            nounphrase289=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase289.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inMost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof290 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase291 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1318_static.FOLLOW_inof_in_prepphraseOf1318);
            inof290=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof290.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1321_static.FOLLOW_nounphrase_in_prepphraseOf1321);
            nounphrase291=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase291.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj292 = null;

        ChemicalChunkerParser.inafter_return inafter293 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase294 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:5: ( advAdj )?
            int alt73=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt73=1;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1343_static.FOLLOW_advAdj_in_prepphraseAfter1343);
                    advAdj292=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj292.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1346_static.FOLLOW_inafter_in_prepphraseAfter1346);
            inafter293=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter293.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1349_static.FOLLOW_nounphrase_in_prepphraseAfter1349);
            nounphrase294=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase294.getTree());


            // AST REWRITE
            // elements: advAdj, nounphrase, inafter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 190:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:190:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize295 = null;

        ChemicalChunkerParser.inas_return inas296 = null;

        ChemicalChunkerParser.nnexample_return nnexample297 = null;

        ChemicalChunkerParser.cd_return cd298 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase299 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1374_static.FOLLOW_vbsynthesize_in_preparationphrase1374);
            vbsynthesize295=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize295.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1376_static.FOLLOW_inas_in_preparationphrase1376);
            inas296=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas296.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:22: ( nnexample cd | prepphrase )
            int alt74=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt74=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt74=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1379_static.FOLLOW_nnexample_in_preparationphrase1379);
                    nnexample297=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample297.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1381_static.FOLLOW_cd_in_preparationphrase1381);
                    cd298=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd298.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:193:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1384_static.FOLLOW_prepphrase_in_preparationphrase1384);
                    prepphrase299=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase299.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus300 = null;

        ChemicalChunkerParser.conjunction_return conjunction301 = null;

        ChemicalChunkerParser.apparatus_return apparatus302 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1395_static.FOLLOW_apparatus_in_multiApparatus1395);
            apparatus300=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus300.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:14: ( ( conjunction )* apparatus )*
            loop76:
            do {
                int alt76=2;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( conjunction )*
            	    loop75:
            	    do {
            	        int alt75=2;
            	        alt75 = dfa75.predict(input);
            	        switch (alt75) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1398_static.FOLLOW_conjunction_in_multiApparatus1398);
            	    	    conjunction301=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction301.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop75;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1401_static.FOLLOW_apparatus_in_multiApparatus1401);
            	    apparatus302=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus302.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt303 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus304 = null;

        ChemicalChunkerParser.nnApp_return nnApp305 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( dt )?
            int alt77=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt77=1;
                    }
                    break;
            }

            switch (alt77) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1412_static.FOLLOW_dt_in_apparatus1412);
                    dt303=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt303.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:8: ( preapparatus )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 130:
                case 133:
                case 139:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1415_static.FOLLOW_preapparatus_in_apparatus1415);
            	    preapparatus304=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus304.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:22: ( nnApp )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred257_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1418_static.FOLLOW_nnApp_in_apparatus1418);
            	    nnApp305=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp305.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, nnApp, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 198:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus306 = null;

        ChemicalChunkerParser.dash_return dash307 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus308 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( nnapparatus )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA80_2 = input.LA(2);

                    if ( (synpred258_ChemicalChunker()) ) {
                        alt80=1;
                    }


                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1445_static.FOLLOW_nnapparatus_in_nnApp1445);
            	    nnapparatus306=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus306.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:17: ( dash nnapparatus )*
            loop81:
            do {
                int alt81=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA81_5 = input.LA(5);

                                if ( (synpred259_ChemicalChunker()) ) {
                                    alt81=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1449_static.FOLLOW_dash_in_nnApp1449);
            	    dash307=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash307.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1451_static.FOLLOW_nnapparatus_in_nnApp1451);
            	    nnapparatus308=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus308.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity309 = null;

        ChemicalChunkerParser.adj_return adj310 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure311 = null;

        ChemicalChunkerParser.nnadd_return nnadd312 = null;

        ChemicalChunkerParser.molecule_return molecule313 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity314 = null;

        ChemicalChunkerParser.nnstate_return nnstate315 = null;

        ChemicalChunkerParser.nn_return nn316 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt82=0;
            loop82:
            do {
                int alt82=9;
                alt82 = dfa82.predict(input);
                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1465_static.FOLLOW_quantity_in_preapparatus1465);
            	    quantity309=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity309.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1467_static.FOLLOW_adj_in_preapparatus1467);
            	    adj310=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj310.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1469_static.FOLLOW_nnpressure_in_preapparatus1469);
            	    nnpressure311=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure311.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1471_static.FOLLOW_nnadd_in_preapparatus1471);
            	    nnadd312=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd312.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1473_static.FOLLOW_molecule_in_preapparatus1473);
            	    molecule313=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule313.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1475_static.FOLLOW_nnchementity_in_preapparatus1475);
            	    nnchementity314=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity314.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1477_static.FOLLOW_nnstate_in_preapparatus1477);
            	    nnstate315=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate315.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1479_static.FOLLOW_nn_in_preapparatus1479);
            	    nn316=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn316.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront317 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( oscaront )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA83_2 = input.LA(2);

                    if ( (synpred268_ChemicalChunker()) ) {
                        alt83=1;
                    }


                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1491_static.FOLLOW_oscaront_in_oscaronts1491);
            	    oscaront317=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront317.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:1: oscarCompound : ( adj )* oscarCompoundStructure ( adj )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj318 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure319 = null;

        ChemicalChunkerParser.adj_return adj320 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity321 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity322 = null;

        ChemicalChunkerParser.quantity_return quantity323 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure324 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:15: ( ( adj )* oscarCompoundStructure ( adj )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:18: ( adj )* oscarCompoundStructure ( adj )? ( numericReferenceOrQuantity | nnchementity )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:18: ( adj )*
            loop84:
            do {
                int alt84=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt84=1;
                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1511_static.FOLLOW_adj_in_oscarCompound1511);
            	    adj318=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj318.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1514_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1514);
            oscarCompoundStructure319=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure319.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:46: ( adj )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1516_static.FOLLOW_adj_in_oscarCompound1516);
                    adj320=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj320.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:51: ( numericReferenceOrQuantity | nnchementity )?
            int alt86=3;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:52: numericReferenceOrQuantity
                    {
                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_oscarCompound1520_static.FOLLOW_numericReferenceOrQuantity_in_oscarCompound1520);
                    numericReferenceOrQuantity321=numericReferenceOrQuantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity321.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:81: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1524_static.FOLLOW_nnchementity_in_oscarCompound1524);
                    nnchementity322=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity322.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:97: ( quantity )*
            loop87:
            do {
                int alt87=2;
                alt87 = dfa87.predict(input);
                switch (alt87) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1529_static.FOLLOW_quantity_in_oscarCompound1529);
            	    quantity323=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity323.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:107: ( fromProcedure )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1532_static.FOLLOW_fromProcedure_in_oscarCompound1532);
                    fromProcedure324=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure324.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:1: oscarCompoundStructure : ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm325 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure326 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure327 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:23: ( ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt90=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt90=1;
                }
                break;
            case 143:
                {
                alt90=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:26: oscarcm ( afterOscarCompoundStructure )?
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1541_static.FOLLOW_oscarcm_in_oscarCompoundStructure1541);
                    oscarcm325=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm325.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:34: ( afterOscarCompoundStructure )?
                    int alt89=2;
                    alt89 = dfa89.predict(input);
                    switch (alt89) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1543_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1543);
                            afterOscarCompoundStructure326=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure326.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:65: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1548_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1548);
                    bracketedOscarCompoundStructure327=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure327.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, bracketedOscarCompoundStructure, afterOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 209:98: -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:101: ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:111: ( oscarcm )?
                if ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:120: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:149: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:1: afterOscarCompoundStructure : ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm328 = null;

        ChemicalChunkerParser.dash_return dash329 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm330 = null;

        ChemicalChunkerParser.dash_return dash331 = null;

        ChemicalChunkerParser.colon_return colon332 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm333 = null;

        ChemicalChunkerParser.dash_return dash334 = null;

        ChemicalChunkerParser.apost_return apost335 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:28: ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )=> ( colon ( oscarcm )+ )+ | ( dash | apost )+ )
            int alt98=4;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==84) ) {
                alt98=1;
            }
            else if ( (LA98_0==136) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA98_7 = input.LA(5);

                            if ( (synpred282_ChemicalChunker()) ) {
                                alt98=2;
                            }
                            else if ( (true) ) {
                                alt98=4;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 98, 7, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 98, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt98=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;
                }

            }
            else if ( (LA98_0==132) && (synpred285_ChemicalChunker())) {
                alt98=3;
            }
            else if ( (LA98_0==134) ) {
                alt98=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:30: ( oscarcm )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:30: ( oscarcm )+
                    int cnt91=0;
                    loop91:
                    do {
                        int alt91=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA91_3 = input.LA(3);

                                if ( (synpred277_ChemicalChunker()) ) {
                                    alt91=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt91) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1570_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1570);
                    	    oscarcm328=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm328.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt91 >= 1 ) break loop91;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(91, input);
                                throw eee;
                        }
                        cnt91++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:39: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:39: ( dash ( oscarcm )+ )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA93_5 = input.LA(5);

                                        if ( (synpred280_ChemicalChunker()) ) {
                                            alt93=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt93) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:40: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1574_static.FOLLOW_dash_in_afterOscarCompoundStructure1574);
                    	    dash329=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash329.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:45: ( oscarcm )+
                    	    int cnt92=0;
                    	    loop92:
                    	    do {
                    	        int alt92=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA92_3 = input.LA(3);

                    	                if ( (synpred279_ChemicalChunker()) ) {
                    	                    alt92=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt92) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1576_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1576);
                    	    	    oscarcm330=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm330.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt92 >= 1 ) break loop92;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(92, input);
                    	                throw eee;
                    	        }
                    	        cnt92++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:56: ( dash )?
                    int alt94=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA94_3 = input.LA(3);

                                    if ( (synpred281_ChemicalChunker()) ) {
                                        alt94=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt94) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1581_static.FOLLOW_dash_in_afterOscarCompoundStructure1581);
                            dash331=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash331.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:62: ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )=> ( colon ( oscarcm )+ )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:105: ( colon ( oscarcm )+ )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        switch ( input.LA(1) ) {
                        case 132:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA96_5 = input.LA(5);

                                        if ( (synpred287_ChemicalChunker()) ) {
                                            alt96=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt96) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:106: colon ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_colon_in_afterOscarCompoundStructure1597_static.FOLLOW_colon_in_afterOscarCompoundStructure1597);
                    	    colon332=colon();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon332.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:112: ( oscarcm )+
                    	    int cnt95=0;
                    	    loop95:
                    	    do {
                    	        int alt95=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA95_3 = input.LA(3);

                    	                if ( (synpred286_ChemicalChunker()) ) {
                    	                    alt95=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt95) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1599_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1599);
                    	    	    oscarcm333=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm333.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt95 >= 1 ) break loop95;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(95, input);
                    	                throw eee;
                    	        }
                    	        cnt95++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:123: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:123: ( dash | apost )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA97_4 = input.LA(3);

                                if ( (synpred289_ChemicalChunker()) ) {
                                    alt97=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA97_5 = input.LA(3);

                                if ( (synpred288_ChemicalChunker()) ) {
                                    alt97=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt97) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:124: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1605_static.FOLLOW_dash_in_afterOscarCompoundStructure1605);
                    	    dash334=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash334.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:129: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1607_static.FOLLOW_apost_in_afterOscarCompoundStructure1607);
                    	    apost335=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost335.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb336 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm337 = null;

        ChemicalChunkerParser.rrb_return rrb338 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1616_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1616);
            lrb336=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb336.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:40: ( oscarcm )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1619_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1619);
            	    oscarcm337=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm337.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1622_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1622);
            rrb338=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb338.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:213:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount339 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1632_static.FOLLOW_moleculeamount_in_molecule1632);
            moleculeamount339=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount339.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3340 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1341 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2342 = null;

        ChemicalChunkerParser.asAstate_return asAstate343 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt100=3;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1650_static.FOLLOW_moleculeamount3_in_moleculeamount1650);
                    moleculeamount3340=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3340.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1653_static.FOLLOW_moleculeamount1_in_moleculeamount1653);
                    moleculeamount1341=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1341.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1657_static.FOLLOW_moleculeamount2_in_moleculeamount1657);
                    moleculeamount2342=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2342.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:71: ( asAstate )?
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1660_static.FOLLOW_asAstate_in_moleculeamount1660);
                    asAstate343=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate343.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:1: moleculeamount3 : ( quantity | mixture )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity344 = null;

        ChemicalChunkerParser.mixture_return mixture345 = null;

        ChemicalChunkerParser.inof_return inof346 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE347 = null;

        ChemicalChunkerParser.dt_return dt348 = null;

        ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio349 = null;

        ChemicalChunkerParser.mixture_return mixture350 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:2: ( ( quantity | mixture )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:3: ( quantity | mixture )+ inof ( dtTHE | dt )? ratioOrBracketedRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:3: ( quantity | mixture )+
            int cnt102=0;
            loop102:
            do {
                int alt102=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA102_2 = input.LA(2);

                    if ( (synpred294_ChemicalChunker()) ) {
                        alt102=1;
                    }
                    else if ( (synpred295_ChemicalChunker()) ) {
                        alt102=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA102_3 = input.LA(2);

                    if ( (synpred294_ChemicalChunker()) ) {
                        alt102=1;
                    }
                    else if ( (synpred295_ChemicalChunker()) ) {
                        alt102=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt102=1;
                    }
                    break;
                case 133:
                case 139:
                    {
                    alt102=2;
                    }
                    break;

                }

                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31671_static.FOLLOW_quantity_in_moleculeamount31671);
            	    quantity344=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity344.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount31673_static.FOLLOW_mixture_in_moleculeamount31673);
            	    mixture345=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture345.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31677_static.FOLLOW_inof_in_moleculeamount31677);
            inof346=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof346.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:28: ( dtTHE | dt )?
            int alt103=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt103=1;
                    }
                    break;
                case 147:
                    {
                    alt103=2;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:29: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31680_static.FOLLOW_dtTHE_in_moleculeamount31680);
                    dtTHE347=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE347.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:37: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31684_static.FOLLOW_dt_in_moleculeamount31684);
                    dt348=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt348.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_ratioOrBracketedRatio_in_moleculeamount31688_static.FOLLOW_ratioOrBracketedRatio_in_moleculeamount31688);
            ratioOrBracketedRatio349=ratioOrBracketedRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratioOrBracketedRatio349.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:64: ( mixture )?
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31690_static.FOLLOW_mixture_in_moleculeamount31690);
                    mixture350=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture350.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31693_static.FOLLOW_oscarCompound_in_moleculeamount31693);
            oscarCompound351=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity352 = null;

        ChemicalChunkerParser.nnstate_return nnstate353 = null;

        ChemicalChunkerParser.quantity_return quantity354 = null;

        ChemicalChunkerParser.mixture_return mixture355 = null;

        ChemicalChunkerParser.inof_return inof356 = null;

        ChemicalChunkerParser.quantity_return quantity357 = null;

        ChemicalChunkerParser.inof_return inof358 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE359 = null;

        ChemicalChunkerParser.dt_return dt360 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound361 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity362 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:2: ( ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:3: ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:3: ( nnchementity | nnstate )?
            int alt105=3;
            switch ( input.LA(1) ) {
                case 71:
                    {
                    alt105=1;
                    }
                    break;
                case 63:
                    {
                    alt105=2;
                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11703_static.FOLLOW_nnchementity_in_moleculeamount11703);
                    nnchementity352=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity352.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11707_static.FOLLOW_nnstate_in_moleculeamount11707);
                    nnstate353=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate353.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:29: ( quantity | mixture )+
            int cnt106=0;
            loop106:
            do {
                int alt106=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA106_2 = input.LA(2);

                    if ( (synpred301_ChemicalChunker()) ) {
                        alt106=1;
                    }
                    else if ( (synpred302_ChemicalChunker()) ) {
                        alt106=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA106_3 = input.LA(2);

                    if ( (synpred301_ChemicalChunker()) ) {
                        alt106=1;
                    }
                    else if ( (synpred302_ChemicalChunker()) ) {
                        alt106=2;
                    }


                    }
                    break;
                case 73:
                case 130:
                    {
                    alt106=1;
                    }
                    break;
                case 133:
                case 139:
                    {
                    alt106=2;
                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11712_static.FOLLOW_quantity_in_moleculeamount11712);
            	    quantity354=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity354.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:39: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11714_static.FOLLOW_mixture_in_moleculeamount11714);
            	    mixture355=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture355.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11718_static.FOLLOW_inof_in_moleculeamount11718);
            inof356=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof356.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:54: ( quantity ( inof )? )?
            int alt108=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 73:
                                case 130:
                                case 146:
                                    {
                                    alt108=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 73:
                case 130:
                case 146:
                    {
                    alt108=1;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:55: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11721_static.FOLLOW_quantity_in_moleculeamount11721);
                    quantity357=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity357.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:64: ( inof )?
                    int alt107=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt107=1;
                            }
                            break;
                    }

                    switch (alt107) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11723_static.FOLLOW_inof_in_moleculeamount11723);
                            inof358=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof358.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:72: ( dtTHE | dt )?
            int alt109=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt109=1;
                    }
                    break;
                case 147:
                    {
                    alt109=2;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:73: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11729_static.FOLLOW_dtTHE_in_moleculeamount11729);
                    dtTHE359=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE359.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:81: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11733_static.FOLLOW_dt_in_moleculeamount11733);
                    dt360=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt360.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:86: ( oscarCompound )+
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11737_static.FOLLOW_oscarCompound_in_moleculeamount11737);
            	    oscarCompound361=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound361.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11740_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11740);
            afterCompoundCitationOrQuantity362=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity362.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity363 = null;

        ChemicalChunkerParser.mixture_return mixture364 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound365 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity366 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:2: ( ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:3: ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:3: ( quantity | mixture )*
            loop111:
            do {
                int alt111=3;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21749_static.FOLLOW_quantity_in_moleculeamount21749);
            	    quantity363=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity363.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21751_static.FOLLOW_mixture_in_moleculeamount21751);
            	    mixture364=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture364.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:23: ( oscarCompound )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                alt112 = dfa112.predict(input);
                switch (alt112) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21755_static.FOLLOW_oscarCompound_in_moleculeamount21755);
            	    oscarCompound365=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound365.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21758_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21758);
            afterCompoundCitationOrQuantity366=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity366.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation367 = null;

        ChemicalChunkerParser.quantity_return quantity368 = null;

        ChemicalChunkerParser.comma_return comma369 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node370 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure371 = null;

        ChemicalChunkerParser.mixture_return mixture372 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop114:
            do {
                int alt114=5;
                alt114 = dfa114.predict(input);
                switch (alt114) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1766_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1766);
            	    citation367=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation367.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1768_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1768);
            	    quantity368=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity368.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1770_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1770);
            	    comma369=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma369.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:59: ( quantity1Node | citationStructure )
            	    int alt113=2;
            	    switch ( input.LA(1) ) {
            	    case 143:
            	        {
            	        switch ( input.LA(2) ) {
            	        case TOKEN:
            	            {
            	            switch ( input.LA(3) ) {
            	            case 133:
            	            case 145:
            	            case 149:
            	            case 158:
            	                {
            	                alt113=2;
            	                }
            	                break;
            	            case 146:
            	                {
            	                switch ( input.LA(4) ) {
            	                case TOKEN:
            	                    {
            	                    switch ( input.LA(5) ) {
            	                    case 44:
            	                    case 65:
            	                    case 66:
            	                    case 67:
            	                    case 69:
            	                    case 70:
            	                    case 138:
            	                    case 156:
            	                        {
            	                        alt113=1;
            	                        }
            	                        break;
            	                    case 133:
            	                    case 145:
            	                    case 146:
            	                    case 149:
            	                    case 158:
            	                        {
            	                        alt113=2;
            	                        }
            	                        break;
            	                    default:
            	                        if (state.backtracking>0) {state.failed=true; return retval;}
            	                        NoViableAltException nvae =
            	                            new NoViableAltException("", 113, 6, input);

            	                        throw nvae;
            	                    }

            	                    }
            	                    break;
            	                default:
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 113, 4, input);

            	                    throw nvae;
            	                }

            	                }
            	                break;
            	            case 73:
            	            case 130:
            	                {
            	                alt113=1;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 113, 2, input);

            	                throw nvae;
            	            }

            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 113, 1, input);

            	            throw nvae;
            	        }

            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 113, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt113) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1773_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1773);
            	            quantity1Node370=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node370.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1775_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1775);
            	            citationStructure371=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure371.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:93: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_afterCompoundCitationOrQuantity1778_static.FOLLOW_mixture_in_afterCompoundCitationOrQuantity1778);
            	    mixture372=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture372.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:1: unnamedmolecule : unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription373 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:2: ( unnamedmoleculeDescription -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:4: unnamedmoleculeDescription
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1789_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1789);
            unnamedmoleculeDescription373=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription373.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:31: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: ^( UNNAMEDMOLECULE unnamedmoleculeDescription )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: unnamedmoleculeDescription : unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart374 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity375 = null;

        ChemicalChunkerParser.asAstate_return asAstate376 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:2: ( unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:4: unnamedmoleculeDescriptionStart afterCompoundCitationOrQuantity ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1806_static.FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1806);
            unnamedmoleculeDescriptionStart374=unnamedmoleculeDescriptionStart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeDescriptionStart374.getTree());
            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1808_static.FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1808);
            afterCompoundCitationOrQuantity375=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity375.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:68: ( asAstate )?
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmoleculeDescription1810_static.FOLLOW_asAstate_in_unnamedmoleculeDescription1810);
                    asAstate376=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate376.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeDescriptionStart_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescriptionStart"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );
    public final ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return unnamedmoleculeDescriptionStart() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return retval = new ChemicalChunkerParser.unnamedmoleculeDescriptionStart_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescriptionStart_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantityOf_return quantityOf377 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1378 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2379 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule380 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2381 = null;

        ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule382 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:2: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
            int alt117=3;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1820_static.FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1820);
                    quantityOf377=quantityOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantityOf377.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
                    int alt116=3;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:16: potentialUnnamedMoleculeAmount1
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1823_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1823);
                            potentialUnnamedMoleculeAmount1378=potentialUnnamedMoleculeAmount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount1378.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: potentialUnnamedMoleculeAmount2
                            {
                            pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1827_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1827);
                            potentialUnnamedMoleculeAmount2379=potentialUnnamedMoleculeAmount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2379.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:84: definiteUnnamedMolecule
                            {
                            pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1831_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1831);
                            definiteUnnamedMolecule380=definiteUnnamedMolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule380.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:112: potentialUnnamedMoleculeAmount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837);
                    potentialUnnamedMoleculeAmount2381=potentialUnnamedMoleculeAmount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeAmount2381.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:146: definiteUnnamedMolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841_static.FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841);
                    definiteUnnamedMolecule382=definiteUnnamedMolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMolecule382.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, unnamedmoleculeDescriptionStart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescriptionStart"

    public static class quantityOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantityOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:1: quantityOf : ( quantity )+ ( inof )? ( dtTHE | dt )? ;
    public final ChemicalChunkerParser.quantityOf_return quantityOf() throws RecognitionException {
        ChemicalChunkerParser.quantityOf_return retval = new ChemicalChunkerParser.quantityOf_return();
        retval.start = input.LT(1);
        int quantityOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity383 = null;

        ChemicalChunkerParser.inof_return inof384 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE385 = null;

        ChemicalChunkerParser.dt_return dt386 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:2: ( ( quantity )+ ( inof )? ( dtTHE | dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: ( quantity )+ ( inof )? ( dtTHE | dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: ( quantity )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_quantityOf1850_static.FOLLOW_quantity_in_quantityOf1850);
            	    quantity383=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity383.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:14: ( inof )?
            int alt119=2;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    alt119=1;
                    }
                    break;
            }

            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                    {
                    pushFollow(FOLLOW_inof_in_quantityOf1853_static.FOLLOW_inof_in_quantityOf1853);
                    inof384=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof384.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:20: ( dtTHE | dt )?
            int alt120=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt120=1;
                    }
                    break;
                case 147:
                    {
                    alt120=2;
                    }
                    break;
            }

            switch (alt120) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:21: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_quantityOf1857_static.FOLLOW_dtTHE_in_quantityOf1857);
                    dtTHE385=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE385.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:29: dt
                    {
                    pushFollow(FOLLOW_dt_in_quantityOf1861_static.FOLLOW_dt_in_quantityOf1861);
                    dt386=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt386.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, quantityOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantityOf"

    public static class potentialUnnamedMoleculeAmount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:1: potentialUnnamedMoleculeAmount1 : potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return potentialUnnamedMoleculeAmount1() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount1_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule387 = null;

        ChemicalChunkerParser.quantity_return quantity388 = null;

        ChemicalChunkerParser.asAstate_return asAstate389 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure390 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:2: ( potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:4: potentialUnnamedMolecule ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11872_static.FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11872);
            potentialUnnamedMolecule387=potentialUnnamedMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMolecule387.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:29: ( quantity )*
            loop121:
            do {
                int alt121=2;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11874_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11874);
            	    quantity388=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity388.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:39: ( asAstate )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11877_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11877);
                    asAstate389=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate389.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:49: ( fromProcedure )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11880_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11880);
                    fromProcedure390=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure390.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, potentialUnnamedMoleculeAmount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount1"

    public static class potentialUnnamedMoleculeAmount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeAmount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:1: potentialUnnamedMoleculeAmount2 : ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return potentialUnnamedMoleculeAmount2() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeAmount2_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeAmount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference391 = null;

        ChemicalChunkerParser.quantity_return quantity392 = null;

        ChemicalChunkerParser.asAstate_return asAstate393 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN394 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity395 = null;

        ChemicalChunkerParser.asAstate_return asAstate396 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure397 = null;

        ChemicalChunkerParser.quantity_return quantity398 = null;

        ChemicalChunkerParser.asAstate_return asAstate399 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure400 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:2: ( ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) ) ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:4: ( numberCompoundReference ( quantity | asAstate ) | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure ) )
            int alt126=2;
            switch ( input.LA(1) ) {
            case 141:
            case 143:
            case 146:
                {
                alt126=1;
                }
                break;
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt126=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:5: numberCompoundReference ( quantity | asAstate )
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21891_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21891);
                    numberCompoundReference391=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference391.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:29: ( quantity | asAstate )
                    int alt124=2;
                    switch ( input.LA(1) ) {
                    case 73:
                    case 130:
                    case 143:
                    case 146:
                        {
                        alt124=1;
                        }
                        break;
                    case 47:
                        {
                        alt124=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }

                    switch (alt124) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:30: quantity
                            {
                            pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21894_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21894);
                            quantity392=quantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity392.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:41: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21898_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21898);
                            asAstate393=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate393.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:54: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    {
                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21904_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21904);
                    potentialUnnamedMoleculeStructureNN394=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN394.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:90: ( numericReferenceOrQuantity | asAstate | fromProcedure )
                    int alt125=3;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 73:
                    case 130:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt125=1;
                        }
                        break;
                    case 47:
                        {
                        alt125=2;
                        }
                        break;
                    case 56:
                    case 59:
                    case 125:
                    case 129:
                        {
                        alt125=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }

                    switch (alt125) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:91: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21907_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21907);
                            numericReferenceOrQuantity395=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity395.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:120: asAstate
                            {
                            pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21911_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21911);
                            asAstate396=asAstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate396.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:131: fromProcedure
                            {
                            pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21915_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21915);
                            fromProcedure397=fromProcedure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure397.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:148: ( quantity )*
            loop127:
            do {
                int alt127=2;
                alt127 = dfa127.predict(input);
                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21920_static.FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21920);
            	    quantity398=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity398.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:158: ( asAstate )?
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21923_static.FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21923);
                    asAstate399=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate399.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:168: ( fromProcedure )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21926_static.FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21926);
                    fromProcedure400=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure400.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, potentialUnnamedMoleculeAmount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeAmount2"

    public static class definiteUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: definiteUnnamedMolecule : definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? ;
    public final ChemicalChunkerParser.definiteUnnamedMolecule_return definiteUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMolecule_return retval = new ChemicalChunkerParser.definiteUnnamedMolecule_return();
        retval.start = input.LT(1);
        int definiteUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure401 = null;

        ChemicalChunkerParser.quantity_return quantity402 = null;

        ChemicalChunkerParser.asAstate_return asAstate403 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure404 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:2: ( definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:4: definiteUnnamedMoleculeStructure ( quantity )* ( asAstate )? ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1936_static.FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1936);
            definiteUnnamedMoleculeStructure401=definiteUnnamedMoleculeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definiteUnnamedMoleculeStructure401.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:37: ( quantity )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_definiteUnnamedMolecule1938_static.FOLLOW_quantity_in_definiteUnnamedMolecule1938);
            	    quantity402=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity402.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:47: ( asAstate )?
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_definiteUnnamedMolecule1941_static.FOLLOW_asAstate_in_definiteUnnamedMolecule1941);
                    asAstate403=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate403.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:57: ( fromProcedure )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_definiteUnnamedMolecule1944_static.FOLLOW_fromProcedure_in_definiteUnnamedMolecule1944);
                    fromProcedure404=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure404.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, definiteUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMolecule"

    public static class definiteUnnamedMoleculeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definiteUnnamedMoleculeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: definiteUnnamedMoleculeStructure : ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return definiteUnnamedMoleculeStructure() throws RecognitionException {
        ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return retval = new ChemicalChunkerParser.definiteUnnamedMoleculeStructure_return();
        retval.start = input.LT(1);
        int definiteUnnamedMoleculeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj405 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity406 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference407 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp408 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity409 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity410 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference411 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:2: ( ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? ) | alphanumericOrIdentifierCompoundReference )
            int alt136=2;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 151:
            case 152:
            case 153:
                {
                alt136=1;
                }
                break;
            case 38:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt136=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: ( adj )* ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:4: ( adj )*
                    loop133:
                    do {
                        int alt133=2;
                        switch ( input.LA(1) ) {
                        case 39:
                        case 40:
                        case 45:
                        case 151:
                        case 152:
                        case 153:
                            {
                            alt133=1;
                            }
                            break;

                        }

                        switch (alt133) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    	    {
                    	    pushFollow(FOLLOW_adj_in_definiteUnnamedMoleculeStructure1954_static.FOLLOW_adj_in_definiteUnnamedMoleculeStructure1954);
                    	    adj405=adj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj405.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:9: ( nnchementity numericOrIdentifierCompoundReference | jjcomp nnchementity ( numericReferenceOrQuantity )? )
                    int alt135=2;
                    switch ( input.LA(1) ) {
                    case 71:
                        {
                        alt135=1;
                        }
                        break;
                    case 46:
                        {
                        alt135=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }

                    switch (alt135) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:10: nnchementity numericOrIdentifierCompoundReference
                            {
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1958_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1958);
                            nnchementity406=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity406.getTree());
                            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1960_static.FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1960);
                            numericOrIdentifierCompoundReference407=numericOrIdentifierCompoundReference();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference407.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:62: jjcomp nnchementity ( numericReferenceOrQuantity )?
                            {
                            pushFollow(FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1964_static.FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1964);
                            jjcomp408=jjcomp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp408.getTree());
                            pushFollow(FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1966_static.FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1966);
                            nnchementity409=nnchementity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity409.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:82: ( numericReferenceOrQuantity )?
                            int alt134=2;
                            alt134 = dfa134.predict(input);
                            switch (alt134) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                                    {
                                    pushFollow(FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1968_static.FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1968);
                                    numericReferenceOrQuantity410=numericReferenceOrQuantity();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity410.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:113: alphanumericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1974_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1974);
                    alphanumericOrIdentifierCompoundReference411=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference411.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, definiteUnnamedMoleculeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "definiteUnnamedMoleculeStructure"

    public static class potentialUnnamedMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: potentialUnnamedMolecule : ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? );
    public final ChemicalChunkerParser.potentialUnnamedMolecule_return potentialUnnamedMolecule() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMolecule_return retval = new ChemicalChunkerParser.potentialUnnamedMolecule_return();
        retval.start = input.LT(1);
        int potentialUnnamedMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference412 = null;

        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN413 = null;

        ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity414 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:2: ( numberCompoundReference | potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )? )
            int alt138=2;
            switch ( input.LA(1) ) {
            case 141:
            case 143:
            case 146:
                {
                alt138=1;
                }
                break;
            case 41:
            case 42:
            case 45:
            case 46:
            case 63:
            case 68:
            case 71:
            case 83:
            case 90:
            case 151:
                {
                alt138=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:4: numberCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983_static.FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983);
                    numberCompoundReference412=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference412.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:30: potentialUnnamedMoleculeStructureNN ( numericReferenceOrQuantity )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987_static.FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987);
                    potentialUnnamedMoleculeStructureNN413=potentialUnnamedMoleculeStructureNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, potentialUnnamedMoleculeStructureNN413.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:66: ( numericReferenceOrQuantity )?
                    int alt137=2;
                    alt137 = dfa137.predict(input);
                    switch (alt137) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericReferenceOrQuantity
                            {
                            pushFollow(FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989_static.FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989);
                            numericReferenceOrQuantity414=numericReferenceOrQuantity();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericReferenceOrQuantity414.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, potentialUnnamedMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMolecule"

    public static class potentialUnnamedMoleculeStructureNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "potentialUnnamedMoleculeStructureNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem )* nnchementity );
    public final ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return potentialUnnamedMoleculeStructureNN() throws RecognitionException {
        ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return retval = new ChemicalChunkerParser.potentialUnnamedMoleculeStructureNN_return();
        retval.start = input.LT(1);
        int potentialUnnamedMoleculeStructureNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj415 = null;

        ChemicalChunkerParser.jjchem_return jjchem416 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp417 = null;

        ChemicalChunkerParser.nnstate_return nnstate418 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound419 = null;

        ChemicalChunkerParser.nnexample_return nnexample420 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts421 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere422 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture423 = null;

        ChemicalChunkerParser.oscarase_return oscarase424 = null;

        ChemicalChunkerParser.jj_return jj425 = null;

        ChemicalChunkerParser.jjchem_return jjchem426 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity427 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem )* nnchementity )
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase )
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: ( jj | jjchem | jjcomp )*
                    loop139:
                    do {
                        int alt139=4;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt139=1;
                            }
                            break;
                        case 45:
                            {
                            alt139=2;
                            }
                            break;
                        case 46:
                            {
                            alt139=3;
                            }
                            break;

                        }

                        switch (alt139) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:5: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002);
                    	    jj415=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj415.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:8: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004);
                    	    jjchem416=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem416.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:15: jjcomp
                    	    {
                    	    pushFollow(FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006_static.FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006);
                    	    jjcomp417=jjcomp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp417.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:24: ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase )
                    int alt140=7;
                    alt140 = dfa140.predict(input);
                    switch (alt140) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:25: nnstate
                            {
                            pushFollow(FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011_static.FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011);
                            nnstate418=nnstate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate418.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:33: referenceToExampleCompound
                            {
                            pushFollow(FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013_static.FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013);
                            referenceToExampleCompound419=referenceToExampleCompound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound419.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:60: nnexample
                            {
                            pushFollow(FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015_static.FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015);
                            nnexample420=nnexample();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample420.getTree());

                            }
                            break;
                        case 4 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:70: oscaronts
                            {
                            pushFollow(FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017_static.FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017);
                            oscaronts421=oscaronts();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts421.getTree());

                            }
                            break;
                        case 5 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:80: nnatmosphere
                            {
                            pushFollow(FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019_static.FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019);
                            nnatmosphere422=nnatmosphere();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere422.getTree());

                            }
                            break;
                        case 6 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:93: nnmixture
                            {
                            pushFollow(FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021_static.FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021);
                            nnmixture423=nnmixture();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture423.getTree());

                            }
                            break;
                        case 7 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:103: oscarase
                            {
                            pushFollow(FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023_static.FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023);
                            oscarase424=oscarase();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase424.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:115: ( jj | jjchem )* nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:115: ( jj | jjchem )*
                    loop141:
                    do {
                        int alt141=3;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt141=1;
                            }
                            break;
                        case 45:
                            {
                            alt141=2;
                            }
                            break;

                        }

                        switch (alt141) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:116: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029_static.FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029);
                    	    jj425=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj425.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:119: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031_static.FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031);
                    	    jjchem426=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem426.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035_static.FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035);
                    nnchementity427=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity427.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, potentialUnnamedMoleculeStructureNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "potentialUnnamedMoleculeStructureNN"

    public static class numericReferenceOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericReferenceOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:1: numericReferenceOrQuantity : ( quantity | {...}? numericOrIdentifierCompoundReference );
    public final ChemicalChunkerParser.numericReferenceOrQuantity_return numericReferenceOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.numericReferenceOrQuantity_return retval = new ChemicalChunkerParser.numericReferenceOrQuantity_return();
        retval.start = input.LT(1);
        int numericReferenceOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity428 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference429 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:2: ( quantity | {...}? numericOrIdentifierCompoundReference )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:4: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_numericReferenceOrQuantity2045_static.FOLLOW_quantity_in_numericReferenceOrQuantity2045);
                    quantity428=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity428.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:15: {...}? numericOrIdentifierCompoundReference
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "numericReferenceOrQuantity", "!followedByNumberWhichIsNotAReference(input)");
                    }
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051_static.FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051);
                    numericOrIdentifierCompoundReference429=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference429.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, numericReferenceOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericReferenceOrQuantity"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: asAstate : inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas430 = null;

        ChemicalChunkerParser.dt_return dt431 = null;

        ChemicalChunkerParser.jj_return jj432 = null;

        ChemicalChunkerParser.jjchem_return jjchem433 = null;

        ChemicalChunkerParser.nnstate_return nnstate434 = null;

        ChemicalChunkerParser.quantity_return quantity435 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:2: ( inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:4: inas ( dt )? ( jj | jjchem )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate2060_static.FOLLOW_inas_in_asAstate2060);
            inas430=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas430.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:9: ( dt )?
            int alt144=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt144=1;
                    }
                    break;
            }

            switch (alt144) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate2062_static.FOLLOW_dt_in_asAstate2062);
                    dt431=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt431.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:13: ( jj | jjchem )*
            loop145:
            do {
                int alt145=3;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt145=1;
                    }
                    break;
                case 45:
                    {
                    alt145=2;
                    }
                    break;

                }

                switch (alt145) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate2066_static.FOLLOW_jj_in_asAstate2066);
            	    jj432=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj432.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate2068_static.FOLLOW_jjchem_in_asAstate2068);
            	    jjchem433=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem433.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate2072_static.FOLLOW_nnstate_in_asAstate2072);
            nnstate434=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate434.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:34: ( quantity )*
            loop146:
            do {
                int alt146=2;
                alt146 = dfa146.predict(input);
                switch (alt146) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate2074_static.FOLLOW_quantity_in_asAstate2074);
            	    quantity435=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity435.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:1: alphanumericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference436 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier437 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum438 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric439 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_cdAlphanum=new RewriteRuleSubtreeStream(adaptor,"rule cdAlphanum");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            int alt147=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt147=1;
                }
                break;
            case 141:
            case 146:
                {
                alt147=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt147=2;
                                }
                                break;
                            case 144:
                                {
                                alt147=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 147, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 147, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt147=2;
                        }
                        break;
                    case 38:
                        {
                        alt147=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 3, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt147=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086_static.FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086);
                    squareBracketedReference436=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference436.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088_static.FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088);
                    identifierOrBracketedIdentifier437=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier437.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:63: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090_static.FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090);
                    cdAlphanum438=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdAlphanum.add(cdAlphanum438.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:74: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092_static.FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092);
                    bracketedNumeric439=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric439.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedNumeric, identifierOrBracketedIdentifier, cdAlphanum, squareBracketedReference
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 267:92: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:95: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:117: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:143: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:176: ( cdAlphanum )?
                if ( stream_cdAlphanum.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdAlphanum.nextTree());

                }
                stream_cdAlphanum.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:267:188: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:1: numberCompoundReference : ( ( quantity )=> identifierOrBracketedIdentifier | cd ) -> ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier440 = null;

        ChemicalChunkerParser.cd_return cd441 = null;


        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:3: ( ( ( quantity )=> identifierOrBracketedIdentifier | cd ) -> ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:5: ( ( quantity )=> identifierOrBracketedIdentifier | cd )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:5: ( ( quantity )=> identifierOrBracketedIdentifier | cd )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==146) ) {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    int LA148_4 = input.LA(3);

                    if ( (synpred364_ChemicalChunker()) ) {
                        alt148=1;
                    }
                    else if ( (true) ) {
                        alt148=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 148, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA148_0==141) && (synpred364_ChemicalChunker())) {
                alt148=1;
            }
            else if ( (LA148_0==143) && (synpred364_ChemicalChunker())) {
                alt148=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:6: ( quantity )=> identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128_static.FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128);
                    identifierOrBracketedIdentifier440=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier440.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:54: cd
                    {
                    pushFollow(FOLLOW_cd_in_numberCompoundReference2132_static.FOLLOW_cd_in_numberCompoundReference2132);
                    cd441=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd441.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:58: -> ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:61: ^( REFERENCETOCOMPOUND ( identifierOrBracketedIdentifier )? ( cd )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:83: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:116: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: numericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference442 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier443 = null;

        ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric444 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_numericOrBracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule numericOrBracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157_static.FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157);
                    squareBracketedReference442=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference442.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159_static.FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159);
                    identifierOrBracketedIdentifier443=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier443.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:63: numericOrBracketedNumeric
                    {
                    pushFollow(FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161_static.FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161);
                    numericOrBracketedNumeric444=numericOrBracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericOrBracketedNumeric.add(numericOrBracketedNumeric444.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, numericOrBracketedNumeric, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 274:90: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:93: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:115: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:141: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:174: ( numericOrBracketedNumeric )?
                if ( stream_numericOrBracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericOrBracketedNumeric.nextTree());

                }
                stream_numericOrBracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb445 = null;

        ChemicalChunkerParser.numeric_return numeric446 = null;

        ChemicalChunkerParser.rsqb_return rsqb447 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:2: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:4: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference2187_static.FOLLOW_lsqb_in_squareBracketedReference2187);
            lsqb445=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb445.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference2189_static.FOLLOW_numeric_in_squareBracketedReference2189);
            numeric446=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric446.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference2191_static.FOLLOW_rsqb_in_squareBracketedReference2191);
            rsqb447=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb447.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node448 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node449 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:14: ( quantity1Node | quantity2Node )
            int alt150=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt150=1;
                }
                break;
            case 73:
            case 130:
            case 146:
                {
                alt150=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2202_static.FOLLOW_quantity1Node_in_quantity2202);
                    quantity1Node448=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node448.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2204_static.FOLLOW_quantity2Node_in_quantity2204);
                    quantity2Node449=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node449.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1450 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2213_static.FOLLOW_quantity1_in_quantity1Node2213);
            quantity1450=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1450.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb451 = null;

        ChemicalChunkerParser.measurements_return measurements452 = null;

        ChemicalChunkerParser.comma_return comma453 = null;

        ChemicalChunkerParser.measurements_return measurements454 = null;

        ChemicalChunkerParser.comma_return comma455 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase456 = null;

        ChemicalChunkerParser.stop_return stop457 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase458 = null;

        ChemicalChunkerParser.rrb_return rrb459 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12233_static.FOLLOW_lrb_in_quantity12233);
            lrb451=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb451.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12235_static.FOLLOW_measurements_in_quantity12235);
            measurements452=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements452.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:21: ( comma measurements )*
            loop151:
            do {
                int alt151=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 73:
                        case 130:
                        case 146:
                            {
                            alt151=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt151) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12238_static.FOLLOW_comma_in_quantity12238);
            	    comma453=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma453.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12241_static.FOLLOW_measurements_in_quantity12241);
            	    measurements454=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements454.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:44: ( comma preparationphrase )*
            loop152:
            do {
                int alt152=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt152=1;
                    }
                    break;

                }

                switch (alt152) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12246_static.FOLLOW_comma_in_quantity12246);
            	    comma455=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma455.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12248_static.FOLLOW_preparationphrase_in_quantity12248);
            	    preparationphrase456=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase456.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:71: ( stop preparationphrase )*
            loop153:
            do {
                int alt153=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt153=1;
                    }
                    break;

                }

                switch (alt153) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:284:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12253_static.FOLLOW_stop_in_quantity12253);
            	    stop457=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop457.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12255_static.FOLLOW_preparationphrase_in_quantity12255);
            	    preparationphrase458=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase458.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12260_static.FOLLOW_rrb_in_quantity12260);
            rrb459=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb459.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2460 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2268_static.FOLLOW_quantity2_in_quantity2Node2268);
            quantity2460=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2460.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements461 = null;

        ChemicalChunkerParser.comma_return comma462 = null;

        ChemicalChunkerParser.measurements_return measurements463 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22289_static.FOLLOW_measurements_in_quantity22289);
            measurements461=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements461.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:18: ( comma measurements )*
            loop154:
            do {
                int alt154=2;
                alt154 = dfa154.predict(input);
                switch (alt154) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22292_static.FOLLOW_comma_in_quantity22292);
            	    comma462=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma462.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22295_static.FOLLOW_measurements_in_quantity22295);
            	    measurements463=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements463.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd464 = null;

        ChemicalChunkerParser.nn_return nn465 = null;

        ChemicalChunkerParser.multiple_return multiple466 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes467 = null;

        ChemicalChunkerParser.dt_return dt468 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:3: ( cd nn )?
            int alt155=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 73:
                                                case 130:
                                                case 146:
                                                    {
                                                    alt155=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt155) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2308_static.FOLLOW_cd_in_measurements2308);
                    cd464=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd464.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2310_static.FOLLOW_nn_in_measurements2310);
                    nn465=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn465.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:12: ( multiple | measurementtypes )
            int alt156=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 156:
                        {
                        alt156=2;
                        }
                        break;
                    case 44:
                        {
                        alt156=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }

                }
                break;
            case 73:
            case 130:
                {
                alt156=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2315_static.FOLLOW_multiple_in_measurements2315);
                    multiple466=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple466.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2317_static.FOLLOW_measurementtypes_in_measurements2317);
                    measurementtypes467=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes467.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:40: ( dt )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA157_3 = input.LA(3);

                            if ( (synpred374_ChemicalChunker()) ) {
                                alt157=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2320_static.FOLLOW_dt_in_measurements2320);
                    dt468=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt468.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd469 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode470 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes471 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2328_static.FOLLOW_cd_in_multiple2328);
            cd469=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd469.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2330_static.FOLLOW_cdunicode_in_multiple2330);
            cdunicode470=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode470.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:25: ( measurementtypes )?
            int alt158=2;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2332_static.FOLLOW_measurementtypes_in_multiple2332);
                    measurementtypes471=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes471.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cdunicode, cd, measurementtypes
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar472 = null;

        ChemicalChunkerParser.amount_return amount473 = null;

        ChemicalChunkerParser.mass_return mass474 = null;

        ChemicalChunkerParser.volume_return volume475 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity476 = null;

        ChemicalChunkerParser.equivalent_return equivalent477 = null;

        ChemicalChunkerParser.yield_return yield478 = null;

        ChemicalChunkerParser.percent_return percent479 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt159=8;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2357_static.FOLLOW_molar_in_measurementtypes2357);
                    molar472=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar472.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2359_static.FOLLOW_amount_in_measurementtypes2359);
                    amount473=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount473.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2361_static.FOLLOW_mass_in_measurementtypes2361);
                    mass474=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass474.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2363_static.FOLLOW_volume_in_measurementtypes2363);
                    volume475=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume475.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2365_static.FOLLOW_logHydrogenActivity_in_measurementtypes2365);
                    logHydrogenActivity476=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity476.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2367_static.FOLLOW_equivalent_in_measurementtypes2367);
                    equivalent477=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent477.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2369_static.FOLLOW_yield_in_measurementtypes2369);
                    yield478=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield478.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2371_static.FOLLOW_percent_in_measurementtypes2371);
                    percent479=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent479.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: molar : cd nnmolar -> ^( MOLAR cd nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd480 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar481 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:7: ( cd nnmolar -> ^( MOLAR cd nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:9: cd nnmolar
            {
            pushFollow(FOLLOW_cd_in_molar2379_static.FOLLOW_cd_in_molar2379);
            cd480=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd480.getTree());
            pushFollow(FOLLOW_nnmolar_in_molar2381_static.FOLLOW_nnmolar_in_molar2381);
            nnmolar481=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar481.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 297:20: -> ^( MOLAR cd nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:23: ^( MOLAR cd nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: amount : cd nnamount -> ^( AMOUNT cd nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd482 = null;

        ChemicalChunkerParser.nnamount_return nnamount483 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:8: ( cd nnamount -> ^( AMOUNT cd nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:10: cd nnamount
            {
            pushFollow(FOLLOW_cd_in_amount2401_static.FOLLOW_cd_in_amount2401);
            cd482=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd482.getTree());
            pushFollow(FOLLOW_nnamount_in_amount2403_static.FOLLOW_nnamount_in_amount2403);
            nnamount483=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount483.getTree());


            // AST REWRITE
            // elements: cd, nnamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:22: -> ^( AMOUNT cd nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:25: ^( AMOUNT cd nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:1: mass : cd nnmass -> ^( MASS cd nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd484 = null;

        ChemicalChunkerParser.nnmass_return nnmass485 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:6: ( cd nnmass -> ^( MASS cd nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:8: cd nnmass
            {
            pushFollow(FOLLOW_cd_in_mass2423_static.FOLLOW_cd_in_mass2423);
            cd484=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd484.getTree());
            pushFollow(FOLLOW_nnmass_in_mass2425_static.FOLLOW_nnmass_in_mass2425);
            nnmass485=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass485.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:17: -> ^( MASS cd nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:20: ^( MASS cd nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: volume : cd nnvol -> ^( VOLUME cd nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd486 = null;

        ChemicalChunkerParser.nnvol_return nnvol487 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:8: ( cd nnvol -> ^( VOLUME cd nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:10: cd nnvol
            {
            pushFollow(FOLLOW_cd_in_volume2444_static.FOLLOW_cd_in_volume2444);
            cd486=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd486.getTree());
            pushFollow(FOLLOW_nnvol_in_volume2446_static.FOLLOW_nnvol_in_volume2446);
            nnvol487=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol487.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:19: -> ^( VOLUME cd nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:22: ^( VOLUME cd nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph488 = null;

        ChemicalChunkerParser.sym_return sym489 = null;

        ChemicalChunkerParser.cd_return cd490 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2466_static.FOLLOW_nnph_in_logHydrogenActivity2466);
            nnph488=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph488.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:28: ( sym )?
            int alt160=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt160=1;
                    }
                    break;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2468_static.FOLLOW_sym_in_logHydrogenActivity2468);
                    sym489=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym489.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2471_static.FOLLOW_cd_in_logHydrogenActivity2471);
            cd490=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd490.getTree());


            // AST REWRITE
            // elements: sym, cd, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 301:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: equivalent : cd nneq -> ^( EQUIVALENT cd nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd491 = null;

        ChemicalChunkerParser.nneq_return nneq492 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:11: ( cd nneq -> ^( EQUIVALENT cd nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:13: cd nneq
            {
            pushFollow(FOLLOW_cd_in_equivalent2491_static.FOLLOW_cd_in_equivalent2491);
            cd491=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd491.getTree());
            pushFollow(FOLLOW_nneq_in_equivalent2493_static.FOLLOW_nneq_in_equivalent2493);
            nneq492=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq492.getTree());


            // AST REWRITE
            // elements: cd, nneq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:21: -> ^( EQUIVALENT cd nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:24: ^( EQUIVALENT cd nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1493 = null;

        ChemicalChunkerParser.yield2_return yield2494 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt161=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt161=1;
                }
                break;
            case 146:
                {
                alt161=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2510_static.FOLLOW_yield1_in_yield2510);
                    yield1493=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1493.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 303:15: -> ^( YIELD yield1 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2521_static.FOLLOW_yield2_in_yield2521);
                    yield2494=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2494.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 303:42: -> ^( YIELD yield2 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: yield1 : nnyield ( inof | colon ) percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield495 = null;

        ChemicalChunkerParser.inof_return inof496 = null;

        ChemicalChunkerParser.colon_return colon497 = null;

        ChemicalChunkerParser.percent_return percent498 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:7: ( nnyield ( inof | colon ) percent )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:9: nnyield ( inof | colon ) percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12535_static.FOLLOW_nnyield_in_yield12535);
            nnyield495=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield495.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:17: ( inof | colon )
            int alt162=2;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt162=1;
                }
                break;
            case 132:
                {
                alt162=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:18: inof
                    {
                    pushFollow(FOLLOW_inof_in_yield12538_static.FOLLOW_inof_in_yield12538);
                    inof496=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof496.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:23: colon
                    {
                    pushFollow(FOLLOW_colon_in_yield12540_static.FOLLOW_colon_in_yield12540);
                    colon497=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon497.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percent_in_yield12543_static.FOLLOW_percent_in_yield12543);
            percent498=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent498.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent499 = null;

        ChemicalChunkerParser.nnyield_return nnyield500 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:7: ( percent nnyield )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22549_static.FOLLOW_percent_in_yield22549);
            percent499=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent499.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22551_static.FOLLOW_nnyield_in_yield22551);
            nnyield500=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield500.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: percent : cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd501 = null;

        ChemicalChunkerParser.nn_return nn502 = null;

        ChemicalChunkerParser.percentsign_return percentsign503 = null;

        ChemicalChunkerParser.dash_return dash504 = null;

        ChemicalChunkerParser.cd_return cd505 = null;

        ChemicalChunkerParser.percentsign_return percentsign506 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_percentsign=new RewriteRuleSubtreeStream(adaptor,"rule percentsign");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:9: ( cd ( nn )? percentsign ( dash cd percentsign )? -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:11: cd ( nn )? percentsign ( dash cd percentsign )?
            {
            pushFollow(FOLLOW_cd_in_percent2559_static.FOLLOW_cd_in_percent2559);
            cd501=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd501.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:14: ( nn )?
            int alt163=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt163=1;
                    }
                    break;
            }

            switch (alt163) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2561_static.FOLLOW_nn_in_percent2561);
                    nn502=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn502.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_percentsign_in_percent2564_static.FOLLOW_percentsign_in_percent2564);
            percentsign503=percentsign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percentsign.add(percentsign503.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:30: ( dash cd percentsign )?
            int alt164=2;
            switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 146:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 138:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA164_7 = input.LA(7);

                                                            if ( (synpred387_ChemicalChunker()) ) {
                                                                alt164=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt164) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:32: dash cd percentsign
                    {
                    pushFollow(FOLLOW_dash_in_percent2568_static.FOLLOW_dash_in_percent2568);
                    dash504=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash504.getTree());
                    pushFollow(FOLLOW_cd_in_percent2570_static.FOLLOW_cd_in_percent2570);
                    cd505=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cd.add(cd505.getTree());
                    pushFollow(FOLLOW_percentsign_in_percent2572_static.FOLLOW_percentsign_in_percent2572);
                    percentsign506=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percentsign.add(percentsign506.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, cd, nn, dash, percentsign, percentsign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 306:54: -> ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:57: ^( PERCENT cd ( nn )? percentsign ( dash )? ( cd )? ( percentsign )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:72: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_percentsign.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:88: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:94: ( cd )?
                if ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:98: ( percentsign )?
                if ( stream_percentsign.hasNext() ) {
                    adaptor.addChild(root_1, stream_percentsign.nextTree());

                }
                stream_percentsign.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: mixture : ( ratio )? ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 | mixtureStructure4 ) -> ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? ( mixtureStructure4 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.ratio_return ratio507 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1508 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2509 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3510 = null;

        ChemicalChunkerParser.mixtureStructure4_return mixtureStructure4511 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_ratio=new RewriteRuleSubtreeStream(adaptor,"rule ratio");
        RewriteRuleSubtreeStream stream_mixtureStructure4=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure4");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:8: ( ( ratio )? ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 | mixtureStructure4 ) -> ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? ( mixtureStructure4 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:10: ( ratio )? ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 | mixtureStructure4 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:10: ( ratio )?
            int alt165=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt165=1;
                    }
                    break;
            }

            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_mixture2605_static.FOLLOW_ratio_in_mixture2605);
                    ratio507=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ratio.add(ratio507.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:18: ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 | mixtureStructure4 )
            int alt166=4;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:19: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2610_static.FOLLOW_mixtureStructure1_in_mixture2610);
                    mixtureStructure1508=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1508.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:37: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2612_static.FOLLOW_mixtureStructure2_in_mixture2612);
                    mixtureStructure2509=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2509.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:55: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2614_static.FOLLOW_mixtureStructure3_in_mixture2614);
                    mixtureStructure3510=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3510.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:73: mixtureStructure4
                    {
                    pushFollow(FOLLOW_mixtureStructure4_in_mixture2616_static.FOLLOW_mixtureStructure4_in_mixture2616);
                    mixtureStructure4511=mixtureStructure4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure4.add(mixtureStructure4511.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: ratio, mixtureStructure4, mixtureStructure2, mixtureStructure1, mixtureStructure3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:92: -> ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? ( mixtureStructure4 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:95: ^( MIXTURE ( ratio )? ( mixtureStructure1 )? ( mixtureStructure2 )? ( mixtureStructure3 )? ( mixtureStructure4 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:105: ( ratio )?
                if ( stream_ratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_ratio.nextTree());

                }
                stream_ratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:112: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:131: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:150: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:169: ( mixtureStructure4 )?
                if ( stream_mixtureStructure4.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure4.nextTree());

                }
                stream_mixtureStructure4.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:1: mixtureStructure1 : lrb ( percentsign | ratio ) rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb512 = null;

        ChemicalChunkerParser.percentsign_return percentsign513 = null;

        ChemicalChunkerParser.ratio_return ratio514 = null;

        ChemicalChunkerParser.rrb_return rrb515 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:18: ( lrb ( percentsign | ratio ) rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:20: lrb ( percentsign | ratio ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12644_static.FOLLOW_lrb_in_mixtureStructure12644);
            lrb512=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb512.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:24: ( percentsign | ratio )
            int alt167=2;
            switch ( input.LA(1) ) {
            case 138:
                {
                alt167=1;
                }
                break;
            case 146:
                {
                alt167=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:25: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_mixtureStructure12647_static.FOLLOW_percentsign_in_mixtureStructure12647);
                    percentsign513=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign513.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:309:37: ratio
                    {
                    pushFollow(FOLLOW_ratio_in_mixtureStructure12649_static.FOLLOW_ratio_in_mixtureStructure12649);
                    ratio514=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio514.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_mixtureStructure12652_static.FOLLOW_rrb_in_mixtureStructure12652);
            rrb515=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb515.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma516 = null;

        ChemicalChunkerParser.lrb_return lrb517 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent518 = null;

        ChemicalChunkerParser.rrb_return rrb519 = null;

        ChemicalChunkerParser.comma_return comma520 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22658_static.FOLLOW_comma_in_mixtureStructure22658);
            comma516=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma516.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22660_static.FOLLOW_lrb_in_mixtureStructure22660);
            lrb517=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb517.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22662_static.FOLLOW_mixtureContent_in_mixtureStructure22662);
            mixtureContent518=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent518.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22664_static.FOLLOW_rrb_in_mixtureStructure22664);
            rrb519=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb519.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22666_static.FOLLOW_comma_in_mixtureStructure22666);
            comma520=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma520.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: mixtureStructure3 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb521 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent522 = null;

        ChemicalChunkerParser.rrb_return rrb523 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32672_static.FOLLOW_lrb_in_mixtureStructure32672);
            lrb521=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb521.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure32674_static.FOLLOW_mixtureContent_in_mixtureStructure32674);
            mixtureContent522=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent522.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32676_static.FOLLOW_rrb_in_mixtureStructure32676);
            rrb523=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb523.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureStructure4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: mixtureStructure4 : lsqb mixtureContent rsqb ;
    public final ChemicalChunkerParser.mixtureStructure4_return mixtureStructure4() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure4_return retval = new ChemicalChunkerParser.mixtureStructure4_return();
        retval.start = input.LT(1);
        int mixtureStructure4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb524 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent525 = null;

        ChemicalChunkerParser.rsqb_return rsqb526 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:18: ( lsqb mixtureContent rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:20: lsqb mixtureContent rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_mixtureStructure42682_static.FOLLOW_lsqb_in_mixtureStructure42682);
            lsqb524=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb524.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure42684_static.FOLLOW_mixtureContent_in_mixtureStructure42684);
            mixtureContent525=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent525.getTree());
            pushFollow(FOLLOW_rsqb_in_mixtureStructure42686_static.FOLLOW_rsqb_in_mixtureStructure42686);
            rsqb526=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb526.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, mixtureStructure4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure4"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: mixtureContent : ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | numberCompoundReference comma | md | percentsign | dash | inAll | cd | comma | adj | colon | stop | noun ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | md | percentsign | dash | inAll | cd | conjunction | adj | colon | stop | noun )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verb_return verb527 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node528 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound529 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference530 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference531 = null;

        ChemicalChunkerParser.comma_return comma532 = null;

        ChemicalChunkerParser.md_return md533 = null;

        ChemicalChunkerParser.percentsign_return percentsign534 = null;

        ChemicalChunkerParser.dash_return dash535 = null;

        ChemicalChunkerParser.inAll_return inAll536 = null;

        ChemicalChunkerParser.cd_return cd537 = null;

        ChemicalChunkerParser.comma_return comma538 = null;

        ChemicalChunkerParser.adj_return adj539 = null;

        ChemicalChunkerParser.colon_return colon540 = null;

        ChemicalChunkerParser.stop_return stop541 = null;

        ChemicalChunkerParser.noun_return noun542 = null;

        ChemicalChunkerParser.verb_return verb543 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node544 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound545 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference546 = null;

        ChemicalChunkerParser.md_return md547 = null;

        ChemicalChunkerParser.percentsign_return percentsign548 = null;

        ChemicalChunkerParser.dash_return dash549 = null;

        ChemicalChunkerParser.inAll_return inAll550 = null;

        ChemicalChunkerParser.cd_return cd551 = null;

        ChemicalChunkerParser.conjunction_return conjunction552 = null;

        ChemicalChunkerParser.adj_return adj553 = null;

        ChemicalChunkerParser.colon_return colon554 = null;

        ChemicalChunkerParser.stop_return stop555 = null;

        ChemicalChunkerParser.noun_return noun556 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:15: ( ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | numberCompoundReference comma | md | percentsign | dash | inAll | cd | comma | adj | colon | stop | noun ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | md | percentsign | dash | inAll | cd | conjunction | adj | colon | stop | noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:19: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | numberCompoundReference comma | md | percentsign | dash | inAll | cd | comma | adj | colon | stop | noun ) ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | md | percentsign | dash | inAll | cd | conjunction | adj | colon | stop | noun )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:19: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | numberCompoundReference comma | md | percentsign | dash | inAll | cd | comma | adj | colon | stop | noun )
            int alt168=15;
            alt168 = dfa168.predict(input);
            switch (alt168) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:20: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2696_static.FOLLOW_verb_in_mixtureContent2696);
                    verb527=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb527.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:25: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2698_static.FOLLOW_quantity2Node_in_mixtureContent2698);
                    quantity2Node528=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node528.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:39: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2700_static.FOLLOW_oscarCompound_in_mixtureContent2700);
                    oscarCompound529=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound529.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:53: alphanumericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2702_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2702);
                    alphanumericOrIdentifierCompoundReference530=alphanumericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference530.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:95: numberCompoundReference comma
                    {
                    pushFollow(FOLLOW_numberCompoundReference_in_mixtureContent2704_static.FOLLOW_numberCompoundReference_in_mixtureContent2704);
                    numberCompoundReference531=numberCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference531.getTree());
                    pushFollow(FOLLOW_comma_in_mixtureContent2706_static.FOLLOW_comma_in_mixtureContent2706);
                    comma532=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma532.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:125: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2708_static.FOLLOW_md_in_mixtureContent2708);
                    md533=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md533.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:128: percentsign
                    {
                    pushFollow(FOLLOW_percentsign_in_mixtureContent2710_static.FOLLOW_percentsign_in_mixtureContent2710);
                    percentsign534=percentsign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign534.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:140: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2712_static.FOLLOW_dash_in_mixtureContent2712);
                    dash535=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash535.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:145: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2714_static.FOLLOW_inAll_in_mixtureContent2714);
                    inAll536=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll536.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:151: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2716_static.FOLLOW_cd_in_mixtureContent2716);
                    cd537=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd537.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:154: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2718_static.FOLLOW_comma_in_mixtureContent2718);
                    comma538=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma538.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:160: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2720_static.FOLLOW_adj_in_mixtureContent2720);
                    adj539=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj539.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:164: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2722_static.FOLLOW_colon_in_mixtureContent2722);
                    colon540=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon540.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:170: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2724_static.FOLLOW_stop_in_mixtureContent2724);
                    stop541=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop541.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:175: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2726_static.FOLLOW_noun_in_mixtureContent2726);
                    noun542=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun542.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:181: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | md | percentsign | dash | inAll | cd | conjunction | adj | colon | stop | noun )+
            int cnt169=0;
            loop169:
            do {
                int alt169=15;
                alt169 = dfa169.predict(input);
                switch (alt169) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:182: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2730_static.FOLLOW_verb_in_mixtureContent2730);
            	    verb543=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb543.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:187: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2732_static.FOLLOW_quantity2Node_in_mixtureContent2732);
            	    quantity2Node544=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node544.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:201: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2734_static.FOLLOW_oscarCompound_in_mixtureContent2734);
            	    oscarCompound545=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound545.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:215: alphanumericOrIdentifierCompoundReference
            	    {
            	    pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2736_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2736);
            	    alphanumericOrIdentifierCompoundReference546=alphanumericOrIdentifierCompoundReference();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference546.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:257: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2738_static.FOLLOW_md_in_mixtureContent2738);
            	    md547=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md547.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:260: percentsign
            	    {
            	    pushFollow(FOLLOW_percentsign_in_mixtureContent2740_static.FOLLOW_percentsign_in_mixtureContent2740);
            	    percentsign548=percentsign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, percentsign548.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:272: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2742_static.FOLLOW_dash_in_mixtureContent2742);
            	    dash549=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash549.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:277: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2744_static.FOLLOW_inAll_in_mixtureContent2744);
            	    inAll550=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll550.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:283: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2746_static.FOLLOW_cd_in_mixtureContent2746);
            	    cd551=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd551.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:286: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_mixtureContent2748_static.FOLLOW_conjunction_in_mixtureContent2748);
            	    conjunction552=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction552.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:298: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2750_static.FOLLOW_adj_in_mixtureContent2750);
            	    adj553=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj553.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:302: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2752_static.FOLLOW_colon_in_mixtureContent2752);
            	    colon554=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon554.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:308: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2754_static.FOLLOW_stop_in_mixtureContent2754);
            	    stop555=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop555.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:313: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2756_static.FOLLOW_noun_in_mixtureContent2756);
            	    noun556=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun556.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt169 >= 1 ) break loop169;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(169, input);
                        throw eee;
                }
                cnt169++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: fromProcedure : ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom557 = null;

        ChemicalChunkerParser.inof_return inof558 = null;

        ChemicalChunkerParser.vbyield_return vbyield559 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize560 = null;

        ChemicalChunkerParser.inin_return inin561 = null;

        ChemicalChunkerParser.inby_return inby562 = null;

        ChemicalChunkerParser.infrom_return infrom563 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode564 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:14: ( ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) ) procedureNode
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:16: ( infrom | {...}? inof | {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom ) )
            int alt172=3;
            switch ( input.LA(1) ) {
            case 59:
                {
                alt172=1;
                }
                break;
            case 56:
                {
                alt172=2;
                }
                break;
            case 125:
            case 129:
                {
                alt172=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:17: infrom
                    {
                    pushFollow(FOLLOW_infrom_in_fromProcedure2767_static.FOLLOW_infrom_in_fromProcedure2767);
                    infrom557=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom557.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:26: {...}? inof
                    {
                    if ( !((precededByProduct(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "precededByProduct(input)");
                    }
                    pushFollow(FOLLOW_inof_in_fromProcedure2773_static.FOLLOW_inof_in_fromProcedure2773);
                    inof558=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof558.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:61: {...}? ( vbyield | vbsynthesize ) ( inin | inby | infrom )
                    {
                    if ( !((suitableVbYieldOrSynthesizeForReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "fromProcedure", "suitableVbYieldOrSynthesizeForReference(input)");
                    }
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:111: ( vbyield | vbsynthesize )
                    int alt170=2;
                    switch ( input.LA(1) ) {
                    case 129:
                        {
                        alt170=1;
                        }
                        break;
                    case 125:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 0, input);

                        throw nvae;
                    }

                    switch (alt170) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:112: vbyield
                            {
                            pushFollow(FOLLOW_vbyield_in_fromProcedure2780_static.FOLLOW_vbyield_in_fromProcedure2780);
                            vbyield559=vbyield();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield559.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:120: vbsynthesize
                            {
                            pushFollow(FOLLOW_vbsynthesize_in_fromProcedure2782_static.FOLLOW_vbsynthesize_in_fromProcedure2782);
                            vbsynthesize560=vbsynthesize();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize560.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:134: ( inin | inby | infrom )
                    int alt171=3;
                    switch ( input.LA(1) ) {
                    case 50:
                        {
                        alt171=1;
                        }
                        break;
                    case 54:
                        {
                        alt171=2;
                        }
                        break;
                    case 59:
                        {
                        alt171=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }

                    switch (alt171) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:135: inin
                            {
                            pushFollow(FOLLOW_inin_in_fromProcedure2786_static.FOLLOW_inin_in_fromProcedure2786);
                            inin561=inin();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin561.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:140: inby
                            {
                            pushFollow(FOLLOW_inby_in_fromProcedure2788_static.FOLLOW_inby_in_fromProcedure2788);
                            inby562=inby();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inby562.getTree());

                            }
                            break;
                        case 3 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:145: infrom
                            {
                            pushFollow(FOLLOW_infrom_in_fromProcedure2790_static.FOLLOW_infrom_in_fromProcedure2790);
                            infrom563=infrom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom563.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_procedureNode_in_fromProcedure2794_static.FOLLOW_procedureNode_in_fromProcedure2794);
            procedureNode564=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode564.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method565 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2801_static.FOLLOW_method_in_procedureNode2801);
            method565=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method565.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: method : ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral566 = null;

        ChemicalChunkerParser.nn_return nn567 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod568 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier569 = null;

        ChemicalChunkerParser.numeric_return numeric570 = null;

        ChemicalChunkerParser.nnexample_return nnexample571 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier572 = null;

        ChemicalChunkerParser.numeric_return numeric573 = null;

        ChemicalChunkerParser.comma_return comma574 = null;

        ChemicalChunkerParser.colon_return colon575 = null;

        ChemicalChunkerParser.inof_return inof576 = null;

        ChemicalChunkerParser.infrom_return infrom577 = null;

        ChemicalChunkerParser.submethod_return submethod578 = null;

        ChemicalChunkerParser.lrb_return lrb579 = null;

        ChemicalChunkerParser.submethod_return submethod580 = null;

        ChemicalChunkerParser.rrb_return rrb581 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:7: ( ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:5: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:5: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) )
            int alt176=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt176=1;
                }
                break;
            case 83:
                {
                alt176=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:6: ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:6: ( nngeneral | nn )?
                    int alt173=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt173=1;
                            }
                            break;
                        case 156:
                            {
                            alt173=2;
                            }
                            break;
                    }

                    switch (alt173) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2822_static.FOLLOW_nngeneral_in_method2822);
                            nngeneral566=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral566.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2824_static.FOLLOW_nn_in_method2824);
                            nn567=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn567.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2828_static.FOLLOW_nnmethod_in_method2828);
                    nnmethod568=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod568.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:31: ( identifierOrBracketedIdentifier | numeric )?
                    int alt174=3;
                    alt174 = dfa174.predict(input);
                    switch (alt174) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:32: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2831_static.FOLLOW_identifierOrBracketedIdentifier_in_method2831);
                            identifierOrBracketedIdentifier569=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier569.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:64: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2833_static.FOLLOW_numeric_in_method2833);
                            numeric570=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric570.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:76: nnexample ( identifierOrBracketedIdentifier | numeric )
                    {
                    pushFollow(FOLLOW_nnexample_in_method2839_static.FOLLOW_nnexample_in_method2839);
                    nnexample571=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample571.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:86: ( identifierOrBracketedIdentifier | numeric )
                    int alt175=2;
                    switch ( input.LA(1) ) {
                    case 146:
                        {
                        switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                            case 141:
                                {
                                switch ( input.LA(4) ) {
                                case TOKEN:
                                    {
                                    int LA175_6 = input.LA(5);

                                    if ( (synpred431_ChemicalChunker()) ) {
                                        alt175=1;
                                    }
                                    else if ( (true) ) {
                                        alt175=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 175, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 175, 5, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case EOF:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 135:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 164:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt175=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 175, 4, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 1, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                    case 143:
                        {
                        alt175=1;
                        }
                        break;
                    case 38:
                        {
                        alt175=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 0, input);

                        throw nvae;
                    }

                    switch (alt175) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:87: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2842_static.FOLLOW_identifierOrBracketedIdentifier_in_method2842);
                            identifierOrBracketedIdentifier572=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier572.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:119: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2844_static.FOLLOW_numeric_in_method2844);
                            numeric573=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric573.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:129: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*
            loop178:
            do {
                int alt178=3;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:131: ( comma | colon | inof | infrom )? submethod
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:131: ( comma | colon | inof | infrom )?
            	    int alt177=5;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt177=1;
            	            }
            	            break;
            	        case 132:
            	            {
            	            alt177=2;
            	            }
            	            break;
            	        case 56:
            	            {
            	            alt177=3;
            	            }
            	            break;
            	        case 59:
            	            {
            	            alt177=4;
            	            }
            	            break;
            	    }

            	    switch (alt177) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:132: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_method2851_static.FOLLOW_comma_in_method2851);
            	            comma574=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma574.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:139: colon
            	            {
            	            pushFollow(FOLLOW_colon_in_method2854_static.FOLLOW_colon_in_method2854);
            	            colon575=colon();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon575.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:146: inof
            	            {
            	            pushFollow(FOLLOW_inof_in_method2857_static.FOLLOW_inof_in_method2857);
            	            inof576=inof();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof576.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:153: infrom
            	            {
            	            pushFollow(FOLLOW_infrom_in_method2861_static.FOLLOW_infrom_in_method2861);
            	            infrom577=infrom();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom577.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_submethod_in_method2865_static.FOLLOW_submethod_in_method2865);
            	    submethod578=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod578.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:174: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method2869_static.FOLLOW_lrb_in_method2869);
            	    lrb579=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb579.getTree());
            	    pushFollow(FOLLOW_submethod_in_method2871_static.FOLLOW_submethod_in_method2871);
            	    submethod580=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod580.getTree());
            	    pushFollow(FOLLOW_rrb_in_method2873_static.FOLLOW_rrb_in_method2873);
            	    rrb581=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb581.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: submethod : ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric ) ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod582 = null;

        ChemicalChunkerParser.nnexample_return nnexample583 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier584 = null;

        ChemicalChunkerParser.numeric_return numeric585 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:11: ( ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:13: ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:13: ( nnmethod | nnexample )
            int alt179=2;
            switch ( input.LA(1) ) {
            case 76:
                {
                alt179=1;
                }
                break;
            case 83:
                {
                alt179=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod2884_static.FOLLOW_nnmethod_in_submethod2884);
                    nnmethod582=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod582.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod2886_static.FOLLOW_nnexample_in_submethod2886);
                    nnexample583=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample583.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:34: ( identifierOrBracketedIdentifier | numeric )
            int alt180=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA180_6 = input.LA(5);

                            if ( (synpred439_ChemicalChunker()) ) {
                                alt180=1;
                            }
                            else if ( (true) ) {
                                alt180=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 180, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 180, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt180=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 180, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt180=1;
                }
                break;
            case 38:
                {
                alt180=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:35: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_submethod2890_static.FOLLOW_identifierOrBracketedIdentifier_in_submethod2890);
                    identifierOrBracketedIdentifier584=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier584.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:67: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_submethod2892_static.FOLLOW_numeric_in_submethod2892);
                    numeric585=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric585.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: referenceToExampleCompound : nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample586 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier587 = null;

        ChemicalChunkerParser.numeric_return numeric588 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:28: ( nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:2: nnexample ( identifierOrBracketedIdentifier | numeric )
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2902_static.FOLLOW_nnexample_in_referenceToExampleCompound2902);
            nnexample586=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample586.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:12: ( identifierOrBracketedIdentifier | numeric )
            int alt181=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt181=2;
                        }
                        break;
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA181_6 = input.LA(5);

                            if ( (synpred440_ChemicalChunker()) ) {
                                alt181=1;
                            }
                            else if ( (true) ) {
                                alt181=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 181, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 181, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt181=1;
                }
                break;
            case 38:
                {
                alt181=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:13: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2905_static.FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2905);
                    identifierOrBracketedIdentifier587=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier587.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:45: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_referenceToExampleCompound2907_static.FOLLOW_numeric_in_referenceToExampleCompound2907);
                    numeric588=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric588.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: identifierOrBracketedIdentifier, numeric, nnexample
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:54: -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:57: ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:89: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:122: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv589 = null;

        ChemicalChunkerParser.adj_return adj590 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:2: ( adv | adj )
            int alt182=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt182=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt182=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2930_static.FOLLOW_adv_in_advAdj2930);
                    adv589=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv589.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2932_static.FOLLOW_adj_in_advAdj2932);
                    adj590=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj590.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric591 = null;

        ChemicalChunkerParser.dash_return dash592 = null;

        ChemicalChunkerParser.numeric_return numeric593 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2939_static.FOLLOW_numeric_in_range2939);
            numeric591=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric591.getTree());
            pushFollow(FOLLOW_dash_in_range2941_static.FOLLOW_dash_in_range2941);
            dash592=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash592.getTree());
            pushFollow(FOLLOW_numeric_in_range2943_static.FOLLOW_numeric_in_range2943);
            numeric593=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric593.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure594 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2950_static.FOLLOW_cycleStructure_in_cycles2950);
            cycleStructure594=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure594.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd595 = null;

        ChemicalChunkerParser.dashNN_return dashNN596 = null;

        ChemicalChunkerParser.nncycle_return nncycle597 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2967_static.FOLLOW_cd_in_cycleStructure2967);
            cd595=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd595.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:21: ( dashNN )?
            int alt183=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt183=1;
                    }
                    break;
            }

            switch (alt183) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2969_static.FOLLOW_dashNN_in_cycleStructure2969);
                    dashNN596=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN596.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2972_static.FOLLOW_nncycle_in_cycleStructure2972);
            nncycle597=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle597.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj598 = null;

        ChemicalChunkerParser.nn_return nn599 = null;

        ChemicalChunkerParser.cd_return cd600 = null;

        ChemicalChunkerParser.dash_return dash601 = null;

        ChemicalChunkerParser.adj_return adj602 = null;

        ChemicalChunkerParser.nn_return nn603 = null;

        ChemicalChunkerParser.cd_return cd604 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:10: ( adj | nn | cd )
            int alt184=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt184=1;
                }
                break;
            case 156:
                {
                alt184=2;
                }
                break;
            case 146:
                {
                alt184=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2980_static.FOLLOW_adj_in_dashNN2980);
                    adj598=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj598.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2982_static.FOLLOW_nn_in_dashNN2982);
                    nn599=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn599.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2984_static.FOLLOW_cd_in_dashNN2984);
                    cd600=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd600.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:22: ( dash ( adj | nn | cd ) )*
            loop186:
            do {
                int alt186=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt186=1;
                    }
                    break;

                }

                switch (alt186) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2988_static.FOLLOW_dash_in_dashNN2988);
            	    dash601=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash601.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:28: ( adj | nn | cd )
            	    int alt185=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt185=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt185=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt185=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 185, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt185) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2991_static.FOLLOW_adj_in_dashNN2991);
            	            adj602=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj602.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN2993_static.FOLLOW_nn_in_dashNN2993);
            	            nn603=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn603.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN2995_static.FOLLOW_cd_in_dashNN2995);
            	            cd604=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd604.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratioOrBracketedRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratioOrBracketedRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: ratioOrBracketedRatio : ( lrb ratio rrb | ratio );
    public final ChemicalChunkerParser.ratioOrBracketedRatio_return ratioOrBracketedRatio() throws RecognitionException {
        ChemicalChunkerParser.ratioOrBracketedRatio_return retval = new ChemicalChunkerParser.ratioOrBracketedRatio_return();
        retval.start = input.LT(1);
        int ratioOrBracketedRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb605 = null;

        ChemicalChunkerParser.ratio_return ratio606 = null;

        ChemicalChunkerParser.rrb_return rrb607 = null;

        ChemicalChunkerParser.ratio_return ratio608 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:23: ( lrb ratio rrb | ratio )
            int alt187=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt187=1;
                }
                break;
            case 146:
                {
                alt187=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:25: lrb ratio rrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lrb_in_ratioOrBracketedRatio3006_static.FOLLOW_lrb_in_ratioOrBracketedRatio3006);
                    lrb605=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb605.getTree());
                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3008_static.FOLLOW_ratio_in_ratioOrBracketedRatio3008);
                    ratio606=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio606.getTree());
                    pushFollow(FOLLOW_rrb_in_ratioOrBracketedRatio3010_static.FOLLOW_rrb_in_ratioOrBracketedRatio3010);
                    rrb607=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb607.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:41: ratio
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ratio_in_ratioOrBracketedRatio3014_static.FOLLOW_ratio_in_ratioOrBracketedRatio3014);
                    ratio608=ratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio608.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, ratioOrBracketedRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratioOrBracketedRatio"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: ratio : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio609 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:7: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:9: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_ratio3021_static.FOLLOW_cdRatio_in_ratio3021);
            cdRatio609=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio609.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:17: -> ^( RATIO cdRatio )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:20: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: cdRatio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd610 = null;

        ChemicalChunkerParser.colon_return colon611 = null;

        ChemicalChunkerParser.cd_return cd612 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:9: ( cd ( colon cd )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:11: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio3036_static.FOLLOW_cd_in_cdRatio3036);
            cd610=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd610.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:14: ( colon cd )+
            int cnt188=0;
            loop188:
            do {
                int alt188=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA188_5 = input.LA(5);

                                if ( (synpred449_ChemicalChunker()) ) {
                                    alt188=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt188) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:15: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio3039_static.FOLLOW_colon_in_cdRatio3039);
            	    colon611=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon611.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio3041_static.FOLLOW_cd_in_cdRatio3041);
            	    cd612=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd612.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt188 >= 1 ) break loop188;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(188, input);
                        throw eee;
                }
                cnt188++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure613 = null;

        ChemicalChunkerParser.comma_return comma614 = null;

        ChemicalChunkerParser.citationContent_return citationContent615 = null;

        ChemicalChunkerParser.comma_return comma616 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:9: ( citationStructure | comma citationContent comma )
            int alt189=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt189=1;
                }
                break;
            case 133:
                {
                alt189=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation3051_static.FOLLOW_citationStructure_in_citation3051);
                    citationStructure613=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure613.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation3053_static.FOLLOW_comma_in_citation3053);
                    comma614=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma614.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation3055_static.FOLLOW_citationContent_in_citation3055);
                    citationContent615=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent615.getTree());
                    pushFollow(FOLLOW_comma_in_citation3057_static.FOLLOW_comma_in_citation3057);
                    comma616=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma616.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent617 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure3065_static.FOLLOW_citationContent_in_citationStructure3065);
            citationContent617=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent617.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb618 = null;

        ChemicalChunkerParser.nnp_return nnp619 = null;

        ChemicalChunkerParser.fw_return fw620 = null;

        ChemicalChunkerParser.cd_return cd621 = null;

        ChemicalChunkerParser.conjunction_return conjunction622 = null;

        ChemicalChunkerParser.nnp_return nnp623 = null;

        ChemicalChunkerParser.fw_return fw624 = null;

        ChemicalChunkerParser.cd_return cd625 = null;

        ChemicalChunkerParser.conjunction_return conjunction626 = null;

        ChemicalChunkerParser.rrb_return rrb627 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent3081_static.FOLLOW_lrb_in_citationContent3081);
            lrb618=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb618.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:24: ( nnp | fw | cd | conjunction )
            int alt190=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt190=1;
                }
                break;
            case 149:
                {
                alt190=2;
                }
                break;
            case 146:
                {
                alt190=3;
                }
                break;
            case 133:
            case 145:
                {
                alt190=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent3084_static.FOLLOW_nnp_in_citationContent3084);
                    nnp619=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp619.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent3086_static.FOLLOW_fw_in_citationContent3086);
                    fw620=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw620.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent3088_static.FOLLOW_cd_in_citationContent3088);
                    cd621=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd621.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent3090_static.FOLLOW_conjunction_in_citationContent3090);
                    conjunction622=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction622.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:48: ( nnp | fw | cd | conjunction )+
            int cnt191=0;
            loop191:
            do {
                int alt191=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt191=1;
                    }
                    break;
                case 149:
                    {
                    alt191=2;
                    }
                    break;
                case 146:
                    {
                    alt191=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt191=4;
                    }
                    break;

                }

                switch (alt191) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent3094_static.FOLLOW_nnp_in_citationContent3094);
            	    nnp623=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp623.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent3096_static.FOLLOW_fw_in_citationContent3096);
            	    fw624=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw624.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent3098_static.FOLLOW_cd_in_citationContent3098);
            	    cd625=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd625.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent3100_static.FOLLOW_conjunction_in_citationContent3100);
            	    conjunction626=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction626.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt191 >= 1 ) break loop191;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(191, input);
                        throw eee;
                }
                cnt191++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent3104_static.FOLLOW_rrb_in_citationContent3104);
            rrb627=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb627.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric628 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric629 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:27: ( numeric | bracketedNumeric )
            int alt192=2;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt192=1;
                }
                break;
            case 143:
                {
                alt192=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric3114_static.FOLLOW_numeric_in_numericOrBracketedNumeric3114);
                    numeric628=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric628.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3118_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3118);
                    bracketedNumeric629=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric629.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb630 = null;

        ChemicalChunkerParser.numeric_return numeric631 = null;

        ChemicalChunkerParser.rrb_return rrb632 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3126_static.FOLLOW_lrb_in_bracketedNumeric3126);
            lrb630=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb630.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3128_static.FOLLOW_numeric_in_bracketedNumeric3128);
            numeric631=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric631.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3130_static.FOLLOW_rrb_in_bracketedNumeric3130);
            rrb632=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb632.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd633 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier634 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier635 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt194=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt194=1;
                }
                break;
            case 143:
                {
                alt194=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:35: ( cd )?
                    int alt193=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt193=1;
                            }
                            break;
                    }

                    switch (alt193) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3137_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3137);
                            cd633=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd633.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3140_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3140);
                    nnidentifier634=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier634.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3144_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3144);
                    bracketedIdentifier635=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier635.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb636 = null;

        ChemicalChunkerParser.cd_return cd637 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier638 = null;

        ChemicalChunkerParser.rrb_return rrb639 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3152_static.FOLLOW_lrb_in_bracketedIdentifier3152);
            lrb636=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb636.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:28: ( cd )?
            int alt195=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt195=1;
                    }
                    break;
            }

            switch (alt195) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3154_static.FOLLOW_cd_in_bracketedIdentifier3154);
                    cd637=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd637.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3157_static.FOLLOW_nnidentifier_in_bracketedIdentifier3157);
            nnidentifier638=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier638.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3159_static.FOLLOW_rrb_in_bracketedIdentifier3159);
            rrb639=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb639.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj640 = null;

        ChemicalChunkerParser.jjr_return jjr641 = null;

        ChemicalChunkerParser.jjs_return jjs642 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj643 = null;

        ChemicalChunkerParser.jjchem_return jjchem644 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn645 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt196=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt196=1;
                }
                break;
            case 152:
                {
                alt196=2;
                }
                break;
            case 153:
                {
                alt196=3;
                }
                break;
            case 39:
                {
                alt196=4;
                }
                break;
            case 45:
                {
                alt196=5;
                }
                break;
            case 40:
                {
                alt196=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3167_static.FOLLOW_jj_in_adj3167);
                    jj640=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj640.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3169_static.FOLLOW_jjr_in_adj3169);
                    jjr641=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr641.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3171_static.FOLLOW_jjs_in_adj3171);
                    jjs642=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs642.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3173_static.FOLLOW_oscarcj_in_adj3173);
                    oscarcj643=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj643.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3175_static.FOLLOW_jjchem_in_adj3175);
                    jjchem644=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem644.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3177_static.FOLLOW_oscarrn_in_adj3177);
                    oscarrn645=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn645.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb646 = null;

        ChemicalChunkerParser.rbr_return rbr647 = null;

        ChemicalChunkerParser.rp_return rp648 = null;

        ChemicalChunkerParser.rbs_return rbs649 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:5: ( rb | rbr | rp | rbs )
            int alt197=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt197=1;
                }
                break;
            case 165:
                {
                alt197=2;
                }
                break;
            case 167:
                {
                alt197=3;
                }
                break;
            case 166:
                {
                alt197=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3184_static.FOLLOW_rb_in_adv3184);
                    rb646=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb646.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3186_static.FOLLOW_rbr_in_adv3186);
                    rbr647=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr647.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3188_static.FOLLOW_rp_in_adv3188);
                    rp648=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp648.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3190_static.FOLLOW_rbs_in_adv3190);
                    rbs649=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs649.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt650 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss651 = null;

        ChemicalChunkerParser.wrb_return wrb652 = null;

        ChemicalChunkerParser.ex_return ex653 = null;

        ChemicalChunkerParser.pdt_return pdt654 = null;

        ChemicalChunkerParser.wp_return wp655 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt198=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt198=1;
                }
                break;
            case 179:
                {
                alt198=2;
                }
                break;
            case 180:
                {
                alt198=3;
                }
                break;
            case 148:
                {
                alt198=4;
                }
                break;
            case 160:
                {
                alt198=5;
                }
                break;
            case 178:
                {
                alt198=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3197_static.FOLLOW_wdt_in_clause3197);
                    wdt650=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt650.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3199_static.FOLLOW_wp_poss_in_clause3199);
                    wp_poss651=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss651.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3201_static.FOLLOW_wrb_in_clause3201);
                    wrb652=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb652.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3203_static.FOLLOW_ex_in_clause3203);
                    ex653=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex653.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3205_static.FOLLOW_pdt_in_clause3205);
                    pdt654=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt654.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3207_static.FOLLOW_wp_in_clause3207);
                    wp655=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp655.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc656 = null;

        ChemicalChunkerParser.comma_return comma657 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:13: ( cc | comma )
            int alt199=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt199=1;
                }
                break;
            case 133:
                {
                alt199=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }

            switch (alt199) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3214_static.FOLLOW_cc_in_conjunction3214);
                    cc656=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc656.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3216_static.FOLLOW_comma_in_conjunction3216);
                    comma657=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma657.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in658 = null;

        ChemicalChunkerParser.inafter_return inafter659 = null;

        ChemicalChunkerParser.inas_return inas660 = null;

        ChemicalChunkerParser.inbefore_return inbefore661 = null;

        ChemicalChunkerParser.inby_return inby662 = null;

        ChemicalChunkerParser.infor_return infor663 = null;

        ChemicalChunkerParser.infrom_return infrom664 = null;

        ChemicalChunkerParser.inin_return inin665 = null;

        ChemicalChunkerParser.ininto_return ininto666 = null;

        ChemicalChunkerParser.inof_return inof667 = null;

        ChemicalChunkerParser.inoff_return inoff668 = null;

        ChemicalChunkerParser.inon_return inon669 = null;

        ChemicalChunkerParser.inover_return inover670 = null;

        ChemicalChunkerParser.inunder_return inunder671 = null;

        ChemicalChunkerParser.invia_return invia672 = null;

        ChemicalChunkerParser.inwith_return inwith673 = null;

        ChemicalChunkerParser.inwithout_return inwithout674 = null;

        ChemicalChunkerParser.to_return to675 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt200=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt200=1;
                }
                break;
            case 49:
                {
                alt200=2;
                }
                break;
            case 47:
                {
                alt200=3;
                }
                break;
            case 48:
                {
                alt200=4;
                }
                break;
            case 54:
                {
                alt200=5;
                }
                break;
            case 58:
                {
                alt200=6;
                }
                break;
            case 59:
                {
                alt200=7;
                }
                break;
            case 50:
                {
                alt200=8;
                }
                break;
            case 51:
                {
                alt200=9;
                }
                break;
            case 56:
                {
                alt200=10;
                }
                break;
            case 62:
                {
                alt200=11;
                }
                break;
            case 57:
                {
                alt200=12;
                }
                break;
            case 61:
                {
                alt200=13;
                }
                break;
            case 60:
                {
                alt200=14;
                }
                break;
            case 55:
                {
                alt200=15;
                }
                break;
            case 52:
                {
                alt200=16;
                }
                break;
            case 53:
                {
                alt200=17;
                }
                break;
            case 169:
                {
                alt200=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3223_static.FOLLOW_in_in_inAll3223);
                    in658=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in658.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3225_static.FOLLOW_inafter_in_inAll3225);
                    inafter659=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter659.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3227_static.FOLLOW_inas_in_inAll3227);
                    inas660=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas660.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3229_static.FOLLOW_inbefore_in_inAll3229);
                    inbefore661=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore661.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3231_static.FOLLOW_inby_in_inAll3231);
                    inby662=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby662.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3233_static.FOLLOW_infor_in_inAll3233);
                    infor663=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor663.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3235_static.FOLLOW_infrom_in_inAll3235);
                    infrom664=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom664.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3237_static.FOLLOW_inin_in_inAll3237);
                    inin665=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin665.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3239_static.FOLLOW_ininto_in_inAll3239);
                    ininto666=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto666.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3241_static.FOLLOW_inof_in_inAll3241);
                    inof667=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof667.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3243_static.FOLLOW_inoff_in_inAll3243);
                    inoff668=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff668.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3245_static.FOLLOW_inon_in_inAll3245);
                    inon669=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon669.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3247_static.FOLLOW_inover_in_inAll3247);
                    inover670=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover670.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3249_static.FOLLOW_inunder_in_inAll3249);
                    inunder671=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder671.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3251_static.FOLLOW_invia_in_inAll3251);
                    invia672=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia672.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3253_static.FOLLOW_inwith_in_inAll3253);
                    inwith673=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith673.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3255_static.FOLLOW_inwithout_in_inAll3255);
                    inwithout674=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout674.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3257_static.FOLLOW_to_in_inAll3257);
                    to675=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to675.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in676 = null;

        ChemicalChunkerParser.inas_return inas677 = null;

        ChemicalChunkerParser.inbefore_return inbefore678 = null;

        ChemicalChunkerParser.inby_return inby679 = null;

        ChemicalChunkerParser.infor_return infor680 = null;

        ChemicalChunkerParser.infrom_return infrom681 = null;

        ChemicalChunkerParser.inin_return inin682 = null;

        ChemicalChunkerParser.ininto_return ininto683 = null;

        ChemicalChunkerParser.inof_return inof684 = null;

        ChemicalChunkerParser.inoff_return inoff685 = null;

        ChemicalChunkerParser.inon_return inon686 = null;

        ChemicalChunkerParser.inover_return inover687 = null;

        ChemicalChunkerParser.inunder_return inunder688 = null;

        ChemicalChunkerParser.invia_return invia689 = null;

        ChemicalChunkerParser.inwith_return inwith690 = null;

        ChemicalChunkerParser.inwithout_return inwithout691 = null;

        ChemicalChunkerParser.to_return to692 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt201=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt201=1;
                }
                break;
            case 47:
                {
                alt201=2;
                }
                break;
            case 48:
                {
                alt201=3;
                }
                break;
            case 54:
                {
                alt201=4;
                }
                break;
            case 58:
                {
                alt201=5;
                }
                break;
            case 59:
                {
                alt201=6;
                }
                break;
            case 50:
                {
                alt201=7;
                }
                break;
            case 51:
                {
                alt201=8;
                }
                break;
            case 56:
                {
                alt201=9;
                }
                break;
            case 62:
                {
                alt201=10;
                }
                break;
            case 57:
                {
                alt201=11;
                }
                break;
            case 61:
                {
                alt201=12;
                }
                break;
            case 60:
                {
                alt201=13;
                }
                break;
            case 55:
                {
                alt201=14;
                }
                break;
            case 52:
                {
                alt201=15;
                }
                break;
            case 53:
                {
                alt201=16;
                }
                break;
            case 169:
                {
                alt201=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3264_static.FOLLOW_in_in_inMost3264);
                    in676=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in676.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3266_static.FOLLOW_inas_in_inMost3266);
                    inas677=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas677.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3268_static.FOLLOW_inbefore_in_inMost3268);
                    inbefore678=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore678.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3270_static.FOLLOW_inby_in_inMost3270);
                    inby679=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby679.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3272_static.FOLLOW_infor_in_inMost3272);
                    infor680=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor680.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3274_static.FOLLOW_infrom_in_inMost3274);
                    infrom681=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom681.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3276_static.FOLLOW_inin_in_inMost3276);
                    inin682=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin682.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3278_static.FOLLOW_ininto_in_inMost3278);
                    ininto683=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto683.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3280_static.FOLLOW_inof_in_inMost3280);
                    inof684=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof684.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3282_static.FOLLOW_inoff_in_inMost3282);
                    inoff685=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff685.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3284_static.FOLLOW_inon_in_inMost3284);
                    inon686=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon686.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3286_static.FOLLOW_inover_in_inMost3286);
                    inover687=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover687.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3288_static.FOLLOW_inunder_in_inMost3288);
                    inunder688=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder688.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3290_static.FOLLOW_invia_in_inMost3290);
                    invia689=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia689.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3292_static.FOLLOW_inwith_in_inMost3292);
                    inwith690=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith690.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3294_static.FOLLOW_inwithout_in_inMost3294);
                    inwithout691=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout691.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3296_static.FOLLOW_to_in_inMost3296);
                    to692=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to692.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd693 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum694 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:9: ( cd | cdAlphanum )
            int alt202=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt202=1;
                }
                break;
            case 38:
                {
                alt202=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3303_static.FOLLOW_cd_in_numeric3303);
                    cd693=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd693.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3305_static.FOLLOW_cdAlphanum_in_numeric3305);
                    cdAlphanum694=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum694.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal695=(Token)match(input,38,FOLLOW_38_in_cdAlphanum3313_static.FOLLOW_38_in_cdAlphanum3313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal695);

            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3315_static.FOLLOW_TOKEN_in_cdAlphanum3315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN696);



            // AST REWRITE
            // elements: TOKEN, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:9: 'OSCAR-CJ' TOKEN
            {
            string_literal697=(Token)match(input,39,FOLLOW_39_in_oscarcj3328_static.FOLLOW_39_in_oscarcj3328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal697);

            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3330_static.FOLLOW_TOKEN_in_oscarcj3330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN698);



            // AST REWRITE
            // elements: TOKEN, 39
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:9: 'OSCAR-RN' TOKEN
            {
            string_literal699=(Token)match(input,40,FOLLOW_40_in_oscarrn3343_static.FOLLOW_40_in_oscarrn3343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal699);

            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3345_static.FOLLOW_TOKEN_in_oscarrn3345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN700);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:10: 'OSCAR-ASE' TOKEN
            {
            string_literal701=(Token)match(input,41,FOLLOW_41_in_oscarase3358_static.FOLLOW_41_in_oscarase3358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal701);

            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3360_static.FOLLOW_TOKEN_in_oscarase3360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN702);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:10: 'OSCAR-ONT' TOKEN
            {
            string_literal703=(Token)match(input,42,FOLLOW_42_in_oscaront3373_static.FOLLOW_42_in_oscaront3373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal703);

            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3375_static.FOLLOW_TOKEN_in_oscaront3375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN704);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:11: 'TM-UNICODE' TOKEN
            {
            string_literal705=(Token)match(input,43,FOLLOW_43_in_tmunicode3388_static.FOLLOW_43_in_tmunicode3388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal705);

            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3390_static.FOLLOW_TOKEN_in_tmunicode3390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN706);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:11: 'CD-UNICODE' TOKEN
            {
            string_literal707=(Token)match(input,44,FOLLOW_44_in_cdunicode3403_static.FOLLOW_44_in_cdunicode3403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal707);

            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3405_static.FOLLOW_TOKEN_in_cdunicode3405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN708);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:8: 'JJ-CHEM' TOKEN
            {
            string_literal709=(Token)match(input,45,FOLLOW_45_in_jjchem3418_static.FOLLOW_45_in_jjchem3418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal709);

            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3420_static.FOLLOW_TOKEN_in_jjchem3420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN710);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal711=(Token)match(input,46,FOLLOW_46_in_jjcomp3433_static.FOLLOW_46_in_jjcomp3433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal711);

            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3435_static.FOLLOW_TOKEN_in_jjcomp3435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN712);



            // AST REWRITE
            // elements: 46, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:6: 'IN-AS' TOKEN
            {
            string_literal713=(Token)match(input,47,FOLLOW_47_in_inas3449_static.FOLLOW_47_in_inas3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal713);

            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3451_static.FOLLOW_TOKEN_in_inas3451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN714);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:10: 'IN-BEFORE' TOKEN
            {
            string_literal715=(Token)match(input,48,FOLLOW_48_in_inbefore3464_static.FOLLOW_48_in_inbefore3464); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal715);

            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3466_static.FOLLOW_TOKEN_in_inbefore3466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN716);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:9: 'IN-AFTER' TOKEN
            {
            string_literal717=(Token)match(input,49,FOLLOW_49_in_inafter3479_static.FOLLOW_49_in_inafter3479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal717);

            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3481_static.FOLLOW_TOKEN_in_inafter3481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN718);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:6: 'IN-IN' TOKEN
            {
            string_literal719=(Token)match(input,50,FOLLOW_50_in_inin3494_static.FOLLOW_50_in_inin3494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal719);

            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3496_static.FOLLOW_TOKEN_in_inin3496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN720);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:8: 'IN-INTO' TOKEN
            {
            string_literal721=(Token)match(input,51,FOLLOW_51_in_ininto3509_static.FOLLOW_51_in_ininto3509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal721);

            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3511_static.FOLLOW_TOKEN_in_ininto3511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN722);



            // AST REWRITE
            // elements: 51, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:8: 'IN-WITH' TOKEN
            {
            string_literal723=(Token)match(input,52,FOLLOW_52_in_inwith3524_static.FOLLOW_52_in_inwith3524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal723);

            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3526_static.FOLLOW_TOKEN_in_inwith3526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN724);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:11: 'IN-WITHOUT' TOKEN
            {
            string_literal725=(Token)match(input,53,FOLLOW_53_in_inwithout3539_static.FOLLOW_53_in_inwithout3539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal725);

            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3541_static.FOLLOW_TOKEN_in_inwithout3541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN726);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:6: 'IN-BY' TOKEN
            {
            string_literal727=(Token)match(input,54,FOLLOW_54_in_inby3554_static.FOLLOW_54_in_inby3554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal727);

            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3556_static.FOLLOW_TOKEN_in_inby3556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN728);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:7: 'IN-VIA' TOKEN
            {
            string_literal729=(Token)match(input,55,FOLLOW_55_in_invia3569_static.FOLLOW_55_in_invia3569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal729);

            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3571_static.FOLLOW_TOKEN_in_invia3571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN730);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:6: 'IN-OF' TOKEN
            {
            string_literal731=(Token)match(input,56,FOLLOW_56_in_inof3584_static.FOLLOW_56_in_inof3584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal731);

            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3586_static.FOLLOW_TOKEN_in_inof3586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN732);



            // AST REWRITE
            // elements: 56, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:6: 'IN-ON' TOKEN
            {
            string_literal733=(Token)match(input,57,FOLLOW_57_in_inon3599_static.FOLLOW_57_in_inon3599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal733);

            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3601_static.FOLLOW_TOKEN_in_inon3601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN734);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:7: 'IN-FOR' TOKEN
            {
            string_literal735=(Token)match(input,58,FOLLOW_58_in_infor3614_static.FOLLOW_58_in_infor3614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal735);

            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3616_static.FOLLOW_TOKEN_in_infor3616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN736);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:8: 'IN-FROM' TOKEN
            {
            string_literal737=(Token)match(input,59,FOLLOW_59_in_infrom3629_static.FOLLOW_59_in_infrom3629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal737);

            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3631_static.FOLLOW_TOKEN_in_infrom3631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN738);



            // AST REWRITE
            // elements: TOKEN, 59
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:9: 'IN-UNDER' TOKEN
            {
            string_literal739=(Token)match(input,60,FOLLOW_60_in_inunder3644_static.FOLLOW_60_in_inunder3644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal739);

            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3646_static.FOLLOW_TOKEN_in_inunder3646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN740);



            // AST REWRITE
            // elements: TOKEN, 60
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:8: 'IN-OVER' TOKEN
            {
            string_literal741=(Token)match(input,61,FOLLOW_61_in_inover3659_static.FOLLOW_61_in_inover3659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal741);

            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3661_static.FOLLOW_TOKEN_in_inover3661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN742);



            // AST REWRITE
            // elements: 61, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:7: 'IN-OFF' TOKEN
            {
            string_literal743=(Token)match(input,62,FOLLOW_62_in_inoff3674_static.FOLLOW_62_in_inoff3674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal743);

            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3676_static.FOLLOW_TOKEN_in_inoff3676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN744);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:9: 'NN-STATE' TOKEN
            {
            string_literal745=(Token)match(input,63,FOLLOW_63_in_nnstate3691_static.FOLLOW_63_in_nnstate3691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3693_static.FOLLOW_TOKEN_in_nnstate3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: 63, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:8: 'NN-TIME' TOKEN
            {
            string_literal747=(Token)match(input,64,FOLLOW_64_in_nntime3706_static.FOLLOW_64_in_nntime3706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3708_static.FOLLOW_TOKEN_in_nntime3708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: 64, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:8: 'NN-MASS' TOKEN
            {
            string_literal749=(Token)match(input,65,FOLLOW_65_in_nnmass3721_static.FOLLOW_65_in_nnmass3721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3723_static.FOLLOW_TOKEN_in_nnmass3723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:10: 'NN-AMOUNT' TOKEN
            {
            string_literal751=(Token)match(input,66,FOLLOW_66_in_nnamount3736_static.FOLLOW_66_in_nnamount3736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3738_static.FOLLOW_TOKEN_in_nnamount3738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: TOKEN, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:9: 'NN-MOLAR' TOKEN
            {
            string_literal753=(Token)match(input,67,FOLLOW_67_in_nnmolar3751_static.FOLLOW_67_in_nnmolar3751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3753_static.FOLLOW_TOKEN_in_nnmolar3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal755=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3766_static.FOLLOW_68_in_nnatmosphere3766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3768_static.FOLLOW_TOKEN_in_nnatmosphere3768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:6: 'NN-EQ' TOKEN
            {
            string_literal757=(Token)match(input,69,FOLLOW_69_in_nneq3781_static.FOLLOW_69_in_nneq3781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3783_static.FOLLOW_TOKEN_in_nneq3783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:394:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:7: 'NN-VOL' TOKEN
            {
            string_literal759=(Token)match(input,70,FOLLOW_70_in_nnvol3796_static.FOLLOW_70_in_nnvol3796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3798_static.FOLLOW_TOKEN_in_nnvol3798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal761=(Token)match(input,71,FOLLOW_71_in_nnchementity3811_static.FOLLOW_71_in_nnchementity3811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3813_static.FOLLOW_TOKEN_in_nnchementity3813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: TOKEN, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:8: 'NN-TEMP' TOKEN
            {
            string_literal763=(Token)match(input,72,FOLLOW_72_in_nntemp3826_static.FOLLOW_72_in_nntemp3826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3828_static.FOLLOW_TOKEN_in_nntemp3828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:6: 'NN-PH' TOKEN
            {
            string_literal765=(Token)match(input,73,FOLLOW_73_in_nnph3841_static.FOLLOW_73_in_nnph3841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3843_static.FOLLOW_TOKEN_in_nnph3843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 73, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:9: 'NN-FLASH' TOKEN
            {
            string_literal767=(Token)match(input,74,FOLLOW_74_in_nnflash3856_static.FOLLOW_74_in_nnflash3856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3858_static.FOLLOW_TOKEN_in_nnflash3858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: TOKEN, 74
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:11: 'NN-GENERAL' TOKEN
            {
            string_literal769=(Token)match(input,75,FOLLOW_75_in_nngeneral3871_static.FOLLOW_75_in_nngeneral3871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3873_static.FOLLOW_TOKEN_in_nngeneral3873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:10: 'NN-METHOD' TOKEN
            {
            string_literal771=(Token)match(input,76,FOLLOW_76_in_nnmethod3886_static.FOLLOW_76_in_nnmethod3886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3888_static.FOLLOW_TOKEN_in_nnmethod3888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: 76, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:12: 'NN-PRESSURE' TOKEN
            {
            string_literal773=(Token)match(input,77,FOLLOW_77_in_nnpressure3901_static.FOLLOW_77_in_nnpressure3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3903_static.FOLLOW_TOKEN_in_nnpressure3903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:10: 'NN-COLUMN' TOKEN
            {
            string_literal775=(Token)match(input,78,FOLLOW_78_in_nncolumn3916_static.FOLLOW_78_in_nncolumn3916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3918_static.FOLLOW_TOKEN_in_nncolumn3918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: TOKEN, 78
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 403:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal777=(Token)match(input,79,FOLLOW_79_in_nnchromatography3931_static.FOLLOW_79_in_nnchromatography3931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3933_static.FOLLOW_TOKEN_in_nnchromatography3933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:10: 'NN-VACUUM' TOKEN
            {
            string_literal779=(Token)match(input,80,FOLLOW_80_in_nnvacuum3946_static.FOLLOW_80_in_nnvacuum3946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3948_static.FOLLOW_TOKEN_in_nnvacuum3948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: TOKEN, 80
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:405:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:9: 'NN-CYCLE' TOKEN
            {
            string_literal781=(Token)match(input,81,FOLLOW_81_in_nncycle3961_static.FOLLOW_81_in_nncycle3961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3963_static.FOLLOW_TOKEN_in_nncycle3963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: 81, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 406:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:9: 'NN-TIMES' TOKEN
            {
            string_literal783=(Token)match(input,82,FOLLOW_82_in_nntimes3976_static.FOLLOW_82_in_nntimes3976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3978_static.FOLLOW_TOKEN_in_nntimes3978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: 82, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal785=(Token)match(input,83,FOLLOW_83_in_nnexample3991_static.FOLLOW_83_in_nnexample3991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3993_static.FOLLOW_TOKEN_in_nnexample3993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:9: 'OSCAR-CM' TOKEN
            {
            string_literal787=(Token)match(input,84,FOLLOW_84_in_oscarcm4008_static.FOLLOW_84_in_oscarcm4008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm4010_static.FOLLOW_TOKEN_in_oscarcm4010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:7: 'VB-USE' TOKEN
            {
            string_literal789=(Token)match(input,85,FOLLOW_85_in_vbuse4025_static.FOLLOW_85_in_vbuse4025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse4027_static.FOLLOW_TOKEN_in_vbuse4027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:10: 'VB-CHANGE' TOKEN
            {
            string_literal791=(Token)match(input,86,FOLLOW_86_in_vbchange4040_static.FOLLOW_86_in_vbchange4040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange4042_static.FOLLOW_TOKEN_in_vbchange4042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal793=(Token)match(input,87,FOLLOW_87_in_vbsubmerge4055_static.FOLLOW_87_in_vbsubmerge4055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge4057_static.FOLLOW_TOKEN_in_vbsubmerge4057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: 87, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 416:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:416:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:11: 'VB-SUBJECT' TOKEN
            {
            string_literal795=(Token)match(input,88,FOLLOW_88_in_vbsubject4070_static.FOLLOW_88_in_vbsubject4070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject4072_static.FOLLOW_TOKEN_in_vbsubject4072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: 88, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:7: 'NN-ADD' TOKEN
            {
            string_literal797=(Token)match(input,89,FOLLOW_89_in_nnadd4087_static.FOLLOW_89_in_nnadd4087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd4089_static.FOLLOW_TOKEN_in_nnadd4089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:420:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:11: 'NN-MIXTURE' TOKEN
            {
            string_literal799=(Token)match(input,90,FOLLOW_90_in_nnmixture4102_static.FOLLOW_90_in_nnmixture4102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture4104_static.FOLLOW_TOKEN_in_nnmixture4104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:10: 'VB-DILUTE' TOKEN
            {
            string_literal801=(Token)match(input,91,FOLLOW_91_in_vbdilute4117_static.FOLLOW_91_in_vbdilute4117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute4119_static.FOLLOW_TOKEN_in_vbdilute4119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: 91, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:7: 'VB-ADD' TOKEN
            {
            string_literal803=(Token)match(input,92,FOLLOW_92_in_vbadd4132_static.FOLLOW_92_in_vbadd4132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4134_static.FOLLOW_TOKEN_in_vbadd4134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: TOKEN, 92
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:423:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:10: 'VB-CHARGE' TOKEN
            {
            string_literal805=(Token)match(input,93,FOLLOW_93_in_vbcharge4147_static.FOLLOW_93_in_vbcharge4147); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4149_static.FOLLOW_TOKEN_in_vbcharge4149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: TOKEN, 93
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:11: 'VB-CONTAIN' TOKEN
            {
            string_literal807=(Token)match(input,94,FOLLOW_94_in_vbcontain4162_static.FOLLOW_94_in_vbcontain4162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4164_static.FOLLOW_TOKEN_in_vbcontain4164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: TOKEN, 94
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:8: 'VB-DROP' TOKEN
            {
            string_literal809=(Token)match(input,95,FOLLOW_95_in_vbdrop4177_static.FOLLOW_95_in_vbdrop4177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4179_static.FOLLOW_TOKEN_in_vbdrop4179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 426:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:426:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:8: 'VB-FILL' TOKEN
            {
            string_literal811=(Token)match(input,96,FOLLOW_96_in_vbfill4192_static.FOLLOW_96_in_vbfill4192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4194_static.FOLLOW_TOKEN_in_vbfill4194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:427:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:11: 'VB-SUSPEND' TOKEN
            {
            string_literal813=(Token)match(input,97,FOLLOW_97_in_vbsuspend4207_static.FOLLOW_97_in_vbsuspend4207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4209_static.FOLLOW_TOKEN_in_vbsuspend4209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:9: 'VB-TREAT' TOKEN
            {
            string_literal815=(Token)match(input,98,FOLLOW_98_in_vbtreat4222_static.FOLLOW_98_in_vbtreat4222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4224_static.FOLLOW_TOKEN_in_vbtreat4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:13: 'VB-APPARATUS' TOKEN
            {
            string_literal817=(Token)match(input,99,FOLLOW_99_in_vbapparatus4239_static.FOLLOW_99_in_vbapparatus4239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4241_static.FOLLOW_TOKEN_in_vbapparatus4241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: TOKEN, 99
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:13: 'NN-APPARATUS' TOKEN
            {
            string_literal819=(Token)match(input,100,FOLLOW_100_in_nnapparatus4254_static.FOLLOW_100_in_nnapparatus4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4256_static.FOLLOW_TOKEN_in_nnapparatus4256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal821=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4271_static.FOLLOW_101_in_vbconcentrate4271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4273_static.FOLLOW_TOKEN_in_vbconcentrate4273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal823=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4286_static.FOLLOW_102_in_nnconcentrate4286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4288_static.FOLLOW_TOKEN_in_nnconcentrate4288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: 102, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:8: 'VB-COOL' TOKEN
            {
            string_literal825=(Token)match(input,103,FOLLOW_103_in_vbcool4303_static.FOLLOW_103_in_vbcool4303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4305_static.FOLLOW_TOKEN_in_vbcool4305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:10: 'VB-DEGASS' TOKEN
            {
            string_literal827=(Token)match(input,104,FOLLOW_104_in_vbdegass4320_static.FOLLOW_104_in_vbdegass4320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4322_static.FOLLOW_TOKEN_in_vbdegass4322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: 104, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal829=(Token)match(input,105,FOLLOW_105_in_vbdissolve4337_static.FOLLOW_105_in_vbdissolve4337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4339_static.FOLLOW_TOKEN_in_vbdissolve4339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: 105, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:7: 'VB-DRY' TOKEN
            {
            string_literal831=(Token)match(input,106,FOLLOW_106_in_vbdry4354_static.FOLLOW_106_in_vbdry4354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4356_static.FOLLOW_TOKEN_in_vbdry4356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: TOKEN, 106
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:7: 'NN-DRY' TOKEN
            {
            string_literal833=(Token)match(input,107,FOLLOW_107_in_nndry4369_static.FOLLOW_107_in_nndry4369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4371_static.FOLLOW_TOKEN_in_nndry4371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:11: 'VB-EXTRACT' TOKEN
            {
            string_literal835=(Token)match(input,108,FOLLOW_108_in_vbextract4386_static.FOLLOW_108_in_vbextract4386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4388_static.FOLLOW_TOKEN_in_vbextract4388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:11: 'NN-EXTRACT' TOKEN
            {
            string_literal837=(Token)match(input,109,FOLLOW_109_in_nnextract4401_static.FOLLOW_109_in_nnextract4401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4403_static.FOLLOW_TOKEN_in_nnextract4403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: 109, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:10: 'VB-FILTER' TOKEN
            {
            string_literal839=(Token)match(input,110,FOLLOW_110_in_vbfilter4418_static.FOLLOW_110_in_vbfilter4418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4420_static.FOLLOW_TOKEN_in_vbfilter4420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: 110, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:10: 'NN-FILTER' TOKEN
            {
            string_literal841=(Token)match(input,111,FOLLOW_111_in_nnfilter4433_static.FOLLOW_111_in_nnfilter4433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4435_static.FOLLOW_TOKEN_in_nnfilter4435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:458:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:8: 'VB-HEAT' TOKEN
            {
            string_literal843=(Token)match(input,112,FOLLOW_112_in_vbheat4450_static.FOLLOW_112_in_vbheat4450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4452_static.FOLLOW_TOKEN_in_vbheat4452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: TOKEN, 112
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:12: 'VB-INCREASE' TOKEN
            {
            string_literal845=(Token)match(input,113,FOLLOW_113_in_vbincrease4465_static.FOLLOW_113_in_vbincrease4465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4467_static.FOLLOW_TOKEN_in_vbincrease4467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: 113, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:11: 'VB-IMMERSE' TOKEN
            {
            string_literal847=(Token)match(input,114,FOLLOW_114_in_vbimmerse4482_static.FOLLOW_114_in_vbimmerse4482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4484_static.FOLLOW_TOKEN_in_vbimmerse4484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:13: 'VB-PARTITION' TOKEN
            {
            string_literal849=(Token)match(input,115,FOLLOW_115_in_vbpartition4499_static.FOLLOW_115_in_vbpartition4499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4501_static.FOLLOW_TOKEN_in_vbpartition4501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal851=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4516_static.FOLLOW_116_in_vbprecipitate4516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4518_static.FOLLOW_TOKEN_in_vbprecipitate4518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal853=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4531_static.FOLLOW_117_in_nnprecipitate4531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4533_static.FOLLOW_TOKEN_in_nnprecipitate4533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: 117, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:10: 'VB-PURIFY' TOKEN
            {
            string_literal855=(Token)match(input,118,FOLLOW_118_in_vbpurify4548_static.FOLLOW_118_in_vbpurify4548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4550_static.FOLLOW_TOKEN_in_vbpurify4550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: TOKEN, 118
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:10: 'NN-PURIFY' TOKEN
            {
            string_literal857=(Token)match(input,119,FOLLOW_119_in_nnpurify4563_static.FOLLOW_119_in_nnpurify4563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4565_static.FOLLOW_TOKEN_in_nnpurify4565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: TOKEN, 119
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:10: 'VB-QUENCH' TOKEN
            {
            string_literal859=(Token)match(input,120,FOLLOW_120_in_vbquench4580_static.FOLLOW_120_in_vbquench4580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4582_static.FOLLOW_TOKEN_in_vbquench4582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:479:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:11: 'VB-RECOVER' TOKEN
            {
            string_literal861=(Token)match(input,121,FOLLOW_121_in_vbrecover4597_static.FOLLOW_121_in_vbrecover4597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4599_static.FOLLOW_TOKEN_in_vbrecover4599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:482:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:10: 'VB-REMOVE' TOKEN
            {
            string_literal863=(Token)match(input,122,FOLLOW_122_in_vbremove4614_static.FOLLOW_122_in_vbremove4614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4616_static.FOLLOW_TOKEN_in_vbremove4616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:10: 'NN-REMOVE' TOKEN
            {
            string_literal865=(Token)match(input,123,FOLLOW_123_in_nnremove4629_static.FOLLOW_123_in_nnremove4629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4631_static.FOLLOW_TOKEN_in_nnremove4631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:8: 'VB-STIR' TOKEN
            {
            string_literal867=(Token)match(input,124,FOLLOW_124_in_vbstir4646_static.FOLLOW_124_in_vbstir4646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4648_static.FOLLOW_TOKEN_in_vbstir4648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: TOKEN, 124
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal869=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4663_static.FOLLOW_125_in_vbsynthesize4663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4665_static.FOLLOW_TOKEN_in_vbsynthesize4665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 125, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal871=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4678_static.FOLLOW_126_in_nnsynthesize4678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4680_static.FOLLOW_TOKEN_in_nnsynthesize4680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:8: 'VB-WAIT' TOKEN
            {
            string_literal873=(Token)match(input,127,FOLLOW_127_in_vbwait4695_static.FOLLOW_127_in_vbwait4695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4697_static.FOLLOW_TOKEN_in_vbwait4697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:496:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:8: 'VB-WASH' TOKEN
            {
            string_literal875=(Token)match(input,128,FOLLOW_128_in_vbwash4712_static.FOLLOW_128_in_vbwash4712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4714_static.FOLLOW_TOKEN_in_vbwash4714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: 128, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:499:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:9: 'VB-YIELD' TOKEN
            {
            string_literal877=(Token)match(input,129,FOLLOW_129_in_vbyield4729_static.FOLLOW_129_in_vbyield4729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4731_static.FOLLOW_TOKEN_in_vbyield4731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:502:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:9: 'NN-YIELD' TOKEN
            {
            string_literal879=(Token)match(input,130,FOLLOW_130_in_nnyield4746_static.FOLLOW_130_in_nnyield4746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4748_static.FOLLOW_TOKEN_in_nnyield4748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 505:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:505:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:8: 'RB-CONJ' TOKEN
            {
            string_literal881=(Token)match(input,131,FOLLOW_131_in_rbconj4764_static.FOLLOW_131_in_rbconj4764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4766_static.FOLLOW_TOKEN_in_rbconj4766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: 131, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:7: 'COLON' TOKEN
            {
            string_literal883=(Token)match(input,132,FOLLOW_132_in_colon4779_static.FOLLOW_132_in_colon4779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4781_static.FOLLOW_TOKEN_in_colon4781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:510:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:7: 'COMMA' TOKEN
            {
            string_literal885=(Token)match(input,133,FOLLOW_133_in_comma4794_static.FOLLOW_133_in_comma4794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4796_static.FOLLOW_TOKEN_in_comma4796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:511:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:7: 'APOST' TOKEN
            {
            string_literal887=(Token)match(input,134,FOLLOW_134_in_apost4809_static.FOLLOW_134_in_apost4809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4811_static.FOLLOW_TOKEN_in_apost4811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: 134, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:5: 'NEG' TOKEN
            {
            string_literal889=(Token)match(input,135,FOLLOW_135_in_neg4824_static.FOLLOW_135_in_neg4824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4826_static.FOLLOW_TOKEN_in_neg4826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 513:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:513:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:6: 'DASH' TOKEN
            {
            string_literal891=(Token)match(input,136,FOLLOW_136_in_dash4839_static.FOLLOW_136_in_dash4839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4841_static.FOLLOW_TOKEN_in_dash4841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:514:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:6: 'STOP' TOKEN
            {
            string_literal893=(Token)match(input,137,FOLLOW_137_in_stop4854_static.FOLLOW_137_in_stop4854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4856_static.FOLLOW_TOKEN_in_stop4856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class percentsign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percentsign"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:1: percentsign : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.percentsign_return percentsign() throws RecognitionException {
        ChemicalChunkerParser.percentsign_return retval = new ChemicalChunkerParser.percentsign_return();
        retval.start = input.LT(1);
        int percentsign_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:12: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:13: 'NN-PERCENT' TOKEN
            {
            string_literal895=(Token)match(input,138,FOLLOW_138_in_percentsign4869_static.FOLLOW_138_in_percentsign4869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_percentsign4871_static.FOLLOW_TOKEN_in_percentsign4871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: TOKEN, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:32: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:516:35: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, percentsign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percentsign"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:6: 'LSQB' TOKEN
            {
            string_literal897=(Token)match(input,139,FOLLOW_139_in_lsqb4884_static.FOLLOW_139_in_lsqb4884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4886_static.FOLLOW_TOKEN_in_lsqb4886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: 139, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:517:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:6: 'RSQB' TOKEN
            {
            string_literal899=(Token)match(input,140,FOLLOW_140_in_rsqb4899_static.FOLLOW_140_in_rsqb4899); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4901_static.FOLLOW_TOKEN_in_rsqb4901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: TOKEN, 140
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal901=(Token)match(input,141,FOLLOW_141_in_nnidentifier4915_static.FOLLOW_141_in_nnidentifier4915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4917_static.FOLLOW_TOKEN_in_nnidentifier4917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: TOKEN, 141
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:520:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:7: 'DT-THE' TOKEN
            {
            string_literal903=(Token)match(input,142,FOLLOW_142_in_dtTHE4932_static.FOLLOW_142_in_dtTHE4932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4934_static.FOLLOW_TOKEN_in_dtTHE4934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:523:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:5: '-LRB-' TOKEN
            {
            string_literal905=(Token)match(input,143,FOLLOW_143_in_lrb4948_static.FOLLOW_143_in_lrb4948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4950_static.FOLLOW_TOKEN_in_lrb4950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: TOKEN, 143
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:525:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:5: '-RRB-' TOKEN
            {
            string_literal907=(Token)match(input,144,FOLLOW_144_in_rrb4963_static.FOLLOW_144_in_rrb4963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4965_static.FOLLOW_TOKEN_in_rrb4965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:526:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:4: 'CC' TOKEN
            {
            string_literal909=(Token)match(input,145,FOLLOW_145_in_cc4982_static.FOLLOW_145_in_cc4982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4984_static.FOLLOW_TOKEN_in_cc4984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: 145, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 531:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:531:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:4: 'CD' TOKEN
            {
            string_literal911=(Token)match(input,146,FOLLOW_146_in_cd4999_static.FOLLOW_146_in_cd4999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd5001_static.FOLLOW_TOKEN_in_cd5001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: 146, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:534:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:4: 'DT' TOKEN
            {
            string_literal913=(Token)match(input,147,FOLLOW_147_in_dt5016_static.FOLLOW_147_in_dt5016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt5018_static.FOLLOW_TOKEN_in_dt5018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: TOKEN, 147
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:537:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:4: 'EX' TOKEN
            {
            string_literal915=(Token)match(input,148,FOLLOW_148_in_ex5033_static.FOLLOW_148_in_ex5033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex5035_static.FOLLOW_TOKEN_in_ex5035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: TOKEN, 148
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:540:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:4: 'FW' TOKEN
            {
            string_literal917=(Token)match(input,149,FOLLOW_149_in_fw5050_static.FOLLOW_149_in_fw5050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw5052_static.FOLLOW_TOKEN_in_fw5052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: TOKEN, 149
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:543:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:4: 'IN' TOKEN
            {
            string_literal919=(Token)match(input,150,FOLLOW_150_in_in5067_static.FOLLOW_150_in_in5067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in5069_static.FOLLOW_TOKEN_in_in5069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: TOKEN, 150
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:546:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:4: 'JJ' TOKEN
            {
            string_literal921=(Token)match(input,151,FOLLOW_151_in_jj5084_static.FOLLOW_151_in_jj5084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj5086_static.FOLLOW_TOKEN_in_jj5086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: 151, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:549:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:5: 'JJR' TOKEN
            {
            string_literal923=(Token)match(input,152,FOLLOW_152_in_jjr5101_static.FOLLOW_152_in_jjr5101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr5103_static.FOLLOW_TOKEN_in_jjr5103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:552:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:5: 'JJS' TOKEN
            {
            string_literal925=(Token)match(input,153,FOLLOW_153_in_jjs5118_static.FOLLOW_153_in_jjs5118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs5120_static.FOLLOW_TOKEN_in_jjs5120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:555:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:4: 'LS' TOKEN
            {
            string_literal927=(Token)match(input,154,FOLLOW_154_in_ls5135_static.FOLLOW_154_in_ls5135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5137_static.FOLLOW_TOKEN_in_ls5137); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: 154, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 558:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:558:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal929=null;
        Token TOKEN930=null;

        Object string_literal929_tree=null;
        Object TOKEN930_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:4: 'MD' TOKEN
            {
            string_literal929=(Token)match(input,155,FOLLOW_155_in_md5152_static.FOLLOW_155_in_md5152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal929);

            TOKEN930=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5154_static.FOLLOW_TOKEN_in_md5154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN930);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:561:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal931=null;
        Token TOKEN932=null;

        Object string_literal931_tree=null;
        Object TOKEN932_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:4: 'NN' TOKEN
            {
            string_literal931=(Token)match(input,156,FOLLOW_156_in_nn5169_static.FOLLOW_156_in_nn5169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal931);

            TOKEN932=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5171_static.FOLLOW_TOKEN_in_nn5171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN932);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:564:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal933=null;
        Token TOKEN934=null;

        Object string_literal933_tree=null;
        Object TOKEN934_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:5: 'NNS' TOKEN
            {
            string_literal933=(Token)match(input,157,FOLLOW_157_in_nns5186_static.FOLLOW_157_in_nns5186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal933);

            TOKEN934=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5188_static.FOLLOW_TOKEN_in_nns5188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN934);



            // AST REWRITE
            // elements: TOKEN, 157
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:567:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token TOKEN936=null;

        Object string_literal935_tree=null;
        Object TOKEN936_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:5: 'NNP' TOKEN
            {
            string_literal935=(Token)match(input,158,FOLLOW_158_in_nnp5203_static.FOLLOW_158_in_nnp5203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal935);

            TOKEN936=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5205_static.FOLLOW_TOKEN_in_nnp5205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN936);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:570:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal937=null;
        Token TOKEN938=null;

        Object string_literal937_tree=null;
        Object TOKEN938_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:6: 'NNPS' TOKEN
            {
            string_literal937=(Token)match(input,159,FOLLOW_159_in_nnps5220_static.FOLLOW_159_in_nnps5220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal937);

            TOKEN938=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5222_static.FOLLOW_TOKEN_in_nnps5222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN938);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:573:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal939=null;
        Token TOKEN940=null;

        Object string_literal939_tree=null;
        Object TOKEN940_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:5: 'PDT' TOKEN
            {
            string_literal939=(Token)match(input,160,FOLLOW_160_in_pdt5237_static.FOLLOW_160_in_pdt5237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal939);

            TOKEN940=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5239_static.FOLLOW_TOKEN_in_pdt5239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN940);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:576:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal941=null;
        Token TOKEN942=null;

        Object string_literal941_tree=null;
        Object TOKEN942_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:5: 'POS' TOKEN
            {
            string_literal941=(Token)match(input,161,FOLLOW_161_in_pos5254_static.FOLLOW_161_in_pos5254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal941);

            TOKEN942=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5256_static.FOLLOW_TOKEN_in_pos5256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN942);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:579:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal943=null;
        Token TOKEN944=null;

        Object string_literal943_tree=null;
        Object TOKEN944_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:5: 'PRP' TOKEN
            {
            string_literal943=(Token)match(input,162,FOLLOW_162_in_prp5271_static.FOLLOW_162_in_prp5271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal943);

            TOKEN944=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5273_static.FOLLOW_TOKEN_in_prp5273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN944);



            // AST REWRITE
            // elements: 162, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 582:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:582:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal945=null;
        Token TOKEN946=null;

        Object string_literal945_tree=null;
        Object TOKEN946_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:10: 'PRP$' TOKEN
            {
            string_literal945=(Token)match(input,163,FOLLOW_163_in_prp_poss5288_static.FOLLOW_163_in_prp_poss5288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal945);

            TOKEN946=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5290_static.FOLLOW_TOKEN_in_prp_poss5290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN946);



            // AST REWRITE
            // elements: 163, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:585:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal947=null;
        Token TOKEN948=null;

        Object string_literal947_tree=null;
        Object TOKEN948_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:4: 'RB' TOKEN
            {
            string_literal947=(Token)match(input,164,FOLLOW_164_in_rb5305_static.FOLLOW_164_in_rb5305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal947);

            TOKEN948=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5307_static.FOLLOW_TOKEN_in_rb5307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN948);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:588:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal949=null;
        Token TOKEN950=null;

        Object string_literal949_tree=null;
        Object TOKEN950_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:5: 'RBR' TOKEN
            {
            string_literal949=(Token)match(input,165,FOLLOW_165_in_rbr5322_static.FOLLOW_165_in_rbr5322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal949);

            TOKEN950=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5324_static.FOLLOW_TOKEN_in_rbr5324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN950);



            // AST REWRITE
            // elements: 165, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:591:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal951=null;
        Token TOKEN952=null;

        Object string_literal951_tree=null;
        Object TOKEN952_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:5: 'RBS' TOKEN
            {
            string_literal951=(Token)match(input,166,FOLLOW_166_in_rbs5339_static.FOLLOW_166_in_rbs5339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal951);

            TOKEN952=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5341_static.FOLLOW_TOKEN_in_rbs5341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN952);



            // AST REWRITE
            // elements: TOKEN, 166
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:594:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal953=null;
        Token TOKEN954=null;

        Object string_literal953_tree=null;
        Object TOKEN954_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:4: 'RP' TOKEN
            {
            string_literal953=(Token)match(input,167,FOLLOW_167_in_rp5356_static.FOLLOW_167_in_rp5356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal953);

            TOKEN954=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5358_static.FOLLOW_TOKEN_in_rp5358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN954);



            // AST REWRITE
            // elements: 167, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:597:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal955=null;
        Token TOKEN956=null;

        Object string_literal955_tree=null;
        Object TOKEN956_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:5: 'SYM' TOKEN
            {
            string_literal955=(Token)match(input,168,FOLLOW_168_in_sym5373_static.FOLLOW_168_in_sym5373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal955);

            TOKEN956=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5375_static.FOLLOW_TOKEN_in_sym5375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN956);



            // AST REWRITE
            // elements: 168, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:600:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal957=null;
        Token TOKEN958=null;

        Object string_literal957_tree=null;
        Object TOKEN958_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:4: 'TO' TOKEN
            {
            string_literal957=(Token)match(input,169,FOLLOW_169_in_to5390_static.FOLLOW_169_in_to5390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal957);

            TOKEN958=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5392_static.FOLLOW_TOKEN_in_to5392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN958);



            // AST REWRITE
            // elements: 169, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 603:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:603:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal959=null;
        Token TOKEN960=null;

        Object string_literal959_tree=null;
        Object TOKEN960_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:4: 'UH' TOKEN
            {
            string_literal959=(Token)match(input,170,FOLLOW_170_in_uh5407_static.FOLLOW_170_in_uh5407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal959);

            TOKEN960=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5409_static.FOLLOW_TOKEN_in_uh5409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN960);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:606:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal961=null;
        Token TOKEN962=null;

        Object string_literal961_tree=null;
        Object TOKEN962_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:4: 'VB' TOKEN
            {
            string_literal961=(Token)match(input,171,FOLLOW_171_in_vb5424_static.FOLLOW_171_in_vb5424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal961);

            TOKEN962=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5426_static.FOLLOW_TOKEN_in_vb5426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN962);



            // AST REWRITE
            // elements: 171, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 609:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:609:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal963=null;
        Token TOKEN964=null;

        Object string_literal963_tree=null;
        Object TOKEN964_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:5: 'VBD' TOKEN
            {
            string_literal963=(Token)match(input,172,FOLLOW_172_in_vbd5441_static.FOLLOW_172_in_vbd5441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal963);

            TOKEN964=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5443_static.FOLLOW_TOKEN_in_vbd5443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN964);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:612:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal965=null;
        Token TOKEN966=null;

        Object string_literal965_tree=null;
        Object TOKEN966_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:5: 'VBG' TOKEN
            {
            string_literal965=(Token)match(input,173,FOLLOW_173_in_vbg5458_static.FOLLOW_173_in_vbg5458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal965);

            TOKEN966=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5460_static.FOLLOW_TOKEN_in_vbg5460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN966);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 615:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:615:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal967=null;
        Token TOKEN968=null;

        Object string_literal967_tree=null;
        Object TOKEN968_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:5: 'VBN' TOKEN
            {
            string_literal967=(Token)match(input,174,FOLLOW_174_in_vbn5475_static.FOLLOW_174_in_vbn5475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal967);

            TOKEN968=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5477_static.FOLLOW_TOKEN_in_vbn5477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN968);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:618:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal969=null;
        Token TOKEN970=null;

        Object string_literal969_tree=null;
        Object TOKEN970_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:5: 'VBP' TOKEN
            {
            string_literal969=(Token)match(input,175,FOLLOW_175_in_vbp5492_static.FOLLOW_175_in_vbp5492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal969);

            TOKEN970=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5494_static.FOLLOW_TOKEN_in_vbp5494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN970);



            // AST REWRITE
            // elements: TOKEN, 175
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 621:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:621:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal971=null;
        Token TOKEN972=null;

        Object string_literal971_tree=null;
        Object TOKEN972_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:5: 'VBZ' TOKEN
            {
            string_literal971=(Token)match(input,176,FOLLOW_176_in_vbz5509_static.FOLLOW_176_in_vbz5509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal971);

            TOKEN972=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5511_static.FOLLOW_TOKEN_in_vbz5511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN972);



            // AST REWRITE
            // elements: 176, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:624:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal973=null;
        Token TOKEN974=null;

        Object string_literal973_tree=null;
        Object TOKEN974_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:5: 'WDT' TOKEN
            {
            string_literal973=(Token)match(input,177,FOLLOW_177_in_wdt5526_static.FOLLOW_177_in_wdt5526); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal973);

            TOKEN974=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5528_static.FOLLOW_TOKEN_in_wdt5528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN974);



            // AST REWRITE
            // elements: 177, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:627:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal975=null;
        Token TOKEN976=null;

        Object string_literal975_tree=null;
        Object TOKEN976_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:4: 'WP' TOKEN
            {
            string_literal975=(Token)match(input,178,FOLLOW_178_in_wp5543_static.FOLLOW_178_in_wp5543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal975);

            TOKEN976=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5545_static.FOLLOW_TOKEN_in_wp5545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN976);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 630:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:630:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal977=null;
        Token TOKEN978=null;

        Object string_literal977_tree=null;
        Object TOKEN978_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:9: 'WP$' TOKEN
            {
            string_literal977=(Token)match(input,179,FOLLOW_179_in_wp_poss5560_static.FOLLOW_179_in_wp_poss5560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal977);

            TOKEN978=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5562_static.FOLLOW_TOKEN_in_wp_poss5562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN978);



            // AST REWRITE
            // elements: TOKEN, 179
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 633:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:633:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal979=null;
        Token TOKEN980=null;

        Object string_literal979_tree=null;
        Object TOKEN980_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:5: 'WRB' TOKEN
            {
            string_literal979=(Token)match(input,180,FOLLOW_180_in_wrb5577_static.FOLLOW_180_in_wrb5577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal979);

            TOKEN980=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5579_static.FOLLOW_TOKEN_in_wrb5579); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN980);



            // AST REWRITE
            // elements: 180, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 636:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:636:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:11: ( procedureNounPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:11: procedureNounPhrase
        {
        pushFollow(FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker221_static.FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker221);
        procedureNounPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:34: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:34: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker226_static.FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker226);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:52: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:93:52: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker228_static.FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker228);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker242_static.FOLLOW_nounphrase_in_synpred6_ChemicalChunker242);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker244_static.FOLLOW_verbphrase_in_synpred7_ChemicalChunker244);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker246_static.FOLLOW_prepphrase_in_synpred8_ChemicalChunker246);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker248_static.FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker248);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred10_ChemicalChunker253_static.FOLLOW_advAdj_in_synpred10_ChemicalChunker253);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred11_ChemicalChunker255_static.FOLLOW_colon_in_synpred11_ChemicalChunker255);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred12_ChemicalChunker260_static.FOLLOW_conjunction_in_synpred12_ChemicalChunker260);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred13_ChemicalChunker262_static.FOLLOW_rbconj_in_synpred13_ChemicalChunker262);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred14_ChemicalChunker264_static.FOLLOW_comma_in_synpred14_ChemicalChunker264);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:96: ( headingProcedureTerminators )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:96: headingProcedureTerminators
        {
        pushFollow(FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker481_static.FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker481);
        headingProcedureTerminators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker582_static.FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker582);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred94_ChemicalChunker613_static.FOLLOW_dt_in_synpred94_ChemicalChunker613);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred95_ChemicalChunker620_static.FOLLOW_conjunction_in_synpred95_ChemicalChunker620);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( ( conjunction )* nounphraseContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( conjunction )* nounphraseContent
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:35: ( conjunction )*
        loop203:
        do {
            int alt203=2;
            alt203 = dfa203.predict(input);
            switch (alt203) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred96_ChemicalChunker620_static.FOLLOW_conjunction_in_synpred96_ChemicalChunker620);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker623_static.FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker623);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:69: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:69: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker628_static.FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker628);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred98_ChemicalChunker
    public final void synpred98_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:83: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:129:83: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker631_static.FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker631);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred99_ChemicalChunker643_static.FOLLOW_advAdj_in_synpred99_ChemicalChunker643);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker648_static.FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker648);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:29: ( ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:29: ratioOrBracketedRatio
        {
        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker650_static.FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker650);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:51: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:51: noun
        {
        pushFollow(FOLLOW_noun_in_synpred102_ChemicalChunker652_static.FOLLOW_noun_in_synpred102_ChemicalChunker652);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:56: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:132:56: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred103_ChemicalChunker654_static.FOLLOW_numeric_in_synpred103_ChemicalChunker654);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred104_ChemicalChunker
    public final void synpred104_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:135:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker666_static.FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker666);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred105_ChemicalChunker697_static.FOLLOW_adj_in_synpred105_ChemicalChunker697);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred108_ChemicalChunker709_static.FOLLOW_molecule_in_synpred108_ChemicalChunker709);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:72: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:138:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred109_ChemicalChunker718_static.FOLLOW_conjunction_in_synpred109_ChemicalChunker718);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker720_static.FOLLOW_molecule_in_synpred109_ChemicalChunker720);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:16: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred111_ChemicalChunker737_static.FOLLOW_adj_in_synpred111_ChemicalChunker737);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:27: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred113_ChemicalChunker744_static.FOLLOW_molecule_in_synpred113_ChemicalChunker744);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:28: to
        {
        pushFollow(FOLLOW_to_in_synpred115_ChemicalChunker777_static.FOLLOW_to_in_synpred115_ChemicalChunker777);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred116_ChemicalChunker780_static.FOLLOW_inAll_in_synpred116_ChemicalChunker780);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred122_ChemicalChunker799_static.FOLLOW_verb_in_synpred122_ChemicalChunker799);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:77: md
        {
        pushFollow(FOLLOW_md_in_synpred123_ChemicalChunker802_static.FOLLOW_md_in_synpred123_ChemicalChunker802);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred124_ChemicalChunker805_static.FOLLOW_adv_in_synpred124_ChemicalChunker805);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred125_ChemicalChunker808_static.FOLLOW_adj_in_synpred125_ChemicalChunker808);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred126_ChemicalChunker811_static.FOLLOW_neg_in_synpred126_ChemicalChunker811);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:49: ( md )*
        loop204:
        do {
            int alt204=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt204=1;
                }
                break;

            }

            switch (alt204) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred127_ChemicalChunker787_static.FOLLOW_md_in_synpred127_ChemicalChunker787);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop204;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:53: ( rbconj )?
        int alt205=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt205=1;
                }
                break;
        }

        switch (alt205) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred127_ChemicalChunker790_static.FOLLOW_rbconj_in_synpred127_ChemicalChunker790);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:61: ( adv )*
        loop206:
        do {
            int alt206=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt206=1;
                }
                break;

            }

            switch (alt206) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred127_ChemicalChunker793_static.FOLLOW_adv_in_synpred127_ChemicalChunker793);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop206;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:66: ( adj )?
        int alt207=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt207=1;
                }
                break;
        }

        switch (alt207) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred127_ChemicalChunker796_static.FOLLOW_adj_in_synpred127_ChemicalChunker796);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:71: ( verb )+
        int cnt208=0;
        loop208:
        do {
            int alt208=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt208=1;
                }
                break;

            }

            switch (alt208) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred127_ChemicalChunker799_static.FOLLOW_verb_in_synpred127_ChemicalChunker799);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt208 >= 1 ) break loop208;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(208, input);
                    throw eee;
            }
            cnt208++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:77: ( md )*
        loop209:
        do {
            int alt209=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt209=1;
                }
                break;

            }

            switch (alt209) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred127_ChemicalChunker802_static.FOLLOW_md_in_synpred127_ChemicalChunker802);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop209;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:81: ( adv )*
        loop210:
        do {
            int alt210=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt210=1;
                }
                break;

            }

            switch (alt210) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred127_ChemicalChunker805_static.FOLLOW_adv_in_synpred127_ChemicalChunker805);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop210;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:86: ( adj )?
        int alt211=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt211=1;
                }
                break;
        }

        switch (alt211) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred127_ChemicalChunker808_static.FOLLOW_adj_in_synpred127_ChemicalChunker808);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:91: ( neg )?
        int alt212=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt212=1;
                }
                break;
        }

        switch (alt212) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred127_ChemicalChunker811_static.FOLLOW_neg_in_synpred127_ChemicalChunker811);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred128_ChemicalChunker817_static.FOLLOW_inoff_in_synpred128_ChemicalChunker817);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred131_ChemicalChunker
    public final void synpred131_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:107: ( cc )?
        int alt213=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt213=1;
                }
                break;
        }

        switch (alt213) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred131_ChemicalChunker821_static.FOLLOW_cc_in_synpred131_ChemicalChunker821);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:111: ( comma )?
        int alt214=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt214=1;
                }
                break;
        }

        switch (alt214) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred131_ChemicalChunker824_static.FOLLOW_comma_in_synpred131_ChemicalChunker824);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred131_ChemicalChunker827_static.FOLLOW_prepphrase_in_synpred131_ChemicalChunker827);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred131_ChemicalChunker

    // $ANTLR start synpred141_ChemicalChunker
    public final void synpred141_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker857_static.FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker857);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_ChemicalChunker

    // $ANTLR start synpred154_ChemicalChunker
    public final void synpred154_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:146:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred154_ChemicalChunker883_static.FOLLOW_vbdegass_in_synpred154_ChemicalChunker883);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred172_ChemicalChunker945_static.FOLLOW_dash_in_synpred172_ChemicalChunker945);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred172_ChemicalChunker947_static.FOLLOW_nounStructure_in_synpred172_ChemicalChunker947);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred175_ChemicalChunker962_static.FOLLOW_citation_in_synpred175_ChemicalChunker962);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred176_ChemicalChunker964_static.FOLLOW_cycles_in_synpred176_ChemicalChunker964);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred177_ChemicalChunker966_static.FOLLOW_molecule_in_synpred177_ChemicalChunker966);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred178_ChemicalChunker968_static.FOLLOW_apparatus_in_synpred178_ChemicalChunker968);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred179_ChemicalChunker970_static.FOLLOW_mixture_in_synpred179_ChemicalChunker970);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker972_static.FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker972);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:90: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:90: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred181_ChemicalChunker974_static.FOLLOW_nnstate_in_synpred181_ChemicalChunker974);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:98: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:98: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred182_ChemicalChunker976_static.FOLLOW_procedureNode_in_synpred182_ChemicalChunker976);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:112: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:112: nn
        {
        pushFollow(FOLLOW_nn_in_synpred183_ChemicalChunker978_static.FOLLOW_nn_in_synpred183_ChemicalChunker978);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:123: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:123: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred186_ChemicalChunker984_static.FOLLOW_nnadd_in_synpred186_ChemicalChunker984);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:147: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:147: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred188_ChemicalChunker988_static.FOLLOW_nnexample_in_synpred188_ChemicalChunker988);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:157: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:157: range
        {
        pushFollow(FOLLOW_range_in_synpred189_ChemicalChunker990_static.FOLLOW_range_in_synpred189_ChemicalChunker990);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:163: ( oscaronts )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:163: oscaronts
        {
        pushFollow(FOLLOW_oscaronts_in_synpred190_ChemicalChunker992_static.FOLLOW_oscaronts_in_synpred190_ChemicalChunker992);
        oscaronts();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:180: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:180: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker996_static.FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker996);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:203: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:203: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred194_ChemicalChunker1000_static.FOLLOW_quantity_in_synpred194_ChemicalChunker1000);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:212: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:212: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred195_ChemicalChunker1002_static.FOLLOW_nnchementity_in_synpred195_ChemicalChunker1002);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:232: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:232: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred197_ChemicalChunker1006_static.FOLLOW_nnph_in_synpred197_ChemicalChunker1006);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:245: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:245: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred199_ChemicalChunker1010_static.FOLLOW_nngeneral_in_synpred199_ChemicalChunker1010);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:269: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:269: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred202_ChemicalChunker1016_static.FOLLOW_nnpressure_in_synpred202_ChemicalChunker1016);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:373: ( nnmixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:373: nnmixture
        {
        pushFollow(FOLLOW_nnmixture_in_synpred212_ChemicalChunker1036_static.FOLLOW_nnmixture_in_synpred212_ChemicalChunker1036);
        nnmixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:383: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:383: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1038_static.FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1038);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:414: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:414: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred215_ChemicalChunker1042_static.FOLLOW_numeric_in_synpred215_ChemicalChunker1042);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred220_ChemicalChunker
    public final void synpred220_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:464: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:464: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred220_ChemicalChunker1052_static.FOLLOW_nnyield_in_synpred220_ChemicalChunker1052);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred228_ChemicalChunker1082_static.FOLLOW_prepphraseAtmosphere_in_synpred228_ChemicalChunker1082);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred229_ChemicalChunker1084_static.FOLLOW_prepphraseTime_in_synpred229_ChemicalChunker1084);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred230_ChemicalChunker1086_static.FOLLOW_prepphraseTemp_in_synpred230_ChemicalChunker1086);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred231_ChemicalChunker1088_static.FOLLOW_prepphraseIN_in_synpred231_ChemicalChunker1088);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:158:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred232_ChemicalChunker1090_static.FOLLOW_prepphraseRole_in_synpred232_ChemicalChunker1090);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred234_ChemicalChunker1130_static.FOLLOW_advAdj_in_synpred234_ChemicalChunker1130);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred235_ChemicalChunker1135_static.FOLLOW_nnatmosphere_in_synpred235_ChemicalChunker1135);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred236_ChemicalChunker1163_static.FOLLOW_advAdj_in_synpred236_ChemicalChunker1163);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred241_ChemicalChunker1179_static.FOLLOW_nntime_in_synpred241_ChemicalChunker1179);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred242_ChemicalChunker1210_static.FOLLOW_advAdj_in_synpred242_ChemicalChunker1210);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred247_ChemicalChunker1225_static.FOLLOW_nntemp_in_synpred247_ChemicalChunker1225);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred253_ChemicalChunker1398_static.FOLLOW_conjunction_in_synpred253_ChemicalChunker1398);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:15: ( conjunction )*
        loop215:
        do {
            int alt215=2;
            alt215 = dfa215.predict(input);
            switch (alt215) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred254_ChemicalChunker1398_static.FOLLOW_conjunction_in_synpred254_ChemicalChunker1398);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop215;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred254_ChemicalChunker1401_static.FOLLOW_apparatus_in_synpred254_ChemicalChunker1401);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred257_ChemicalChunker1418_static.FOLLOW_nnApp_in_synpred257_ChemicalChunker1418);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1445_static.FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1445);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:201:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred259_ChemicalChunker1449_static.FOLLOW_dash_in_synpred259_ChemicalChunker1449);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1451_static.FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1451);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred260_ChemicalChunker1465_static.FOLLOW_quantity_in_synpred260_ChemicalChunker1465);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred261_ChemicalChunker1467_static.FOLLOW_adj_in_synpred261_ChemicalChunker1467);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred262_ChemicalChunker1469_static.FOLLOW_nnpressure_in_synpred262_ChemicalChunker1469);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred263_ChemicalChunker1471_static.FOLLOW_nnadd_in_synpred263_ChemicalChunker1471);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred264_ChemicalChunker1473_static.FOLLOW_molecule_in_synpred264_ChemicalChunker1473);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred265_ChemicalChunker1475_static.FOLLOW_nnchementity_in_synpred265_ChemicalChunker1475);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred266_ChemicalChunker1477_static.FOLLOW_nnstate_in_synpred266_ChemicalChunker1477);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred267_ChemicalChunker1479_static.FOLLOW_nn_in_synpred267_ChemicalChunker1479);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred268_ChemicalChunker1491_static.FOLLOW_oscaront_in_synpred268_ChemicalChunker1491);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:46: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:46: adj
        {
        pushFollow(FOLLOW_adj_in_synpred270_ChemicalChunker1516_static.FOLLOW_adj_in_synpred270_ChemicalChunker1516);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:52: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:52: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred271_ChemicalChunker1520_static.FOLLOW_numericReferenceOrQuantity_in_synpred271_ChemicalChunker1520);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:81: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:81: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred272_ChemicalChunker1524_static.FOLLOW_nnchementity_in_synpred272_ChemicalChunker1524);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:97: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:97: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred273_ChemicalChunker1529_static.FOLLOW_quantity_in_synpred273_ChemicalChunker1529);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:107: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:207:107: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred274_ChemicalChunker1532_static.FOLLOW_fromProcedure_in_synpred274_ChemicalChunker1532);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:34: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:34: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred275_ChemicalChunker1543_static.FOLLOW_afterOscarCompoundStructure_in_synpred275_ChemicalChunker1543);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:30: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:30: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred277_ChemicalChunker1570_static.FOLLOW_oscarcm_in_synpred277_ChemicalChunker1570);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:45: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:45: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred279_ChemicalChunker1576_static.FOLLOW_oscarcm_in_synpred279_ChemicalChunker1576);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:40: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:40: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred280_ChemicalChunker1574_static.FOLLOW_dash_in_synpred280_ChemicalChunker1574);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:45: ( oscarcm )+
        int cnt218=0;
        loop218:
        do {
            int alt218=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt218=1;
                }
                break;

            }

            switch (alt218) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred280_ChemicalChunker1576_static.FOLLOW_oscarcm_in_synpred280_ChemicalChunker1576);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt218 >= 1 ) break loop218;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(218, input);
                    throw eee;
            }
            cnt218++;
        } while (true);


        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:56: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:56: dash
        {
        pushFollow(FOLLOW_dash_in_synpred281_ChemicalChunker1581_static.FOLLOW_dash_in_synpred281_ChemicalChunker1581);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:39: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:39: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:39: ( dash ( oscarcm )+ )+
        int cnt220=0;
        loop220:
        do {
            int alt220=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt220=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt220) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:40: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred282_ChemicalChunker1574_static.FOLLOW_dash_in_synpred282_ChemicalChunker1574);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:45: ( oscarcm )+
        	    int cnt219=0;
        	    loop219:
        	    do {
        	        int alt219=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt219=1;
        	            }
        	            break;

        	        }

        	        switch (alt219) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred282_ChemicalChunker1576_static.FOLLOW_oscarcm_in_synpred282_ChemicalChunker1576);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt219 >= 1 ) break loop219;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(219, input);
        	                throw eee;
        	        }
        	        cnt219++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt220 >= 1 ) break loop220;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(220, input);
                    throw eee;
            }
            cnt220++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:56: ( dash )?
        int alt221=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt221=1;
                }
                break;
        }

        switch (alt221) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred282_ChemicalChunker1581_static.FOLLOW_dash_in_synpred282_ChemicalChunker1581);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:62: ( ( colon ( oscarcm )+ )+ ratioOrBracketedRatio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:63: ( colon ( oscarcm )+ )+ ratioOrBracketedRatio
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:63: ( colon ( oscarcm )+ )+
        int cnt224=0;
        loop224:
        do {
            int alt224=2;
            switch ( input.LA(1) ) {
            case 132:
                {
                alt224=1;
                }
                break;

            }

            switch (alt224) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:64: colon ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_colon_in_synpred285_ChemicalChunker1586_static.FOLLOW_colon_in_synpred285_ChemicalChunker1586);
        	    colon();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:70: ( oscarcm )+
        	    int cnt223=0;
        	    loop223:
        	    do {
        	        int alt223=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt223=1;
        	            }
        	            break;

        	        }

        	        switch (alt223) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred285_ChemicalChunker1588_static.FOLLOW_oscarcm_in_synpred285_ChemicalChunker1588);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt223 >= 1 ) break loop223;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(223, input);
        	                throw eee;
        	        }
        	        cnt223++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt224 >= 1 ) break loop224;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(224, input);
                    throw eee;
            }
            cnt224++;
        } while (true);

        pushFollow(FOLLOW_ratioOrBracketedRatio_in_synpred285_ChemicalChunker1593_static.FOLLOW_ratioOrBracketedRatio_in_synpred285_ChemicalChunker1593);
        ratioOrBracketedRatio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:112: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:112: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred286_ChemicalChunker1599_static.FOLLOW_oscarcm_in_synpred286_ChemicalChunker1599);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:106: ( colon ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:106: colon ( oscarcm )+
        {
        pushFollow(FOLLOW_colon_in_synpred287_ChemicalChunker1597_static.FOLLOW_colon_in_synpred287_ChemicalChunker1597);
        colon();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:112: ( oscarcm )+
        int cnt225=0;
        loop225:
        do {
            int alt225=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt225=1;
                }
                break;

            }

            switch (alt225) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred287_ChemicalChunker1599_static.FOLLOW_oscarcm_in_synpred287_ChemicalChunker1599);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt225 >= 1 ) break loop225;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(225, input);
                    throw eee;
            }
            cnt225++;
        } while (true);


        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:124: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:124: dash
        {
        pushFollow(FOLLOW_dash_in_synpred288_ChemicalChunker1605_static.FOLLOW_dash_in_synpred288_ChemicalChunker1605);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:129: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:210:129: apost
        {
        pushFollow(FOLLOW_apost_in_synpred289_ChemicalChunker1607_static.FOLLOW_apost_in_synpred289_ChemicalChunker1607);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred291_ChemicalChunker1650_static.FOLLOW_moleculeamount3_in_synpred291_ChemicalChunker1650);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred292_ChemicalChunker1653_static.FOLLOW_moleculeamount1_in_synpred292_ChemicalChunker1653);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:216:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred293_ChemicalChunker1660_static.FOLLOW_asAstate_in_synpred293_ChemicalChunker1660);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred294_ChemicalChunker1671_static.FOLLOW_quantity_in_synpred294_ChemicalChunker1671);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred295_ChemicalChunker1673_static.FOLLOW_mixture_in_synpred295_ChemicalChunker1673);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:64: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:219:64: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred298_ChemicalChunker1690_static.FOLLOW_mixture_in_synpred298_ChemicalChunker1690);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:30: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred301_ChemicalChunker1712_static.FOLLOW_quantity_in_synpred301_ChemicalChunker1712);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:39: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:39: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred302_ChemicalChunker1714_static.FOLLOW_mixture_in_synpred302_ChemicalChunker1714);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:86: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:222:86: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred307_ChemicalChunker1737_static.FOLLOW_oscarCompound_in_synpred307_ChemicalChunker1737);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred308_ChemicalChunker1749_static.FOLLOW_quantity_in_synpred308_ChemicalChunker1749);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred309_ChemicalChunker1751_static.FOLLOW_mixture_in_synpred309_ChemicalChunker1751);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:225:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred310_ChemicalChunker1755_static.FOLLOW_oscarCompound_in_synpred310_ChemicalChunker1755);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred311_ChemicalChunker1766_static.FOLLOW_citation_in_synpred311_ChemicalChunker1766);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred312_ChemicalChunker1768_static.FOLLOW_quantity_in_synpred312_ChemicalChunker1768);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred314_ChemicalChunker1770_static.FOLLOW_comma_in_synpred314_ChemicalChunker1770);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:59: ( quantity1Node | citationStructure )
        int alt227=2;
        switch ( input.LA(1) ) {
        case 143:
            {
            switch ( input.LA(2) ) {
            case TOKEN:
                {
                switch ( input.LA(3) ) {
                case 133:
                case 145:
                case 149:
                case 158:
                    {
                    alt227=2;
                    }
                    break;
                case 146:
                    {
                    switch ( input.LA(4) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(5) ) {
                        case 44:
                        case 65:
                        case 66:
                        case 67:
                        case 69:
                        case 70:
                        case 138:
                        case 156:
                            {
                            alt227=1;
                            }
                            break;
                        case 133:
                        case 145:
                        case 146:
                        case 149:
                        case 158:
                            {
                            alt227=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 227, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 227, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                case 73:
                case 130:
                    {
                    alt227=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 2, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 1, input);

                throw nvae;
            }

            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 227, 0, input);

            throw nvae;
        }

        switch (alt227) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred314_ChemicalChunker1773_static.FOLLOW_quantity1Node_in_synpred314_ChemicalChunker1773);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred314_ChemicalChunker1775_static.FOLLOW_citationStructure_in_synpred314_ChemicalChunker1775);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:93: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:93: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred315_ChemicalChunker1778_static.FOLLOW_mixture_in_synpred315_ChemicalChunker1778);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:68: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:68: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred316_ChemicalChunker1810_static.FOLLOW_asAstate_in_synpred316_ChemicalChunker1810);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred317_ChemicalChunker
    public final void synpred317_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:16: ( potentialUnnamedMoleculeAmount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:16: potentialUnnamedMoleculeAmount1
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred317_ChemicalChunker1823_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred317_ChemicalChunker1823);
        potentialUnnamedMoleculeAmount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_ChemicalChunker

    // $ANTLR start synpred318_ChemicalChunker
    public final void synpred318_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1827_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1827);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_ChemicalChunker

    // $ANTLR start synpred319_ChemicalChunker
    public final void synpred319_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:4: ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:4: quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
        {
        pushFollow(FOLLOW_quantityOf_in_synpred319_ChemicalChunker1820_static.FOLLOW_quantityOf_in_synpred319_ChemicalChunker1820);
        quantityOf();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )
        int alt228=3;
        alt228 = dfa228.predict(input);
        switch (alt228) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:16: potentialUnnamedMoleculeAmount1
                {
                pushFollow(FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred319_ChemicalChunker1823_static.FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred319_ChemicalChunker1823);
                potentialUnnamedMoleculeAmount1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:50: potentialUnnamedMoleculeAmount2
                {
                pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1827_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1827);
                potentialUnnamedMoleculeAmount2();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:84: definiteUnnamedMolecule
                {
                pushFollow(FOLLOW_definiteUnnamedMolecule_in_synpred319_ChemicalChunker1831_static.FOLLOW_definiteUnnamedMolecule_in_synpred319_ChemicalChunker1831);
                definiteUnnamedMolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred319_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:112: ( potentialUnnamedMoleculeAmount2 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:112: potentialUnnamedMoleculeAmount2
        {
        pushFollow(FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1837_static.FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1837);
        potentialUnnamedMoleculeAmount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred321_ChemicalChunker1850_static.FOLLOW_quantity_in_synpred321_ChemicalChunker1850);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:29: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:29: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred325_ChemicalChunker1874_static.FOLLOW_quantity_in_synpred325_ChemicalChunker1874);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:39: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:39: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred326_ChemicalChunker1877_static.FOLLOW_asAstate_in_synpred326_ChemicalChunker1877);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:49: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:49: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred327_ChemicalChunker1880_static.FOLLOW_fromProcedure_in_synpred327_ChemicalChunker1880);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:148: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:148: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred332_ChemicalChunker1920_static.FOLLOW_quantity_in_synpred332_ChemicalChunker1920);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:158: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:158: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred333_ChemicalChunker1923_static.FOLLOW_asAstate_in_synpred333_ChemicalChunker1923);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:168: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:168: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred334_ChemicalChunker1926_static.FOLLOW_fromProcedure_in_synpred334_ChemicalChunker1926);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:37: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:37: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred335_ChemicalChunker1938_static.FOLLOW_quantity_in_synpred335_ChemicalChunker1938);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:47: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:47: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred336_ChemicalChunker1941_static.FOLLOW_asAstate_in_synpred336_ChemicalChunker1941);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:57: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:57: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred337_ChemicalChunker1944_static.FOLLOW_fromProcedure_in_synpred337_ChemicalChunker1944);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:82: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:82: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred340_ChemicalChunker1968_static.FOLLOW_numericReferenceOrQuantity_in_synpred340_ChemicalChunker1968);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred343_ChemicalChunker
    public final void synpred343_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:66: ( numericReferenceOrQuantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:66: numericReferenceOrQuantity
        {
        pushFollow(FOLLOW_numericReferenceOrQuantity_in_synpred343_ChemicalChunker1989_static.FOLLOW_numericReferenceOrQuantity_in_synpred343_ChemicalChunker1989);
        numericReferenceOrQuantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:33: ( referenceToExampleCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:33: referenceToExampleCompound
        {
        pushFollow(FOLLOW_referenceToExampleCompound_in_synpred348_ChemicalChunker2013_static.FOLLOW_referenceToExampleCompound_in_synpred348_ChemicalChunker2013);
        referenceToExampleCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:60: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:60: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred349_ChemicalChunker2015_static.FOLLOW_nnexample_in_synpred349_ChemicalChunker2015);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred356_ChemicalChunker
    public final void synpred356_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred356_ChemicalChunker2045_static.FOLLOW_quantity_in_synpred356_ChemicalChunker2045);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred356_ChemicalChunker

    // $ANTLR start synpred360_ChemicalChunker
    public final void synpred360_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:34: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:34: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred360_ChemicalChunker2074_static.FOLLOW_quantity_in_synpred360_ChemicalChunker2074);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:6: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:7: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred364_ChemicalChunker2123_static.FOLLOW_quantity_in_synpred364_ChemicalChunker2123);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred366_ChemicalChunker
    public final void synpred366_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred366_ChemicalChunker2159_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred366_ChemicalChunker2159);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred371_ChemicalChunker2292_static.FOLLOW_comma_in_synpred371_ChemicalChunker2292);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred371_ChemicalChunker2295_static.FOLLOW_measurements_in_synpred371_ChemicalChunker2295);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred374_ChemicalChunker
    public final void synpred374_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred374_ChemicalChunker2320_static.FOLLOW_dt_in_synpred374_ChemicalChunker2320);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred375_ChemicalChunker2332_static.FOLLOW_measurementtypes_in_synpred375_ChemicalChunker2332);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred382_ChemicalChunker2369_static.FOLLOW_yield_in_synpred382_ChemicalChunker2369);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred387_ChemicalChunker
    public final void synpred387_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:32: ( dash cd percentsign )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:32: dash cd percentsign
        {
        pushFollow(FOLLOW_dash_in_synpred387_ChemicalChunker2568_static.FOLLOW_dash_in_synpred387_ChemicalChunker2568);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred387_ChemicalChunker2570_static.FOLLOW_cd_in_synpred387_ChemicalChunker2570);
        cd();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_percentsign_in_synpred387_ChemicalChunker2572_static.FOLLOW_percentsign_in_synpred387_ChemicalChunker2572);
        percentsign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:19: ( mixtureStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:19: mixtureStructure1
        {
        pushFollow(FOLLOW_mixtureStructure1_in_synpred389_ChemicalChunker2610_static.FOLLOW_mixtureStructure1_in_synpred389_ChemicalChunker2610);
        mixtureStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred391_ChemicalChunker
    public final void synpred391_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:55: ( mixtureStructure3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:55: mixtureStructure3
        {
        pushFollow(FOLLOW_mixtureStructure3_in_synpred391_ChemicalChunker2614_static.FOLLOW_mixtureStructure3_in_synpred391_ChemicalChunker2614);
        mixtureStructure3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_ChemicalChunker

    // $ANTLR start synpred393_ChemicalChunker
    public final void synpred393_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:20: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:20: verb
        {
        pushFollow(FOLLOW_verb_in_synpred393_ChemicalChunker2696_static.FOLLOW_verb_in_synpred393_ChemicalChunker2696);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:25: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:25: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred394_ChemicalChunker2698_static.FOLLOW_quantity2Node_in_synpred394_ChemicalChunker2698);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:39: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:39: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred395_ChemicalChunker2700_static.FOLLOW_oscarCompound_in_synpred395_ChemicalChunker2700);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred396_ChemicalChunker
    public final void synpred396_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:53: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:53: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred396_ChemicalChunker2702_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred396_ChemicalChunker2702);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred396_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:95: ( numberCompoundReference comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:95: numberCompoundReference comma
        {
        pushFollow(FOLLOW_numberCompoundReference_in_synpred397_ChemicalChunker2704_static.FOLLOW_numberCompoundReference_in_synpred397_ChemicalChunker2704);
        numberCompoundReference();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_comma_in_synpred397_ChemicalChunker2706_static.FOLLOW_comma_in_synpred397_ChemicalChunker2706);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:151: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:151: cd
        {
        pushFollow(FOLLOW_cd_in_synpred402_ChemicalChunker2716_static.FOLLOW_cd_in_synpred402_ChemicalChunker2716);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:154: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:154: comma
        {
        pushFollow(FOLLOW_comma_in_synpred403_ChemicalChunker2718_static.FOLLOW_comma_in_synpred403_ChemicalChunker2718);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:160: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:160: adj
        {
        pushFollow(FOLLOW_adj_in_synpred404_ChemicalChunker2720_static.FOLLOW_adj_in_synpred404_ChemicalChunker2720);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:182: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:182: verb
        {
        pushFollow(FOLLOW_verb_in_synpred407_ChemicalChunker2730_static.FOLLOW_verb_in_synpred407_ChemicalChunker2730);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:187: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:187: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred408_ChemicalChunker2732_static.FOLLOW_quantity2Node_in_synpred408_ChemicalChunker2732);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:201: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:201: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred409_ChemicalChunker2734_static.FOLLOW_oscarCompound_in_synpred409_ChemicalChunker2734);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred410_ChemicalChunker
    public final void synpred410_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:215: ( alphanumericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:215: alphanumericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred410_ChemicalChunker2736_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred410_ChemicalChunker2736);
        alphanumericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:283: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:283: cd
        {
        pushFollow(FOLLOW_cd_in_synpred415_ChemicalChunker2746_static.FOLLOW_cd_in_synpred415_ChemicalChunker2746);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:286: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:286: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred416_ChemicalChunker2748_static.FOLLOW_conjunction_in_synpred416_ChemicalChunker2748);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:298: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:298: adj
        {
        pushFollow(FOLLOW_adj_in_synpred417_ChemicalChunker2750_static.FOLLOW_adj_in_synpred417_ChemicalChunker2750);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred420_ChemicalChunker
    public final void synpred420_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:313: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:313: noun
        {
        pushFollow(FOLLOW_noun_in_synpred420_ChemicalChunker2756_static.FOLLOW_noun_in_synpred420_ChemicalChunker2756);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_ChemicalChunker

    // $ANTLR start synpred428_ChemicalChunker
    public final void synpred428_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:32: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:32: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred428_ChemicalChunker2831_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred428_ChemicalChunker2831);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred428_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:64: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:64: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred429_ChemicalChunker2833_static.FOLLOW_numeric_in_synpred429_ChemicalChunker2833);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred431_ChemicalChunker
    public final void synpred431_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:87: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:87: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred431_ChemicalChunker2842_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred431_ChemicalChunker2842);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:131: ( ( comma | colon | inof | infrom )? submethod )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:131: ( comma | colon | inof | infrom )? submethod
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:131: ( comma | colon | inof | infrom )?
        int alt237=5;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt237=1;
                }
                break;
            case 132:
                {
                alt237=2;
                }
                break;
            case 56:
                {
                alt237=3;
                }
                break;
            case 59:
                {
                alt237=4;
                }
                break;
        }

        switch (alt237) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:132: comma
                {
                pushFollow(FOLLOW_comma_in_synpred436_ChemicalChunker2851_static.FOLLOW_comma_in_synpred436_ChemicalChunker2851);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:139: colon
                {
                pushFollow(FOLLOW_colon_in_synpred436_ChemicalChunker2854_static.FOLLOW_colon_in_synpred436_ChemicalChunker2854);
                colon();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:146: inof
                {
                pushFollow(FOLLOW_inof_in_synpred436_ChemicalChunker2857_static.FOLLOW_inof_in_synpred436_ChemicalChunker2857);
                inof();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:153: infrom
                {
                pushFollow(FOLLOW_infrom_in_synpred436_ChemicalChunker2861_static.FOLLOW_infrom_in_synpred436_ChemicalChunker2861);
                infrom();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_submethod_in_synpred436_ChemicalChunker2865_static.FOLLOW_submethod_in_synpred436_ChemicalChunker2865);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred437_ChemicalChunker
    public final void synpred437_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:174: ( lrb submethod rrb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:174: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred437_ChemicalChunker2869_static.FOLLOW_lrb_in_synpred437_ChemicalChunker2869);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred437_ChemicalChunker2871_static.FOLLOW_submethod_in_synpred437_ChemicalChunker2871);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred437_ChemicalChunker2873_static.FOLLOW_rrb_in_synpred437_ChemicalChunker2873);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_ChemicalChunker

    // $ANTLR start synpred439_ChemicalChunker
    public final void synpred439_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:35: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:35: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred439_ChemicalChunker2890_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred439_ChemicalChunker2890);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred439_ChemicalChunker

    // $ANTLR start synpred440_ChemicalChunker
    public final void synpred440_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:13: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:13: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2905_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2905);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_ChemicalChunker

    // $ANTLR start synpred449_ChemicalChunker
    public final void synpred449_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:15: ( colon cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:15: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred449_ChemicalChunker3039_static.FOLLOW_colon_in_synpred449_ChemicalChunker3039);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred449_ChemicalChunker3041_static.FOLLOW_cd_in_synpred449_ChemicalChunker3041);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred449_ChemicalChunker

    // Delegated rules

    public final boolean synpred440_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred449_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred449_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred439_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred439_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred396_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred396_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA228 dfa228 = new DFA228(this);
    static class DFA4_static {
    static final String DFA4_eotS =
        "\51\uffff";
    static final String DFA4_eofS =
        "\7\uffff\5\6\15\uffff\5\6\5\uffff\1\6\5\uffff";
    static final String DFA4_minS =
        "\1\46\5\45\1\uffff\5\46\11\45\4\0\5\46\1\uffff\4\45\1\46\3\0\1"+
        "\45\1\0";
    static final String DFA4_maxS =
        "\1\u00b4\5\45\1\uffff\5\u00b4\11\45\4\0\5\u00b4\1\uffff\4\45\1"+
        "\u00b4\3\0\1\45\1\0";
    static final String DFA4_acceptS =
        "\6\uffff\1\2\27\uffff\1\1\12\uffff";
    static final String DFA4_specialS =
        "\25\uffff\1\0\1\6\1\4\1\3\13\uffff\1\5\1\7\1\2\1\uffff\1\1}>";
    static final String[] DFA4_transitionS = {
            "\1\3\142\6\1\uffff\1\6\1\5\1\6\1\1\1\6\1\4\2\6\1\2\42\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "",
            "\136\6\1\16\4\6\1\15\6\6\1\14\44\6",
            "\136\6\1\17\4\6\1\15\6\6\1\14\44\6",
            "\136\6\1\16\4\6\1\15\6\6\1\14\44\6",
            "\1\22\146\6\1\21\4\6\1\20\42\6",
            "\1\24\153\6\1\23\42\6",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\147\6\1\37\2\6\1\40\44\6",
            "\152\6\1\41\44\6",
            "\152\6\1\40\44\6",
            "\146\6\1\42\50\6",
            "\146\6\1\42\50\6",
            "",
            "\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\152\6\1\47\44\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50",
            "\1\uffff"
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "93:1: sentence : ( procedureNounPhrase | ( sentenceStructure | unmatchedPhrase )+ ( stop )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred2_ChemicalChunker()&&(isAtTokenPositionZero(input)))) ) {s = 30;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0092\uffff";
    static final String DFA2_eofS =
        "\1\1\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008e\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\u008e\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\45\1\101\1\135\1\61\1\160\1\5\1\125\1\52\1\u0084\1\u0086"+
        "\1\37\1\71\1\65\1\167\1\14\1\12\1\57\1\55\1\175\1\113\1\126\1\100"+
        "\1\22\1\70\1\16\1\27\1\156\1\153\1\152\1\77\1\2\1\142\1\34\1\17"+
        "\1\115\1\137\1\60\1\10\1\24\1\76\1\u0083\1\67\1\120\1\25\1\112\1"+
        "\50\1\106\1\53\1\44\1\147\1\131\1\40\1\107\1\121\1\75\1\116\1\133"+
        "\1\u008c\1\64\1\171\1\154\1\13\1\161\1\u0087\1\114\1\140\1\176\1"+
        "\170\1\72\1\u0085\1\127\1\u0089\1\150\1\30\1\141\1\31\1\35\1\177"+
        "\1\23\1\66\1\143\1\46\1\151\1\123\1\43\1\u008d\1\105\1\103\1\0\1"+
        "\6\1\4\1\163\1\136\1\u008a\1\174\1\144\1\117\1\172\1\21\1\15\1\111"+
        "\1\36\1\42\1\102\1\62\1\134\1\122\1\124\1\173\1\u0088\1\166\1\1"+
        "\1\54\1\110\1\74\1\155\1\162\1\u0081\1\3\1\33\1\41\1\73\1\130\1"+
        "\132\1\146\1\u0080\1\63\1\51\1\32\1\165\1\145\1\26\1\47\1\56\1\u008b"+
        "\1\u0082\1\164\1\157\1\20\1\7\1\104\1\11\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\4\1\15\1\17\1\43\1\40\1\53\1\u0085\1\16\1\36\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\24\1\52\1\u0086\1\56\1\u0087\1\41"+
            "\1\57\1\66\1\23\1\54\1\10\1\55\1\46\1\47\1\20\1\60\1\61\1\62"+
            "\1\63\1\64\1\37\1\25\1\143\1\u0083\1\144\1\147\1\21\1\42\1\151"+
            "\1\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\27\1\161"+
            "\1\65\1\162\1\146\1\163\1\164\1\71\1\165\1\72\1\166\1\73\1\167"+
            "\1\170\1\145\1\171\1\172\1\74\1\173\1\67\1\174\1\175\1\176\1"+
            "\75\1\177\1\51\1\70\1\u0080\1\u0081\1\u0082\1\11\1\134\1\u0088"+
            "\1\22\1\u0089\1\u0084\1\u008a\1\1\1\u008b\1\6\1\u008c\1\2\1"+
            "\30\1\5\1\u008d\1\u008e\1\3\1\7\1\103\1\76\1\112\1\12\1\13\1"+
            "\14\1\106\1\133\1\26\1\50\1\35\1\107\1\104\1\110\1\44\1\45\1"+
            "\31\1\32\1\34\1\33\1\77\1\111\1\u008f\1\135\1\140\1\137\1\142"+
            "\1\136\1\141\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 93:33: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred4_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\u0089\uffff";
    static final String DFA5_eofS =
        "\1\13\u0088\uffff";
    static final String DFA5_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA5_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA5_specialS =
        "\1\uffff\1\126\1\25\1\30\1\127\1\1\1\136\1\60\1\5\1\163\1\13\1"+
        "\uffff\1\120\1\2\1\155\1\43\1\102\1\153\1\140\1\73\1\36\1\171\1"+
        "\77\1\173\1\44\1\76\1\157\1\67\1\40\1\10\1\56\1\167\1\47\1\46\1"+
        "\22\1\143\1\110\1\17\1\34\1\63\1\0\1\124\1\177\1\150\1\105\1\14"+
        "\1\41\1\27\1\111\1\62\1\133\1\130\1\107\1\174\1\24\1\123\1\131\1"+
        "\146\1\145\1\106\1\65\1\175\1\3\1\164\1\132\1\72\1\32\1\12\1\176"+
        "\1\165\1\64\1\74\1\161\1\6\1\144\1\152\1\156\1\45\1\100\1\42\1\4"+
        "\1\54\1\33\1\66\1\117\1\135\1\154\1\u0081\1\113\1\50\1\121\1\u0082"+
        "\1\52\1\11\1\101\1\20\1\7\1\75\1\70\1\31\1\71\1\15\1\37\1\55\1\170"+
        "\1\112\1\141\1\160\1\172\1\142\1\122\1\137\1\116\1\53\1\35\1\u0080"+
        "\1\151\1\125\1\103\1\51\1\26\1\147\1\162\1\114\1\57\1\61\1\104\1"+
        "\23\1\166\1\115\1\134\1\16\1\21\4\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\20\1\10\1\12\1\44\1\41\1\54\1\13\1\11\1\37\1\115\1\116\1"+
            "\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120\1"+
            "\121\1\130\1\127\1\125\1\31\1\53\1\13\1\57\1\13\1\42\1\60\1"+
            "\67\1\30\1\55\1\24\1\56\1\47\1\50\1\26\1\61\1\62\1\63\1\64\1"+
            "\65\1\40\1\32\1\143\1\u0083\1\144\1\147\1\27\1\43\1\151\1\150"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\34\1\161\1\66\1"+
            "\162\1\146\1\163\1\164\1\72\1\165\1\73\1\166\1\74\1\167\1\170"+
            "\1\145\1\171\1\172\1\75\1\173\1\70\1\174\1\175\1\176\1\76\1"+
            "\177\1\52\1\71\1\u0080\1\u0081\1\u0082\1\25\1\15\1\13\1\14\1"+
            "\13\1\u0084\3\13\1\22\1\13\1\16\1\35\1\21\2\13\1\17\1\23\1\104"+
            "\1\77\1\113\1\5\1\6\1\7\1\107\1\134\1\33\1\51\1\36\1\110\1\105"+
            "\1\111\1\45\1\46\1\1\1\2\1\4\1\3\1\100\1\112\1\13\1\135\1\140"+
            "\1\137\1\142\1\136\1\141\1\101\1\106\1\102\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 95:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_40 = input.LA(1);

                         
                        int index5_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_40);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_5 = input.LA(1);

                         
                        int index5_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_62 = input.LA(1);

                         
                        int index5_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_62);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_80 = input.LA(1);

                         
                        int index5_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_80);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_8 = input.LA(1);

                         
                        int index5_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_73 = input.LA(1);

                         
                        int index5_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_73);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_96 = input.LA(1);

                         
                        int index5_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_96);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_29 = input.LA(1);

                         
                        int index5_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_29);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_93 = input.LA(1);

                         
                        int index5_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_93);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_67 = input.LA(1);

                         
                        int index5_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_67);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA5_10 = input.LA(1);

                         
                        int index5_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_10);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA5_45 = input.LA(1);

                         
                        int index5_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_45);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA5_101 = input.LA(1);

                         
                        int index5_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_101);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA5_131 = input.LA(1);

                         
                        int index5_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_131);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA5_37 = input.LA(1);

                         
                        int index5_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_37);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA5_95 = input.LA(1);

                         
                        int index5_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_95);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA5_132 = input.LA(1);

                         
                        int index5_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_132);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA5_34 = input.LA(1);

                         
                        int index5_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_34);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA5_127 = input.LA(1);

                         
                        int index5_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_127);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA5_54 = input.LA(1);

                         
                        int index5_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_54);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA5_2 = input.LA(1);

                         
                        int index5_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_2);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA5_120 = input.LA(1);

                         
                        int index5_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_120);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA5_47 = input.LA(1);

                         
                        int index5_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_47);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA5_3 = input.LA(1);

                         
                        int index5_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_3);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA5_99 = input.LA(1);

                         
                        int index5_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_99);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA5_66 = input.LA(1);

                         
                        int index5_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_66);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA5_82 = input.LA(1);

                         
                        int index5_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_82);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA5_38 = input.LA(1);

                         
                        int index5_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_38);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA5_114 = input.LA(1);

                         
                        int index5_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_114);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA5_102 = input.LA(1);

                         
                        int index5_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_102);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA5_28 = input.LA(1);

                         
                        int index5_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_28);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA5_46 = input.LA(1);

                         
                        int index5_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_46);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA5_79 = input.LA(1);

                         
                        int index5_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_79);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA5_77 = input.LA(1);

                         
                        int index5_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_77);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA5_33 = input.LA(1);

                         
                        int index5_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_33);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA5_32 = input.LA(1);

                         
                        int index5_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_32);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA5_89 = input.LA(1);

                         
                        int index5_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_89);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA5_119 = input.LA(1);

                         
                        int index5_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_119);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA5_92 = input.LA(1);

                         
                        int index5_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_92);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA5_113 = input.LA(1);

                         
                        int index5_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_113);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA5_81 = input.LA(1);

                         
                        int index5_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_81);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA5_103 = input.LA(1);

                         
                        int index5_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_103);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA5_30 = input.LA(1);

                         
                        int index5_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_30);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA5_124 = input.LA(1);

                         
                        int index5_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_124);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA5_7 = input.LA(1);

                         
                        int index5_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_7);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA5_125 = input.LA(1);

                         
                        int index5_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_125);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA5_49 = input.LA(1);

                         
                        int index5_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_49);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA5_39 = input.LA(1);

                         
                        int index5_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_39);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA5_70 = input.LA(1);

                         
                        int index5_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_70);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA5_60 = input.LA(1);

                         
                        int index5_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_60);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA5_83 = input.LA(1);

                         
                        int index5_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_83);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA5_98 = input.LA(1);

                         
                        int index5_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_98);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA5_100 = input.LA(1);

                         
                        int index5_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_100);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA5_65 = input.LA(1);

                         
                        int index5_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_65);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA5_71 = input.LA(1);

                         
                        int index5_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_71);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA5_97 = input.LA(1);

                         
                        int index5_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_97);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA5_78 = input.LA(1);

                         
                        int index5_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_78);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA5_94 = input.LA(1);

                         
                        int index5_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_94);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA5_118 = input.LA(1);

                         
                        int index5_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_118);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA5_126 = input.LA(1);

                         
                        int index5_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_126);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA5_44 = input.LA(1);

                         
                        int index5_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_44);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA5_59 = input.LA(1);

                         
                        int index5_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_59);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA5_52 = input.LA(1);

                         
                        int index5_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_52);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA5_36 = input.LA(1);

                         
                        int index5_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_36);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA5_48 = input.LA(1);

                         
                        int index5_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_48);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA5_105 = input.LA(1);

                         
                        int index5_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_105);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA5_88 = input.LA(1);

                         
                        int index5_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_88);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA5_123 = input.LA(1);

                         
                        int index5_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_123);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA5_129 = input.LA(1);

                         
                        int index5_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_129);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA5_112 = input.LA(1);

                         
                        int index5_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_112);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA5_84 = input.LA(1);

                         
                        int index5_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_84);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA5_12 = input.LA(1);

                         
                        int index5_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_12);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA5_90 = input.LA(1);

                         
                        int index5_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_90);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA5_110 = input.LA(1);

                         
                        int index5_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_110);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA5_55 = input.LA(1);

                         
                        int index5_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_55);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA5_41 = input.LA(1);

                         
                        int index5_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_41);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA5_117 = input.LA(1);

                         
                        int index5_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_117);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA5_4 = input.LA(1);

                         
                        int index5_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_4);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA5_51 = input.LA(1);

                         
                        int index5_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_51);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA5_56 = input.LA(1);

                         
                        int index5_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_56);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA5_64 = input.LA(1);

                         
                        int index5_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_64);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA5_50 = input.LA(1);

                         
                        int index5_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_50);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA5_130 = input.LA(1);

                         
                        int index5_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_130);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA5_85 = input.LA(1);

                         
                        int index5_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_85);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA5_6 = input.LA(1);

                         
                        int index5_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_6);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA5_111 = input.LA(1);

                         
                        int index5_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_111);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA5_106 = input.LA(1);

                         
                        int index5_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_106);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA5_109 = input.LA(1);

                         
                        int index5_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_109);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA5_35 = input.LA(1);

                         
                        int index5_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_35);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA5_74 = input.LA(1);

                         
                        int index5_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_74);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA5_58 = input.LA(1);

                         
                        int index5_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_58);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA5_57 = input.LA(1);

                         
                        int index5_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_57);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA5_121 = input.LA(1);

                         
                        int index5_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_121);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA5_43 = input.LA(1);

                         
                        int index5_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_43);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA5_116 = input.LA(1);

                         
                        int index5_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_116);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA5_75 = input.LA(1);

                         
                        int index5_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_75);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA5_86 = input.LA(1);

                         
                        int index5_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_86);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA5_76 = input.LA(1);

                         
                        int index5_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_76);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA5_107 = input.LA(1);

                         
                        int index5_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_107);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA5_72 = input.LA(1);

                         
                        int index5_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_72);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA5_122 = input.LA(1);

                         
                        int index5_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_122);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA5_9 = input.LA(1);

                         
                        int index5_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred9_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_9);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA5_63 = input.LA(1);

                         
                        int index5_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_63);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA5_69 = input.LA(1);

                         
                        int index5_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_69);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA5_128 = input.LA(1);

                         
                        int index5_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_128);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA5_31 = input.LA(1);

                         
                        int index5_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_31);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA5_104 = input.LA(1);

                         
                        int index5_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_104);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA5_108 = input.LA(1);

                         
                        int index5_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_108);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA5_53 = input.LA(1);

                         
                        int index5_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_53);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA5_61 = input.LA(1);

                         
                        int index5_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_61);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA5_68 = input.LA(1);

                         
                        int index5_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_68);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA5_42 = input.LA(1);

                         
                        int index5_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_42);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA5_115 = input.LA(1);

                         
                        int index5_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_115);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA5_87 = input.LA(1);

                         
                        int index5_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_87);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA5_91 = input.LA(1);

                         
                        int index5_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index5_91);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\32\uffff";
    static final String DFA6_eofS =
        "\1\1\31\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA6_specialS =
        "\15\uffff\1\4\1\2\1\7\1\11\1\10\1\3\1\5\1\0\1\1\1\12\1\6\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 95:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_14 = input.LA(1);

                         
                        int index6_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_13 = input.LA(1);

                         
                        int index6_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_15 = input.LA(1);

                         
                        int index6_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_16 = input.LA(1);

                         
                        int index6_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_16);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA7_static {
    static final String DFA7_eotS =
        "\13\uffff";
    static final String DFA7_eofS =
        "\1\1\12\uffff";
    static final String DFA7_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA7_specialS =
        "\5\uffff\1\0\1\1\1\2\3\uffff}>";
    static final String[] DFA7_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_static.DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_static.DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_static.DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_static.DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_static.DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_static.DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_static.DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 95:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\111\uffff";
    static final String DFA14_eofS =
        "\111\uffff";
    static final String DFA14_minS =
        "\1\46\24\0\64\uffff";
    static final String DFA14_maxS =
        "\1\u00b4\24\0\64\uffff";
    static final String DFA14_acceptS =
        "\25\uffff\1\2\62\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\64\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\25\1\11\1\13\3\25\1\uffff\1\12\1\25\20\uffff\1\21\1\25\1"+
            "\uffff\1\25\1\uffff\3\25\1\20\1\25\1\4\3\25\1\14\6\25\1\22\4"+
            "\uffff\1\15\1\25\11\uffff\1\24\1\uffff\1\25\4\uffff\1\25\1\uffff"+
            "\1\25\1\uffff\1\25\5\uffff\1\25\1\uffff\1\25\3\uffff\1\25\1"+
            "\uffff\2\25\3\uffff\1\5\2\uffff\1\16\5\uffff\1\17\1\uffff\2"+
            "\25\1\2\2\uffff\1\3\1\1\2\25\1\uffff\1\6\1\7\1\10\1\25\1\uffff"+
            "\1\23\14\25\10\uffff\4\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "124:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA14_17 = input.LA(1);

                         
                        int index14_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA14_18 = input.LA(1);

                         
                        int index14_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA14_19 = input.LA(1);

                         
                        int index14_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA14_20 = input.LA(1);

                         
                        int index14_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index14_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\112\uffff";
    static final String DFA18_eofS =
        "\1\1\111\uffff";
    static final String DFA18_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA18_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA18_specialS =
        "\2\uffff\1\20\1\26\1\67\1\11\1\56\1\46\1\33\1\12\1\57\1\36\1\55"+
        "\1\23\1\51\1\7\1\104\1\75\1\61\1\14\1\103\1\50\1\71\1\60\1\76\1"+
        "\37\1\62\1\30\1\72\1\21\1\5\1\105\1\77\1\13\1\16\1\54\1\15\1\70"+
        "\1\73\1\32\1\63\1\3\1\101\1\1\1\4\1\27\1\44\1\43\1\42\1\35\1\100"+
        "\1\41\1\22\1\53\1\6\1\10\1\102\1\66\1\45\1\17\1\47\1\74\1\40\1\34"+
        "\1\25\1\52\1\24\1\106\1\64\1\0\1\65\1\2\1\31\1\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\20\1\11\1\13\1\43\1\40\1\53\1\1\1\12\1\36\20\1\1\31\1\52"+
            "\1\1\1\56\1\1\1\41\1\57\1\66\1\30\1\54\1\24\1\55\1\46\1\47\1"+
            "\26\1\60\1\61\1\62\1\63\1\64\1\37\1\32\4\1\1\27\1\42\11\1\1"+
            "\34\1\1\1\65\4\1\1\71\1\1\1\72\1\1\1\73\5\1\1\74\1\1\1\67\3"+
            "\1\1\75\1\1\1\51\1\70\3\1\1\25\2\1\1\15\5\1\1\22\1\1\1\16\1"+
            "\1\1\21\1\1\1\14\1\17\1\23\1\103\1\76\1\1\1\6\1\7\1\10\1\106"+
            "\1\1\1\33\1\50\1\35\1\107\1\104\1\110\1\44\1\45\1\2\1\3\1\5"+
            "\1\4\1\77\10\1\1\100\1\105\1\101\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()* loopback of 129:34: ( ( conjunction )* nounphraseContent )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_69 = input.LA(1);

                         
                        int index18_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_69);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_71 = input.LA(1);

                         
                        int index18_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_71);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_41);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_30);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_54 = input.LA(1);

                         
                        int index18_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_54);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_55 = input.LA(1);

                         
                        int index18_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_55);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_33);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_19);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_36);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_34);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_59 = input.LA(1);

                         
                        int index18_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_59);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_29);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_52 = input.LA(1);

                         
                        int index18_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_52);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_66);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_64 = input.LA(1);

                         
                        int index18_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_64);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_45);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_27);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_72 = input.LA(1);

                         
                        int index18_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_72);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_39);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_63 = input.LA(1);

                         
                        int index18_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_63);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_49 = input.LA(1);

                         
                        int index18_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_49);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_25);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_62 = input.LA(1);

                         
                        int index18_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_62);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_51 = input.LA(1);

                         
                        int index18_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_51);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_48 = input.LA(1);

                         
                        int index18_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_48);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_47);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_46);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_58 = input.LA(1);

                         
                        int index18_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_58);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_60 = input.LA(1);

                         
                        int index18_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_60);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_21);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_65 = input.LA(1);

                         
                        int index18_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_65);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_53 = input.LA(1);

                         
                        int index18_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_53);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_35);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_23);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_18);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_26);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_40);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA18_70 = input.LA(1);

                         
                        int index18_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_70);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA18_57 = input.LA(1);

                         
                        int index18_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_57);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_37);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_22);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_28);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_38);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_24);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_32);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA18_50 = input.LA(1);

                         
                        int index18_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_50);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_42);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_56);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_20);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_31);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA18_67 = input.LA(1);

                         
                        int index18_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_67);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\110\uffff";
    static final String DFA17_eofS =
        "\110\uffff";
    static final String DFA17_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA17_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA17_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA17_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA17_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "()* loopback of 129:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\17\uffff";
    static final String DFA20_eofS =
        "\17\uffff";
    static final String DFA20_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA20_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA20_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA20_specialS =
        "\11\uffff\1\2\1\0\1\5\1\4\1\3\1\1}>";
    static final String[] DFA20_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "()* loopback of 132:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA20_12 = input.LA(1);

                         
                        int index20_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\110\uffff";
    static final String DFA21_eofS =
        "\1\1\107\uffff";
    static final String DFA21_minS =
        "\1\46\1\uffff\102\0\4\uffff";
    static final String DFA21_maxS =
        "\1\u00b4\1\uffff\102\0\4\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\5\102\uffff\1\1\1\3\1\2\1\4";
    static final String DFA21_specialS =
        "\2\uffff\1\26\1\45\1\41\1\44\1\52\1\55\1\21\1\62\1\71\1\5\1\75"+
        "\1\4\1\50\1\32\1\70\1\67\1\12\1\34\1\61\1\24\1\47\1\100\1\14\1\63"+
        "\1\74\1\35\1\25\1\43\1\13\1\60\1\31\1\27\1\2\1\36\1\101\1\7\1\11"+
        "\1\64\1\72\1\65\1\77\1\20\1\15\1\66\1\30\1\3\1\37\1\6\1\23\1\46"+
        "\1\76\1\57\1\40\1\42\1\51\1\16\1\54\1\10\1\22\1\0\1\1\1\53\1\56"+
        "\1\33\1\73\1\17\4\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\31\1\6\1\10\1\30\1\25\1\46\1\1\1\7\1\23\20\1\1\20\1\45\1"+
            "\1\1\51\1\1\1\26\1\52\1\61\1\17\1\47\1\14\1\50\1\41\1\42\1\35"+
            "\1\53\1\54\1\55\1\56\1\57\1\24\1\21\4\1\1\36\1\27\11\1\1\40"+
            "\1\1\1\60\4\1\1\64\1\1\1\65\1\1\1\66\5\1\1\67\1\1\1\62\3\1\1"+
            "\70\1\1\1\44\1\63\3\1\1\15\2\1\1\2\5\1\1\16\1\1\1\22\1\1\1\12"+
            "\2\1\1\13\1\34\1\76\1\71\1\1\1\3\1\4\1\5\1\101\1\1\1\37\1\43"+
            "\1\11\1\102\1\77\1\103\1\32\1\33\4\1\1\72\10\1\1\73\1\100\1"+
            "\74\1\75",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()+ loopback of 132:13: ( dissolvePhrase | ratioOrBracketedRatio | noun | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_61 = input.LA(1);

                         
                        int index21_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_61);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_62 = input.LA(1);

                         
                        int index21_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_62);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_34 = input.LA(1);

                         
                        int index21_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_34);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_47 = input.LA(1);

                         
                        int index21_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_47);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA21_49 = input.LA(1);

                         
                        int index21_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_49);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA21_37 = input.LA(1);

                         
                        int index21_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_37);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA21_59 = input.LA(1);

                         
                        int index21_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_59);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA21_38 = input.LA(1);

                         
                        int index21_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_38);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA21_18 = input.LA(1);

                         
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA21_30 = input.LA(1);

                         
                        int index21_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_30);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA21_24 = input.LA(1);

                         
                        int index21_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_24);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA21_44 = input.LA(1);

                         
                        int index21_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_44);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA21_57 = input.LA(1);

                         
                        int index21_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA21_67 = input.LA(1);

                         
                        int index21_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_67);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA21_43 = input.LA(1);

                         
                        int index21_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_43);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA21_60 = input.LA(1);

                         
                        int index21_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA21_50 = input.LA(1);

                         
                        int index21_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_50);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA21_21 = input.LA(1);

                         
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA21_28 = input.LA(1);

                         
                        int index21_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_28);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA21_33 = input.LA(1);

                         
                        int index21_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_33);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA21_46 = input.LA(1);

                         
                        int index21_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_46);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA21_32 = input.LA(1);

                         
                        int index21_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_32);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA21_65 = input.LA(1);

                         
                        int index21_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_65);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA21_19 = input.LA(1);

                         
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA21_27 = input.LA(1);

                         
                        int index21_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_27);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA21_35 = input.LA(1);

                         
                        int index21_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_35);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA21_48 = input.LA(1);

                         
                        int index21_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_48);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA21_54 = input.LA(1);

                         
                        int index21_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_54);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA21_4 = input.LA(1);

                         
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA21_55 = input.LA(1);

                         
                        int index21_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_55);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA21_29 = input.LA(1);

                         
                        int index21_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_29);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA21_5 = input.LA(1);

                         
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA21_3 = input.LA(1);

                         
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA21_51 = input.LA(1);

                         
                        int index21_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_51);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA21_22 = input.LA(1);

                         
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA21_56 = input.LA(1);

                         
                        int index21_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_56);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA21_6 = input.LA(1);

                         
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA21_63 = input.LA(1);

                         
                        int index21_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_63);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA21_58 = input.LA(1);

                         
                        int index21_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_58);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA21_7 = input.LA(1);

                         
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA21_64 = input.LA(1);

                         
                        int index21_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_64);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA21_53 = input.LA(1);

                         
                        int index21_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_53);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA21_31 = input.LA(1);

                         
                        int index21_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_31);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA21_20 = input.LA(1);

                         
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA21_25 = input.LA(1);

                         
                        int index21_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_25);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA21_39 = input.LA(1);

                         
                        int index21_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_39);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA21_41 = input.LA(1);

                         
                        int index21_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_41);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA21_45 = input.LA(1);

                         
                        int index21_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_45);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA21_17 = input.LA(1);

                         
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA21_16 = input.LA(1);

                         
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred101_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA21_40 = input.LA(1);

                         
                        int index21_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_40);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA21_66 = input.LA(1);

                         
                        int index21_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_66);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA21_26 = input.LA(1);

                         
                        int index21_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_26);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA21_52 = input.LA(1);

                         
                        int index21_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_52);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA21_42 = input.LA(1);

                         
                        int index21_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_42);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA21_23 = input.LA(1);

                         
                        int index21_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_23);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA21_36 = input.LA(1);

                         
                        int index21_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index21_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA22_static {
    static final String DFA22_eotS =
        "\32\uffff";
    static final String DFA22_eofS =
        "\32\uffff";
    static final String DFA22_minS =
        "\1\46\7\uffff\1\0\21\uffff";
    static final String DFA22_maxS =
        "\1\u009e\7\uffff\1\0\21\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\27\uffff\1\2";
    static final String DFA22_specialS =
        "\10\uffff\1\0\21\uffff}>";
    static final String[] DFA22_transitionS = {
            "\5\1\2\uffff\2\1\20\uffff\1\1\4\uffff\1\1\2\uffff\1\1\1\uffff"+
            "\1\1\11\uffff\2\1\5\uffff\1\1\47\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_static.DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_static.DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_static.DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_static.DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_static.DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_static.DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_static.DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "135:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index22_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\1\1\5\1\4\1\0\1\2\1\3\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\4\1\6\2\7\2\uffff\1\5\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "138:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\30\uffff";
    static final String DFA25_eofS =
        "\30\uffff";
    static final String DFA25_minS =
        "\1\46\4\0\1\uffff\11\0\11\uffff";
    static final String DFA25_maxS =
        "\1\u0099\4\0\1\uffff\11\0\11\uffff";
    static final String DFA25_acceptS =
        "\5\uffff\1\1\12\uffff\1\2\7\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\11\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\20\1\14\1\16\2\20\2\uffff\1\15\1\20\20\uffff\1\10\4\uffff"+
            "\1\20\2\uffff\1\7\1\uffff\1\3\11\uffff\1\20\1\5\5\uffff\1\20"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\20\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\11\1\12\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "138:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA27_static {
    static final String DFA27_eotS =
        "\u0092\uffff";
    static final String DFA27_eofS =
        "\1\3\u0091\uffff";
    static final String DFA27_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA27_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA27_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA27_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_static.DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_static.DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_static.DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_static.DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_static.DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_static.DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_static.DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 138:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\17\uffff";
    static final String DFA29_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\0\1\2\1\4\1\5\1\1\1\3\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\4\1\6\2\7\2\uffff\1\5\1\7\20\uffff\1\7\4\uffff\1\7\2"+
            "\uffff\1\7\1\uffff\1\7\11\uffff\2\7\5\uffff\1\7\47\uffff\1\7"+
            "\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7"+
            "\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "141:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA31_static {
    static final String DFA31_eotS =
        "\30\uffff";
    static final String DFA31_eofS =
        "\30\uffff";
    static final String DFA31_minS =
        "\1\46\4\0\1\uffff\11\0\11\uffff";
    static final String DFA31_maxS =
        "\1\u0099\4\0\1\uffff\11\0\11\uffff";
    static final String DFA31_acceptS =
        "\5\uffff\1\1\12\uffff\1\2\7\uffff";
    static final String DFA31_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\11\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\20\1\14\1\16\2\20\2\uffff\1\15\1\20\20\uffff\1\10\4\uffff"+
            "\1\20\2\uffff\1\7\1\uffff\1\3\11\uffff\1\20\1\5\5\uffff\1\20"+
            "\47\uffff\1\4\2\uffff\1\5\5\uffff\1\6\1\uffff\1\20\1\uffff\1"+
            "\1\2\uffff\1\2\4\uffff\1\11\1\12\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_static.DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_static.DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_static.DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_static.DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_static.DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_static.DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_static.DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "141:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_ChemicalChunker()) ) {s = 5;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA45_static {
    static final String DFA45_eotS =
        "\67\uffff";
    static final String DFA45_eofS =
        "\1\1\66\uffff";
    static final String DFA45_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA45_maxS =
        "\1\u00b4\1\uffff\64\0\1\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA45_specialS =
        "\2\uffff\1\31\1\15\1\35\1\21\1\11\1\36\1\41\1\53\1\55\1\17\1\10"+
        "\1\5\1\30\1\32\1\20\1\63\1\6\1\0\1\51\1\7\1\23\1\34\1\12\1\42\1"+
        "\56\1\25\1\47\1\27\1\2\1\52\1\37\1\16\1\1\1\50\1\26\1\54\1\40\1"+
        "\3\1\24\1\60\1\13\1\44\1\57\1\22\1\45\1\62\1\14\1\46\1\4\1\61\1"+
        "\43\1\33\1\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_static.DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_static.DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_static.DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_static.DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_static.DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_static.DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_static.DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()+ loopback of 145:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA45_19 = input.LA(1);

                         
                        int index45_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA45_34 = input.LA(1);

                         
                        int index45_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_34);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA45_30 = input.LA(1);

                         
                        int index45_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_30);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA45_39 = input.LA(1);

                         
                        int index45_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_39);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA45_50 = input.LA(1);

                         
                        int index45_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_50);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA45_13 = input.LA(1);

                         
                        int index45_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_13);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA45_18 = input.LA(1);

                         
                        int index45_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA45_21 = input.LA(1);

                         
                        int index45_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_21);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA45_12 = input.LA(1);

                         
                        int index45_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_12);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA45_6 = input.LA(1);

                         
                        int index45_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_6);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA45_24 = input.LA(1);

                         
                        int index45_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_24);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA45_42 = input.LA(1);

                         
                        int index45_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_42);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA45_48 = input.LA(1);

                         
                        int index45_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_48);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA45_3 = input.LA(1);

                         
                        int index45_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_3);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA45_33 = input.LA(1);

                         
                        int index45_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_33);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA45_11 = input.LA(1);

                         
                        int index45_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_11);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA45_16 = input.LA(1);

                         
                        int index45_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_16);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA45_5 = input.LA(1);

                         
                        int index45_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_5);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA45_45 = input.LA(1);

                         
                        int index45_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_45);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA45_22 = input.LA(1);

                         
                        int index45_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_22);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA45_40 = input.LA(1);

                         
                        int index45_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_40);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA45_27 = input.LA(1);

                         
                        int index45_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_27);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA45_36 = input.LA(1);

                         
                        int index45_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_36);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA45_29 = input.LA(1);

                         
                        int index45_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_29);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA45_14 = input.LA(1);

                         
                        int index45_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_14);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA45_2 = input.LA(1);

                         
                        int index45_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_2);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA45_15 = input.LA(1);

                         
                        int index45_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_15);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA45_53 = input.LA(1);

                         
                        int index45_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_53);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA45_23 = input.LA(1);

                         
                        int index45_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_23);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA45_4 = input.LA(1);

                         
                        int index45_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_4);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA45_7 = input.LA(1);

                         
                        int index45_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_7);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA45_32 = input.LA(1);

                         
                        int index45_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA45_38 = input.LA(1);

                         
                        int index45_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_38);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA45_8 = input.LA(1);

                         
                        int index45_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_8);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA45_25 = input.LA(1);

                         
                        int index45_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_25);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA45_52 = input.LA(1);

                         
                        int index45_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_52);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA45_43 = input.LA(1);

                         
                        int index45_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_43);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA45_46 = input.LA(1);

                         
                        int index45_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_46);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA45_49 = input.LA(1);

                         
                        int index45_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_49);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA45_28 = input.LA(1);

                         
                        int index45_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_28);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA45_35 = input.LA(1);

                         
                        int index45_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_35);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA45_20 = input.LA(1);

                         
                        int index45_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_20);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA45_31 = input.LA(1);

                         
                        int index45_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_31);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA45_9 = input.LA(1);

                         
                        int index45_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_9);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA45_37 = input.LA(1);

                         
                        int index45_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_37);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA45_10 = input.LA(1);

                         
                        int index45_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_10);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA45_26 = input.LA(1);

                         
                        int index45_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_26);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA45_44 = input.LA(1);

                         
                        int index45_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_44);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA45_41 = input.LA(1);

                         
                        int index45_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_41);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA45_51 = input.LA(1);

                         
                        int index45_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_51);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA45_47 = input.LA(1);

                         
                        int index45_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_47);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA45_17 = input.LA(1);

                         
                        int index45_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA40_static {
    static final String DFA40_eotS =
        "\53\uffff";
    static final String DFA40_eofS =
        "\1\1\52\uffff";
    static final String DFA40_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA40_specialS =
        "\2\uffff\1\36\1\13\1\45\1\43\1\34\1\16\1\21\1\37\1\41\1\35\1\12"+
        "\1\24\1\17\1\46\1\27\1\15\1\31\1\3\1\47\1\26\1\4\1\0\1\2\1\25\1"+
        "\6\1\1\1\44\1\33\1\14\1\22\1\42\1\40\1\11\1\30\1\10\1\7\1\32\1\5"+
        "\1\23\1\20\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_static.DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_static.DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_static.DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_static.DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_static.DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_static.DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_static.DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 145:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA40_23 = input.LA(1);

                         
                        int index40_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_23);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA40_27 = input.LA(1);

                         
                        int index40_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_27);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA40_24 = input.LA(1);

                         
                        int index40_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_24);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA40_19 = input.LA(1);

                         
                        int index40_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA40_22 = input.LA(1);

                         
                        int index40_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_22);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA40_39 = input.LA(1);

                         
                        int index40_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_39);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA40_26 = input.LA(1);

                         
                        int index40_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_26);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA40_37 = input.LA(1);

                         
                        int index40_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_37);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA40_36 = input.LA(1);

                         
                        int index40_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_36);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA40_34 = input.LA(1);

                         
                        int index40_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_34);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA40_30 = input.LA(1);

                         
                        int index40_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_30);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA40_17 = input.LA(1);

                         
                        int index40_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA40_41 = input.LA(1);

                         
                        int index40_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_41);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA40_31 = input.LA(1);

                         
                        int index40_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_31);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA40_40 = input.LA(1);

                         
                        int index40_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_40);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA40_25 = input.LA(1);

                         
                        int index40_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_25);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA40_21 = input.LA(1);

                         
                        int index40_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_21);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA40_16 = input.LA(1);

                         
                        int index40_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_16);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA40_35 = input.LA(1);

                         
                        int index40_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_35);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA40_18 = input.LA(1);

                         
                        int index40_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_18);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA40_38 = input.LA(1);

                         
                        int index40_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_38);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA40_29 = input.LA(1);

                         
                        int index40_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_29);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA40_33 = input.LA(1);

                         
                        int index40_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA40_32 = input.LA(1);

                         
                        int index40_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_32);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA40_28 = input.LA(1);

                         
                        int index40_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_28);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA40_15 = input.LA(1);

                         
                        int index40_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_15);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA40_20 = input.LA(1);

                         
                        int index40_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\13\uffff";
    static final String DFA42_eofS =
        "\1\1\12\uffff";
    static final String DFA42_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA42_specialS =
        "\6\uffff\1\3\1\0\1\2\1\1\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()* loopback of 145:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA43_static {
    static final String DFA43_eotS =
        "\17\uffff";
    static final String DFA43_eofS =
        "\1\7\16\uffff";
    static final String DFA43_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA43_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA43_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA43_specialS =
        "\10\uffff\1\5\1\0\1\4\1\2\1\3\1\1\1\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_static.DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_static.DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_static.DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_static.DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_static.DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_static.DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "145:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_13 = input.LA(1);

                         
                        int index43_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_11 = input.LA(1);

                         
                        int index43_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\u0092\uffff";
    static final String DFA49_eofS =
        "\1\13\u0091\uffff";
    static final String DFA49_minS =
        "\1\46\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\27\uffff\1\0\1\uffff"+
        "\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA49_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\4\uffff\1\0\3\uffff\1\0\27\uffff\1\0"+
        "\1\uffff\1\0\34\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA49_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\4\uffff\1\14\3\uffff\1\15\27\uffff\1\16\1\uffff\1\17\34\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\120\1\121\1\117\1\125\1\126"+
            "\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1\132"+
            "\1\130\1\13\1\56\7\13\1\60\74\13\1\15\1\13\1\u0087\11\13\1\14"+
            "\1\22\1\26\2\13\1\116\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\115\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "()* loopback of 145:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA49_18 = input.LA(1);

                         
                        int index49_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_18);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA49_22 = input.LA(1);

                         
                        int index49_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA49_48 = input.LA(1);

                         
                        int index49_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_48);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA49_77 = input.LA(1);

                         
                        int index49_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_77);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA49_78 = input.LA(1);

                         
                        int index49_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_78);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA49_79 = input.LA(1);

                         
                        int index49_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA49_93 = input.LA(1);

                         
                        int index49_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA49_94 = input.LA(1);

                         
                        int index49_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA49_135 = input.LA(1);

                         
                        int index49_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred131_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index49_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA50_static {
    static final String DFA50_eotS =
        "\60\uffff";
    static final String DFA50_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA50_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA50_maxS =
        "\1\u00b0\11\uffff\1\45\36\uffff\1\u00b4\1\uffff\1\45\1\u00b4\1"+
        "\45\1\0\1\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA50_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\52\1\53\43\52",
            "",
            "\1\54",
            "\72\52\1\55\124\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_static.DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_static.DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_static.DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_static.DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_static.DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_static.DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "146:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA50_46 = input.LA(1);

                         
                        int index50_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index50_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA52_static {
    static final String DFA52_eotS =
        "\130\uffff";
    static final String DFA52_eofS =
        "\130\uffff";
    static final String DFA52_minS =
        "\1\46\2\uffff\17\0\1\uffff\3\0\3\uffff\7\0\70\uffff";
    static final String DFA52_maxS =
        "\1\u00b4\2\uffff\17\0\1\uffff\3\0\3\uffff\7\0\70\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\1\1\2\17\uffff\1\6\4\uffff\1\10\10\uffff\1\12\1\14\1"+
        "\15\1\17\1\23\1\25\1\30\1\32\1\34\1\35\1\37\1\40\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\1\47\1\52\1\54\1\55\1\56\1\57\1\61\1\62\1\63\5\uffff"+
        "\1\64\1\65\1\66\1\3\1\5\1\7\1\26\1\4\1\21\1\53\1\31\1\60\1\51\1"+
        "\27\1\11\1\36\1\16\1\13\1\20\1\22\1\24\1\50\1\67\1\33";
    static final String DFA52_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\uffff\1\17\1\20\1\21\3\uffff\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\70\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\36\1\16\1\20\1\35\1\32\1\45\1\uffff\1\17\1\27\20\uffff\1"+
            "\12\1\44\1\uffff\1\50\1\uffff\1\33\1\51\1\60\1\11\1\46\1\6\1"+
            "\47\1\37\1\40\1\23\1\52\1\53\1\54\1\55\1\56\1\31\1\21\4\uffff"+
            "\1\24\1\34\11\uffff\1\22\1\uffff\1\57\4\uffff\1\63\1\uffff\1"+
            "\64\1\uffff\1\65\5\uffff\1\66\1\uffff\1\61\3\uffff\1\67\1\uffff"+
            "\1\43\1\62\3\uffff\1\7\2\uffff\1\4\5\uffff\1\10\1\uffff\1\27"+
            "\1\uffff\1\3\2\uffff\1\5\1\22\1\72\1\70\1\uffff\1\13\1\14\1"+
            "\15\1\100\1\uffff\1\25\1\41\1\42\1\101\1\72\1\102\1\1\1\2\4"+
            "\uffff\1\71\10\uffff\4\72",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_static.DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_static.DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_static.DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_static.DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_static.DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_static.DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "153:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred215_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred220_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred213_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred195_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA52_19 = input.LA(1);

                         
                        int index52_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred202_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index52_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA52_21 = input.LA(1);

                         
                        int index52_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index52_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA52_25 = input.LA(1);

                         
                        int index52_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index52_25);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA52_26 = input.LA(1);

                         
                        int index52_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred190_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index52_26);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred192_ChemicalChunker()) ) {s = 84;}

                         
                        input.seek(index52_27);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA52_28 = input.LA(1);

                         
                        int index52_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 85;}

                         
                        input.seek(index52_28);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA52_29 = input.LA(1);

                         
                        int index52_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 86;}

                         
                        input.seek(index52_29);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA52_30 = input.LA(1);

                         
                        int index52_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred215_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index52_30);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA52_31 = input.LA(1);

                         
                        int index52_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 87;}

                         
                        input.seek(index52_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA54_static {
    static final String DFA54_eotS =
        "\45\uffff";
    static final String DFA54_eofS =
        "\45\uffff";
    static final String DFA54_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA54_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA54_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_static.DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_static.DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_static.DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_static.DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_static.DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_static.DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_static.DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "158:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred232_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA54_15 = input.LA(1);

                         
                        int index54_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA54_16 = input.LA(1);

                         
                        int index54_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA54_17 = input.LA(1);

                         
                        int index54_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA54_18 = input.LA(1);

                         
                        int index54_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA54_19 = input.LA(1);

                         
                        int index54_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred231_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA54_20 = input.LA(1);

                         
                        int index54_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA54_21 = input.LA(1);

                         
                        int index54_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA54_22 = input.LA(1);

                         
                        int index54_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA54_23 = input.LA(1);

                         
                        int index54_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA54_24 = input.LA(1);

                         
                        int index54_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA54_25 = input.LA(1);

                         
                        int index54_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA54_26 = input.LA(1);

                         
                        int index54_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA54_27 = input.LA(1);

                         
                        int index54_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA54_28 = input.LA(1);

                         
                        int index54_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index54_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA54_29 = input.LA(1);

                         
                        int index54_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA54_30 = input.LA(1);

                         
                        int index54_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index54_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA56_static {
    static final String DFA56_eotS =
        "\17\uffff";
    static final String DFA56_eofS =
        "\17\uffff";
    static final String DFA56_minS =
        "\1\47\1\uffff\6\45\1\uffff\6\0";
    static final String DFA56_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA56_specialS =
        "\11\uffff\1\3\1\0\1\5\1\4\1\2\1\1}>";
    static final String[] DFA56_transitionS = {
            "\1\5\1\7\4\uffff\1\6\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\12"+
            "\uffff\1\1\55\uffff\1\1\2\uffff\1\1\5\uffff\1\1\3\uffff\1\1"+
            "\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_static.DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_static.DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_static.DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_static.DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_static.DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_static.DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_static.DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 164:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA58_static {
    static final String DFA58_eotS =
        "\27\uffff";
    static final String DFA58_eofS =
        "\27\uffff";
    static final String DFA58_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA58_specialS =
        "\14\uffff\1\4\1\3\1\6\1\0\1\2\1\1\1\11\1\5\1\7\1\10\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_static.DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_static.DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_static.DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_static.DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_static.DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_static.DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 170:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA58_19 = input.LA(1);

                         
                        int index58_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA58_21 = input.LA(1);

                         
                        int index58_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA64_static {
    static final String DFA64_eotS =
        "\27\uffff";
    static final String DFA64_eofS =
        "\27\uffff";
    static final String DFA64_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA64_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA64_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA64_specialS =
        "\14\uffff\1\5\1\2\1\0\1\4\1\1\1\10\1\7\1\3\1\11\1\6\1\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_static.DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_static.DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_static.DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_static.DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_static.DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_static.DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_static.DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "175:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA64_14 = input.LA(1);

                         
                        int index64_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA64_16 = input.LA(1);

                         
                        int index64_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA64_13 = input.LA(1);

                         
                        int index64_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA64_19 = input.LA(1);

                         
                        int index64_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA64_15 = input.LA(1);

                         
                        int index64_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_15);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA64_12 = input.LA(1);

                         
                        int index64_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA64_21 = input.LA(1);

                         
                        int index64_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_21);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA64_18 = input.LA(1);

                         
                        int index64_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA64_17 = input.LA(1);

                         
                        int index64_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA64_20 = input.LA(1);

                         
                        int index64_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index64_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\u0092\uffff";
    static final String DFA76_eofS =
        "\1\1\u0091\uffff";
    static final String DFA76_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\14\0\162\uffff";
    static final String DFA76_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\4\uffff\1\0\1\uffff\14\0\162\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA76_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\4\uffff\1\10\1"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\162\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\1\10\1\12\4\1\1\11\21\1\1\34\7\1\1\33\1\1\1\27\3\1\1\31"+
            "\6\1\1\35\4\1\1\32\12\1\1\37\35\1\1\30\2\1\1\15\5\1\1\25\3\1"+
            "\1\24\1\1\1\14\1\22\1\26\3\1\1\5\1\6\1\7\2\1\1\36\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_5 = input.LA(1);

                         
                        int index76_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_6 = input.LA(1);

                         
                        int index76_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_7 = input.LA(1);

                         
                        int index76_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_12 = input.LA(1);

                         
                        int index76_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_13 = input.LA(1);

                         
                        int index76_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_18 = input.LA(1);

                         
                        int index76_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_18);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_20 = input.LA(1);

                         
                        int index76_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_21 = input.LA(1);

                         
                        int index76_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_21);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_22 = input.LA(1);

                         
                        int index76_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_22);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_23 = input.LA(1);

                         
                        int index76_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_23);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_24 = input.LA(1);

                         
                        int index76_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_24);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_25 = input.LA(1);

                         
                        int index76_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_25);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_26 = input.LA(1);

                         
                        int index76_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_26);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_27 = input.LA(1);

                         
                        int index76_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_27);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_28 = input.LA(1);

                         
                        int index76_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA76_29 = input.LA(1);

                         
                        int index76_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_29);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA76_30 = input.LA(1);

                         
                        int index76_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_30);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA76_31 = input.LA(1);

                         
                        int index76_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\26\uffff";
    static final String DFA75_eofS =
        "\26\uffff";
    static final String DFA75_minS =
        "\1\47\15\uffff\1\0\7\uffff";
    static final String DFA75_maxS =
        "\1\u009c\15\uffff\1\0\7\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA75_specialS =
        "\16\uffff\1\0\7\uffff}>";
    static final String[] DFA75_transitionS = {
            "\2\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\25\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_14 = input.LA(1);

                         
                        int index75_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA82_static {
    static final String DFA82_eotS =
        "\34\uffff";
    static final String DFA82_eofS =
        "\1\1\33\uffff";
    static final String DFA82_minS =
        "\1\47\1\uffff\22\0\10\uffff";
    static final String DFA82_maxS =
        "\1\u009c\1\uffff\22\0\10\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\11\22\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA82_specialS =
        "\2\uffff\1\1\1\6\1\10\1\13\1\2\1\21\1\11\1\12\1\17\1\7\1\20\1\3"+
        "\1\14\1\5\1\0\1\15\1\16\1\4\10\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\11\1\13\4\uffff\1\12\21\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\22\4\uffff\1\15\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\16\5\uffff\1\17\3\uffff\1\2\2\uffff\1\3"+
            "\4\uffff\1\6\1\7\1\10\2\uffff\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_static.DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_static.DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_static.DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_static.DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_static.DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_static.DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "()+ loopback of 203:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA82_16 = input.LA(1);

                         
                        int index82_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA82_2 = input.LA(1);

                         
                        int index82_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA82_6 = input.LA(1);

                         
                        int index82_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA82_13 = input.LA(1);

                         
                        int index82_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA82_19 = input.LA(1);

                         
                        int index82_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA82_15 = input.LA(1);

                         
                        int index82_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA82_3 = input.LA(1);

                         
                        int index82_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_3);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA82_11 = input.LA(1);

                         
                        int index82_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_11);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA82_4 = input.LA(1);

                         
                        int index82_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_4);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA82_8 = input.LA(1);

                         
                        int index82_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_8);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA82_9 = input.LA(1);

                         
                        int index82_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_9);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA82_5 = input.LA(1);

                         
                        int index82_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_5);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA82_14 = input.LA(1);

                         
                        int index82_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA82_17 = input.LA(1);

                         
                        int index82_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred266_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA82_18 = input.LA(1);

                         
                        int index82_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA82_10 = input.LA(1);

                         
                        int index82_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA82_12 = input.LA(1);

                         
                        int index82_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_12);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA82_7 = input.LA(1);

                         
                        int index82_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred264_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index82_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\17\uffff";
    static final String DFA85_eofS =
        "\1\7\16\uffff";
    static final String DFA85_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA85_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA85_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA85_specialS =
        "\10\uffff\1\0\1\4\1\2\1\3\1\5\1\1\1\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "207:46: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_8 = input.LA(1);

                         
                        int index85_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_13 = input.LA(1);

                         
                        int index85_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_10 = input.LA(1);

                         
                        int index85_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA85_11 = input.LA(1);

                         
                        int index85_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA85_9 = input.LA(1);

                         
                        int index85_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA85_12 = input.LA(1);

                         
                        int index85_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index85_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA86_static {
    static final String DFA86_eotS =
        "\u0093\uffff";
    static final String DFA86_eofS =
        "\1\11\u0092\uffff";
    static final String DFA86_minS =
        "\1\46\10\0\u008a\uffff";
    static final String DFA86_maxS =
        "\1\u00b4\10\0\u008a\uffff";
    static final String DFA86_acceptS =
        "\11\uffff\1\3\u0087\uffff\1\1\1\2";
    static final String DFA86_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u008a\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\7\40\11\1\10\1\11\1\3\70\11\1\4\10\11\1\5\1\11\1\6\1\11"+
            "\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_static.DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_static.DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_static.DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_static.DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_static.DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_static.DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "207:51: ( numericReferenceOrQuantity | nnchementity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()||(synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA86_2 = input.LA(1);

                         
                        int index86_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()||(synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA86_3 = input.LA(1);

                         
                        int index86_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA86_4 = input.LA(1);

                         
                        int index86_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA86_5 = input.LA(1);

                         
                        int index86_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA86_6 = input.LA(1);

                         
                        int index86_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA86_7 = input.LA(1);

                         
                        int index86_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA86_8 = input.LA(1);

                         
                        int index86_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index86_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA87_static {
    static final String DFA87_eotS =
        "\u0092\uffff";
    static final String DFA87_eofS =
        "\1\1\u0091\uffff";
    static final String DFA87_minS =
        "\1\46\23\uffff\4\0\172\uffff";
    static final String DFA87_maxS =
        "\1\u00b4\23\uffff\4\0\172\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA87_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\172\uffff}>";
    static final String[] DFA87_transitionS = {
            "\43\1\1\26\70\1\1\27\14\1\1\24\2\1\1\25\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_static.DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_static.DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_static.DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_static.DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_static.DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_static.DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_static.DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "()* loopback of 207:97: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA87_20 = input.LA(1);

                         
                        int index87_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA87_21 = input.LA(1);

                         
                        int index87_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA87_22 = input.LA(1);

                         
                        int index87_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_22);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA87_23 = input.LA(1);

                         
                        int index87_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA88_static {
    static final String DFA88_eotS =
        "\u0092\uffff";
    static final String DFA88_eofS =
        "\1\5\u0091\uffff";
    static final String DFA88_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA88_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA88_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA88_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA88_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_static.DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_static.DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_static.DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_static.DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_static.DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_static.DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_static.DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "207:107: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA88_3 = input.LA(1);

                         
                        int index88_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA88_4 = input.LA(1);

                         
                        int index88_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred274_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index88_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA89_static {
    static final String DFA89_eotS =
        "\15\uffff";
    static final String DFA89_eofS =
        "\1\5\7\uffff\1\5\4\uffff";
    static final String DFA89_minS =
        "\1\46\4\45\1\uffff\2\0\1\46\1\0\1\uffff\1\45\1\0";
    static final String DFA89_maxS =
        "\1\u00b4\4\45\1\uffff\2\0\1\u00b4\1\0\1\uffff\1\45\1\0";
    static final String DFA89_acceptS =
        "\5\uffff\1\2\4\uffff\1\1\2\uffff";
    static final String DFA89_specialS =
        "\6\uffff\1\1\1\0\1\uffff\1\3\2\uffff\1\2}>";
    static final String[] DFA89_transitionS = {
            "\56\5\1\1\57\5\1\3\1\5\1\4\1\5\1\2\54\5",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "",
            "\1\uffff",
            "\1\uffff",
            "\56\5\1\13\140\5",
            "\1\uffff",
            "",
            "\1\14",
            "\1\uffff"
    };
    }

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_static.DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_static.DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_static.DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_static.DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_static.DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_static.DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_static.DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_static.DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "209:34: ( afterOscarCompoundStructure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA89_7 = input.LA(1);

                         
                        int index89_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA89_6 = input.LA(1);

                         
                        int index89_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA89_12 = input.LA(1);

                         
                        int index89_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA89_9 = input.LA(1);

                         
                        int index89_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index89_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA100_static {
    static final String DFA100_eotS =
        "\21\uffff";
    static final String DFA100_eofS =
        "\21\uffff";
    static final String DFA100_minS =
        "\1\47\6\0\12\uffff";
    static final String DFA100_maxS =
        "\1\u0099\6\0\12\uffff";
    static final String DFA100_acceptS =
        "\7\uffff\1\2\1\uffff\1\3\6\uffff\1\1";
    static final String DFA100_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\12\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\11\4\uffff\1\11\21\uffff\1\7\7\uffff\1\7\1\uffff\1\3\12"+
            "\uffff\1\11\55\uffff\1\4\2\uffff\1\5\5\uffff\1\6\3\uffff\1\1"+
            "\2\uffff\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_static.DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_static.DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_static.DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_static.DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_static.DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_static.DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "216:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA100_1 = input.LA(1);

                         
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA100_3 = input.LA(1);

                         
                        int index100_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA100_4 = input.LA(1);

                         
                        int index100_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA100_5 = input.LA(1);

                         
                        int index100_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA100_6 = input.LA(1);

                         
                        int index100_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred291_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred292_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index100_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA101_static {
    static final String DFA101_eotS =
        "\33\uffff";
    static final String DFA101_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA101_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA101_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA101_specialS =
        "\13\uffff\1\0\10\uffff\1\1\6\uffff}>";
    static final String[] DFA101_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_static.DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_static.DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_static.DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_static.DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_static.DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_static.DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_static.DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "216:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA101_11 = input.LA(1);

                         
                        int index101_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA101_20 = input.LA(1);

                         
                        int index101_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index101_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\14\uffff";
    static final String DFA104_eofS =
        "\14\uffff";
    static final String DFA104_minS =
        "\1\47\1\uffff\1\0\11\uffff";
    static final String DFA104_maxS =
        "\1\u0099\1\uffff\1\0\11\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\6\uffff";
    static final String DFA104_specialS =
        "\2\uffff\1\0\11\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\5\4\uffff\1\5\46\uffff\1\5\60\uffff\1\1\5\uffff\1\1\3\uffff"+
            "\1\2\2\uffff\1\1\4\uffff\3\5",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "219:64: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_2 = input.LA(1);

                         
                        int index104_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index104_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\u0092\uffff";
    static final String DFA110_eofS =
        "\1\2\u0091\uffff";
    static final String DFA110_minS =
        "\1\46\1\0\14\uffff\6\0\3\uffff\1\0\172\uffff";
    static final String DFA110_maxS =
        "\1\u00b4\1\0\14\uffff\6\0\3\uffff\1\0\172\uffff";
    static final String DFA110_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA110_specialS =
        "\1\uffff\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\172\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\2\1\21\1\23\4\2\1\22\46\2\1\27\72\2\1\1\7\2\1\16\1\17\1"+
            "\20\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()+ loopback of 222:86: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_1 = input.LA(1);

                         
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_14 = input.LA(1);

                         
                        int index110_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA110_15 = input.LA(1);

                         
                        int index110_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA110_16 = input.LA(1);

                         
                        int index110_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA110_17 = input.LA(1);

                         
                        int index110_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA110_18 = input.LA(1);

                         
                        int index110_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA110_19 = input.LA(1);

                         
                        int index110_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA110_23 = input.LA(1);

                         
                        int index110_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\16\uffff";
    static final String DFA111_eofS =
        "\16\uffff";
    static final String DFA111_minS =
        "\1\47\7\uffff\2\0\4\uffff";
    static final String DFA111_maxS =
        "\1\u0099\7\uffff\2\0\4\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\uffff\1\2\1\uffff";
    static final String DFA111_specialS =
        "\10\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA111_transitionS = {
            "\2\1\4\uffff\1\1\33\uffff\1\12\12\uffff\1\1\55\uffff\1\12\2"+
            "\uffff\1\14\5\uffff\1\14\3\uffff\1\10\2\uffff\1\11\4\uffff\3"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()* loopback of 225:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\13\uffff";
    static final String DFA112_eofS =
        "\1\2\12\uffff";
    static final String DFA112_minS =
        "\1\46\1\0\1\uffff\7\0\1\uffff";
    static final String DFA112_maxS =
        "\1\u00b4\1\0\1\uffff\7\0\1\uffff";
    static final String DFA112_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA112_specialS =
        "\1\uffff\1\1\1\uffff\1\6\1\7\1\4\1\2\1\5\1\3\1\0\1\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\46\2\1\11\72\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()+ loopback of 225:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA114_static {
    static final String DFA114_eotS =
        "\u0095\uffff";
    static final String DFA114_eofS =
        "\1\1\u0094\uffff";
    static final String DFA114_minS =
        "\1\46\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA114_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA114_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\u0080\uffff}>";
    static final String[] DFA114_transitionS = {
            "\43\1\1\22\70\1\1\23\2\1\1\4\5\1\1\24\3\1\1\20\2\1\1\21\42"+
            "\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_static.DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_static.DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_static.DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_static.DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_static.DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_static.DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "()* loopback of 227:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA114_4 = input.LA(1);

                         
                        int index114_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred314_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA114_20 = input.LA(1);

                         
                        int index114_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA115_static {
    static final String DFA115_eotS =
        "\33\uffff";
    static final String DFA115_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA115_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA115_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA115_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA115_specialS =
        "\13\uffff\1\1\10\uffff\1\0\6\uffff}>";
    static final String[] DFA115_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_static.DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_static.DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_static.DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_static.DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_static.DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_static.DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_static.DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "233:68: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA115_20 = input.LA(1);

                         
                        int index115_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA115_11 = input.LA(1);

                         
                        int index115_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\26\uffff";
    static final String DFA117_eofS =
        "\26\uffff";
    static final String DFA117_minS =
        "\1\46\2\0\2\uffff\4\0\6\uffff\1\0\6\uffff";
    static final String DFA117_maxS =
        "\1\u0099\2\0\2\uffff\4\0\6\uffff\1\0\6\uffff";
    static final String DFA117_acceptS =
        "\3\uffff\1\1\5\uffff\1\2\6\uffff\1\3\5\uffff";
    static final String DFA117_specialS =
        "\1\uffff\1\0\1\1\2\uffff\1\2\1\3\1\4\1\5\6\uffff\1\6\6\uffff}>";
    static final String[] DFA117_transitionS = {
            "\3\20\2\11\2\uffff\1\7\1\10\20\uffff\1\11\4\uffff\1\11\2\uffff"+
            "\1\17\1\uffff\1\3\11\uffff\1\11\6\uffff\1\11\47\uffff\1\3\10"+
            "\uffff\1\20\1\uffff\1\5\1\uffff\1\1\2\uffff\1\2\4\uffff\1\6"+
            "\2\20",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "235:1: unnamedmoleculeDescriptionStart : ( quantityOf ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule ) | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_6 = input.LA(1);

                         
                        int index117_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_7 = input.LA(1);

                         
                        int index117_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA117_8 = input.LA(1);

                         
                        int index117_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA117_15 = input.LA(1);

                         
                        int index117_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index117_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\26\uffff";
    static final String DFA116_eofS =
        "\26\uffff";
    static final String DFA116_minS =
        "\1\46\15\0\10\uffff";
    static final String DFA116_maxS =
        "\1\u0099\15\0\10\uffff";
    static final String DFA116_acceptS =
        "\16\uffff\1\3\5\uffff\1\1\1\2";
    static final String DFA116_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\10\uffff}>";
    static final String[] DFA116_transitionS = {
            "\3\16\1\14\1\11\2\uffff\1\5\1\6\20\uffff\1\7\4\uffff\1\12\2"+
            "\uffff\1\15\13\uffff\1\10\6\uffff\1\13\60\uffff\1\16\1\uffff"+
            "\1\2\1\uffff\1\3\2\uffff\1\1\4\uffff\1\4\2\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "236:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA116_2 = input.LA(1);

                         
                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA116_3 = input.LA(1);

                         
                        int index116_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA116_4 = input.LA(1);

                         
                        int index116_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA116_5 = input.LA(1);

                         
                        int index116_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA116_6 = input.LA(1);

                         
                        int index116_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA116_7 = input.LA(1);

                         
                        int index116_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA116_8 = input.LA(1);

                         
                        int index116_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA116_9 = input.LA(1);

                         
                        int index116_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA116_10 = input.LA(1);

                         
                        int index116_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA116_11 = input.LA(1);

                         
                        int index116_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA116_12 = input.LA(1);

                         
                        int index116_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index116_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA116_13 = input.LA(1);

                         
                        int index116_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index116_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\31\uffff";
    static final String DFA118_eofS =
        "\5\uffff\1\1\23\uffff";
    static final String DFA118_minS =
        "\1\46\1\uffff\2\45\1\uffff\2\46\11\45\10\0\1\54";
    static final String DFA118_maxS =
        "\1\u0099\1\uffff\2\45\1\uffff\1\u00b4\1\u0092\11\45\10\0\1\u009c";
    static final String DFA118_acceptS =
        "\1\uffff\1\2\2\uffff\1\1\24\uffff";
    static final String DFA118_specialS =
        "\20\uffff\1\7\1\2\1\5\1\0\1\3\1\1\1\4\1\6\1\uffff}>";
    static final String[] DFA118_transitionS = {
            "\5\1\2\uffff\2\1\11\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\4\11\uffff\1\1\6\uffff\1\1\47\uffff\1\4\10\uffff"+
            "\1\1\1\uffff\2\1\1\3\2\uffff\1\2\1\1\3\uffff\3\1",
            "",
            "\1\5",
            "\1\6",
            "",
            "\6\1\1\13\24\1\1\14\1\10\1\15\1\1\1\11\1\12\103\1\1\16\21"+
            "\1\1\7\30\1",
            "\1\1\42\uffff\1\4\70\uffff\1\4\12\uffff\1\1\4\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\4\24\uffff\3\4\1\uffff\2\4\103\uffff\1\4\2\uffff\1\1\2"+
            "\uffff\1\1\13\uffff\1\4"
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()+ loopback of 239:4: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_19 = input.LA(1);

                         
                        int index118_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_19);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_21 = input.LA(1);

                         
                        int index118_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_21);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_17 = input.LA(1);

                         
                        int index118_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_20 = input.LA(1);

                         
                        int index118_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_22 = input.LA(1);

                         
                        int index118_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_22);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA118_23 = input.LA(1);

                         
                        int index118_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA118_16 = input.LA(1);

                         
                        int index118_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 4;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index118_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\u0092\uffff";
    static final String DFA121_eofS =
        "\1\1\u0091\uffff";
    static final String DFA121_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA121_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA121_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA121_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 242:29: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_6 = input.LA(1);

                         
                        int index121_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA121_8 = input.LA(1);

                         
                        int index121_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA121_9 = input.LA(1);

                         
                        int index121_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA121_10 = input.LA(1);

                         
                        int index121_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA122_static {
    static final String DFA122_eotS =
        "\33\uffff";
    static final String DFA122_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA122_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA122_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA122_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA122_specialS =
        "\13\uffff\1\0\10\uffff\1\1\6\uffff}>";
    static final String[] DFA122_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_static.DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_static.DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_static.DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_static.DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_static.DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_static.DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_static.DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "242:39: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA122_11 = input.LA(1);

                         
                        int index122_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA122_20 = input.LA(1);

                         
                        int index122_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\u0092\uffff";
    static final String DFA123_eofS =
        "\1\5\u0091\uffff";
    static final String DFA123_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA123_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA123_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA123_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA123_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "242:49: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA123_1 = input.LA(1);

                         
                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred327_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA123_2 = input.LA(1);

                         
                        int index123_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred327_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred327_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred327_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\u0092\uffff";
    static final String DFA127_eofS =
        "\1\1\u0091\uffff";
    static final String DFA127_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA127_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA127_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA127_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "()* loopback of 245:148: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_6 = input.LA(1);

                         
                        int index127_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA127_8 = input.LA(1);

                         
                        int index127_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA127_9 = input.LA(1);

                         
                        int index127_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA127_10 = input.LA(1);

                         
                        int index127_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA128_static {
    static final String DFA128_eotS =
        "\33\uffff";
    static final String DFA128_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA128_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA128_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA128_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA128_specialS =
        "\13\uffff\1\0\10\uffff\1\1\6\uffff}>";
    static final String[] DFA128_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_static.DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_static.DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_static.DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_static.DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_static.DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_static.DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_static.DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "245:158: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA128_11 = input.LA(1);

                         
                        int index128_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA128_20 = input.LA(1);

                         
                        int index128_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA129_static {
    static final String DFA129_eotS =
        "\u0092\uffff";
    static final String DFA129_eofS =
        "\1\5\u0091\uffff";
    static final String DFA129_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA129_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA129_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA129_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_static.DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_static.DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_static.DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_static.DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_static.DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_static.DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_static.DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "245:168: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA129_2 = input.LA(1);

                         
                        int index129_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA129_3 = input.LA(1);

                         
                        int index129_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA129_4 = input.LA(1);

                         
                        int index129_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index129_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA130_static {
    static final String DFA130_eotS =
        "\u0092\uffff";
    static final String DFA130_eofS =
        "\1\1\u0091\uffff";
    static final String DFA130_minS =
        "\1\46\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA130_maxS =
        "\1\u00b4\5\uffff\1\0\1\uffff\3\0\u0087\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA130_specialS =
        "\6\uffff\1\0\1\uffff\1\1\1\2\1\3\u0087\uffff}>";
    static final String[] DFA130_transitionS = {
            "\43\1\1\11\70\1\1\12\14\1\1\6\2\1\1\10\42\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_static.DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_static.DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_static.DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_static.DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_static.DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_static.DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 248:37: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA130_8 = input.LA(1);

                         
                        int index130_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA130_9 = input.LA(1);

                         
                        int index130_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA130_10 = input.LA(1);

                         
                        int index130_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA131_static {
    static final String DFA131_eotS =
        "\u0092\uffff";
    static final String DFA131_eofS =
        "\1\2\u0091\uffff";
    static final String DFA131_minS =
        "\1\46\1\0\u0090\uffff";
    static final String DFA131_maxS =
        "\1\u00b4\1\0\u0090\uffff";
    static final String DFA131_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA131_specialS =
        "\1\uffff\1\0\u0090\uffff}>";
    static final String[] DFA131_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_static.DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_static.DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_static.DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_static.DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_static.DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_static.DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_static.DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "248:47: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA131_1 = input.LA(1);

                         
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u0092\uffff";
    static final String DFA132_eofS =
        "\1\5\u0091\uffff";
    static final String DFA132_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA132_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA132_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA132_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA132_transitionS = {
            "\22\5\1\2\2\5\1\1\101\5\1\4\3\5\1\3\63\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "248:57: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_2 = input.LA(1);

                         
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred337_ChemicalChunker()&&(precededByProduct(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred337_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA132_4 = input.LA(1);

                         
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred337_ChemicalChunker()&&(suitableVbYieldOrSynthesizeForReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA134_static {
    static final String DFA134_eotS =
        "\u0092\uffff";
    static final String DFA134_eofS =
        "\1\10\u0091\uffff";
    static final String DFA134_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA134_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA134_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA134_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\7\42\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_static.DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_static.DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_static.DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_static.DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_static.DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_static.DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_static.DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "251:82: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred340_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred340_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA134_2 = input.LA(1);

                         
                        int index134_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred340_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred340_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA134_3 = input.LA(1);

                         
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA134_4 = input.LA(1);

                         
                        int index134_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA134_5 = input.LA(1);

                         
                        int index134_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred340_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA134_6 = input.LA(1);

                         
                        int index134_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred340_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA134_7 = input.LA(1);

                         
                        int index134_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred340_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0092\uffff";
    static final String DFA137_eofS =
        "\1\10\u0091\uffff";
    static final String DFA137_minS =
        "\1\46\7\0\u008a\uffff";
    static final String DFA137_maxS =
        "\1\u00b4\7\0\u008a\uffff";
    static final String DFA137_acceptS =
        "\10\uffff\1\2\u0088\uffff\1\1";
    static final String DFA137_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008a\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\7\42\10\1\3\70\10\1\4\10\10\1\5\1\10\1\6\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "254:66: ( numericReferenceOrQuantity )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred343_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred343_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred343_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred343_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA137_4 = input.LA(1);

                         
                        int index137_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA137_5 = input.LA(1);

                         
                        int index137_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred343_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA137_6 = input.LA(1);

                         
                        int index137_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred343_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA137_7 = input.LA(1);

                         
                        int index137_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred343_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index137_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA142_static {
    static final String DFA142_eotS =
        "\7\uffff";
    static final String DFA142_eofS =
        "\7\uffff";
    static final String DFA142_minS =
        "\1\51\2\45\2\uffff\2\51";
    static final String DFA142_maxS =
        "\1\u0097\2\45\2\uffff\2\u0097";
    static final String DFA142_acceptS =
        "\3\uffff\1\1\1\2\2\uffff";
    static final String DFA142_specialS =
        "\7\uffff}>";
    static final String[] DFA142_transitionS = {
            "\2\3\2\uffff\1\2\1\3\20\uffff\1\3\4\uffff\1\3\2\uffff\1\4\13"+
            "\uffff\1\3\6\uffff\1\3\74\uffff\1\1",
            "\1\5",
            "\1\6",
            "",
            "",
            "\2\3\2\uffff\1\2\1\3\20\uffff\1\3\4\uffff\1\3\2\uffff\1\4"+
            "\13\uffff\1\3\6\uffff\1\3\74\uffff\1\1",
            "\2\3\2\uffff\1\2\1\3\20\uffff\1\3\4\uffff\1\3\2\uffff\1\4"+
            "\13\uffff\1\3\6\uffff\1\3\74\uffff\1\1"
    };
    }

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_static.DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_static.DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_static.DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_static.DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_static.DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_static.DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "256:1: potentialUnnamedMoleculeStructureNN : ( ( jj | jjchem | jjcomp )* ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase ) | ( jj | jjchem )* nnchementity );";
        }
    }
    static class DFA140_static {
    static final String DFA140_eotS =
        "\34\uffff";
    static final String DFA140_eofS =
        "\7\uffff\1\14\7\uffff\1\14\4\uffff\2\14\2\uffff\1\14\3\uffff";
    static final String DFA140_minS =
        "\1\51\1\uffff\1\45\4\uffff\1\46\4\45\1\uffff\2\0\1\46\1\0\1\uffff"+
        "\2\45\2\46\2\45\1\46\1\0\1\45\1\0";
    static final String DFA140_maxS =
        "\1\132\1\uffff\1\45\4\uffff\1\u00b4\4\45\1\uffff\2\0\1\u00b4\1"+
        "\0\1\uffff\2\45\2\u00b4\2\45\1\u00b4\1\0\1\45\1\0";
    static final String DFA140_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\5\uffff\1\3\4\uffff\1\2\12"+
        "\uffff";
    static final String DFA140_specialS =
        "\15\uffff\1\0\1\4\1\uffff\1\1\10\uffff\1\2\1\uffff\1\3}>";
    static final String[] DFA140_transitionS = {
            "\1\6\1\3\24\uffff\1\1\4\uffff\1\4\16\uffff\1\2\6\uffff\1\5",
            "",
            "\1\7",
            "",
            "",
            "",
            "",
            "\1\13\146\14\1\11\1\14\1\12\2\14\1\10\42\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\147\14\1\23\4\14\1\22\42\14",
            "\1\uffff",
            "",
            "\1\24",
            "\1\25",
            "\147\14\1\26\47\14",
            "\152\14\1\27\44\14",
            "\1\30",
            "\1\31",
            "\152\14\1\32\44\14",
            "\1\uffff",
            "\1\33",
            "\1\uffff"
    };
    }

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_static.DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_static.DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_static.DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_static.DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_static.DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_static.DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_static.DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "257:24: ( nnstate | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnmixture | oscarase )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA140_13 = input.LA(1);

                         
                        int index140_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index140_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA140_16 = input.LA(1);

                         
                        int index140_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index140_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA140_25 = input.LA(1);

                         
                        int index140_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index140_25);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA140_27 = input.LA(1);

                         
                        int index140_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index140_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA140_14 = input.LA(1);

                         
                        int index140_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred348_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred349_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index140_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA143_static {
    static final String DFA143_eotS =
        "\103\uffff";
    static final String DFA143_eofS =
        "\6\uffff\1\4\12\uffff\1\4\12\uffff\3\4\14\uffff\1\4\7\uffff\1\4"+
        "\1\uffff\2\4\2\uffff\2\4\4\uffff\1\4\1\uffff\1\4\1\uffff";
    static final String DFA143_minS =
        "\1\46\2\45\2\uffff\2\46\11\45\1\54\1\46\7\0\3\45\3\46\14\45\1\46"+
        "\7\0\1\46\1\0\2\46\2\45\2\46\4\45\1\46\1\0\1\46\1\0";
    static final String DFA143_maxS =
        "\1\u0092\2\45\2\uffff\1\u0092\1\u00b4\11\45\1\u009c\1\u00b4\7\0"+
        "\3\45\3\u00b4\14\45\1\u00b4\7\0\1\u00b4\1\0\2\u00b4\2\45\2\u00b4"+
        "\4\45\1\u00b4\1\0\1\u00b4\1\0";
    static final String DFA143_acceptS =
        "\3\uffff\1\1\1\2\76\uffff";
    static final String DFA143_specialS =
        "\22\uffff\1\15\1\3\1\14\1\16\1\0\1\11\1\6\23\uffff\1\7\1\10\1\17"+
        "\1\20\1\4\1\12\1\13\1\uffff\1\2\13\uffff\1\1\1\uffff\1\5}>";
    static final String[] DFA143_transitionS = {
            "\1\4\42\uffff\1\3\70\uffff\1\3\10\uffff\1\4\1\uffff\1\4\1\uffff"+
            "\1\1\2\uffff\1\2",
            "\1\5",
            "\1\6",
            "",
            "",
            "\1\4\42\uffff\1\3\70\uffff\1\3\12\uffff\1\4\4\uffff\1\7",
            "\6\4\1\16\24\4\1\12\1\14\1\17\1\4\1\15\1\13\103\4\1\11\21"+
            "\4\1\10\30\4",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\3\24\uffff\3\3\1\uffff\2\3\103\uffff\1\3\2\uffff\1\4\2"+
            "\uffff\1\4\13\uffff\1\3",
            "\43\4\1\32\70\4\1\33\7\4\1\11\7\4\1\31\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\34",
            "\1\35",
            "\1\36",
            "\6\4\1\43\24\4\1\45\1\40\1\42\1\4\1\46\1\41\103\4\1\44\21"+
            "\4\1\37\30\4",
            "\154\4\1\50\25\4\1\47\14\4",
            "\22\4\1\51\113\4\1\52\60\4",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\56",
            "\1\57",
            "\1\60",
            "\1\61",
            "\1\62",
            "\1\63",
            "\1\64",
            "\1\65",
            "\1\66",
            "\144\4\1\44\52\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\154\4\1\50\42\4",
            "\1\uffff",
            "\154\4\1\67\42\4",
            "\154\4\1\70\42\4",
            "\1\71",
            "\1\72",
            "\144\4\1\74\21\4\1\73\30\4",
            "\144\4\1\76\21\4\1\75\30\4",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\144\4\1\74\52\4",
            "\1\uffff",
            "\144\4\1\76\52\4",
            "\1\uffff"
    };
    }

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_static.DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_static.DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_static.DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_static.DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_static.DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_static.DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_static.DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "260:1: numericReferenceOrQuantity : ( quantity | {...}? numericOrIdentifierCompoundReference );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA143_22 = input.LA(1);

                         
                        int index143_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA143_64 = input.LA(1);

                         
                        int index143_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_64);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA143_52 = input.LA(1);

                         
                        int index143_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_52);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA143_19 = input.LA(1);

                         
                        int index143_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA143_48 = input.LA(1);

                         
                        int index143_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_48);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA143_66 = input.LA(1);

                         
                        int index143_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_66);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA143_24 = input.LA(1);

                         
                        int index143_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_24);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA143_44 = input.LA(1);

                         
                        int index143_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_44);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA143_45 = input.LA(1);

                         
                        int index143_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_45);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA143_23 = input.LA(1);

                         
                        int index143_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_23);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA143_49 = input.LA(1);

                         
                        int index143_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_49);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA143_50 = input.LA(1);

                         
                        int index143_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_50);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA143_20 = input.LA(1);

                         
                        int index143_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_20);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA143_18 = input.LA(1);

                         
                        int index143_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_18);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA143_21 = input.LA(1);

                         
                        int index143_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_21);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA143_46 = input.LA(1);

                         
                        int index143_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_46);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA143_47 = input.LA(1);

                         
                        int index143_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred356_ChemicalChunker()) ) {s = 3;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 4;}

                         
                        input.seek(index143_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA146_static {
    static final String DFA146_eotS =
        "\u0092\uffff";
    static final String DFA146_eofS =
        "\1\1\u0091\uffff";
    static final String DFA146_minS =
        "\1\46\16\uffff\4\0\177\uffff";
    static final String DFA146_maxS =
        "\1\u00b4\16\uffff\4\0\177\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA146_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA146_transitionS = {
            "\43\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_static.DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_static.DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_static.DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_static.DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_static.DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_static.DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_static.DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "()* loopback of 264:34: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA146_15 = input.LA(1);

                         
                        int index146_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA146_16 = input.LA(1);

                         
                        int index146_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA149_static {
    static final String DFA149_eotS =
        "\14\uffff";
    static final String DFA149_eofS =
        "\6\uffff\1\5\5\uffff";
    static final String DFA149_minS =
        "\1\46\1\uffff\1\45\1\uffff\1\45\1\uffff\2\46\2\45\1\0\1\u008d";
    static final String DFA149_maxS =
        "\1\u0092\1\uffff\1\45\1\uffff\1\45\1\uffff\1\u00b4\1\u0092\2\45"+
        "\1\0\1\u0090";
    static final String DFA149_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\6\uffff";
    static final String DFA149_specialS =
        "\12\uffff\1\0\1\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\5\144\uffff\1\1\1\uffff\1\3\1\uffff\1\4\2\uffff\1\2",
            "",
            "\1\6",
            "",
            "\1\7",
            "",
            "\147\5\1\10\47\5",
            "\1\5\146\uffff\1\3\4\uffff\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\3\2\uffff\1\5"
    };
    }

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_static.DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_static.DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_static.DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_static.DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_static.DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_static.DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "274:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA149_10 = input.LA(1);

                         
                        int index149_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index149_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA154_static {
    static final String DFA154_eotS =
        "\u0092\uffff";
    static final String DFA154_eofS =
        "\1\1\u0091\uffff";
    static final String DFA154_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA154_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA154_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA154_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA154_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_static.DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_static.DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_static.DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_static.DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_static.DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_static.DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_static.DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "()* loopback of 289:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA154_3 = input.LA(1);

                         
                        int index154_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index154_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA158_static {
    static final String DFA158_eotS =
        "\53\uffff";
    static final String DFA158_eofS =
        "\1\4\4\uffff\3\4\14\uffff\1\4\5\uffff\1\4\1\uffff\2\4\3\uffff\2"+
        "\4\4\uffff\1\4\1\uffff\1\4\1\uffff";
    static final String DFA158_minS =
        "\1\46\3\45\1\uffff\3\46\13\45\1\0\1\46\5\0\1\46\1\0\2\46\1\uffff"+
        "\2\45\2\46\4\45\1\46\1\0\1\46\1\0";
    static final String DFA158_maxS =
        "\1\u00b4\3\45\1\uffff\3\u00b4\13\45\1\0\1\u00b4\5\0\1\u00b4\1\0"+
        "\2\u00b4\1\uffff\2\45\2\u00b4\4\45\1\u00b4\1\0\1\u00b4\1\0";
    static final String DFA158_acceptS =
        "\4\uffff\1\2\31\uffff\1\1\14\uffff";
    static final String DFA158_specialS =
        "\23\uffff\1\4\1\uffff\1\0\1\3\1\10\1\5\1\7\1\uffff\1\2\14\uffff"+
        "\1\6\1\uffff\1\1}>";
    static final String[] DFA158_transitionS = {
            "\43\4\1\2\70\4\1\3\17\4\1\1\42\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "",
            "\33\4\1\16\1\13\1\10\1\4\1\14\1\15\103\4\1\12\21\4\1\11\30"+
            "\4",
            "\154\4\1\20\25\4\1\17\14\4",
            "\22\4\1\21\113\4\1\22\60\4",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\uffff",
            "\144\4\1\12\52\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\154\4\1\20\42\4",
            "\1\uffff",
            "\154\4\1\37\42\4",
            "\154\4\1\40\42\4",
            "",
            "\1\41",
            "\1\42",
            "\144\4\1\44\21\4\1\43\30\4",
            "\144\4\1\46\21\4\1\45\30\4",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52",
            "\144\4\1\44\52\4",
            "\1\uffff",
            "\144\4\1\46\52\4",
            "\1\uffff"
    };
    }

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_static.DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_static.DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_static.DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_static.DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_static.DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_static.DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_static.DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_static.DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "293:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA158_21 = input.LA(1);

                         
                        int index158_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA158_42 = input.LA(1);

                         
                        int index158_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_42);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA158_27 = input.LA(1);

                         
                        int index158_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_27);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA158_22 = input.LA(1);

                         
                        int index158_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_22);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA158_19 = input.LA(1);

                         
                        int index158_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA158_24 = input.LA(1);

                         
                        int index158_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_24);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA158_40 = input.LA(1);

                         
                        int index158_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_40);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA158_25 = input.LA(1);

                         
                        int index158_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_25);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA158_23 = input.LA(1);

                         
                        int index158_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index158_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA159_static {
    static final String DFA159_eotS =
        "\27\uffff";
    static final String DFA159_eofS =
        "\15\uffff\1\20\3\uffff\1\20\2\uffff\1\20\2\uffff";
    static final String DFA159_minS =
        "\1\111\1\45\2\uffff\1\101\2\45\5\uffff\1\u008a\1\46\2\45\1\uffff"+
        "\1\46\1\0\1\45\1\46\1\45\1\0";
    static final String DFA159_maxS =
        "\1\u0092\1\45\2\uffff\1\u009c\2\45\5\uffff\1\u008a\1\u00b4\2\45"+
        "\1\uffff\1\u00b4\1\0\1\45\1\u00b4\1\45\1\0";
    static final String DFA159_acceptS =
        "\2\uffff\1\5\1\7\3\uffff\1\6\1\1\1\4\1\3\1\2\4\uffff\1\10\6\uffff";
    static final String DFA159_specialS =
        "\22\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA159_transitionS = {
            "\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\12\1\13\1\10\1\uffff\1\7\1\11\103\uffff\1\6\21\uffff\1"+
            "\5",
            "\1\14",
            "\1\15",
            "",
            "",
            "",
            "",
            "",
            "\1\6",
            "\134\20\1\17\5\20\1\16\54\20",
            "\1\21",
            "\1\22",
            "",
            "\154\20\1\23\42\20",
            "\1\uffff",
            "\1\24",
            "\144\20\1\25\52\20",
            "\1\26",
            "\1\uffff"
    };
    }

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_static.DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_static.DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_static.DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_static.DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_static.DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_static.DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_static.DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_static.DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "294:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA159_18 = input.LA(1);

                         
                        int index159_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index159_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA159_22 = input.LA(1);

                         
                        int index159_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index159_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA166_static {
    static final String DFA166_eotS =
        "\25\uffff";
    static final String DFA166_eofS =
        "\25\uffff";
    static final String DFA166_minS =
        "\1\u0085\1\45\2\uffff\1\46\1\uffff\2\45\2\46\1\45\1\uffff\1\46"+
        "\1\45\1\46\2\45\1\46\1\0\1\45\1\46";
    static final String DFA166_maxS =
        "\1\u008f\1\45\2\uffff\1\u00b4\1\uffff\2\45\2\u00b4\1\45\1\uffff"+
        "\1\u00b4\1\45\1\u00b4\2\45\1\u00b4\1\0\1\45\1\u00b4";
    static final String DFA166_acceptS =
        "\2\uffff\1\2\1\4\1\uffff\1\3\5\uffff\1\1\11\uffff";
    static final String DFA166_specialS =
        "\22\uffff\1\0\2\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\5\uffff\1\3\3\uffff\1\1",
            "\1\4",
            "",
            "",
            "\6\5\1\uffff\24\5\1\uffff\1\5\1\uffff\77\5\1\uffff\2\5\2\uffff"+
            "\2\5\1\7\1\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\6\21\5\4\uffff"+
            "\2\5\1\uffff\12\5",
            "",
            "\1\10",
            "\1\11",
            "\135\5\1\uffff\1\12\1\5\2\uffff\4\5\1\uffff\1\5\1\uffff\1"+
            "\5\1\uffff\23\5\4\uffff\2\5\1\uffff\12\5",
            "\6\5\1\uffff\24\5\1\uffff\1\5\1\uffff\77\5\1\uffff\2\5\2\uffff"+
            "\4\5\1\uffff\1\5\1\uffff\1\5\1\13\23\5\4\uffff\2\5\1\uffff\12"+
            "\5",
            "\1\14",
            "",
            "\6\5\1\uffff\24\5\1\uffff\1\5\1\uffff\77\5\1\uffff\2\5\2\uffff"+
            "\4\5\1\uffff\1\5\1\uffff\3\5\1\15\21\5\4\uffff\2\5\1\uffff\12"+
            "\5",
            "\1\16",
            "\135\5\1\uffff\1\17\1\5\2\uffff\4\5\1\uffff\1\5\1\uffff\1"+
            "\5\1\20\23\5\4\uffff\2\5\1\uffff\12\5",
            "\1\21",
            "\1\22",
            "\6\5\1\uffff\24\5\1\uffff\1\5\1\uffff\77\5\1\uffff\2\5\2\uffff"+
            "\4\5\1\uffff\1\5\1\uffff\3\5\1\23\21\5\4\uffff\2\5\1\uffff\12"+
            "\5",
            "\1\uffff",
            "\1\24",
            "\135\5\1\uffff\1\17\1\5\2\uffff\4\5\1\uffff\1\5\1\uffff\1"+
            "\5\1\20\23\5\4\uffff\2\5\1\uffff\12\5"
    };
    }

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_static.DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_static.DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_static.DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_static.DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_static.DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_static.DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_static.DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "308:18: ( mixtureStructure1 | mixtureStructure2 | mixtureStructure3 | mixtureStructure4 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA166_18 = input.LA(1);

                         
                        int index166_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 5;}

                         
                        input.seek(index166_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA168_static {
    static final String DFA168_eotS =
        "\u0088\uffff";
    static final String DFA168_eofS =
        "\u0088\uffff";
    static final String DFA168_minS =
        "\1\46\43\uffff\1\0\4\uffff\16\0\25\uffff\1\0\73\uffff";
    static final String DFA168_maxS =
        "\1\u00b4\43\uffff\1\0\4\uffff\16\0\25\uffff\1\0\73\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\65\uffff\1\6\1\7\1\10\1\11\22\uffff\1\15\1\16\1\17"+
        "\61\uffff\1\2\1\4\1\5\1\12\1\3\1\14\1\13";
    static final String DFA168_specialS =
        "\44\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\25\uffff\1\17\73\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\66\1\57\1\61\3\117\1\uffff\1\60\1\117\20\72\2\117\1\uffff"+
            "\1\117\1\uffff\5\117\1\52\12\117\1\62\4\1\2\117\11\1\1\117\1"+
            "\1\1\117\4\1\1\117\1\1\1\117\1\1\1\117\5\1\1\117\1\1\1\117\3"+
            "\1\1\117\1\1\1\44\1\117\3\1\1\53\1\uffff\1\115\1\114\2\uffff"+
            "\1\71\1\116\1\70\1\64\1\uffff\1\65\1\uffff\1\63\2\uffff\1\51"+
            "\3\117\1\72\1\54\1\55\1\56\1\117\1\67\10\117\4\uffff\1\117\1"+
            "\72\1\uffff\6\1\4\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_static.DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_static.DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_static.DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_static.DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_static.DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_static.DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_static.DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "314:19: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | numberCompoundReference comma | md | percentsign | dash | inAll | cd | comma | adj | colon | stop | noun )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA168_36 = input.LA(1);

                         
                        int index168_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred393_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_36);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA168_41 = input.LA(1);

                         
                        int index168_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred402_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA168_42 = input.LA(1);

                         
                        int index168_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA168_43 = input.LA(1);

                         
                        int index168_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA168_44 = input.LA(1);

                         
                        int index168_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA168_45 = input.LA(1);

                         
                        int index168_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA168_46 = input.LA(1);

                         
                        int index168_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA168_47 = input.LA(1);

                         
                        int index168_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_47);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA168_48 = input.LA(1);

                         
                        int index168_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_48);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA168_49 = input.LA(1);

                         
                        int index168_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred404_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA168_50 = input.LA(1);

                         
                        int index168_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_50);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA168_51 = input.LA(1);

                         
                        int index168_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_51);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA168_52 = input.LA(1);

                         
                        int index168_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA168_53 = input.LA(1);

                         
                        int index168_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA168_54 = input.LA(1);

                         
                        int index168_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred396_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_54);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA168_76 = input.LA(1);

                         
                        int index168_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index168_76);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA169_static {
    static final String DFA169_eotS =
        "\u0089\uffff";
    static final String DFA169_eofS =
        "\u0089\uffff";
    static final String DFA169_minS =
        "\1\46\45\uffff\1\0\4\uffff\16\0\26\uffff\1\0\71\uffff";
    static final String DFA169_maxS =
        "\1\u00b4\45\uffff\1\0\4\uffff\16\0\26\uffff\1\0\71\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\17\1\uffff\1\1\65\uffff\1\5\1\6\1\7\1\10\21\uffff\1"+
        "\12\1\uffff\1\14\1\15\1\16\61\uffff\1\2\1\4\1\11\1\3\1\13";
    static final String DFA169_specialS =
        "\46\uffff\1\0\4\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\26\uffff\1\17\71\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\70\1\61\1\63\3\122\1\uffff\1\62\1\122\20\74\2\122\1\uffff"+
            "\1\122\1\uffff\5\122\1\54\12\122\1\64\4\3\2\122\11\3\1\122\1"+
            "\3\1\122\4\3\1\122\1\3\1\122\1\3\1\122\5\3\1\122\1\3\1\122\3"+
            "\3\1\122\1\3\1\46\1\122\3\3\1\55\1\uffff\1\120\1\117\2\uffff"+
            "\1\73\1\121\1\72\1\66\1\1\1\67\1\uffff\1\65\1\1\1\116\1\53\3"+
            "\122\1\74\1\56\1\57\1\60\1\122\1\71\10\122\4\uffff\1\122\1\74"+
            "\1\uffff\6\3\4\122",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_static.DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_static.DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_static.DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_static.DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_static.DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_static.DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_static.DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()+ loopback of 314:181: ( verb | quantity2Node | oscarCompound | alphanumericOrIdentifierCompoundReference | md | percentsign | dash | inAll | cd | conjunction | adj | colon | stop | noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA169_38 = input.LA(1);

                         
                        int index169_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred407_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_38);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA169_43 = input.LA(1);

                         
                        int index169_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred410_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred415_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_43);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA169_44 = input.LA(1);

                         
                        int index169_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_44);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA169_45 = input.LA(1);

                         
                        int index169_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_45);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA169_46 = input.LA(1);

                         
                        int index169_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_46);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA169_47 = input.LA(1);

                         
                        int index169_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_47);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA169_48 = input.LA(1);

                         
                        int index169_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA169_49 = input.LA(1);

                         
                        int index169_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA169_50 = input.LA(1);

                         
                        int index169_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA169_51 = input.LA(1);

                         
                        int index169_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA169_52 = input.LA(1);

                         
                        int index169_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA169_53 = input.LA(1);

                         
                        int index169_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred409_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred410_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA169_54 = input.LA(1);

                         
                        int index169_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA169_55 = input.LA(1);

                         
                        int index169_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA169_56 = input.LA(1);

                         
                        int index169_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA169_79 = input.LA(1);

                         
                        int index169_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 78;}

                        else if ( (synpred420_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index169_79);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA174_static {
    static final String DFA174_eotS =
        "\u0093\uffff";
    static final String DFA174_eofS =
        "\1\5\u0092\uffff";
    static final String DFA174_minS =
        "\1\46\4\0\u008e\uffff";
    static final String DFA174_maxS =
        "\1\u00b4\4\0\u008e\uffff";
    static final String DFA174_acceptS =
        "\5\uffff\1\3\u008b\uffff\1\1\1\2";
    static final String DFA174_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008e\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\4\146\5\1\2\1\5\1\3\2\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_static.DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_static.DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_static.DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_static.DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_static.DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_static.DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_static.DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "321:31: ( identifierOrBracketedIdentifier | numeric )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA174_1 = input.LA(1);

                         
                        int index174_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred428_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA174_2 = input.LA(1);

                         
                        int index174_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred428_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA174_3 = input.LA(1);

                         
                        int index174_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred428_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA174_4 = input.LA(1);

                         
                        int index174_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred429_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index174_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA178_static {
    static final String DFA178_eotS =
        "\u0093\uffff";
    static final String DFA178_eofS =
        "\1\1\u0092\uffff";
    static final String DFA178_minS =
        "\1\46\2\uffff\1\0\13\uffff\1\0\11\uffff\1\0\15\uffff\1\0\41\uffff"+
        "\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA178_maxS =
        "\1\u00b4\2\uffff\1\0\13\uffff\1\0\11\uffff\1\0\15\uffff\1\0\41"+
        "\uffff\1\0\1\uffff\1\0\13\uffff\1\0\73\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\1\1\2";
    static final String DFA178_specialS =
        "\3\uffff\1\0\13\uffff\1\1\11\uffff\1\2\15\uffff\1\3\41\uffff\1"+
        "\4\1\uffff\1\5\13\uffff\1\6\73\uffff}>";
    static final String[] DFA178_transitionS = {
            "\22\1\1\111\2\1\1\127\20\1\1\47\6\1\1\31\60\1\1\113\1\3\11"+
            "\1\1\17\45\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_static.DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_static.DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_static.DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_static.DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_static.DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_static.DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_static.DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()* loopback of 321:129: ( ( comma | colon | inof | infrom )? submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA178_3 = input.LA(1);

                         
                        int index178_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA178_15 = input.LA(1);

                         
                        int index178_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred437_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_15);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA178_25 = input.LA(1);

                         
                        int index178_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_25);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA178_39 = input.LA(1);

                         
                        int index178_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_39);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA178_73 = input.LA(1);

                         
                        int index178_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_73);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA178_75 = input.LA(1);

                         
                        int index178_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_75);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA178_87 = input.LA(1);

                         
                        int index178_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred436_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index178_87);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA203_static {
    static final String DFA203_eotS =
        "\110\uffff";
    static final String DFA203_eofS =
        "\110\uffff";
    static final String DFA203_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA203_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA203_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA203_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA203_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_static.DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_static.DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_static.DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_static.DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_static.DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_static.DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "()* loopback of 129:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA203_16 = input.LA(1);

                         
                        int index203_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index203_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA215_static {
    static final String DFA215_eotS =
        "\26\uffff";
    static final String DFA215_eofS =
        "\26\uffff";
    static final String DFA215_minS =
        "\1\47\15\uffff\1\0\7\uffff";
    static final String DFA215_maxS =
        "\1\u009c\15\uffff\1\0\7\uffff";
    static final String DFA215_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA215_specialS =
        "\16\uffff\1\0\7\uffff}>";
    static final String[] DFA215_transitionS = {
            "\2\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\16\5\uffff\1\1\3\uffff\1\1\1\uffff\1\25\2\1\3\uffff\3\1\2"+
            "\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_static.DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_static.DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_static.DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_static.DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_static.DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_static.DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_static.DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_static.DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "()* loopback of 196:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA215_14 = input.LA(1);

                         
                        int index215_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index215_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA228_static {
    static final String DFA228_eotS =
        "\26\uffff";
    static final String DFA228_eofS =
        "\26\uffff";
    static final String DFA228_minS =
        "\1\46\15\0\10\uffff";
    static final String DFA228_maxS =
        "\1\u0099\15\0\10\uffff";
    static final String DFA228_acceptS =
        "\16\uffff\1\3\5\uffff\1\1\1\2";
    static final String DFA228_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\10\uffff}>";
    static final String[] DFA228_transitionS = {
            "\3\16\1\14\1\11\2\uffff\1\5\1\6\20\uffff\1\7\4\uffff\1\12\2"+
            "\uffff\1\15\13\uffff\1\10\6\uffff\1\13\60\uffff\1\16\1\uffff"+
            "\1\2\1\uffff\1\3\2\uffff\1\1\4\uffff\1\4\2\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_static.DFA228_eotS);
    static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_static.DFA228_eofS);
    static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_static.DFA228_minS);
    static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_static.DFA228_maxS);
    static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_static.DFA228_acceptS);
    static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_static.DFA228_specialS);
    static final short[][] DFA228_transition;

    static {
        int numStates = DFA228_static.DFA228_transitionS.length;
        DFA228_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA228_transition[i] = DFA.unpackEncodedString(DFA228_static.DFA228_transitionS[i]);
        }
    }

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = DFA228_eot;
            this.eof = DFA228_eof;
            this.min = DFA228_min;
            this.max = DFA228_max;
            this.accept = DFA228_accept;
            this.special = DFA228_special;
            this.transition = DFA228_transition;
        }
        public String getDescription() {
            return "236:15: ( potentialUnnamedMoleculeAmount1 | potentialUnnamedMoleculeAmount2 | definiteUnnamedMolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA228_1 = input.LA(1);

                         
                        int index228_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA228_2 = input.LA(1);

                         
                        int index228_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA228_3 = input.LA(1);

                         
                        int index228_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA228_4 = input.LA(1);

                         
                        int index228_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA228_5 = input.LA(1);

                         
                        int index228_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA228_6 = input.LA(1);

                         
                        int index228_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA228_7 = input.LA(1);

                         
                        int index228_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA228_8 = input.LA(1);

                         
                        int index228_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA228_9 = input.LA(1);

                         
                        int index228_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA228_10 = input.LA(1);

                         
                        int index228_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA228_11 = input.LA(1);

                         
                        int index228_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA228_12 = input.LA(1);

                         
                        int index228_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                         
                        input.seek(index228_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA228_13 = input.LA(1);

                         
                        int index228_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred318_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index228_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    static class FOLLOW_sentence_in_document202_static {
    public static final BitSet FOLLOW_sentence_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_procedureNounPhrase_in_sentence221_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_sentence221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_sentence226_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentence226 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentence228_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentence228 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentence232_static {
    public static final BitSet FOLLOW_stop_in_sentence232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure242_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure242 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure244_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure244 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure246_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure246 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure248_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure248 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure253_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure253 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure255_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure255 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure260_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure262_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure264_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase276_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken295_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken297_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken299_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken299 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken301_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken301 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken303_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken305_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken309_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken309 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken311_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken311 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken313_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken315_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken317_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken317 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken319_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken321_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken323_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken323 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken325_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken325 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken327_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken329_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken331_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken331 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken333_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken333 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken335_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken335 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken337_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken339_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken341_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken343_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken345_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken347_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken349_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken353_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken353 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken355_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken355 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken357_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken359_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken361_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken363_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken365_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken367_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken369_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken371_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken373_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken375_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken377_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken377 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken379_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken381_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken383_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken385_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken385 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken387_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken387 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken389_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken389 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken391_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken391 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percentsign_in_unmatchedToken393_static {
    public static final BitSet FOLLOW_percentsign_in_unmatchedToken393 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken395_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken397_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken397 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken399_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken399 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken401_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken405_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken407_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken407 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken409_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken411_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken411 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken413_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken415_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken417_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken419_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken421_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken421 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken423_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken423 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken425_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken427_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken429_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken431_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken431 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken433_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken435_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken437_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken439_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken441_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedure_in_procedureNounPhrase454_static {
    public static final BitSet FOLLOW_headingProcedure_in_procedureNounPhrase454 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473_static {
    public static final BitSet FOLLOW_headingProcedureRequiringTerminator_in_headingProcedure473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure475_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedHeadingProcedure_in_headingProcedure479_static {
    public static final BitSet FOLLOW_bracketedHeadingProcedure_in_headingProcedure479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010210L});

    }static class FOLLOW_headingProcedureTerminators_in_headingProcedure481_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_headingProcedure481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492_static {
    public static final BitSet FOLLOW_nnidentifier_in_headingProcedureRequiringTerminator492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_headingProcedureRequiringTerminator494_static {
    public static final BitSet FOLLOW_numeric_in_headingProcedureRequiringTerminator494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_bracketedHeadingProcedure517 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_bracketedHeadingProcedure521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_bracketedHeadingProcedure525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_headingProcedureTerminators550_static {
    public static final BitSet FOLLOW_rrb_in_headingProcedureTerminators550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_stop_in_headingProcedureTerminators552_static {
    public static final BitSet FOLLOW_stop_in_headingProcedureTerminators552 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_headingProcedureTerminators554_static {
    public static final BitSet FOLLOW_colon_in_headingProcedureTerminators554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase563_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure582_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure584_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1593_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1593 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2610_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2610 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dt_in_nounphraseStructure2613_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2613 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2616_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2616 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2620_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2620 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2623_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2623 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2628_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2631_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent643_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent643 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent648_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent648 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_ratioOrBracketedRatio_in_nounphraseContent650_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_nounphraseContent650 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounphraseContent652_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent652 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_numeric_in_nounphraseContent654_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent654 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase666_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase666 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase668_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase668 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase670_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase672_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure697_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure697 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_dissolveStructure701_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure703_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure703 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure706_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure706 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure709_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure709 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure711_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure711 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure715_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure718_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure718 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure720_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_inin_in_inMolecule732_static {
    public static final BitSet FOLLOW_inin_in_inMolecule732 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384E824L});

    }static class FOLLOW_dtTHE_in_inMolecule734_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule734 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_adj_in_inMolecule737_static {
    public static final BitSet FOLLOW_adj_in_inMolecule737 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_inMolecule740_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule740 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_inMolecule744_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule746_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase756_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure774_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure774 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure777_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure777 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure780_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure780 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure783_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure783 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure787_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure787 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure790_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure790 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure793_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure793 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure796_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure796 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_verbphraseStructure799_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure799 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure802_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure802 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure805_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure805 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure808_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure808 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure811_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure811 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure817_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure817 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure821_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure821 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure824_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure824 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure827_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure827 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_vb_in_verb839_static {
    public static final BitSet FOLLOW_vb_in_verb839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb841_static {
    public static final BitSet FOLLOW_vbp_in_verb841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb843_static {
    public static final BitSet FOLLOW_vbg_in_verb843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb845_static {
    public static final BitSet FOLLOW_vbd_in_verb845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb847_static {
    public static final BitSet FOLLOW_vbz_in_verb847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb849_static {
    public static final BitSet FOLLOW_vbn_in_verb849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb851_static {
    public static final BitSet FOLLOW_vbuse_in_verb851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb853_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb855_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb857_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb859_static {
    public static final BitSet FOLLOW_vbsubject_in_verb859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb861_static {
    public static final BitSet FOLLOW_vbadd_in_verb861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb863_static {
    public static final BitSet FOLLOW_vbdilute_in_verb863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb865_static {
    public static final BitSet FOLLOW_vbcharge_in_verb865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb867_static {
    public static final BitSet FOLLOW_vbcontain_in_verb867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb869_static {
    public static final BitSet FOLLOW_vbdrop_in_verb869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb871_static {
    public static final BitSet FOLLOW_vbfill_in_verb871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb873_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb875_static {
    public static final BitSet FOLLOW_vbtreat_in_verb875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb877_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb879_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb881_static {
    public static final BitSet FOLLOW_vbcool_in_verb881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb883_static {
    public static final BitSet FOLLOW_vbdegass_in_verb883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb885_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb887_static {
    public static final BitSet FOLLOW_vbdry_in_verb887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb889_static {
    public static final BitSet FOLLOW_vbextract_in_verb889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb891_static {
    public static final BitSet FOLLOW_vbfilter_in_verb891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb894_static {
    public static final BitSet FOLLOW_vbheat_in_verb894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb896_static {
    public static final BitSet FOLLOW_vbincrease_in_verb896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb898_static {
    public static final BitSet FOLLOW_vbpartition_in_verb898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb900_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb902_static {
    public static final BitSet FOLLOW_vbpurify_in_verb902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb904_static {
    public static final BitSet FOLLOW_vbquench_in_verb904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb906_static {
    public static final BitSet FOLLOW_vbrecover_in_verb906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb908_static {
    public static final BitSet FOLLOW_vbremove_in_verb908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb910_static {
    public static final BitSet FOLLOW_vbstir_in_verb910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb912_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb914_static {
    public static final BitSet FOLLOW_vbwait_in_verb914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb916_static {
    public static final BitSet FOLLOW_vbwash_in_verb916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb918_static {
    public static final BitSet FOLLOW_vbyield_in_verb918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb920_static {
    public static final BitSet FOLLOW_vbchange_in_verb920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb929_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb931_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb931 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb933_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun942_static {
    public static final BitSet FOLLOW_nounStructure_in_noun942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun945_static {
    public static final BitSet FOLLOW_dash_in_noun945 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun947_static {
    public static final BitSet FOLLOW_nounStructure_in_noun947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure958_static {
    public static final BitSet FOLLOW_prp_in_nounStructure958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure960_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure962_static {
    public static final BitSet FOLLOW_citation_in_nounStructure962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure964_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure966_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure968_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure970_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure972_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure974_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure976_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure978_static {
    public static final BitSet FOLLOW_nn_in_nounStructure978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure980_static {
    public static final BitSet FOLLOW_nns_in_nounStructure980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure982_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure984_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure986_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure988_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure990_static {
    public static final BitSet FOLLOW_range_in_nounStructure990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure992_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure994_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure994 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure996_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure998_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure998 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure1000_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure1002_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure1002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure1004_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure1004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure1006_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure1008_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure1008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure1010_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure1012_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure1012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure1014_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure1014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure1016_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure1016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure1018_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure1018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure1020_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure1022_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure1022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure1024_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure1024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure1026_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure1026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure1028_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure1028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure1030_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure1030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure1032_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure1032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure1034_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure1036_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure1038_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure1038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure1040_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure1040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_nounStructure1042_static {
    public static final BitSet FOLLOW_numeric_in_nounStructure1042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure1044_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure1044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure1046_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1046 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure1048_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure1050_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure1050 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure1052_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure1052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure1054_static {
    public static final BitSet FOLLOW_fw_in_nounStructure1054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure1056_static {
    public static final BitSet FOLLOW_sym_in_nounStructure1056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure1058_static {
    public static final BitSet FOLLOW_clause_in_nounStructure1058 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure1060_static {
    public static final BitSet FOLLOW_ls_in_nounStructure1060 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure1062_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure1062 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure1064_static {
    public static final BitSet FOLLOW_pos_in_nounStructure1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure1066_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure1066 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase1078_static {
    public static final BitSet FOLLOW_neg_in_prepphrase1078 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase1082_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1082 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase1084_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase1086_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase1088_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase1090_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase1092_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1104_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1124_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1124 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000F0038CA824L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1127_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1127 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000F00384A824L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1130_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1130 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000F00384A824L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1133_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1133 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1135_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1135 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1145_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1145 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1163_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1163 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1166_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1166 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1170_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1170 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1173_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1173 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1176_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1179_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1189_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1189 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1210_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1210 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1213_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1213 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1216_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1216 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1219_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1222_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1225_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1234_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1234 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_prepphraseIN1236_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1236 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1257_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1259_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1262_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1285_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1285 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1288_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1288 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1292_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1318_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1318 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1321_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1321 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1343_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1343 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1346_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1346 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1349_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1374_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1374 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1376_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1376 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000080101L,0x000002F003CC0080L});

    }static class FOLLOW_nnexample_in_preparationphrase1379_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1381_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1384_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1395_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1395 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_conjunction_in_multiApparatus1398_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1398 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_apparatus_in_multiApparatus1401_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1401 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_dt_in_apparatus1412_static {
    public static final BitSet FOLLOW_dt_in_apparatus1412 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_preapparatus_in_apparatus1415_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1415 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnApp_in_apparatus1418_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1418 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_nnApp1445_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1445 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138CA924L});

    }static class FOLLOW_dash_in_nnApp1449_static {
    public static final BitSet FOLLOW_dash_in_nnApp1449 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_nnApp1451_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1465_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1465 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_adj_in_preapparatus1467_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1467 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnpressure_in_preapparatus1469_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1469 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnadd_in_preapparatus1471_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1471 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_molecule_in_preapparatus1473_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1473 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnchementity_in_preapparatus1475_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1475 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nnstate_in_preapparatus1477_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1477 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nn_in_preapparatus1479_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1479 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_oscaront_in_oscaronts1491_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1491 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_adj_in_oscarCompound1511_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1511 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1514_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1514 = new BitSet(new long[]{0x090021C000000002L,0x2000000000000280L,0x000000000384A806L});

    }static class FOLLOW_adj_in_oscarCompound1516_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1516 = new BitSet(new long[]{0x0900004000000002L,0x2000000000000280L,0x000000000004A806L});

    }static class FOLLOW_numericReferenceOrQuantity_in_oscarCompound1520_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_oscarCompound1520 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_nnchementity_in_oscarCompound1524_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1524 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_oscarCompound1529_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1529 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1532_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1541_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000150L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1543_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1548_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1548 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1570_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1574_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1576_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1581_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_afterOscarCompoundStructure1597_static {
    public static final BitSet FOLLOW_colon_in_afterOscarCompoundStructure1597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1599_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000010L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1605_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1607_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1616_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1619_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1622_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1632_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1650_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1650 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1653_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1653 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1657_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1657 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1660_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31671_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31671 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_mixture_in_moleculeamount31673_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31673 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_inof_in_moleculeamount31677_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000CC000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31680_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_dt_in_moleculeamount31684_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});

    }static class FOLLOW_ratioOrBracketedRatio_in_moleculeamount31688_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_moleculeamount31688 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_mixture_in_moleculeamount31690_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31690 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31693_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11703_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11703 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_nnstate_in_moleculeamount11707_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11707 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_quantity_in_moleculeamount11712_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11712 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_mixture_in_moleculeamount11714_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11714 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_inof_in_moleculeamount11718_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11718 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_quantity_in_moleculeamount11721_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11721 = new BitSet(new long[]{0x810021C000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_inof_in_moleculeamount11723_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11723 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x00000000038CE824L});

    }static class FOLLOW_dtTHE_in_moleculeamount11729_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11729 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_dt_in_moleculeamount11733_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11733 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11737_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11737 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11740_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21749_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21749 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_mixture_in_moleculeamount21751_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21751 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21755_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21755 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21758_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1766_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1766 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1768_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1768 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1770_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1773_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1773 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1775_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1775 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_mixture_in_afterCompoundCitationOrQuantity1778_static {
    public static final BitSet FOLLOW_mixture_in_afterCompoundCitationOrQuantity1778 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1789_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1806_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescriptionStart_in_unnamedmoleculeDescription1806 = new BitSet(new long[]{0x0000804000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1808_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_unnamedmoleculeDescription1808 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmoleculeDescription1810_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmoleculeDescription1810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1820_static {
    public static final BitSet FOLLOW_quantityOf_in_unnamedmoleculeDescriptionStart1820 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1823_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_unnamedmoleculeDescriptionStart1823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1827_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1831_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_unnamedmoleculeDescriptionStart1837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_unnamedmoleculeDescriptionStart1841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_quantityOf1850_static {
    public static final BitSet FOLLOW_quantity_in_quantityOf1850 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000200L,0x00000000000CC004L});

    }static class FOLLOW_inof_in_quantityOf1853_static {
    public static final BitSet FOLLOW_inof_in_quantityOf1853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000084000L});

    }static class FOLLOW_dtTHE_in_quantityOf1857_static {
    public static final BitSet FOLLOW_dtTHE_in_quantityOf1857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_quantityOf1861_static {
    public static final BitSet FOLLOW_dt_in_quantityOf1861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11872_static {
    public static final BitSet FOLLOW_potentialUnnamedMolecule_in_potentialUnnamedMoleculeAmount11872 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11874_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount11874 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11877_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount11877 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11880_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount11880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21891_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMoleculeAmount21891 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21894_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21894 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21898_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21898 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21904_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMoleculeAmount21904 = new BitSet(new long[]{0x0900804000000000L,0x2000000000000200L,0x000000000004A806L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21907_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMoleculeAmount21907 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21911_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21911 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21915_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21915 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21920_static {
    public static final BitSet FOLLOW_quantity_in_potentialUnnamedMoleculeAmount21920 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21923_static {
    public static final BitSet FOLLOW_asAstate_in_potentialUnnamedMoleculeAmount21923 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21926_static {
    public static final BitSet FOLLOW_fromProcedure_in_potentialUnnamedMoleculeAmount21926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1936_static {
    public static final BitSet FOLLOW_definiteUnnamedMoleculeStructure_in_definiteUnnamedMolecule1936 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_quantity_in_definiteUnnamedMolecule1938_static {
    public static final BitSet FOLLOW_quantity_in_definiteUnnamedMolecule1938 = new BitSet(new long[]{0x0900800000000002L,0x2000000000000200L,0x0000000000048006L});

    }static class FOLLOW_asAstate_in_definiteUnnamedMolecule1941_static {
    public static final BitSet FOLLOW_asAstate_in_definiteUnnamedMolecule1941 = new BitSet(new long[]{0x0900000000000002L,0x2000000000000000L,0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_definiteUnnamedMolecule1944_static {
    public static final BitSet FOLLOW_fromProcedure_in_definiteUnnamedMolecule1944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_definiteUnnamedMoleculeStructure1954_static {
    public static final BitSet FOLLOW_adj_in_definiteUnnamedMoleculeStructure1954 = new BitSet(new long[]{0x0000618000000000L,0x0000000000000080L,0x0000000003800000L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1958_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1958 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A804L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1960_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1960 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1964_static {
    public static final BitSet FOLLOW_jjcomp_in_definiteUnnamedMoleculeStructure1964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1966_static {
    public static final BitSet FOLLOW_nnchementity_in_definiteUnnamedMoleculeStructure1966 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A804L});

    }static class FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1968_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_definiteUnnamedMoleculeStructure1968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1974_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_definiteUnnamedMoleculeStructure1974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_potentialUnnamedMolecule1983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeStructureNN_in_potentialUnnamedMolecule1987 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x000000000004A804L});

    }static class FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_potentialUnnamedMolecule1989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2002 = new BitSet(new long[]{0x8000660000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2004 = new BitSet(new long[]{0x8000660000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006_static {
    public static final BitSet FOLLOW_jjcomp_in_potentialUnnamedMoleculeStructureNN2006 = new BitSet(new long[]{0x8000660000000000L,0x0000000004080010L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011_static {
    public static final BitSet FOLLOW_nnstate_in_potentialUnnamedMoleculeStructureNN2011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_potentialUnnamedMoleculeStructureNN2013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015_static {
    public static final BitSet FOLLOW_nnexample_in_potentialUnnamedMoleculeStructureNN2015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017_static {
    public static final BitSet FOLLOW_oscaronts_in_potentialUnnamedMoleculeStructureNN2017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019_static {
    public static final BitSet FOLLOW_nnatmosphere_in_potentialUnnamedMoleculeStructureNN2019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021_static {
    public static final BitSet FOLLOW_nnmixture_in_potentialUnnamedMoleculeStructureNN2021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023_static {
    public static final BitSet FOLLOW_oscarase_in_potentialUnnamedMoleculeStructureNN2023 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029_static {
    public static final BitSet FOLLOW_jj_in_potentialUnnamedMoleculeStructureNN2029 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031_static {
    public static final BitSet FOLLOW_jjchem_in_potentialUnnamedMoleculeStructureNN2031 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000080L,0x0000000000800000L});

    }static class FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035_static {
    public static final BitSet FOLLOW_nnchementity_in_potentialUnnamedMoleculeStructureNN2035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_numericReferenceOrQuantity2045_static {
    public static final BitSet FOLLOW_quantity_in_numericReferenceOrQuantity2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_numericReferenceOrQuantity2051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_asAstate2060_static {
    public static final BitSet FOLLOW_inas_in_asAstate2060 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate2062_static {
    public static final BitSet FOLLOW_dt_in_asAstate2062 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate2066_static {
    public static final BitSet FOLLOW_jj_in_asAstate2066 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate2068_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate2068 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate2072_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate2072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_asAstate2074_static {
    public static final BitSet FOLLOW_quantity_in_asAstate2074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference2086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference2088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090_static {
    public static final BitSet FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference2090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference2092 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numberCompoundReference2128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numberCompoundReference2132_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference2132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161_static {
    public static final BitSet FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2161 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference2187_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference2187 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_squareBracketedReference2189_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference2189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference2191_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference2191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2202_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2202 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2204_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2204 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2213_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2213 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12233_static {
    public static final BitSet FOLLOW_lrb_in_quantity12233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12235_static {
    public static final BitSet FOLLOW_measurements_in_quantity12235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12238_static {
    public static final BitSet FOLLOW_comma_in_quantity12238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12241_static {
    public static final BitSet FOLLOW_measurements_in_quantity12241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12246_static {
    public static final BitSet FOLLOW_comma_in_quantity12246 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12248_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12253_static {
    public static final BitSet FOLLOW_stop_in_quantity12253 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12255_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12260_static {
    public static final BitSet FOLLOW_rrb_in_quantity12260 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2268_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22289_static {
    public static final BitSet FOLLOW_measurements_in_quantity22289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22292_static {
    public static final BitSet FOLLOW_comma_in_quantity22292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity22295_static {
    public static final BitSet FOLLOW_measurements_in_quantity22295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2308_static {
    public static final BitSet FOLLOW_cd_in_measurements2308 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_nn_in_measurements2310_static {
    public static final BitSet FOLLOW_nn_in_measurements2310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_multiple_in_measurements2315_static {
    public static final BitSet FOLLOW_multiple_in_measurements2315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2317_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2320_static {
    public static final BitSet FOLLOW_dt_in_measurements2320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2328_static {
    public static final BitSet FOLLOW_cd_in_multiple2328 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2330_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurementtypes_in_multiple2332_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2357_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2359_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2361_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2363_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2365_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2367_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2369_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2371_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2379_static {
    public static final BitSet FOLLOW_cd_in_molar2379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});

    }static class FOLLOW_nnmolar_in_molar2381_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2381 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2401_static {
    public static final BitSet FOLLOW_cd_in_amount2401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnamount_in_amount2403_static {
    public static final BitSet FOLLOW_nnamount_in_amount2403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2423_static {
    public static final BitSet FOLLOW_cd_in_mass2423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});

    }static class FOLLOW_nnmass_in_mass2425_static {
    public static final BitSet FOLLOW_nnmass_in_mass2425 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2444_static {
    public static final BitSet FOLLOW_cd_in_volume2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});

    }static class FOLLOW_nnvol_in_volume2446_static {
    public static final BitSet FOLLOW_nnvol_in_volume2446 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2466_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2468_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2471_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2491_static {
    public static final BitSet FOLLOW_cd_in_equivalent2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_nneq_in_equivalent2493_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2510_static {
    public static final BitSet FOLLOW_yield1_in_yield2510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2521_static {
    public static final BitSet FOLLOW_yield2_in_yield2521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12535_static {
    public static final BitSet FOLLOW_nnyield_in_yield12535 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_inof_in_yield12538_static {
    public static final BitSet FOLLOW_inof_in_yield12538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_colon_in_yield12540_static {
    public static final BitSet FOLLOW_colon_in_yield12540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_percent_in_yield12543_static {
    public static final BitSet FOLLOW_percent_in_yield12543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22549_static {
    public static final BitSet FOLLOW_percent_in_yield22549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield22551_static {
    public static final BitSet FOLLOW_nnyield_in_yield22551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_percent2559_static {
    public static final BitSet FOLLOW_cd_in_percent2559 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x000000001384AC24L});

    }static class FOLLOW_nn_in_percent2561_static {
    public static final BitSet FOLLOW_nn_in_percent2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_percent2564_static {
    public static final BitSet FOLLOW_percentsign_in_percent2564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_percent2568_static {
    public static final BitSet FOLLOW_dash_in_percent2568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_percent2570_static {
    public static final BitSet FOLLOW_cd_in_percent2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_percent2572_static {
    public static final BitSet FOLLOW_percentsign_in_percent2572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_mixture2605_static {
    public static final BitSet FOLLOW_ratio_in_mixture2605 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x000000000004A824L});

    }static class FOLLOW_mixtureStructure1_in_mixture2610_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2612_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2612 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure3_in_mixture2614_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure4_in_mixture2616_static {
    public static final BitSet FOLLOW_mixtureStructure4_in_mixture2616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12644_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040400L});

    }static class FOLLOW_percentsign_in_mixtureStructure12647_static {
    public static final BitSet FOLLOW_percentsign_in_mixtureStructure12647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_ratio_in_mixtureStructure12649_static {
    public static final BitSet FOLLOW_ratio_in_mixtureStructure12649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure12652_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12652 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22658_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_mixtureStructure22660_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22660 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22662_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure22664_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureStructure22666_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22666 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32672_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32672 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure32674_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure32674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure32676_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_mixtureStructure42682_static {
    public static final BitSet FOLLOW_lsqb_in_mixtureStructure42682 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure42684_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure42684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_mixtureStructure42686_static {
    public static final BitSet FOLLOW_rsqb_in_mixtureStructure42686 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_mixtureContent2696_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2696 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2698_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2698 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2700_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2700 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2702_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2702 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_numberCompoundReference_in_mixtureContent2704_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_mixtureContent2704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureContent2706_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2706 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_md_in_mixtureContent2708_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2708 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_percentsign_in_mixtureContent2710_static {
    public static final BitSet FOLLOW_percentsign_in_mixtureContent2710 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2712_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2712 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2714_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2714 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2716_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2716 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2718_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2718 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2720_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2720 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2722_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2722 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2724_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2724 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2726_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2726 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2730_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2730 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2732_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2732 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2734_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2734 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2736_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_mixtureContent2736 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_md_in_mixtureContent2738_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2738 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_percentsign_in_mixtureContent2740_static {
    public static final BitSet FOLLOW_percentsign_in_mixtureContent2740 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2742_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2742 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2744_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2744 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2746_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2746 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_conjunction_in_mixtureContent2748_static {
    public static final BitSet FOLLOW_conjunction_in_mixtureContent2748 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2750_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2750 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2752_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2752 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2754_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2754 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2756_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2756 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEAF3FL});

    }static class FOLLOW_infrom_in_fromProcedure2767_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2767 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_inof_in_fromProcedure2773_static {
    public static final BitSet FOLLOW_inof_in_fromProcedure2773 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_vbyield_in_fromProcedure2780_static {
    public static final BitSet FOLLOW_vbyield_in_fromProcedure2780 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_vbsynthesize_in_fromProcedure2782_static {
    public static final BitSet FOLLOW_vbsynthesize_in_fromProcedure2782 = new BitSet(new long[]{0x0844000000000000L});

    }static class FOLLOW_inin_in_fromProcedure2786_static {
    public static final BitSet FOLLOW_inin_in_fromProcedure2786 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_inby_in_fromProcedure2788_static {
    public static final BitSet FOLLOW_inby_in_fromProcedure2788 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_infrom_in_fromProcedure2790_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2790 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x000000001384A824L});

    }static class FOLLOW_procedureNode_in_fromProcedure2794_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2801_static {
    public static final BitSet FOLLOW_method_in_procedureNode2801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2822_static {
    public static final BitSet FOLLOW_nngeneral_in_method2822 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x000000001384A824L});

    }static class FOLLOW_nn_in_method2824_static {
    public static final BitSet FOLLOW_nn_in_method2824 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x000000001384A824L});

    }static class FOLLOW_nnmethod_in_method2828_static {
    public static final BitSet FOLLOW_nnmethod_in_method2828 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2831_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2831 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_numeric_in_method2833_static {
    public static final BitSet FOLLOW_numeric_in_method2833 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_nnexample_in_method2839_static {
    public static final BitSet FOLLOW_nnexample_in_method2839 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2842_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2842 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_numeric_in_method2844_static {
    public static final BitSet FOLLOW_numeric_in_method2844 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_comma_in_method2851_static {
    public static final BitSet FOLLOW_comma_in_method2851 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_colon_in_method2854_static {
    public static final BitSet FOLLOW_colon_in_method2854 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_inof_in_method2857_static {
    public static final BitSet FOLLOW_inof_in_method2857 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_infrom_in_method2861_static {
    public static final BitSet FOLLOW_infrom_in_method2861 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_method2865_static {
    public static final BitSet FOLLOW_submethod_in_method2865 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_lrb_in_method2869_static {
    public static final BitSet FOLLOW_lrb_in_method2869 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_method2871_static {
    public static final BitSet FOLLOW_submethod_in_method2871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_method2873_static {
    public static final BitSet FOLLOW_rrb_in_method2873 = new BitSet(new long[]{0x890021C000000002L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_nnmethod_in_submethod2884_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod2884 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_nnexample_in_submethod2886_static {
    public static final BitSet FOLLOW_nnexample_in_submethod2886 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_submethod2890_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_submethod2890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_submethod2892_static {
    public static final BitSet FOLLOW_numeric_in_submethod2892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2902_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2902 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2905_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_referenceToExampleCompound2907_static {
    public static final BitSet FOLLOW_numeric_in_referenceToExampleCompound2907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2930_static {
    public static final BitSet FOLLOW_adv_in_advAdj2930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2932_static {
    public static final BitSet FOLLOW_adj_in_advAdj2932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2939_static {
    public static final BitSet FOLLOW_numeric_in_range2939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2941_static {
    public static final BitSet FOLLOW_dash_in_range2941 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_range2943_static {
    public static final BitSet FOLLOW_numeric_in_range2943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2950_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2967_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2967 = new BitSet(new long[]{0x800021C000000000L,0x0000000002122280L,0x000000001384A824L});

    }static class FOLLOW_dashNN_in_cycleStructure2969_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure2972_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2980_static {
    public static final BitSet FOLLOW_adj_in_dashNN2980 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2982_static {
    public static final BitSet FOLLOW_nn_in_dashNN2982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2984_static {
    public static final BitSet FOLLOW_cd_in_dashNN2984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN2988_static {
    public static final BitSet FOLLOW_dash_in_dashNN2988 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x000000001384A824L});

    }static class FOLLOW_adj_in_dashNN2991_static {
    public static final BitSet FOLLOW_adj_in_dashNN2991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2993_static {
    public static final BitSet FOLLOW_nn_in_dashNN2993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2995_static {
    public static final BitSet FOLLOW_cd_in_dashNN2995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_lrb_in_ratioOrBracketedRatio3006_static {
    public static final BitSet FOLLOW_lrb_in_ratioOrBracketedRatio3006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3008_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_ratioOrBracketedRatio3010_static {
    public static final BitSet FOLLOW_rrb_in_ratioOrBracketedRatio3010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_ratioOrBracketedRatio3014_static {
    public static final BitSet FOLLOW_ratio_in_ratioOrBracketedRatio3014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_ratio3021_static {
    public static final BitSet FOLLOW_cdRatio_in_ratio3021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio3036_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_cdRatio3039_static {
    public static final BitSet FOLLOW_colon_in_cdRatio3039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_cdRatio3041_static {
    public static final BitSet FOLLOW_cd_in_cdRatio3041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation3051_static {
    public static final BitSet FOLLOW_citationStructure_in_citation3051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation3053_static {
    public static final BitSet FOLLOW_comma_in_citation3053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation3055_static {
    public static final BitSet FOLLOW_citationContent_in_citation3055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation3057_static {
    public static final BitSet FOLLOW_comma_in_citation3057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure3065_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure3065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent3081_static {
    public static final BitSet FOLLOW_lrb_in_citationContent3081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3084_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent3086_static {
    public static final BitSet FOLLOW_fw_in_citationContent3086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent3088_static {
    public static final BitSet FOLLOW_cd_in_citationContent3088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent3090_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent3094_static {
    public static final BitSet FOLLOW_nnp_in_citationContent3094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent3096_static {
    public static final BitSet FOLLOW_fw_in_citationContent3096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent3098_static {
    public static final BitSet FOLLOW_cd_in_citationContent3098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent3100_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent3100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent3104_static {
    public static final BitSet FOLLOW_rrb_in_citationContent3104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric3114_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric3114 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3118_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric3118 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3126_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3126 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_numeric_in_bracketedNumeric3128_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3130_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3137_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3140_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3144_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3144 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3152_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier3154_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3157_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3159_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3167_static {
    public static final BitSet FOLLOW_jj_in_adj3167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3169_static {
    public static final BitSet FOLLOW_jjr_in_adj3169 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3171_static {
    public static final BitSet FOLLOW_jjs_in_adj3171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3173_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3173 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3175_static {
    public static final BitSet FOLLOW_jjchem_in_adj3175 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3177_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3177 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3184_static {
    public static final BitSet FOLLOW_rb_in_adv3184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3186_static {
    public static final BitSet FOLLOW_rbr_in_adv3186 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3188_static {
    public static final BitSet FOLLOW_rp_in_adv3188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3190_static {
    public static final BitSet FOLLOW_rbs_in_adv3190 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3197_static {
    public static final BitSet FOLLOW_wdt_in_clause3197 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3199_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3201_static {
    public static final BitSet FOLLOW_wrb_in_clause3201 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3203_static {
    public static final BitSet FOLLOW_ex_in_clause3203 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3205_static {
    public static final BitSet FOLLOW_pdt_in_clause3205 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3207_static {
    public static final BitSet FOLLOW_wp_in_clause3207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3214_static {
    public static final BitSet FOLLOW_cc_in_conjunction3214 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3216_static {
    public static final BitSet FOLLOW_comma_in_conjunction3216 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3223_static {
    public static final BitSet FOLLOW_in_in_inAll3223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3225_static {
    public static final BitSet FOLLOW_inafter_in_inAll3225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3227_static {
    public static final BitSet FOLLOW_inas_in_inAll3227 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3229_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3229 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3231_static {
    public static final BitSet FOLLOW_inby_in_inAll3231 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3233_static {
    public static final BitSet FOLLOW_infor_in_inAll3233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3235_static {
    public static final BitSet FOLLOW_infrom_in_inAll3235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3237_static {
    public static final BitSet FOLLOW_inin_in_inAll3237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3239_static {
    public static final BitSet FOLLOW_ininto_in_inAll3239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3241_static {
    public static final BitSet FOLLOW_inof_in_inAll3241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3243_static {
    public static final BitSet FOLLOW_inoff_in_inAll3243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3245_static {
    public static final BitSet FOLLOW_inon_in_inAll3245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3247_static {
    public static final BitSet FOLLOW_inover_in_inAll3247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3249_static {
    public static final BitSet FOLLOW_inunder_in_inAll3249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3251_static {
    public static final BitSet FOLLOW_invia_in_inAll3251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3253_static {
    public static final BitSet FOLLOW_inwith_in_inAll3253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3255_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3257_static {
    public static final BitSet FOLLOW_to_in_inAll3257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3264_static {
    public static final BitSet FOLLOW_in_in_inMost3264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3266_static {
    public static final BitSet FOLLOW_inas_in_inMost3266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3268_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3270_static {
    public static final BitSet FOLLOW_inby_in_inMost3270 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3272_static {
    public static final BitSet FOLLOW_infor_in_inMost3272 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3274_static {
    public static final BitSet FOLLOW_infrom_in_inMost3274 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3276_static {
    public static final BitSet FOLLOW_inin_in_inMost3276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3278_static {
    public static final BitSet FOLLOW_ininto_in_inMost3278 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3280_static {
    public static final BitSet FOLLOW_inof_in_inMost3280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3282_static {
    public static final BitSet FOLLOW_inoff_in_inMost3282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3284_static {
    public static final BitSet FOLLOW_inon_in_inMost3284 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3286_static {
    public static final BitSet FOLLOW_inover_in_inMost3286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3288_static {
    public static final BitSet FOLLOW_inunder_in_inMost3288 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3290_static {
    public static final BitSet FOLLOW_invia_in_inMost3290 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3292_static {
    public static final BitSet FOLLOW_inwith_in_inMost3292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3294_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3296_static {
    public static final BitSet FOLLOW_to_in_inMost3296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3303_static {
    public static final BitSet FOLLOW_cd_in_numeric3303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3305_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum3313_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum3313 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3315_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3315 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj3328_static {
    public static final BitSet FOLLOW_39_in_oscarcj3328 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3330_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn3343_static {
    public static final BitSet FOLLOW_40_in_oscarrn3343 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3345_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3345 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase3358_static {
    public static final BitSet FOLLOW_41_in_oscarase3358 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3360_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront3373_static {
    public static final BitSet FOLLOW_42_in_oscaront3373 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront3375_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3388_static {
    public static final BitSet FOLLOW_43_in_tmunicode3388 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3390_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3403_static {
    public static final BitSet FOLLOW_44_in_cdunicode3403 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3405_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3418_static {
    public static final BitSet FOLLOW_45_in_jjchem3418 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3420_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3433_static {
    public static final BitSet FOLLOW_46_in_jjcomp3433 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3435_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3449_static {
    public static final BitSet FOLLOW_47_in_inas3449 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3451_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3464_static {
    public static final BitSet FOLLOW_48_in_inbefore3464 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3466_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3479_static {
    public static final BitSet FOLLOW_49_in_inafter3479 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3481_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3494_static {
    public static final BitSet FOLLOW_50_in_inin3494 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3496_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3509_static {
    public static final BitSet FOLLOW_51_in_ininto3509 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3511_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3524_static {
    public static final BitSet FOLLOW_52_in_inwith3524 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3526_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3539_static {
    public static final BitSet FOLLOW_53_in_inwithout3539 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3541_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3554_static {
    public static final BitSet FOLLOW_54_in_inby3554 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3556_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3569_static {
    public static final BitSet FOLLOW_55_in_invia3569 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3571_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3571 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3584_static {
    public static final BitSet FOLLOW_56_in_inof3584 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3586_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3586 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3599_static {
    public static final BitSet FOLLOW_57_in_inon3599 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3601_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3614_static {
    public static final BitSet FOLLOW_58_in_infor3614 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3616_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3629_static {
    public static final BitSet FOLLOW_59_in_infrom3629 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3631_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3644_static {
    public static final BitSet FOLLOW_60_in_inunder3644 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3646_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3646 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3659_static {
    public static final BitSet FOLLOW_61_in_inover3659 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3661_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3674_static {
    public static final BitSet FOLLOW_62_in_inoff3674 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3676_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3691_static {
    public static final BitSet FOLLOW_63_in_nnstate3691 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3693_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3706_static {
    public static final BitSet FOLLOW_64_in_nntime3706 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3708_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3708 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3721_static {
    public static final BitSet FOLLOW_65_in_nnmass3721 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3723_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3723 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3736_static {
    public static final BitSet FOLLOW_66_in_nnamount3736 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3738_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3751_static {
    public static final BitSet FOLLOW_67_in_nnmolar3751 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3753_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3766_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3766 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3768_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3781_static {
    public static final BitSet FOLLOW_69_in_nneq3781 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3783_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3796_static {
    public static final BitSet FOLLOW_70_in_nnvol3796 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3798_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3798 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3811_static {
    public static final BitSet FOLLOW_71_in_nnchementity3811 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3813_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3826_static {
    public static final BitSet FOLLOW_72_in_nntemp3826 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3828_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3828 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3841_static {
    public static final BitSet FOLLOW_73_in_nnph3841 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3843_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3856_static {
    public static final BitSet FOLLOW_74_in_nnflash3856 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3858_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3871_static {
    public static final BitSet FOLLOW_75_in_nngeneral3871 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3873_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3886_static {
    public static final BitSet FOLLOW_76_in_nnmethod3886 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3888_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3901_static {
    public static final BitSet FOLLOW_77_in_nnpressure3901 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3903_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3916_static {
    public static final BitSet FOLLOW_78_in_nncolumn3916 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3918_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography3931_static {
    public static final BitSet FOLLOW_79_in_nnchromatography3931 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3933_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum3946_static {
    public static final BitSet FOLLOW_80_in_nnvacuum3946 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3948_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle3961_static {
    public static final BitSet FOLLOW_81_in_nncycle3961 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3963_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes3976_static {
    public static final BitSet FOLLOW_82_in_nntimes3976 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes3978_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample3991_static {
    public static final BitSet FOLLOW_83_in_nnexample3991 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample3993_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm4008_static {
    public static final BitSet FOLLOW_84_in_oscarcm4008 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm4010_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm4010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse4025_static {
    public static final BitSet FOLLOW_85_in_vbuse4025 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse4027_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse4027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange4040_static {
    public static final BitSet FOLLOW_86_in_vbchange4040 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange4042_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange4042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge4055_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge4055 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge4057_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge4057 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject4070_static {
    public static final BitSet FOLLOW_88_in_vbsubject4070 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject4072_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject4072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd4087_static {
    public static final BitSet FOLLOW_89_in_nnadd4087 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd4089_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd4089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture4102_static {
    public static final BitSet FOLLOW_90_in_nnmixture4102 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture4104_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture4104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute4117_static {
    public static final BitSet FOLLOW_91_in_vbdilute4117 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute4119_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute4119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd4132_static {
    public static final BitSet FOLLOW_92_in_vbadd4132 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4134_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4134 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge4147_static {
    public static final BitSet FOLLOW_93_in_vbcharge4147 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4149_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain4162_static {
    public static final BitSet FOLLOW_94_in_vbcontain4162 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4164_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4164 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop4177_static {
    public static final BitSet FOLLOW_95_in_vbdrop4177 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4179_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4179 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill4192_static {
    public static final BitSet FOLLOW_96_in_vbfill4192 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4194_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4194 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend4207_static {
    public static final BitSet FOLLOW_97_in_vbsuspend4207 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4209_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4209 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat4222_static {
    public static final BitSet FOLLOW_98_in_vbtreat4222 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4224_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4224 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus4239_static {
    public static final BitSet FOLLOW_99_in_vbapparatus4239 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4241_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus4254_static {
    public static final BitSet FOLLOW_100_in_nnapparatus4254 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4256_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4256 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4271_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4271 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4273_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4286_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4286 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4288_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4288 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4303_static {
    public static final BitSet FOLLOW_103_in_vbcool4303 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4305_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4305 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4320_static {
    public static final BitSet FOLLOW_104_in_vbdegass4320 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4322_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4337_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4337 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4339_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4354_static {
    public static final BitSet FOLLOW_106_in_vbdry4354 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4356_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4369_static {
    public static final BitSet FOLLOW_107_in_nndry4369 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4371_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4386_static {
    public static final BitSet FOLLOW_108_in_vbextract4386 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4388_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4401_static {
    public static final BitSet FOLLOW_109_in_nnextract4401 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4403_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4418_static {
    public static final BitSet FOLLOW_110_in_vbfilter4418 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4420_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4433_static {
    public static final BitSet FOLLOW_111_in_nnfilter4433 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4435_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4450_static {
    public static final BitSet FOLLOW_112_in_vbheat4450 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4452_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4465_static {
    public static final BitSet FOLLOW_113_in_vbincrease4465 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4467_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4482_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4482 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4484_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4499_static {
    public static final BitSet FOLLOW_115_in_vbpartition4499 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4501_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4516_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4516 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4518_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4531_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4531 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4533_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4548_static {
    public static final BitSet FOLLOW_118_in_vbpurify4548 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4550_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4550 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4563_static {
    public static final BitSet FOLLOW_119_in_nnpurify4563 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4565_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4565 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4580_static {
    public static final BitSet FOLLOW_120_in_vbquench4580 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4582_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4597_static {
    public static final BitSet FOLLOW_121_in_vbrecover4597 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4599_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4614_static {
    public static final BitSet FOLLOW_122_in_vbremove4614 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4616_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4629_static {
    public static final BitSet FOLLOW_123_in_nnremove4629 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4631_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4646_static {
    public static final BitSet FOLLOW_124_in_vbstir4646 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4648_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4663_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4663 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4665_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4678_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4678 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4680_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4680 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4695_static {
    public static final BitSet FOLLOW_127_in_vbwait4695 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4697_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4712_static {
    public static final BitSet FOLLOW_128_in_vbwash4712 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4714_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4714 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4729_static {
    public static final BitSet FOLLOW_129_in_vbyield4729 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4731_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4746_static {
    public static final BitSet FOLLOW_130_in_nnyield4746 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4748_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4764_static {
    public static final BitSet FOLLOW_131_in_rbconj4764 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4766_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4779_static {
    public static final BitSet FOLLOW_132_in_colon4779 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4781_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4794_static {
    public static final BitSet FOLLOW_133_in_comma4794 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4796_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4809_static {
    public static final BitSet FOLLOW_134_in_apost4809 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4811_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4811 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4824_static {
    public static final BitSet FOLLOW_135_in_neg4824 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4826_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4839_static {
    public static final BitSet FOLLOW_136_in_dash4839 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4841_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4841 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4854_static {
    public static final BitSet FOLLOW_137_in_stop4854 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4856_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_percentsign4869_static {
    public static final BitSet FOLLOW_138_in_percentsign4869 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_percentsign4871_static {
    public static final BitSet FOLLOW_TOKEN_in_percentsign4871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4884_static {
    public static final BitSet FOLLOW_139_in_lsqb4884 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4886_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4899_static {
    public static final BitSet FOLLOW_140_in_rsqb4899 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4901_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier4915_static {
    public static final BitSet FOLLOW_141_in_nnidentifier4915 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4917_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE4932_static {
    public static final BitSet FOLLOW_142_in_dtTHE4932 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4934_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb4948_static {
    public static final BitSet FOLLOW_143_in_lrb4948 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb4950_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb4963_static {
    public static final BitSet FOLLOW_144_in_rrb4963 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb4965_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc4982_static {
    public static final BitSet FOLLOW_145_in_cc4982 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc4984_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd4999_static {
    public static final BitSet FOLLOW_146_in_cd4999 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd5001_static {
    public static final BitSet FOLLOW_TOKEN_in_cd5001 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt5016_static {
    public static final BitSet FOLLOW_147_in_dt5016 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt5018_static {
    public static final BitSet FOLLOW_TOKEN_in_dt5018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex5033_static {
    public static final BitSet FOLLOW_148_in_ex5033 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex5035_static {
    public static final BitSet FOLLOW_TOKEN_in_ex5035 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw5050_static {
    public static final BitSet FOLLOW_149_in_fw5050 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw5052_static {
    public static final BitSet FOLLOW_TOKEN_in_fw5052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in5067_static {
    public static final BitSet FOLLOW_150_in_in5067 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in5069_static {
    public static final BitSet FOLLOW_TOKEN_in_in5069 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj5084_static {
    public static final BitSet FOLLOW_151_in_jj5084 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj5086_static {
    public static final BitSet FOLLOW_TOKEN_in_jj5086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr5101_static {
    public static final BitSet FOLLOW_152_in_jjr5101 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr5103_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr5103 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs5118_static {
    public static final BitSet FOLLOW_153_in_jjs5118 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs5120_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs5120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls5135_static {
    public static final BitSet FOLLOW_154_in_ls5135 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls5137_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md5152_static {
    public static final BitSet FOLLOW_155_in_md5152 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md5154_static {
    public static final BitSet FOLLOW_TOKEN_in_md5154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn5169_static {
    public static final BitSet FOLLOW_156_in_nn5169 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn5171_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns5186_static {
    public static final BitSet FOLLOW_157_in_nns5186 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns5188_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp5203_static {
    public static final BitSet FOLLOW_158_in_nnp5203 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp5205_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5205 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps5220_static {
    public static final BitSet FOLLOW_159_in_nnps5220 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps5222_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt5237_static {
    public static final BitSet FOLLOW_160_in_pdt5237 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt5239_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos5254_static {
    public static final BitSet FOLLOW_161_in_pos5254 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos5256_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5256 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5271_static {
    public static final BitSet FOLLOW_162_in_prp5271 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5273_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5288_static {
    public static final BitSet FOLLOW_163_in_prp_poss5288 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5290_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5290 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5305_static {
    public static final BitSet FOLLOW_164_in_rb5305 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5307_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5307 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5322_static {
    public static final BitSet FOLLOW_165_in_rbr5322 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5324_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5339_static {
    public static final BitSet FOLLOW_166_in_rbs5339 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5341_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5341 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5356_static {
    public static final BitSet FOLLOW_167_in_rp5356 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5358_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5373_static {
    public static final BitSet FOLLOW_168_in_sym5373 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5375_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5375 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5390_static {
    public static final BitSet FOLLOW_169_in_to5390 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5392_static {
    public static final BitSet FOLLOW_TOKEN_in_to5392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5407_static {
    public static final BitSet FOLLOW_170_in_uh5407 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5409_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5424_static {
    public static final BitSet FOLLOW_171_in_vb5424 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5426_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5441_static {
    public static final BitSet FOLLOW_172_in_vbd5441 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5443_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5458_static {
    public static final BitSet FOLLOW_173_in_vbg5458 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5460_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5475_static {
    public static final BitSet FOLLOW_174_in_vbn5475 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5477_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5492_static {
    public static final BitSet FOLLOW_175_in_vbp5492 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5494_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5509_static {
    public static final BitSet FOLLOW_176_in_vbz5509 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5511_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5511 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5526_static {
    public static final BitSet FOLLOW_177_in_wdt5526 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5528_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5543_static {
    public static final BitSet FOLLOW_178_in_wp5543 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5545_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5560_static {
    public static final BitSet FOLLOW_179_in_wp_poss5560 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5562_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5562 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5577_static {
    public static final BitSet FOLLOW_180_in_wrb5577 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5579_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5579 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker221_static {
    public static final BitSet FOLLOW_procedureNounPhrase_in_synpred2_ChemicalChunker221 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker226_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred3_ChemicalChunker226 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker228_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred4_ChemicalChunker228 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred6_ChemicalChunker242_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker242 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred7_ChemicalChunker244_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker244 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred8_ChemicalChunker246_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker246 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker248_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred9_ChemicalChunker248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred10_ChemicalChunker253_static {
    public static final BitSet FOLLOW_advAdj_in_synpred10_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred11_ChemicalChunker255_static {
    public static final BitSet FOLLOW_colon_in_synpred11_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred12_ChemicalChunker260_static {
    public static final BitSet FOLLOW_conjunction_in_synpred12_ChemicalChunker260 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred13_ChemicalChunker262_static {
    public static final BitSet FOLLOW_rbconj_in_synpred13_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred14_ChemicalChunker264_static {
    public static final BitSet FOLLOW_comma_in_synpred14_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker481_static {
    public static final BitSet FOLLOW_headingProcedureTerminators_in_synpred86_ChemicalChunker481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker582_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred92_ChemicalChunker582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred94_ChemicalChunker613_static {
    public static final BitSet FOLLOW_dt_in_synpred94_ChemicalChunker613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred95_ChemicalChunker620_static {
    public static final BitSet FOLLOW_conjunction_in_synpred95_ChemicalChunker620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred96_ChemicalChunker620_static {
    public static final BitSet FOLLOW_conjunction_in_synpred96_ChemicalChunker620 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker623_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred96_ChemicalChunker623 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker628_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred97_ChemicalChunker628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker631_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred98_ChemicalChunker631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred99_ChemicalChunker643_static {
    public static final BitSet FOLLOW_advAdj_in_synpred99_ChemicalChunker643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker648_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker650_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred101_ChemicalChunker650 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred102_ChemicalChunker652_static {
    public static final BitSet FOLLOW_noun_in_synpred102_ChemicalChunker652 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred103_ChemicalChunker654_static {
    public static final BitSet FOLLOW_numeric_in_synpred103_ChemicalChunker654 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker666_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred104_ChemicalChunker666 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred105_ChemicalChunker697_static {
    public static final BitSet FOLLOW_adj_in_synpred105_ChemicalChunker697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred108_ChemicalChunker709_static {
    public static final BitSet FOLLOW_molecule_in_synpred108_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred109_ChemicalChunker718_static {
    public static final BitSet FOLLOW_conjunction_in_synpred109_ChemicalChunker718 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000000384A824L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker720_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred111_ChemicalChunker737_static {
    public static final BitSet FOLLOW_adj_in_synpred111_ChemicalChunker737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred113_ChemicalChunker744_static {
    public static final BitSet FOLLOW_molecule_in_synpred113_ChemicalChunker744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred115_ChemicalChunker777_static {
    public static final BitSet FOLLOW_to_in_synpred115_ChemicalChunker777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred116_ChemicalChunker780_static {
    public static final BitSet FOLLOW_inAll_in_synpred116_ChemicalChunker780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred122_ChemicalChunker799_static {
    public static final BitSet FOLLOW_verb_in_synpred122_ChemicalChunker799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred123_ChemicalChunker802_static {
    public static final BitSet FOLLOW_md_in_synpred123_ChemicalChunker802 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred124_ChemicalChunker805_static {
    public static final BitSet FOLLOW_adv_in_synpred124_ChemicalChunker805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred125_ChemicalChunker808_static {
    public static final BitSet FOLLOW_adj_in_synpred125_ChemicalChunker808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred126_ChemicalChunker811_static {
    public static final BitSet FOLLOW_neg_in_synpred126_ChemicalChunker811 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred127_ChemicalChunker787_static {
    public static final BitSet FOLLOW_md_in_synpred127_ChemicalChunker787 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_synpred127_ChemicalChunker790_static {
    public static final BitSet FOLLOW_rbconj_in_synpred127_ChemicalChunker790 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_synpred127_ChemicalChunker793_static {
    public static final BitSet FOLLOW_adv_in_synpred127_ChemicalChunker793 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_synpred127_ChemicalChunker796_static {
    public static final BitSet FOLLOW_adj_in_synpred127_ChemicalChunker796 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_synpred127_ChemicalChunker799_static {
    public static final BitSet FOLLOW_verb_in_synpred127_ChemicalChunker799 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0001FAF00BC8008BL});

    }static class FOLLOW_md_in_synpred127_ChemicalChunker802_static {
    public static final BitSet FOLLOW_md_in_synpred127_ChemicalChunker802 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_synpred127_ChemicalChunker805_static {
    public static final BitSet FOLLOW_adv_in_synpred127_ChemicalChunker805 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_synpred127_ChemicalChunker808_static {
    public static final BitSet FOLLOW_adj_in_synpred127_ChemicalChunker808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred127_ChemicalChunker811_static {
    public static final BitSet FOLLOW_neg_in_synpred127_ChemicalChunker811 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred128_ChemicalChunker817_static {
    public static final BitSet FOLLOW_inoff_in_synpred128_ChemicalChunker817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred131_ChemicalChunker821_static {
    public static final BitSet FOLLOW_cc_in_synpred131_ChemicalChunker821 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred131_ChemicalChunker824_static {
    public static final BitSet FOLLOW_comma_in_synpred131_ChemicalChunker824 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred131_ChemicalChunker827_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred131_ChemicalChunker827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker857_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred141_ChemicalChunker857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred154_ChemicalChunker883_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred154_ChemicalChunker883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred172_ChemicalChunker945_static {
    public static final BitSet FOLLOW_dash_in_synpred172_ChemicalChunker945 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred172_ChemicalChunker947_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred172_ChemicalChunker947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred175_ChemicalChunker962_static {
    public static final BitSet FOLLOW_citation_in_synpred175_ChemicalChunker962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred176_ChemicalChunker964_static {
    public static final BitSet FOLLOW_cycles_in_synpred176_ChemicalChunker964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred177_ChemicalChunker966_static {
    public static final BitSet FOLLOW_molecule_in_synpred177_ChemicalChunker966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred178_ChemicalChunker968_static {
    public static final BitSet FOLLOW_apparatus_in_synpred178_ChemicalChunker968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred179_ChemicalChunker970_static {
    public static final BitSet FOLLOW_mixture_in_synpred179_ChemicalChunker970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker972_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred180_ChemicalChunker972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred181_ChemicalChunker974_static {
    public static final BitSet FOLLOW_nnstate_in_synpred181_ChemicalChunker974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred182_ChemicalChunker976_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred182_ChemicalChunker976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred183_ChemicalChunker978_static {
    public static final BitSet FOLLOW_nn_in_synpred183_ChemicalChunker978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred186_ChemicalChunker984_static {
    public static final BitSet FOLLOW_nnadd_in_synpred186_ChemicalChunker984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred188_ChemicalChunker988_static {
    public static final BitSet FOLLOW_nnexample_in_synpred188_ChemicalChunker988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred189_ChemicalChunker990_static {
    public static final BitSet FOLLOW_range_in_synpred189_ChemicalChunker990 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_synpred190_ChemicalChunker992_static {
    public static final BitSet FOLLOW_oscaronts_in_synpred190_ChemicalChunker992 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker996_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred192_ChemicalChunker996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred194_ChemicalChunker1000_static {
    public static final BitSet FOLLOW_quantity_in_synpred194_ChemicalChunker1000 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred195_ChemicalChunker1002_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred195_ChemicalChunker1002 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred197_ChemicalChunker1006_static {
    public static final BitSet FOLLOW_nnph_in_synpred197_ChemicalChunker1006 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred199_ChemicalChunker1010_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred199_ChemicalChunker1010 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred202_ChemicalChunker1016_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred202_ChemicalChunker1016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_synpred212_ChemicalChunker1036_static {
    public static final BitSet FOLLOW_nnmixture_in_synpred212_ChemicalChunker1036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1038_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred213_ChemicalChunker1038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred215_ChemicalChunker1042_static {
    public static final BitSet FOLLOW_numeric_in_synpred215_ChemicalChunker1042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred220_ChemicalChunker1052_static {
    public static final BitSet FOLLOW_nnyield_in_synpred220_ChemicalChunker1052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred228_ChemicalChunker1082_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred228_ChemicalChunker1082 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred229_ChemicalChunker1084_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred229_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred230_ChemicalChunker1086_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred230_ChemicalChunker1086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred231_ChemicalChunker1088_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred231_ChemicalChunker1088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred232_ChemicalChunker1090_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred232_ChemicalChunker1090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred234_ChemicalChunker1130_static {
    public static final BitSet FOLLOW_advAdj_in_synpred234_ChemicalChunker1130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred235_ChemicalChunker1135_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred235_ChemicalChunker1135 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred236_ChemicalChunker1163_static {
    public static final BitSet FOLLOW_advAdj_in_synpred236_ChemicalChunker1163 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred241_ChemicalChunker1179_static {
    public static final BitSet FOLLOW_nntime_in_synpred241_ChemicalChunker1179 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred242_ChemicalChunker1210_static {
    public static final BitSet FOLLOW_advAdj_in_synpred242_ChemicalChunker1210 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred247_ChemicalChunker1225_static {
    public static final BitSet FOLLOW_nntemp_in_synpred247_ChemicalChunker1225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred253_ChemicalChunker1398_static {
    public static final BitSet FOLLOW_conjunction_in_synpred253_ChemicalChunker1398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred254_ChemicalChunker1398_static {
    public static final BitSet FOLLOW_conjunction_in_synpred254_ChemicalChunker1398 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138EA824L});

    }static class FOLLOW_apparatus_in_synpred254_ChemicalChunker1401_static {
    public static final BitSet FOLLOW_apparatus_in_synpred254_ChemicalChunker1401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred257_ChemicalChunker1418_static {
    public static final BitSet FOLLOW_nnApp_in_synpred257_ChemicalChunker1418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1445_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred258_ChemicalChunker1445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred259_ChemicalChunker1449_static {
    public static final BitSet FOLLOW_dash_in_synpred259_ChemicalChunker1449 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138CA824L});

    }static class FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1451_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred259_ChemicalChunker1451 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred260_ChemicalChunker1465_static {
    public static final BitSet FOLLOW_quantity_in_synpred260_ChemicalChunker1465 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred261_ChemicalChunker1467_static {
    public static final BitSet FOLLOW_adj_in_synpred261_ChemicalChunker1467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred262_ChemicalChunker1469_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred262_ChemicalChunker1469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred263_ChemicalChunker1471_static {
    public static final BitSet FOLLOW_nnadd_in_synpred263_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred264_ChemicalChunker1473_static {
    public static final BitSet FOLLOW_molecule_in_synpred264_ChemicalChunker1473 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred265_ChemicalChunker1475_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred265_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred266_ChemicalChunker1477_static {
    public static final BitSet FOLLOW_nnstate_in_synpred266_ChemicalChunker1477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred267_ChemicalChunker1479_static {
    public static final BitSet FOLLOW_nn_in_synpred267_ChemicalChunker1479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred268_ChemicalChunker1491_static {
    public static final BitSet FOLLOW_oscaront_in_synpred268_ChemicalChunker1491 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred270_ChemicalChunker1516_static {
    public static final BitSet FOLLOW_adj_in_synpred270_ChemicalChunker1516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred271_ChemicalChunker1520_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred271_ChemicalChunker1520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred272_ChemicalChunker1524_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred272_ChemicalChunker1524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred273_ChemicalChunker1529_static {
    public static final BitSet FOLLOW_quantity_in_synpred273_ChemicalChunker1529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred274_ChemicalChunker1532_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred274_ChemicalChunker1532 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred275_ChemicalChunker1543_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred275_ChemicalChunker1543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred277_ChemicalChunker1570_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred277_ChemicalChunker1570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred279_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred279_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred280_ChemicalChunker1574_static {
    public static final BitSet FOLLOW_dash_in_synpred280_ChemicalChunker1574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred280_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred280_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred281_ChemicalChunker1581_static {
    public static final BitSet FOLLOW_dash_in_synpred281_ChemicalChunker1581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred282_ChemicalChunker1574_static {
    public static final BitSet FOLLOW_dash_in_synpred282_ChemicalChunker1574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred282_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred282_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred282_ChemicalChunker1581_static {
    public static final BitSet FOLLOW_dash_in_synpred282_ChemicalChunker1581 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred285_ChemicalChunker1586_static {
    public static final BitSet FOLLOW_colon_in_synpred285_ChemicalChunker1586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred285_ChemicalChunker1588_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred285_ChemicalChunker1588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000048010L});

    }static class FOLLOW_ratioOrBracketedRatio_in_synpred285_ChemicalChunker1593_static {
    public static final BitSet FOLLOW_ratioOrBracketedRatio_in_synpred285_ChemicalChunker1593 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred286_ChemicalChunker1599_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred286_ChemicalChunker1599 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred287_ChemicalChunker1597_static {
    public static final BitSet FOLLOW_colon_in_synpred287_ChemicalChunker1597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred287_ChemicalChunker1599_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred287_ChemicalChunker1599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred288_ChemicalChunker1605_static {
    public static final BitSet FOLLOW_dash_in_synpred288_ChemicalChunker1605 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred289_ChemicalChunker1607_static {
    public static final BitSet FOLLOW_apost_in_synpred289_ChemicalChunker1607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred291_ChemicalChunker1650_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred291_ChemicalChunker1650 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred292_ChemicalChunker1653_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred292_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred293_ChemicalChunker1660_static {
    public static final BitSet FOLLOW_asAstate_in_synpred293_ChemicalChunker1660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred294_ChemicalChunker1671_static {
    public static final BitSet FOLLOW_quantity_in_synpred294_ChemicalChunker1671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred295_ChemicalChunker1673_static {
    public static final BitSet FOLLOW_mixture_in_synpred295_ChemicalChunker1673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred298_ChemicalChunker1690_static {
    public static final BitSet FOLLOW_mixture_in_synpred298_ChemicalChunker1690 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred301_ChemicalChunker1712_static {
    public static final BitSet FOLLOW_quantity_in_synpred301_ChemicalChunker1712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred302_ChemicalChunker1714_static {
    public static final BitSet FOLLOW_mixture_in_synpred302_ChemicalChunker1714 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred307_ChemicalChunker1737_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred307_ChemicalChunker1737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred308_ChemicalChunker1749_static {
    public static final BitSet FOLLOW_quantity_in_synpred308_ChemicalChunker1749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred309_ChemicalChunker1751_static {
    public static final BitSet FOLLOW_mixture_in_synpred309_ChemicalChunker1751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred310_ChemicalChunker1755_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred310_ChemicalChunker1755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred311_ChemicalChunker1766_static {
    public static final BitSet FOLLOW_citation_in_synpred311_ChemicalChunker1766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred312_ChemicalChunker1768_static {
    public static final BitSet FOLLOW_quantity_in_synpred312_ChemicalChunker1768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred314_ChemicalChunker1770_static {
    public static final BitSet FOLLOW_comma_in_synpred314_ChemicalChunker1770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred314_ChemicalChunker1773_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred314_ChemicalChunker1773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred314_ChemicalChunker1775_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred314_ChemicalChunker1775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred315_ChemicalChunker1778_static {
    public static final BitSet FOLLOW_mixture_in_synpred315_ChemicalChunker1778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred316_ChemicalChunker1810_static {
    public static final BitSet FOLLOW_asAstate_in_synpred316_ChemicalChunker1810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred317_ChemicalChunker1823_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred317_ChemicalChunker1823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1827_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred318_ChemicalChunker1827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantityOf_in_synpred319_ChemicalChunker1820_static {
    public static final BitSet FOLLOW_quantityOf_in_synpred319_ChemicalChunker1820 = new BitSet(new long[]{0x800067C000000000L,0x0000000004180290L,0x000000004384A824L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred319_ChemicalChunker1823_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount1_in_synpred319_ChemicalChunker1823 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1827_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred319_ChemicalChunker1827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_definiteUnnamedMolecule_in_synpred319_ChemicalChunker1831_static {
    public static final BitSet FOLLOW_definiteUnnamedMolecule_in_synpred319_ChemicalChunker1831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1837_static {
    public static final BitSet FOLLOW_potentialUnnamedMoleculeAmount2_in_synpred320_ChemicalChunker1837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred321_ChemicalChunker1850_static {
    public static final BitSet FOLLOW_quantity_in_synpred321_ChemicalChunker1850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred325_ChemicalChunker1874_static {
    public static final BitSet FOLLOW_quantity_in_synpred325_ChemicalChunker1874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred326_ChemicalChunker1877_static {
    public static final BitSet FOLLOW_asAstate_in_synpred326_ChemicalChunker1877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred327_ChemicalChunker1880_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred327_ChemicalChunker1880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred332_ChemicalChunker1920_static {
    public static final BitSet FOLLOW_quantity_in_synpred332_ChemicalChunker1920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred333_ChemicalChunker1923_static {
    public static final BitSet FOLLOW_asAstate_in_synpred333_ChemicalChunker1923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred334_ChemicalChunker1926_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred334_ChemicalChunker1926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred335_ChemicalChunker1938_static {
    public static final BitSet FOLLOW_quantity_in_synpred335_ChemicalChunker1938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred336_ChemicalChunker1941_static {
    public static final BitSet FOLLOW_asAstate_in_synpred336_ChemicalChunker1941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred337_ChemicalChunker1944_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred337_ChemicalChunker1944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred340_ChemicalChunker1968_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred340_ChemicalChunker1968 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericReferenceOrQuantity_in_synpred343_ChemicalChunker1989_static {
    public static final BitSet FOLLOW_numericReferenceOrQuantity_in_synpred343_ChemicalChunker1989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_synpred348_ChemicalChunker2013_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_synpred348_ChemicalChunker2013 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred349_ChemicalChunker2015_static {
    public static final BitSet FOLLOW_nnexample_in_synpred349_ChemicalChunker2015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred356_ChemicalChunker2045_static {
    public static final BitSet FOLLOW_quantity_in_synpred356_ChemicalChunker2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred360_ChemicalChunker2074_static {
    public static final BitSet FOLLOW_quantity_in_synpred360_ChemicalChunker2074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred364_ChemicalChunker2123_static {
    public static final BitSet FOLLOW_quantity_in_synpred364_ChemicalChunker2123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred366_ChemicalChunker2159_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred366_ChemicalChunker2159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred371_ChemicalChunker2292_static {
    public static final BitSet FOLLOW_comma_in_synpred371_ChemicalChunker2292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_synpred371_ChemicalChunker2295_static {
    public static final BitSet FOLLOW_measurements_in_synpred371_ChemicalChunker2295 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred374_ChemicalChunker2320_static {
    public static final BitSet FOLLOW_dt_in_synpred374_ChemicalChunker2320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred375_ChemicalChunker2332_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred375_ChemicalChunker2332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred382_ChemicalChunker2369_static {
    public static final BitSet FOLLOW_yield_in_synpred382_ChemicalChunker2369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred387_ChemicalChunker2568_static {
    public static final BitSet FOLLOW_dash_in_synpred387_ChemicalChunker2568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred387_ChemicalChunker2570_static {
    public static final BitSet FOLLOW_cd_in_synpred387_ChemicalChunker2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_percentsign_in_synpred387_ChemicalChunker2572_static {
    public static final BitSet FOLLOW_percentsign_in_synpred387_ChemicalChunker2572 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_synpred389_ChemicalChunker2610_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_synpred389_ChemicalChunker2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure3_in_synpred391_ChemicalChunker2614_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_synpred391_ChemicalChunker2614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred393_ChemicalChunker2696_static {
    public static final BitSet FOLLOW_verb_in_synpred393_ChemicalChunker2696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred394_ChemicalChunker2698_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred394_ChemicalChunker2698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred395_ChemicalChunker2700_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred395_ChemicalChunker2700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred396_ChemicalChunker2702_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred396_ChemicalChunker2702 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_synpred397_ChemicalChunker2704_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_synpred397_ChemicalChunker2704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_synpred397_ChemicalChunker2706_static {
    public static final BitSet FOLLOW_comma_in_synpred397_ChemicalChunker2706 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred402_ChemicalChunker2716_static {
    public static final BitSet FOLLOW_cd_in_synpred402_ChemicalChunker2716 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred403_ChemicalChunker2718_static {
    public static final BitSet FOLLOW_comma_in_synpred403_ChemicalChunker2718 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred404_ChemicalChunker2720_static {
    public static final BitSet FOLLOW_adj_in_synpred404_ChemicalChunker2720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred407_ChemicalChunker2730_static {
    public static final BitSet FOLLOW_verb_in_synpred407_ChemicalChunker2730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred408_ChemicalChunker2732_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred408_ChemicalChunker2732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred409_ChemicalChunker2734_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred409_ChemicalChunker2734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred410_ChemicalChunker2736_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_synpred410_ChemicalChunker2736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred415_ChemicalChunker2746_static {
    public static final BitSet FOLLOW_cd_in_synpred415_ChemicalChunker2746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred416_ChemicalChunker2748_static {
    public static final BitSet FOLLOW_conjunction_in_synpred416_ChemicalChunker2748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred417_ChemicalChunker2750_static {
    public static final BitSet FOLLOW_adj_in_synpred417_ChemicalChunker2750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred420_ChemicalChunker2756_static {
    public static final BitSet FOLLOW_noun_in_synpred420_ChemicalChunker2756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred428_ChemicalChunker2831_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred428_ChemicalChunker2831 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred429_ChemicalChunker2833_static {
    public static final BitSet FOLLOW_numeric_in_synpred429_ChemicalChunker2833 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred431_ChemicalChunker2842_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred431_ChemicalChunker2842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred436_ChemicalChunker2851_static {
    public static final BitSet FOLLOW_comma_in_synpred436_ChemicalChunker2851 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_colon_in_synpred436_ChemicalChunker2854_static {
    public static final BitSet FOLLOW_colon_in_synpred436_ChemicalChunker2854 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_inof_in_synpred436_ChemicalChunker2857_static {
    public static final BitSet FOLLOW_inof_in_synpred436_ChemicalChunker2857 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_infrom_in_synpred436_ChemicalChunker2861_static {
    public static final BitSet FOLLOW_infrom_in_synpred436_ChemicalChunker2861 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_synpred436_ChemicalChunker2865_static {
    public static final BitSet FOLLOW_submethod_in_synpred436_ChemicalChunker2865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred437_ChemicalChunker2869_static {
    public static final BitSet FOLLOW_lrb_in_synpred437_ChemicalChunker2869 = new BitSet(new long[]{0x890021C000000000L,0x0000000002183A80L,0x000000001384A834L});

    }static class FOLLOW_submethod_in_synpred437_ChemicalChunker2871_static {
    public static final BitSet FOLLOW_submethod_in_synpred437_ChemicalChunker2871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_synpred437_ChemicalChunker2873_static {
    public static final BitSet FOLLOW_rrb_in_synpred437_ChemicalChunker2873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred439_ChemicalChunker2890_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred439_ChemicalChunker2890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2905_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred449_ChemicalChunker3039_static {
    public static final BitSet FOLLOW_colon_in_synpred449_ChemicalChunker3039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred449_ChemicalChunker3041_static {
    public static final BitSet FOLLOW_cd_in_synpred449_ChemicalChunker3041 = new BitSet(new long[]{0x0000000000000002L});

    }
}