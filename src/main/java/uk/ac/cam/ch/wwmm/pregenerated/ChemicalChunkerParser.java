// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g 2010-07-22 18:01:32

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int T__71=71;
    public static final int WS=5;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int NEWLINE=6;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 101:
                case 105:
                case 106:
                case 107:
                case 108:
                case 123:
                case 128:
                case 132:
                case 133:
                case 134:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 146:
                case 148:
                case 151:
                case 163:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                case 176:
                case 177:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document208);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 34:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:34:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:10: ( ( sentence | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences230);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences232);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:44: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 103:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences240);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:51: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences242);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:9: ( ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            loop4:
            do {
                int alt4=4;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence253);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence255);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence257);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:48: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentence262);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentence264);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction )*
            loop6:
            do {
                int alt6=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_4 = input.LA(3);

                        if ( (synpred11_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 122:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentence269);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:41:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens12 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase281);
            unmatchedTokens12=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens12.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 42:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:42:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:44:1: unmatchedTokens : ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw13 = null;

        ChemicalChunkerParser.noun_return noun14 = null;

        ChemicalChunkerParser.verb_return verb15 = null;

        ChemicalChunkerParser.inAll_return inAll16 = null;

        ChemicalChunkerParser.dt_return dt17 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd18 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm19 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn20 = null;

        ChemicalChunkerParser.oscaront_return oscaront21 = null;

        ChemicalChunkerParser.brackets_return brackets22 = null;

        ChemicalChunkerParser.sym_return sym23 = null;

        ChemicalChunkerParser.colon_return colon24 = null;

        ChemicalChunkerParser.md_return md25 = null;

        ChemicalChunkerParser.neg_return neg26 = null;

        ChemicalChunkerParser.number_return number27 = null;

        ChemicalChunkerParser.comma_return comma28 = null;

        ChemicalChunkerParser.advAdj_return advAdj29 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:2: ( ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )
            int alt7=17;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens302);
                    fw13=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw13.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens304);
                    noun14=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun14.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens306);
                    verb15=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb15.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:18: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens308);
                    inAll16=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll16.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens310);
                    dt17=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt17.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens312);
                    oscarcd18=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd18.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens314);
                    oscarcm19=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm19.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens316);
                    oscarrn20=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn20.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens318);
                    oscaront21=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront21.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens320);
                    brackets22=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets22.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens322);
                    sym23=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym23.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:73: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens324);
                    colon24=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon24.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:79: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens326);
                    md25=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md25.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:82: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens328);
                    neg26=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg26.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens330);
                    number27=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number27.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens332);
                    comma28=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma28.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:99: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens334);
                    advAdj29=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj29.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:48:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure30 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase346);
            nounphraseStructure30=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure30.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 49:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:49:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:1: nounphraseStructure : ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt31 = null;

        ChemicalChunkerParser.advAdj_return advAdj32 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase33 = null;

        ChemicalChunkerParser.noun_return noun34 = null;

        ChemicalChunkerParser.number_return number35 = null;

        ChemicalChunkerParser.ratio_return ratio36 = null;

        ChemicalChunkerParser.conjunction_return conjunction37 = null;

        ChemicalChunkerParser.advAdj_return advAdj38 = null;

        ChemicalChunkerParser.noun_return noun39 = null;

        ChemicalChunkerParser.number_return number40 = null;

        ChemicalChunkerParser.ratio_return ratio41 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf42 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN43 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase44 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:21: ( ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* noun | number | ratio )* ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )?
            int alt8=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA8_3 = input.LA(3);

                            if ( (synpred28_ChemicalChunker()) ) {
                                alt8=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure365);
                    dt31=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt31.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:27: ( advAdj )*
            loop9:
            do {
                int alt9=2;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure368);
            	    advAdj32=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj32.getTree());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:36: ( dissolvePhrase | noun | number | ratio )+
            int cnt10=0;
            loop10:
            do {
                int alt10=5;
                alt10 = dfa10.predict(input);
                switch (alt10) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:37: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure373);
            	    dissolvePhrase33=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase33.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:52: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure375);
            	    noun34=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun34.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:57: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure377);
            	    number35=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number35.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:64: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure379);
            	    ratio36=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio36.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:75: ( ( conjunction )* ( advAdj )* noun | number | ratio )*
            loop13:
            do {
                int alt13=4;
                alt13 = dfa13.predict(input);
                switch (alt13) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( conjunction )* ( advAdj )* noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( conjunction )*
            	    loop11:
            	    do {
            	        int alt11=2;
            	        alt11 = dfa11.predict(input);
            	        switch (alt11) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure387);
            	    	    conjunction37=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction37.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:89: ( advAdj )*
            	    loop12:
            	    do {
            	        int alt12=2;
            	        alt12 = dfa12.predict(input);
            	        switch (alt12) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure390);
            	    	    advAdj38=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj38.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop12;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_noun_in_nounphraseStructure394);
            	    noun39=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun39.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:103: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure396);
            	    number40=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number40.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:110: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure398);
            	    ratio41=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio41.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:121: ( prepphraseOf | prepphraseIN ( dissolvePhrase )? )*
            loop15:
            do {
                int alt15=3;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    int LA15_2 = input.LA(2);

                    if ( (synpred41_ChemicalChunker()) ) {
                        alt15=2;
                    }


                    }
                    break;
                case 27:
                    {
                    int LA15_3 = input.LA(2);

                    if ( (synpred39_ChemicalChunker()) ) {
                        alt15=1;
                    }


                    }
                    break;

                }

                switch (alt15) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:122: prepphraseOf
            	    {
            	    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure406);
            	    prepphraseOf42=prepphraseOf();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf42.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:136: prepphraseIN ( dissolvePhrase )?
            	    {
            	    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure409);
            	    prepphraseIN43=prepphraseIN();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN43.getTree());
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:149: ( dissolvePhrase )?
            	    int alt14=2;
            	    alt14 = dfa14.predict(input);
            	    switch (alt14) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure411);
            	            dissolvePhrase44=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase44.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:51:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure145 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure246 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:2: ( ( dissolveStructure1 | dissolveStructure2 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: ( dissolveStructure1 | dissolveStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:4: ( dissolveStructure1 | dissolveStructure2 )
            int alt16=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA16_1 = input.LA(2);

                if ( (synpred42_ChemicalChunker()) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 54:
            case 99:
            case 123:
                {
                alt16=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase426);
                    dissolveStructure145=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure145.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase428);
                    dissolveStructure246=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure246.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure1, dissolveStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 52:44: -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:48: ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:73: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:93: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:54:1: dissolveStructure1 : lrb molecule ( inin molecule )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb47 = null;

        ChemicalChunkerParser.molecule_return molecule48 = null;

        ChemicalChunkerParser.inin_return inin49 = null;

        ChemicalChunkerParser.molecule_return molecule50 = null;

        ChemicalChunkerParser.rrb_return rrb51 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:2: ( lrb molecule ( inin molecule )+ rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:4: lrb molecule ( inin molecule )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1452);
            lrb47=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb47.getTree());
            pushFollow(FOLLOW_molecule_in_dissolveStructure1454);
            molecule48=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule48.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:17: ( inin molecule )+
            int cnt17=0;
            loop17:
            do {
                int alt17=2;
                switch ( input.LA(1) ) {
                case 21:
                    {
                    alt17=1;
                    }
                    break;

                }

                switch (alt17) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:55:18: inin molecule
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1457);
            	    inin49=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin49.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure1459);
            	    molecule50=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule50.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt17 >= 1 ) break loop17;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(17, input);
                        throw eee;
                }
                cnt17++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1463);
            rrb51=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb51.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:56:1: dissolveStructure2 : molecule ( inin molecule )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molecule_return molecule52 = null;

        ChemicalChunkerParser.inin_return inin53 = null;

        ChemicalChunkerParser.molecule_return molecule54 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:2: ( molecule ( inin molecule )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:4: molecule ( inin molecule )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_molecule_in_dissolveStructure2472);
            molecule52=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule52.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:13: ( inin molecule )+
            int cnt18=0;
            loop18:
            do {
                int alt18=2;
                alt18 = dfa18.predict(input);
                switch (alt18) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:14: inin molecule
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2475);
            	    inin53=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin53.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure2477);
            	    molecule54=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule54.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt18 >= 1 ) break loop18;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(18, input);
                        throw eee;
                }
                cnt18++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:60:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc55 = null;

        ChemicalChunkerParser.comma_return comma56 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:2: ( cc | comma )
            int alt19=2;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt19=1;
                }
                break;
            case 99:
                {
                alt19=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction492);
                    cc55=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc55.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:61:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction494);
                    comma56=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma56.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:64:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure57 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase504);
            verbphraseStructure57=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure57.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 65:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:65:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:1: verbphraseStructure : ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.to_return to58 = null;

        ChemicalChunkerParser.inAll_return inAll59 = null;

        ChemicalChunkerParser.inafter_return inafter60 = null;

        ChemicalChunkerParser.md_return md61 = null;

        ChemicalChunkerParser.adv_return adv62 = null;

        ChemicalChunkerParser.adj_return adj63 = null;

        ChemicalChunkerParser.verb_return verb64 = null;

        ChemicalChunkerParser.md_return md65 = null;

        ChemicalChunkerParser.adv_return adv66 = null;

        ChemicalChunkerParser.adj_return adj67 = null;

        ChemicalChunkerParser.neg_return neg68 = null;

        ChemicalChunkerParser.inoff_return inoff69 = null;

        ChemicalChunkerParser.cc_return cc70 = null;

        ChemicalChunkerParser.comma_return comma71 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase72 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:21: ( ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: ( to )? ( inAll )? ( inafter )? ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: ( to )?
            int alt20=2;
            switch ( input.LA(1) ) {
                case 177:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA20_3 = input.LA(3);

                            if ( (synpred46_ChemicalChunker()) ) {
                                alt20=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure523);
                    to58=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to58.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:28: ( inAll )?
            int alt21=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt21=1;
                    }
                    break;
                case 20:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA21_4 = input.LA(3);

                            if ( (synpred47_ChemicalChunker()) ) {
                                alt21=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt21) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure526);
                    inAll59=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll59.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:35: ( inafter )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 20:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure529);
                    inafter60=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter60.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt31=0;
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )*
            	    loop23:
            	    do {
            	        int alt23=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            alt23=1;
            	            }
            	            break;

            	        }

            	        switch (alt23) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure533);
            	    	    md61=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md61.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop23;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:49: ( adv )*
            	    loop24:
            	    do {
            	        int alt24=2;
            	        switch ( input.LA(1) ) {
            	        case 169:
            	        case 170:
            	        case 171:
            	        case 172:
            	        case 173:
            	        case 175:
            	            {
            	            alt24=1;
            	            }
            	            break;

            	        }

            	        switch (alt24) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure536);
            	    	    adv62=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv62.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop24;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: ( adj )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 12:
            	        case 13:
            	        case 140:
            	        case 141:
            	        case 142:
            	        case 143:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure539);
            	            adj63=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj63.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( verb )+
            	    int cnt26=0;
            	    loop26:
            	    do {
            	        int alt26=2;
            	        alt26 = dfa26.predict(input);
            	        switch (alt26) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure542);
            	    	    verb64=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb64.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt26 >= 1 ) break loop26;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(26, input);
            	                throw eee;
            	        }
            	        cnt26++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: ( md )*
            	    loop27:
            	    do {
            	        int alt27=2;
            	        switch ( input.LA(1) ) {
            	        case 144:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA27_3 = input.LA(3);

            	                if ( (synpred53_ChemicalChunker()) ) {
            	                    alt27=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt27) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure545);
            	    	    md65=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md65.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop27;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: ( adv )*
            	    loop28:
            	    do {
            	        int alt28=2;
            	        alt28 = dfa28.predict(input);
            	        switch (alt28) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure548);
            	    	    adv66=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv66.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: ( adj )?
            	    int alt29=2;
            	    alt29 = dfa29.predict(input);
            	    switch (alt29) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure551);
            	            adj67=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj67.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: ( neg )?
            	    int alt30=2;
            	    switch ( input.LA(1) ) {
            	        case 101:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA30_3 = input.LA(3);

            	                    if ( (synpred56_ChemicalChunker()) ) {
            	                        alt30=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt30) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure554);
            	            neg68=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg68.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt31 >= 1 ) break loop31;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(31, input);
                        throw eee;
                }
                cnt31++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:87: ( inoff )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 33:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA32_3 = input.LA(3);

                            if ( (synpred58_ChemicalChunker()) ) {
                                alt32=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure560);
                    inoff69=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff69.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:94: ( ( cc )? ( comma )? prepphrase )*
            loop35:
            do {
                int alt35=2;
                alt35 = dfa35.predict(input);
                switch (alt35) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )?
            	    int alt33=2;
            	    switch ( input.LA(1) ) {
            	        case 122:
            	            {
            	            alt33=1;
            	            }
            	            break;
            	    }

            	    switch (alt33) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure564);
            	            cc70=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc70.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:99: ( comma )?
            	    int alt34=2;
            	    switch ( input.LA(1) ) {
            	        case 99:
            	            {
            	            alt34=1;
            	            }
            	            break;
            	    }

            	    switch (alt34) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure567);
            	            comma71=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma71.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure570);
            	    prepphrase72=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase72.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb73 = null;

        ChemicalChunkerParser.vbp_return vbp74 = null;

        ChemicalChunkerParser.vbg_return vbg75 = null;

        ChemicalChunkerParser.vbd_return vbd76 = null;

        ChemicalChunkerParser.vbz_return vbz77 = null;

        ChemicalChunkerParser.vbn_return vbn78 = null;

        ChemicalChunkerParser.vbuse_return vbuse79 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge80 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject81 = null;

        ChemicalChunkerParser.vbadd_return vbadd82 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge83 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain84 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop85 = null;

        ChemicalChunkerParser.vbfill_return vbfill86 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend87 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat88 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus89 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate90 = null;

        ChemicalChunkerParser.vbcool_return vbcool91 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass92 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve93 = null;

        ChemicalChunkerParser.vbdry_return vbdry94 = null;

        ChemicalChunkerParser.vbextract_return vbextract95 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter96 = null;

        ChemicalChunkerParser.vbheat_return vbheat97 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease98 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition99 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate100 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify101 = null;

        ChemicalChunkerParser.vbquench_return vbquench102 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover103 = null;

        ChemicalChunkerParser.vbremove_return vbremove104 = null;

        ChemicalChunkerParser.vbstir_return vbstir105 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize106 = null;

        ChemicalChunkerParser.vbwait_return vbwait107 = null;

        ChemicalChunkerParser.vbwash_return vbwash108 = null;

        ChemicalChunkerParser.vbyield_return vbyield109 = null;

        ChemicalChunkerParser.vbchange_return vbchange110 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbsubject | vbadd | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt36=38;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt36=1;
                }
                break;
            case 180:
                {
                alt36=2;
                }
                break;
            case 182:
                {
                alt36=3;
                }
                break;
            case 181:
                {
                alt36=4;
                }
                break;
            case 184:
                {
                alt36=5;
                }
                break;
            case 183:
                {
                alt36=6;
                }
                break;
            case 55:
                {
                alt36=7;
                }
                break;
            case 57:
                {
                alt36=8;
                }
                break;
            case 58:
                {
                alt36=9;
                }
                break;
            case 61:
                {
                alt36=10;
                }
                break;
            case 62:
                {
                alt36=11;
                }
                break;
            case 63:
                {
                alt36=12;
                }
                break;
            case 64:
                {
                alt36=13;
                }
                break;
            case 65:
                {
                alt36=14;
                }
                break;
            case 66:
                {
                alt36=15;
                }
                break;
            case 67:
                {
                alt36=16;
                }
                break;
            case 68:
                {
                alt36=17;
                }
                break;
            case 70:
                {
                alt36=18;
                }
                break;
            case 72:
                {
                alt36=19;
                }
                break;
            case 73:
                {
                alt36=20;
                }
                break;
            case 74:
                {
                alt36=21;
                }
                break;
            case 75:
                {
                alt36=22;
                }
                break;
            case 77:
                {
                alt36=23;
                }
                break;
            case 79:
                {
                alt36=24;
                }
                break;
            case 81:
                {
                alt36=25;
                }
                break;
            case 82:
                {
                alt36=26;
                }
                break;
            case 83:
                {
                alt36=27;
                }
                break;
            case 84:
                {
                alt36=28;
                }
                break;
            case 86:
                {
                alt36=29;
                }
                break;
            case 88:
                {
                alt36=30;
                }
                break;
            case 89:
                {
                alt36=31;
                }
                break;
            case 90:
                {
                alt36=32;
                }
                break;
            case 92:
                {
                alt36=33;
                }
                break;
            case 93:
                {
                alt36=34;
                }
                break;
            case 95:
                {
                alt36=35;
                }
                break;
            case 96:
                {
                alt36=36;
                }
                break;
            case 97:
                {
                alt36=37;
                }
                break;
            case 56:
                {
                alt36=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb582);
                    vb73=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb73.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb584);
                    vbp74=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp74.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb586);
                    vbg75=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg75.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb588);
                    vbd76=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd76.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb590);
                    vbz77=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz77.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb592);
                    vbn78=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn78.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb594);
                    vbuse79=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse79.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb596);
                    vbsubmerge80=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge80.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:48: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb598);
                    vbsubject81=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject81.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:58: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb600);
                    vbadd82=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd82.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:64: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb602);
                    vbcharge83=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge83.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:73: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb604);
                    vbcontain84=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain84.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:83: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb606);
                    vbdrop85=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop85.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:90: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb608);
                    vbfill86=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill86.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:97: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb610);
                    vbsuspend87=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend87.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:107: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb612);
                    vbtreat88=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat88.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:115: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb614);
                    vbapparatus89=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus89.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:127: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb616);
                    vbconcentrate90=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate90.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:141: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb618);
                    vbcool91=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool91.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:148: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb620);
                    vbdegass92=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass92.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:157: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb622);
                    vbdissolve93=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve93.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:168: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb624);
                    vbdry94=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry94.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:174: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb626);
                    vbextract95=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract95.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:184: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb628);
                    vbfilter96=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter96.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:194: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb631);
                    vbheat97=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat97.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:201: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb633);
                    vbincrease98=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease98.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:212: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb635);
                    vbpartition99=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition99.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:224: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb637);
                    vbprecipitate100=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate100.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:238: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb639);
                    vbpurify101=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify101.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:247: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb641);
                    vbquench102=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench102.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:256: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb643);
                    vbrecover103=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover103.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:266: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb645);
                    vbremove104=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove104.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:275: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb647);
                    vbstir105=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir105.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:282: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb649);
                    vbsynthesize106=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize106.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:295: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb651);
                    vbwait107=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait107.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:302: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb653);
                    vbwash108=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash108.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:309: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb655);
                    vbyield109=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield109.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:67:317: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb657);
                    vbchange110=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange110.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:1: number : ( cd | oscarcd );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd111 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd112 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:8: ( cd | oscarcd )
            int alt37=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                alt37=1;
                }
                break;
            case 11:
                {
                alt37=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number665);
                    cd111=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd111.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:69:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number667);
                    oscarcd112=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd112.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt113 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss114 = null;

        ChemicalChunkerParser.wpo_return wpo115 = null;

        ChemicalChunkerParser.wpo_return wpo116 = null;

        ChemicalChunkerParser.wps_return wps117 = null;

        ChemicalChunkerParser.wql_return wql118 = null;

        ChemicalChunkerParser.wrb_return wrb119 = null;

        ChemicalChunkerParser.ex_return ex120 = null;

        ChemicalChunkerParser.pdt_return pdt121 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt38=9;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause675);
                    wdt113=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt113.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause677);
                    wp_poss114=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss114.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause679);
                    wpo115=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo115.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause681);
                    wpo116=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo116.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause683);
                    wps117=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps117.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause685);
                    wql118=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql118.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause687);
                    wrb119=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb119.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause689);
                    ex120=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex120.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause691);
                    pdt121=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt121.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:1: noun : ( prp | citation | molecule | apparatus | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp122 = null;

        ChemicalChunkerParser.citation_return citation123 = null;

        ChemicalChunkerParser.molecule_return molecule124 = null;

        ChemicalChunkerParser.apparatus_return apparatus125 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule126 = null;

        ChemicalChunkerParser.nnstate_return nnstate127 = null;

        ChemicalChunkerParser.nn_return nn128 = null;

        ChemicalChunkerParser.nns_return nns129 = null;

        ChemicalChunkerParser.nnp_return nnp130 = null;

        ChemicalChunkerParser.nnadd_return nnadd131 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase132 = null;

        ChemicalChunkerParser.nnexample_return nnexample133 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr134 = null;

        ChemicalChunkerParser.range_return range135 = null;

        ChemicalChunkerParser.amount_return amount136 = null;

        ChemicalChunkerParser.mixture_return mixture137 = null;

        ChemicalChunkerParser.nntime_return nntime138 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere139 = null;

        ChemicalChunkerParser.nneq_return nneq140 = null;

        ChemicalChunkerParser.quantity_return quantity141 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity142 = null;

        ChemicalChunkerParser.measurements_return measurements143 = null;

        ChemicalChunkerParser.nntemp_return nntemp144 = null;

        ChemicalChunkerParser.nnflash_return nnflash145 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral146 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod147 = null;

        ChemicalChunkerParser.nnamount_return nnamount148 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure149 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn150 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography151 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum152 = null;

        ChemicalChunkerParser.nncycle_return nncycle153 = null;

        ChemicalChunkerParser.nntimes_return nntimes154 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate155 = null;

        ChemicalChunkerParser.nnvol_return nnvol156 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify157 = null;

        ChemicalChunkerParser.wdt_return wdt158 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss159 = null;

        ChemicalChunkerParser.wpo_return wpo160 = null;

        ChemicalChunkerParser.wps_return wps161 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize162 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture163 = null;

        ChemicalChunkerParser.oscaront_return oscaront164 = null;

        ChemicalChunkerParser.number_return number165 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound166 = null;

        ChemicalChunkerParser.nnextract_return nnextract167 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter168 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate169 = null;

        ChemicalChunkerParser.nnremove_return nnremove170 = null;

        ChemicalChunkerParser.fw_return fw171 = null;

        ChemicalChunkerParser.fwin_return fwin172 = null;

        ChemicalChunkerParser.sym_return sym173 = null;

        ChemicalChunkerParser.clause_return clause174 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:6: ( prp | citation | molecule | apparatus | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt39=53;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:9: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_noun699);
                    prp122=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp122.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:13: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_noun701);
                    citation123=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation123.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:22: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_noun703);
                    molecule124=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule124.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:31: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_noun705);
                    apparatus125=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus125.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_noun707);
                    unnamedmolecule126=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule126.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:57: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_noun709);
                    nnstate127=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate127.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_noun711);
                    nn128=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn128.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:68: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_noun713);
                    nns129=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns129.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:72: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_noun715);
                    nnp130=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp130.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:76: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_noun717);
                    nnadd131=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd131.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:82: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_noun719);
                    preparationphrase132=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase132.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:100: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_noun721);
                    nnexample133=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample133.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:110: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_noun723);
                    oscarcpr134=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr134.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_noun725);
                    range135=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range135.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_noun727);
                    amount136=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount136.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:132: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_noun729);
                    mixture137=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture137.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:140: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_noun731);
                    nntime138=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime138.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:147: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_noun733);
                    nnatmosphere139=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere139.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:160: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_noun735);
                    nneq140=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq140.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:165: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_noun737);
                    quantity141=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity141.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:174: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_noun739);
                    nnchementity142=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity142.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:187: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_noun741);
                    measurements143=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements143.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:200: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_noun743);
                    nntemp144=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp144.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:207: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_noun745);
                    nnflash145=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash145.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:215: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_noun747);
                    nngeneral146=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral146.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:225: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_noun749);
                    nnmethod147=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod147.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:234: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_noun751);
                    nnamount148=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount148.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:243: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_noun753);
                    nnpressure149=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure149.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:254: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_noun755);
                    nncolumn150=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn150.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:263: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_noun757);
                    nnchromatography151=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography151.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:280: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_noun759);
                    nnvacuum152=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum152.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:289: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_noun761);
                    nncycle153=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle153.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:297: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_noun763);
                    nntimes154=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes154.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:305: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_noun765);
                    nnconcentrate155=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate155.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:319: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_noun767);
                    nnvol156=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol156.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:325: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_noun769);
                    nnpurify157=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify157.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:334: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_noun771);
                    wdt158=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt158.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:338: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_noun773);
                    wp_poss159=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss159.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:346: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_noun775);
                    wpo160=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo160.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:350: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_noun777);
                    wps161=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps161.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:354: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_noun779);
                    nnsynthesize162=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize162.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:367: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_noun781);
                    nnmixture163=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture163.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:377: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_noun783);
                    oscaront164=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront164.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:386: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_noun785);
                    number165=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number165.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:393: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_noun787);
                    oscarCompound166=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound166.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:407: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_noun789);
                    nnextract167=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract167.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:417: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_noun791);
                    nnfilter168=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter168.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:426: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_noun793);
                    nnprecipitate169=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate169.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:440: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_noun795);
                    nnremove170=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove170.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:449: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_noun797);
                    fw171=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw171.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:452: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_noun799);
                    fwin172=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin172.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:457: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_noun801);
                    sym173=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym173.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:461: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_noun803);
                    clause174=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause174.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:1: range : cd dash cd ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd175 = null;

        ChemicalChunkerParser.dash_return dash176 = null;

        ChemicalChunkerParser.cd_return cd177 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:6: ( cd dash cd )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:72:8: cd dash cd
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_range809);
            cd175=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd175.getTree());
            pushFollow(FOLLOW_dash_in_range811);
            dash176=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash176.getTree());
            pushFollow(FOLLOW_cd_in_range813);
            cd177=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd177.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio178 = null;

        ChemicalChunkerParser.nounratio_return nounratio179 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:9: ( numberratio | nounratio )
            int alt40=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 17:
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 102:
                    case 104:
                    case 123:
                    case 146:
                        {
                        alt40=2;
                        }
                        break;
                    case 98:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 34:
                            case 35:
                            case 36:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 59:
                            case 60:
                            case 69:
                            case 71:
                            case 78:
                            case 80:
                            case 85:
                            case 87:
                            case 91:
                            case 93:
                            case 94:
                            case 99:
                            case 107:
                            case 128:
                            case 132:
                            case 133:
                            case 134:
                            case 140:
                            case 141:
                            case 142:
                            case 143:
                            case 146:
                            case 148:
                            case 151:
                            case 163:
                            case 176:
                            case 185:
                            case 186:
                            case 187:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                                {
                                alt40=2;
                                }
                                break;
                            case 123:
                                {
                                switch ( input.LA(6) ) {
                                case TOKEN:
                                    {
                                    int LA40_7 = input.LA(7);

                                    if ( (synpred160_ChemicalChunker()) ) {
                                        alt40=1;
                                    }
                                    else if ( (true) ) {
                                        alt40=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 40, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 40, 6, input);

                                    throw nvae;
                                }

                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 40, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 40, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 40, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;
                }

                }
                break;
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 34:
            case 35:
            case 36:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 59:
            case 60:
            case 69:
            case 71:
            case 78:
            case 80:
            case 85:
            case 87:
            case 91:
            case 93:
            case 94:
            case 99:
            case 107:
            case 128:
            case 132:
            case 133:
            case 134:
            case 140:
            case 141:
            case 142:
            case 143:
            case 146:
            case 148:
            case 151:
            case 163:
            case 176:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
                {
                alt40=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio822);
                    numberratio178=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio178.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio824);
                    nounratio179=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio179.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 74:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:1: numberratio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd180 = null;

        ChemicalChunkerParser.colon_return colon181 = null;

        ChemicalChunkerParser.cd_return cd182 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:13: ( cd ( colon cd )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:16: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio848);
            cd180=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd180.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:19: ( colon cd )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 123:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA41_5 = input.LA(5);

                                if ( (synpred161_ChemicalChunker()) ) {
                                    alt41=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt41) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio851);
            	    colon181=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon181.getTree());
            	    pushFollow(FOLLOW_cd_in_numberratio853);
            	    cd182=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd182.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:76:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun183 = null;

        ChemicalChunkerParser.colon_return colon184 = null;

        ChemicalChunkerParser.noun_return noun185 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio866);
            noun183=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun183.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:11: ( colon noun )+
            int cnt42=0;
            loop42:
            do {
                int alt42=2;
                switch ( input.LA(1) ) {
                case 98:
                    {
                    int LA42_2 = input.LA(2);

                    if ( (synpred162_ChemicalChunker()) ) {
                        alt42=1;
                    }


                    }
                    break;

                }

                switch (alt42) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio870);
            	    colon184=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon184.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio872);
            	    noun185=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun185.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt42 >= 1 ) break loop42;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(42, input);
                        throw eee;
                }
                cnt42++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1186 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2187 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:9: ( ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:11: ( citationStructure1 | citationStructure2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:11: ( citationStructure1 | citationStructure2 )
            int alt43=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt43=1;
                }
                break;
            case 99:
                {
                alt43=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation885);
                    citationStructure1186=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1186.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation887);
                    citationStructure2187=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2187.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure2, citationStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 80:51: -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:54: ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CITATION"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:74: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:80:94: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb188 = null;

        ChemicalChunkerParser.citationContent_return citationContent189 = null;

        ChemicalChunkerParser.rrb_return rrb190 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:19: ( lrb citationContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:82:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure1910);
            lrb188=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb188.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure1912);
            citationContent189=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent189.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure1914);
            rrb190=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb190.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma191 = null;

        ChemicalChunkerParser.lrb_return lrb192 = null;

        ChemicalChunkerParser.citationContent_return citationContent193 = null;

        ChemicalChunkerParser.rrb_return rrb194 = null;

        ChemicalChunkerParser.comma_return comma195 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:19: ( comma lrb citationContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:83:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure2920);
            comma191=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma191.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure2922);
            lrb192=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb192.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure2924);
            citationContent193=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent193.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure2926);
            rrb194=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb194.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure2928);
            comma195=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma195.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp196 = null;

        ChemicalChunkerParser.fw_return fw197 = null;

        ChemicalChunkerParser.cd_return cd198 = null;

        ChemicalChunkerParser.conjunction_return conjunction199 = null;

        ChemicalChunkerParser.nnp_return nnp200 = null;

        ChemicalChunkerParser.fw_return fw201 = null;

        ChemicalChunkerParser.cd_return cd202 = null;

        ChemicalChunkerParser.conjunction_return conjunction203 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:20: ( nnp | fw | cd | conjunction )
            int alt44=4;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt44=1;
                }
                break;
            case 133:
                {
                alt44=2;
                }
                break;
            case 123:
                {
                alt44=3;
                }
                break;
            case 99:
            case 122:
                {
                alt44=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent937);
                    nnp196=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp196.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent939);
                    fw197=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw197.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent941);
                    cd198=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd198.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent943);
                    conjunction199=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction199.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:44: ( nnp | fw | cd | conjunction )+
            int cnt45=0;
            loop45:
            do {
                int alt45=5;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt45=1;
                    }
                    break;
                case 133:
                    {
                    alt45=2;
                    }
                    break;
                case 123:
                    {
                    alt45=3;
                    }
                    break;
                case 99:
                case 122:
                    {
                    alt45=4;
                    }
                    break;

                }

                switch (alt45) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent947);
            	    nnp200=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp200.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent949);
            	    fw201=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw201.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent951);
            	    cd202=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd202.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:84:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent953);
            	    conjunction203=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction203.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:1: mixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2204 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1205 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:8: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:10: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:10: ( mixtureStructure2 | mixtureStructure1 )
            int alt46=2;
            switch ( input.LA(1) ) {
            case 99:
                {
                alt46=1;
                }
                break;
            case 107:
                {
                alt46=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:11: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture965);
                    mixtureStructure2204=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2204.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:29: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture967);
                    mixtureStructure1205=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1205.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:48: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:51: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:70: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:86:89: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma206 = null;

        ChemicalChunkerParser.lrb_return lrb207 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent208 = null;

        ChemicalChunkerParser.rrb_return rrb209 = null;

        ChemicalChunkerParser.comma_return comma210 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:87:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure2988);
            comma206=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma206.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure2990);
            lrb207=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb207.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure2992);
            mixtureContent208=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent208.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure2994);
            rrb209=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb209.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure2996);
            comma210=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma210.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb211 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent212 = null;

        ChemicalChunkerParser.rrb_return rrb213 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:88:21: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11003);
            lrb211=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb211.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11005);
            mixtureContent212=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent212.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11007);
            rrb213=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb213.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:1: mixtureContent : ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw214 = null;

        ChemicalChunkerParser.verb_return verb215 = null;

        ChemicalChunkerParser.measurements_return measurements216 = null;

        ChemicalChunkerParser.md_return md217 = null;

        ChemicalChunkerParser.stop_return stop218 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound219 = null;

        ChemicalChunkerParser.molecule_return molecule220 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule221 = null;

        ChemicalChunkerParser.dash_return dash222 = null;

        ChemicalChunkerParser.sym_return sym223 = null;

        ChemicalChunkerParser.cd_return cd224 = null;

        ChemicalChunkerParser.noun_return noun225 = null;

        ChemicalChunkerParser.inof_return inof226 = null;

        ChemicalChunkerParser.inAll_return inAll227 = null;

        ChemicalChunkerParser.cd_return cd228 = null;

        ChemicalChunkerParser.comma_return comma229 = null;

        ChemicalChunkerParser.adj_return adj230 = null;

        ChemicalChunkerParser.colon_return colon231 = null;

        ChemicalChunkerParser.stop_return stop232 = null;

        ChemicalChunkerParser.fw_return fw233 = null;

        ChemicalChunkerParser.verb_return verb234 = null;

        ChemicalChunkerParser.measurements_return measurements235 = null;

        ChemicalChunkerParser.md_return md236 = null;

        ChemicalChunkerParser.stop_return stop237 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound238 = null;

        ChemicalChunkerParser.molecule_return molecule239 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule240 = null;

        ChemicalChunkerParser.dash_return dash241 = null;

        ChemicalChunkerParser.sym_return sym242 = null;

        ChemicalChunkerParser.cd_return cd243 = null;

        ChemicalChunkerParser.noun_return noun244 = null;

        ChemicalChunkerParser.inof_return inof245 = null;

        ChemicalChunkerParser.inAll_return inAll246 = null;

        ChemicalChunkerParser.cd_return cd247 = null;

        ChemicalChunkerParser.comma_return comma248 = null;

        ChemicalChunkerParser.adj_return adj249 = null;

        ChemicalChunkerParser.colon_return colon250 = null;

        ChemicalChunkerParser.stop_return stop251 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:15: ( ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt47=19;
            alt47 = dfa47.predict(input);
            switch (alt47) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1016);
                    fw214=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw214.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1018);
                    verb215=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb215.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1020);
                    measurements216=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements216.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:41: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1022);
                    md217=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md217.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:44: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1024);
                    stop218=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop218.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:49: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1026);
                    oscarCompound219=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound219.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:63: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1028);
                    molecule220=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule220.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:72: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1030);
                    unnamedmolecule221=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule221.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:88: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1032);
                    dash222=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash222.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:93: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1034);
                    sym223=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym223.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1036);
                    cd224=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd224.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:100: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1038);
                    noun225=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun225.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:105: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1040);
                    inof226=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof226.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:110: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1042);
                    inAll227=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll227.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:116: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1044);
                    cd228=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd228.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:119: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1046);
                    comma229=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma229.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:125: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1048);
                    adj230=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj230.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:129: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1050);
                    colon231=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon231.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:135: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1052);
                    stop232=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop232.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt48=0;
            loop48:
            do {
                int alt48=20;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:142: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1056);
            	    fw233=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw233.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:145: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1058);
            	    verb234=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb234.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:150: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1060);
            	    measurements235=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements235.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:163: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1062);
            	    md236=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md236.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:166: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1064);
            	    stop237=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop237.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:171: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1066);
            	    oscarCompound238=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound238.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:185: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1068);
            	    molecule239=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule239.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:194: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1070);
            	    unnamedmolecule240=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule240.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:210: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1072);
            	    dash241=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash241.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:215: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1074);
            	    sym242=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym242.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:219: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1076);
            	    cd243=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd243.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:222: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1078);
            	    noun244=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun244.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:227: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1080);
            	    inof245=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof245.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:232: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1082);
            	    inAll246=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll246.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:238: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1084);
            	    cd247=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd247.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:241: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1086);
            	    comma248=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma248.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:247: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1088);
            	    adj249=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj249.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:251: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1090);
            	    colon250=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon250.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:257: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1092);
            	    stop251=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop251.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:1: adj : ( jj | jjr | jjs | jjt | oscarcj | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj252 = null;

        ChemicalChunkerParser.jjr_return jjr253 = null;

        ChemicalChunkerParser.jjs_return jjs254 = null;

        ChemicalChunkerParser.jjt_return jjt255 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj256 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn257 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:5: ( jj | jjr | jjs | jjt | oscarcj | oscarrn )
            int alt49=6;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt49=1;
                }
                break;
            case 141:
                {
                alt49=2;
                }
                break;
            case 142:
                {
                alt49=3;
                }
                break;
            case 143:
                {
                alt49=4;
                }
                break;
            case 12:
                {
                alt49=5;
                }
                break;
            case 13:
                {
                alt49=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }

            switch (alt49) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1103);
                    jj252=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj252.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1105);
                    jjr253=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr253.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1107);
                    jjs254=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs254.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1109);
                    jjt255=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt255.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1111);
                    oscarcj256=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj256.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:91:30: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1113);
                    oscarrn257=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn257.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:1: adv : ( rb | rbr | rbt | rp | rbs | rbconj );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb258 = null;

        ChemicalChunkerParser.rbr_return rbr259 = null;

        ChemicalChunkerParser.rbt_return rbt260 = null;

        ChemicalChunkerParser.rp_return rp261 = null;

        ChemicalChunkerParser.rbs_return rbs262 = null;

        ChemicalChunkerParser.rbconj_return rbconj263 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:5: ( rb | rbr | rbt | rp | rbs | rbconj )
            int alt50=6;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt50=1;
                }
                break;
            case 170:
                {
                alt50=2;
                }
                break;
            case 172:
                {
                alt50=3;
                }
                break;
            case 175:
                {
                alt50=4;
                }
                break;
            case 173:
                {
                alt50=5;
                }
                break;
            case 171:
                {
                alt50=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1120);
                    rb258=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb258.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1122);
                    rbr259=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr259.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1124);
                    rbt260=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt260.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1126);
                    rp261=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp261.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1128);
                    rbs262=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs262.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:92:25: rbconj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbconj_in_adv1130);
                    rbconj263=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj263.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:96:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg264 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere265 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime266 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp267 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN268 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther269 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:5: ( neg )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 101:
                    {
                    alt51=1;
                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1143);
                    neg264=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg264.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )
            int alt52=5;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1147);
                    prepphraseAtmosphere265=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere265.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1149);
                    prepphraseTime266=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime266.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1151);
                    prepphraseTemp267=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp267.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1153);
                    prepphraseIN268=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN268.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:75: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1155);
                    prepphraseOther269=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther269.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:99:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv270 = null;

        ChemicalChunkerParser.adj_return adj271 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:2: ( adv | adj )
            int alt53=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt53=1;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt53=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1169);
                    adv270=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv270.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:100:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1171);
                    adj271=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:101:1: prepphraseOther : ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj272 = null;

        ChemicalChunkerParser.inAll_return inAll273 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase274 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:2: ( ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:4: ( advAdj )* ( inAll )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:4: ( advAdj )*
            loop54:
            do {
                int alt54=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt54=1;
                    }
                    break;

                }

                switch (alt54) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1180);
            	    advAdj272=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj272.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:12: ( inAll )+
            int cnt55=0;
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt55=1;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1183);
            	    inAll273=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll273.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        throw eee;
                }
                cnt55++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1187);
            nounphrase274=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase274.getTree());


            // AST REWRITE
            // elements: inAll, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 102:31: -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:35: ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:102:57: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:103:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof275 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase276 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1214);
            inof275=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof275.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1217);
            nounphrase276=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase276.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 104:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:104:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:106:1: prepphraseTime : prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure277 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:2: ( prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1239);
            prepPhraseTimeStructure277=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure277.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 107:27: -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:107:31: ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:108:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj278 = null;

        ChemicalChunkerParser.inAll_return inAll279 = null;

        ChemicalChunkerParser.dt_return dt280 = null;

        ChemicalChunkerParser.advAdj_return advAdj281 = null;

        ChemicalChunkerParser.cd_return cd282 = null;

        ChemicalChunkerParser.nntime_return nntime283 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: ( advAdj )*
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1257);
            	    advAdj278=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj278.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:11: ( inAll )?
            int alt57=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt57=1;
                    }
                    break;
            }

            switch (alt57) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1260);
                    inAll279=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll279.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:19: ( dt )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1264);
                    dt280=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt280.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:23: ( advAdj )*
            loop59:
            do {
                int alt59=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt59=1;
                    }
                    break;

                }

                switch (alt59) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1267);
            	    advAdj281=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj281.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:31: ( cd )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1270);
                    cd282=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd282.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:35: ( nntime )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                switch ( input.LA(1) ) {
                case 36:
                    {
                    int LA61_2 = input.LA(2);

                    if ( (synpred232_ChemicalChunker()) ) {
                        alt61=1;
                    }


                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1273);
            	    nntime283=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime283.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:111:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin284 = null;

        ChemicalChunkerParser.molecule_return molecule285 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1285);
            inin284=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin284.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1287);
            molecule285=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule285.getTree());


            // AST REWRITE
            // elements: molecule, inin
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 112:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:112:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:114:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent286 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:2: ( prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1311);
            prepphraseAtmosphereContent286=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent286.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 115:32: -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:115:36: ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:116:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder287 = null;

        ChemicalChunkerParser.dt_return dt288 = null;

        ChemicalChunkerParser.advAdj_return advAdj289 = null;

        ChemicalChunkerParser.molecule_return molecule290 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere291 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1331);
            inunder287=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder287.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:12: ( dt )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1334);
                    dt288=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt288.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:16: ( advAdj )*
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt63=1;
                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1337);
            	    advAdj289=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj289.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1340);
            molecule290=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule290.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: ( nnatmosphere )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 40:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA64_3 = input.LA(3);

                            if ( (synpred235_ChemicalChunker()) ) {
                                alt64=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1342);
                    nnatmosphere291=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere291.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in292 = null;

        ChemicalChunkerParser.inafter_return inafter293 = null;

        ChemicalChunkerParser.inas_return inas294 = null;

        ChemicalChunkerParser.inbefore_return inbefore295 = null;

        ChemicalChunkerParser.inby_return inby296 = null;

        ChemicalChunkerParser.infor_return infor297 = null;

        ChemicalChunkerParser.infrom_return infrom298 = null;

        ChemicalChunkerParser.inin_return inin299 = null;

        ChemicalChunkerParser.ininto_return ininto300 = null;

        ChemicalChunkerParser.inof_return inof301 = null;

        ChemicalChunkerParser.inoff_return inoff302 = null;

        ChemicalChunkerParser.inon_return inon303 = null;

        ChemicalChunkerParser.inover_return inover304 = null;

        ChemicalChunkerParser.inunder_return inunder305 = null;

        ChemicalChunkerParser.invia_return invia306 = null;

        ChemicalChunkerParser.inwith_return inwith307 = null;

        ChemicalChunkerParser.inwithout_return inwithout308 = null;

        ChemicalChunkerParser.to_return to309 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt65=18;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt65=1;
                }
                break;
            case 20:
                {
                alt65=2;
                }
                break;
            case 18:
                {
                alt65=3;
                }
                break;
            case 19:
                {
                alt65=4;
                }
                break;
            case 25:
                {
                alt65=5;
                }
                break;
            case 29:
                {
                alt65=6;
                }
                break;
            case 30:
                {
                alt65=7;
                }
                break;
            case 21:
                {
                alt65=8;
                }
                break;
            case 22:
                {
                alt65=9;
                }
                break;
            case 27:
                {
                alt65=10;
                }
                break;
            case 33:
                {
                alt65=11;
                }
                break;
            case 28:
                {
                alt65=12;
                }
                break;
            case 32:
                {
                alt65=13;
                }
                break;
            case 31:
                {
                alt65=14;
                }
                break;
            case 26:
                {
                alt65=15;
                }
                break;
            case 23:
                {
                alt65=16;
                }
                break;
            case 24:
                {
                alt65=17;
                }
                break;
            case 177:
                {
                alt65=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1354);
                    in292=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in292.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1356);
                    inafter293=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter293.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1358);
                    inas294=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas294.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1360);
                    inbefore295=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore295.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1362);
                    inby296=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby296.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1364);
                    infor297=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor297.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1366);
                    infrom298=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom298.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1368);
                    inin299=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin299.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1370);
                    ininto300=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto300.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1372);
                    inof301=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof301.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1374);
                    inoff302=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff302.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1376);
                    inon303=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon303.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1378);
                    inover304=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover304.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1380);
                    inunder305=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder305.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1382);
                    invia306=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia306.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1384);
                    inwith307=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith307.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1386);
                    inwithout308=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout308.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:120:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1388);
                    to309=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:1: prepphraseTemp : prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent310 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:15: ( prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1395);
            prepphraseTempContent310=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent310.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 121:40: -> ^( NODE[\"TempPhrase\"] prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:121:44: ^( NODE[\"TempPhrase\"] prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:123:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj311 = null;

        ChemicalChunkerParser.inAll_return inAll312 = null;

        ChemicalChunkerParser.dt_return dt313 = null;

        ChemicalChunkerParser.advAdj_return advAdj314 = null;

        ChemicalChunkerParser.cd_return cd315 = null;

        ChemicalChunkerParser.nntemp_return nntemp316 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( advAdj )?
            int alt66=2;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1417);
                    advAdj311=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj311.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:13: ( inAll )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 139:
                case 177:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1420);
                    inAll312=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll312.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:20: ( dt )?
            int alt68=2;
            switch ( input.LA(1) ) {
                case 128:
                    {
                    alt68=1;
                    }
                    break;
            }

            switch (alt68) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1423);
                    dt313=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt313.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:24: ( advAdj )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 175:
                    {
                    alt69=1;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1426);
                    advAdj314=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj314.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:32: ( cd )?
            int alt70=2;
            switch ( input.LA(1) ) {
                case 123:
                    {
                    alt70=1;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1429);
                    cd315=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd315.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:36: ( nntemp )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 44:
                    {
                    int LA71_2 = input.LA(2);

                    if ( (synpred258_ChemicalChunker()) ) {
                        alt71=1;
                    }


                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1432);
            	    nntemp316=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp316.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:1: amount : ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd317 = null;

        ChemicalChunkerParser.nnamount_return nnamount318 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:8: ( ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:10: ( cd )+ nnamount
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:10: ( cd )+
            int cnt72=0;
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case 123:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount1447);
            	    cd317=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd317.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount1450);
            nnamount318=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount318.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:23: -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:127:26: ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:1: mass : ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd319 = null;

        ChemicalChunkerParser.nnmass_return nnmass320 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:6: ( ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:8: ( cd )+ nnmass
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:8: ( cd )+
            int cnt73=0;
            loop73:
            do {
                int alt73=2;
                switch ( input.LA(1) ) {
                case 123:
                    {
                    alt73=1;
                    }
                    break;

                }

                switch (alt73) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass1472);
            	    cd319=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd319.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass1475);
            nnmass320=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass320.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 128:18: -> ^( NODE[\"MASS\"] ( cd )+ nnmass )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:128:21: ^( NODE[\"MASS\"] ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:1: percent : cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd321 = null;

        ChemicalChunkerParser.nn_return nn322 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent323 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:9: ( cd ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:11: cd ( nn )? nnpercent
            {
            pushFollow(FOLLOW_cd_in_percent1497);
            cd321=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd321.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:14: ( nn )?
            int alt74=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt74=1;
                    }
                    break;
            }

            switch (alt74) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent1499);
                    nn322=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn322.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent1502);
            nnpercent323=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent323.getTree());


            // AST REWRITE
            // elements: nnpercent, nn, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 129:28: -> ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:31: ^( NODE[\"PERCENT\"] cd ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:129:54: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:1: volume : ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd324 = null;

        ChemicalChunkerParser.nnvol_return nnvol325 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:8: ( ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:10: ( cd )+ nnvol
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:10: ( cd )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                switch ( input.LA(1) ) {
                case 123:
                    {
                    alt75=1;
                    }
                    break;

                }

                switch (alt75) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume1526);
            	    cd324=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd324.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume1529);
            nnvol325=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol325.getTree());


            // AST REWRITE
            // elements: cd, nnvol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:20: -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:130:23: ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:1: molar : ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd326 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar327 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:7: ( ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:9: ( cd )* nnmolar
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:9: ( cd )*
            loop76:
            do {
                int alt76=2;
                switch ( input.LA(1) ) {
                case 123:
                    {
                    alt76=1;
                    }
                    break;

                }

                switch (alt76) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar1551);
            	    cd326=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd326.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar1554);
            nnmolar327=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar327.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 131:21: -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:24: ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:131:42: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:133:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize328 = null;

        ChemicalChunkerParser.inas_return inas329 = null;

        ChemicalChunkerParser.nnexample_return nnexample330 = null;

        ChemicalChunkerParser.cd_return cd331 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase332 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1578);
            vbsynthesize328=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize328.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1580);
            inas329=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas329.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:22: ( nnexample cd | prepphrase )
            int alt77=2;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt77=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 36:
            case 44:
            case 101:
            case 123:
            case 128:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
            case 177:
                {
                alt77=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1583);
                    nnexample330=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample330.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1585);
                    cd331=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd331.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:134:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1588);
                    prepphrase332=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase332.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:135:1: apparatus : ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus333 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus334 = null;


        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        RewriteRuleSubtreeStream stream_nnapparatus=new RewriteRuleSubtreeStream(adaptor,"rule nnapparatus");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:2: ( ( preapparatus )* ( nnapparatus )+ -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:4: ( preapparatus )* ( nnapparatus )+
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:4: ( preapparatus )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 35:
                case 38:
                case 43:
                case 48:
                case 59:
                case 107:
                case 123:
                case 128:
                case 140:
                case 141:
                case 142:
                case 143:
                case 146:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1598);
            	    preapparatus333=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus333.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:18: ( nnapparatus )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 69:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred266_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_apparatus1601);
            	    nnapparatus334=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnapparatus.add(nnapparatus334.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, nnapparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 136:30: -> ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:33: ^( NODE[\"APPARATUS\"] ( preapparatus )* ( nnapparatus )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:55: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnapparatus.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnapparatus.nextTree());

                }
                stream_nnapparatus.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:138:1: preapparatus : ( ( dt )? quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate );
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt335 = null;

        ChemicalChunkerParser.quantity_return quantity336 = null;

        ChemicalChunkerParser.nn_return nn337 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure338 = null;

        ChemicalChunkerParser.adj_return adj339 = null;

        ChemicalChunkerParser.nnadd_return nnadd340 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity341 = null;

        ChemicalChunkerParser.nnstate_return nnstate342 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:2: ( ( dt )? quantity | nn | nnpressure | adj | nnadd | nnchementity | nnstate )
            int alt81=7;
            switch ( input.LA(1) ) {
            case 38:
            case 107:
            case 123:
            case 128:
                {
                alt81=1;
                }
                break;
            case 146:
                {
                alt81=2;
                }
                break;
            case 48:
                {
                alt81=3;
                }
                break;
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt81=4;
                }
                break;
            case 59:
                {
                alt81=5;
                }
                break;
            case 43:
                {
                alt81=6;
                }
                break;
            case 35:
                {
                alt81=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: ( dt )? quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:5: ( dt )?
                    int alt80=2;
                    switch ( input.LA(1) ) {
                        case 128:
                            {
                            alt80=1;
                            }
                            break;
                    }

                    switch (alt80) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                            {
                            pushFollow(FOLLOW_dt_in_preapparatus1627);
                            dt335=dt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dt335.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantity_in_preapparatus1631);
                    quantity336=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity336.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:19: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_preapparatus1633);
                    nn337=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn337.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:22: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_preapparatus1635);
                    nnpressure338=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure338.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:33: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_preapparatus1637);
                    adj339=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj339.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:37: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_preapparatus1639);
                    nnadd340=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd340.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:43: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_preapparatus1641);
                    nnchementity341=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity341.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:139:56: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_preapparatus1643);
                    nnstate342=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate342.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:140:1: measurements : ( ( cd nn )? multiple | measurementtypes ( dt )? );
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd343 = null;

        ChemicalChunkerParser.nn_return nn344 = null;

        ChemicalChunkerParser.multiple_return multiple345 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes346 = null;

        ChemicalChunkerParser.dt_return dt347 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:2: ( ( cd nn )? multiple | measurementtypes ( dt )? )
            int alt84=2;
            switch ( input.LA(1) ) {
            case 123:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 17:
                        {
                        alt84=1;
                        }
                        break;
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 104:
                                {
                                alt84=2;
                                }
                                break;
                            case 123:
                                {
                                alt84=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 84, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 84, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 37:
                    case 38:
                    case 39:
                    case 42:
                    case 104:
                    case 123:
                        {
                        alt84=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 84, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt84=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:3: ( cd nn )? multiple
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:3: ( cd nn )?
                    int alt82=2;
                    switch ( input.LA(1) ) {
                        case 123:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    switch ( input.LA(3) ) {
                                        case 146:
                                            {
                                            alt82=1;
                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt82) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:4: cd nn
                            {
                            pushFollow(FOLLOW_cd_in_measurements1652);
                            cd343=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd343.getTree());
                            pushFollow(FOLLOW_nn_in_measurements1654);
                            nn344=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn344.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_multiple_in_measurements1658);
                    multiple345=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple345.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:21: measurementtypes ( dt )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurementtypes_in_measurements1660);
                    measurementtypes346=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes346.getTree());
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:41: ( dt )?
                    int alt83=2;
                    switch ( input.LA(1) ) {
                        case 128:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_3 = input.LA(3);

                                    if ( (synpred276_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt83) {
                        case 1 :
                            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dt
                            {
                            pushFollow(FOLLOW_dt_in_measurements1665);
                            dt347=dt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dt347.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:1: multiple : cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd348 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode349 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes350 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:10: ( cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple1673);
            cd348=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd348.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple1675);
            cdunicode349=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode349.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:25: ( measurementtypes )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple1677);
                    measurementtypes350=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes350.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, measurementtypes, cdunicode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:43: -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:46: ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:80: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:143:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar351 = null;

        ChemicalChunkerParser.amount_return amount352 = null;

        ChemicalChunkerParser.mass_return mass353 = null;

        ChemicalChunkerParser.percent_return percent354 = null;

        ChemicalChunkerParser.volume_return volume355 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:2: ( molar | amount | mass | percent | volume )
            int alt86=5;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes1705);
                    molar351=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar351.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes1707);
                    amount352=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount352.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes1709);
                    mass353=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass353.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes1711);
                    percent354=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent354.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:144:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes1713);
                    volume355=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume355.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:1: oscarCompound : ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1356 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2357 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3358 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4359 = null;

        ChemicalChunkerParser.oscarCompound5_return oscarCompound5360 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm361 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:15: ( ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )
            int alt87=6;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:19: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound1726);
                    oscarCompound1356=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1356.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:34: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound1728);
                    oscarCompound2357=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2357.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:49: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound1730);
                    oscarCompound3358=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3358.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:64: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound1732);
                    oscarCompound4359=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4359.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:79: oscarCompound5
                    {
                    pushFollow(FOLLOW_oscarCompound5_in_oscarCompound1734);
                    oscarCompound5360=oscarCompound5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound5360.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:94: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound1736);
                    oscarcm361=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm361.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound5"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:1: oscarCompound5 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound5_return oscarCompound5() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound5_return retval = new ChemicalChunkerParser.oscarCompound5_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb362 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm363 = null;

        ChemicalChunkerParser.rrb_return rrb364 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound51746);
            lrb362=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb362.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound51748);
            oscarcm363=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm363.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound51750);
            rrb364=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb364.getTree());


            // AST REWRITE
            // elements: lrb, oscarcm, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:34: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:149:37: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound5"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:1: oscarCompound4 : oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm365 = null;

        ChemicalChunkerParser.dash_return dash366 = null;

        ChemicalChunkerParser.apost_return apost367 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_apost=new RewriteRuleSubtreeStream(adaptor,"rule apost");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:16: ( oscarcm ( dash | apost )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:18: oscarcm ( dash | apost )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound41773);
            oscarcm365=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm365.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:26: ( dash | apost )+
            int cnt88=0;
            loop88:
            do {
                int alt88=3;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA88_4 = input.LA(3);

                        if ( (synpred287_ChemicalChunker()) ) {
                            alt88=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 100:
                    {
                    alt88=2;
                    }
                    break;

                }

                switch (alt88) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:27: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound41776);
            	    dash366=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash366.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:32: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound41778);
            	    apost367=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_apost.add(apost367.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, apost, dash
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:40: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:43: ^( NODE[\"OSCARCM\"] oscarcm ( dash )* ( apost )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:71: ( dash )*
                while ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:77: ( apost )*
                while ( stream_apost.hasNext() ) {
                    adaptor.addChild(root_1, stream_apost.nextTree());

                }
                stream_apost.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:1: oscarCompound3 : oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm368 = null;

        ChemicalChunkerParser.dash_return dash369 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm370 = null;

        ChemicalChunkerParser.dash_return dash371 = null;


        RewriteRuleSubtreeStream stream_dash=new RewriteRuleSubtreeStream(adaptor,"rule dash");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:16: ( oscarcm ( dash oscarcm )+ ( dash )? -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:18: oscarcm ( dash oscarcm )+ ( dash )?
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound31805);
            oscarcm368=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm368.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:26: ( dash oscarcm )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 54:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA89_5 = input.LA(5);

                                if ( (synpred289_ChemicalChunker()) ) {
                                    alt89=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt89) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:27: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound31808);
            	    dash369=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dash.add(dash369.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound31810);
            	    oscarcm370=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm370.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:42: ( dash )?
            int alt90=2;
            switch ( input.LA(1) ) {
                case 102:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA90_3 = input.LA(3);

                            if ( (synpred290_ChemicalChunker()) ) {
                                alt90=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt90) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound31814);
                    dash371=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dash.add(dash371.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dash, dash, oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:47: -> ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:50: ^( NODE[\"OSCARCM\"] oscarcm ( dash oscarcm )+ ( dash )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_dash.hasNext()||stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dash.hasNext()||stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_dash.reset();
                stream_oscarcm.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:93: ( dash )?
                if ( stream_dash.hasNext() ) {
                    adaptor.addChild(root_1, stream_dash.nextTree());

                }
                stream_dash.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:1: oscarCompound2 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm372 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm373 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound21842);
            oscarcm372=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm372.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:26: ( oscarcm )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                switch ( input.LA(1) ) {
                case 54:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA91_3 = input.LA(3);

                        if ( (synpred291_ChemicalChunker()) ) {
                            alt91=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt91) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound21844);
            	    oscarcm373=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm373.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:1: oscarCompound1 : oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm374 = null;

        ChemicalChunkerParser.jj_return jj375 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm376 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_jj=new RewriteRuleSubtreeStream(adaptor,"rule jj");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:16: ( oscarcm jj oscarcm -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:18: oscarcm jj oscarcm
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11865);
            oscarcm374=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm374.getTree());
            pushFollow(FOLLOW_jj_in_oscarCompound11867);
            jj375=jj();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_jj.add(jj375.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound11869);
            oscarcm376=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm376.getTree());


            // AST REWRITE
            // elements: jj, oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 153:37: -> ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:153:40: ^( NODE[\"OSCARCM\"] oscarcm jj oscarcm )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_jj.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:156:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity377 = null;

        ChemicalChunkerParser.mixture_return mixture378 = null;

        ChemicalChunkerParser.inof_return inof379 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound380 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:2: ( ( quantity | mixture )+ inof oscarCompound )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:3: ( quantity | mixture )+
            int cnt92=0;
            loop92:
            do {
                int alt92=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA92_2 = input.LA(2);

                    if ( (synpred292_ChemicalChunker()) ) {
                        alt92=1;
                    }
                    else if ( (synpred293_ChemicalChunker()) ) {
                        alt92=2;
                    }


                    }
                    break;
                case 38:
                case 123:
                    {
                    alt92=1;
                    }
                    break;
                case 99:
                    {
                    alt92=2;
                    }
                    break;

                }

                switch (alt92) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11893);
            	    quantity377=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity377.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11895);
            	    mixture378=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture378.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11899);
            inof379=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof379.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount11901);
            oscarCompound380=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound380.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:159:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity381 = null;

        ChemicalChunkerParser.mixture_return mixture382 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound383 = null;

        ChemicalChunkerParser.citation_return citation384 = null;

        ChemicalChunkerParser.quantity_return quantity385 = null;

        ChemicalChunkerParser.mixture_return mixture386 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:3: ( quantity | mixture )*
            loop93:
            do {
                int alt93=3;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA93_2 = input.LA(2);

                    if ( (synpred294_ChemicalChunker()) ) {
                        alt93=1;
                    }
                    else if ( (synpred295_ChemicalChunker()) ) {
                        alt93=2;
                    }


                    }
                    break;
                case 38:
                case 123:
                    {
                    alt93=1;
                    }
                    break;
                case 99:
                    {
                    alt93=2;
                    }
                    break;

                }

                switch (alt93) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21911);
            	    quantity381=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity381.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21913);
            	    mixture382=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture382.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:23: ( oscarCompound )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    int LA94_1 = input.LA(2);

                    if ( (synpred296_ChemicalChunker()) ) {
                        alt94=1;
                    }


                    }
                    break;
                case 54:
                    {
                    int LA94_3 = input.LA(2);

                    if ( (synpred296_ChemicalChunker()) ) {
                        alt94=1;
                    }


                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21917);
            	    oscarCompound383=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound383.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:39: ( citation | quantity | mixture )*
            loop95:
            do {
                int alt95=4;
                alt95 = dfa95.predict(input);
                switch (alt95) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount21922);
            	    citation384=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation384.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21924);
            	    quantity385=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity385.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21926);
            	    mixture386=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture386.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:1: moleculeamount : ( moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1387 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2388 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:16: ( moleculeamount1 | moleculeamount2 )
            int alt96=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA96_1 = input.LA(2);

                if ( (synpred300_ChemicalChunker()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA96_2 = input.LA(2);

                if ( (synpred300_ChemicalChunker()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA96_3 = input.LA(2);

                if ( (synpred300_ChemicalChunker()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 3, input);

                    throw nvae;
                }
                }
                break;
            case 99:
                {
                int LA96_4 = input.LA(2);

                if ( (synpred300_ChemicalChunker()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 4, input);

                    throw nvae;
                }
                }
                break;
            case 54:
                {
                alt96=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }

            switch (alt96) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:18: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1937);
                    moleculeamount1387=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1387.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:36: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1941);
                    moleculeamount2388=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2388.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:162:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount389 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1962);
            moleculeamount389=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount389.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 163:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:163:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class oscarcdType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcdType"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:1: oscarcdType : lrb ( oscarcd | cd ) rrb ;
    public final ChemicalChunkerParser.oscarcdType_return oscarcdType() throws RecognitionException {
        ChemicalChunkerParser.oscarcdType_return retval = new ChemicalChunkerParser.oscarcdType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb390 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd391 = null;

        ChemicalChunkerParser.cd_return cd392 = null;

        ChemicalChunkerParser.rrb_return rrb393 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:13: ( lrb ( oscarcd | cd ) rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:16: lrb ( oscarcd | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_oscarcdType1985);
            lrb390=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb390.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:20: ( oscarcd | cd )
            int alt97=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt97=1;
                }
                break;
            case 123:
                {
                alt97=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:21: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_oscarcdType1988);
                    oscarcd391=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd391.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:168:29: cd
                    {
                    pushFollow(FOLLOW_cd_in_oscarcdType1990);
                    cd392=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd392.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_oscarcdType1993);
            rrb393=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb393.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcdType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:169:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity394 = null;

        ChemicalChunkerParser.inof_return inof395 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd396 = null;

        ChemicalChunkerParser.cd_return cd397 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12002);
            quantity394=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity394.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12004);
            inof395=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof395.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:18: ( oscarcd | cd )
            int alt98=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt98=1;
                }
                break;
            case 123:
                {
                alt98=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount12007);
                    oscarcd396=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd396.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:170:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12009);
                    cd397=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd397.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:171:1: unnamedmoleculeamount2 : ( oscarcd | oscarcdType ( citation | quantity | mixture )* );
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd398 = null;

        ChemicalChunkerParser.oscarcdType_return oscarcdType399 = null;

        ChemicalChunkerParser.citation_return citation400 = null;

        ChemicalChunkerParser.quantity_return quantity401 = null;

        ChemicalChunkerParser.mixture_return mixture402 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:2: ( oscarcd | oscarcdType ( citation | quantity | mixture )* )
            int alt100=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt100=1;
                }
                break;
            case 107:
                {
                alt100=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:3: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount22017);
                    oscarcd398=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd398.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:11: oscarcdType ( citation | quantity | mixture )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcdType_in_unnamedmoleculeamount22019);
                    oscarcdType399=oscarcdType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcdType399.getTree());
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:23: ( citation | quantity | mixture )*
                    loop99:
                    do {
                        int alt99=4;
                        alt99 = dfa99.predict(input);
                        switch (alt99) {
                    	case 1 :
                    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:24: citation
                    	    {
                    	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22022);
                    	    citation400=citation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation400.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:33: quantity
                    	    {
                    	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22024);
                    	    quantity401=quantity();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity401.getTree());

                    	    }
                    	    break;
                    	case 3 :
                    	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:42: mixture
                    	    {
                    	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22026);
                    	    mixture402=mixture();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture402.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:177:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity403 = null;

        ChemicalChunkerParser.inof_return inof404 = null;

        ChemicalChunkerParser.jj_return jj405 = null;

        ChemicalChunkerParser.noun_return noun406 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32042);
            quantity403=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity403.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32044);
            inof404=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof404.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:17: ( ( jj )? noun )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                alt102 = dfa102.predict(input);
                switch (alt102) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: ( jj )?
            	    int alt101=2;
            	    switch ( input.LA(1) ) {
            	        case 140:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA101_3 = input.LA(3);

            	                    if ( (synpred307_ChemicalChunker()) ) {
            	                        alt101=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt101) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32047);
            	            jj405=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj405.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32050);
            	    noun406=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun406.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:180:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 );
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1407 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2408 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3409 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:2: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 )
            int alt103=3;
            switch ( input.LA(1) ) {
            case 107:
                {
                int LA103_1 = input.LA(2);

                if ( (synpred309_ChemicalChunker()) ) {
                    alt103=1;
                }
                else if ( (synpred310_ChemicalChunker()) ) {
                    alt103=2;
                }
                else if ( (true) ) {
                    alt103=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 1, input);

                    throw nvae;
                }
                }
                break;
            case 123:
                {
                int LA103_2 = input.LA(2);

                if ( (synpred309_ChemicalChunker()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
                {
                int LA103_3 = input.LA(2);

                if ( (synpred309_ChemicalChunker()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 3, input);

                    throw nvae;
                }
                }
                break;
            case 11:
                {
                alt103=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:3: unnamedmoleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2061);
                    unnamedmoleculeamount1407=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1407.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:28: unnamedmoleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2065);
                    unnamedmoleculeamount2408=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2408.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:53: unnamedmoleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2069);
                    unnamedmoleculeamount3409=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3409.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:184:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount410 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2082);
            unnamedmoleculeamount410=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount410.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:185:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1411 = null;

        ChemicalChunkerParser.quantity2_return quantity2412 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:14: ( quantity1 | quantity2 )
            int alt104=2;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt104=1;
                }
                break;
            case 38:
            case 123:
                {
                alt104=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2105);
                    quantity1411=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1411.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2107);
                    quantity2412=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2412.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity2, quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:187:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:188:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb413 = null;

        ChemicalChunkerParser.measurements_return measurements414 = null;

        ChemicalChunkerParser.comma_return comma415 = null;

        ChemicalChunkerParser.measurements_return measurements416 = null;

        ChemicalChunkerParser.comma_return comma417 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase418 = null;

        ChemicalChunkerParser.stop_return stop419 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase420 = null;

        ChemicalChunkerParser.rrb_return rrb421 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12132);
            lrb413=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb413.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12134);
            measurements414=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements414.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:21: ( comma measurements )*
            loop105:
            do {
                int alt105=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 123:
                            {
                            alt105=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt105) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12137);
            	    comma415=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma415.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12140);
            	    measurements416=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements416.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:44: ( comma preparationphrase )*
            loop106:
            do {
                int alt106=2;
                switch ( input.LA(1) ) {
                case 99:
                    {
                    alt106=1;
                    }
                    break;

                }

                switch (alt106) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12145);
            	    comma417=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma417.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12147);
            	    preparationphrase418=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase418.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:71: ( stop preparationphrase )*
            loop107:
            do {
                int alt107=2;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    alt107=1;
                    }
                    break;

                }

                switch (alt107) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:189:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12152);
            	    stop419=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop419.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12154);
            	    preparationphrase420=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase420.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12159);
            rrb421=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb421.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:190:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements422 = null;

        ChemicalChunkerParser.comma_return comma423 = null;

        ChemicalChunkerParser.measurements_return measurements424 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22170);
            measurements422=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements422.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:18: ( comma measurements )*
            loop108:
            do {
                int alt108=2;
                alt108 = dfa108.predict(input);
                switch (alt108) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22173);
            	    comma423=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma423.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22176);
            	    measurements424=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements424.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral425 = null;

        ChemicalChunkerParser.nn_return nn426 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod427 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd428 = null;

        ChemicalChunkerParser.cd_return cd429 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:193:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:5: ( nngeneral | nn )?
            int alt109=3;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt109=1;
                    }
                    break;
                case 146:
                    {
                    alt109=2;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2192);
                    nngeneral425=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral425.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2194);
                    nn426=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn426.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2198);
            nnmethod427=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod427.getTree());
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:30: ( oscarcd | cd )?
            int alt110=3;
            switch ( input.LA(1) ) {
                case 11:
                    {
                    alt110=1;
                    }
                    break;
                case 123:
                    {
                    alt110=2;
                    }
                    break;
            }

            switch (alt110) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2201);
                    oscarcd428=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd428.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:194:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2203);
                    cd429=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd429.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:195:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb430 = null;

        ChemicalChunkerParser.rrb_return rrb431 = null;

        ChemicalChunkerParser.lsqb_return lsqb432 = null;

        ChemicalChunkerParser.rsqb_return rsqb433 = null;



        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt111=0;
            loop111:
            do {
                int alt111=5;
                alt111 = dfa111.predict(input);
                switch (alt111) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2225);
            	    lrb430=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb430.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2227);
            	    rrb431=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb431.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2229);
            	    lsqb432=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb432.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2231);
            	    rsqb433=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb433.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal434=null;
        Token TOKEN435=null;

        Object string_literal434_tree=null;
        Object TOKEN435_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:8: ( 'OSCAR-CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:198:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal434=(Token)match(input,11,FOLLOW_11_in_oscarcd2239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal434_tree = (Object)adaptor.create(string_literal434);
            adaptor.addChild(root_0, string_literal434_tree);
            }
            TOKEN435=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN435_tree = (Object)adaptor.create(TOKEN435);
            adaptor.addChild(root_0, TOKEN435_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal436=null;
        Token TOKEN437=null;

        Object string_literal436_tree=null;
        Object TOKEN437_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:8: ( 'OSCAR-CJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:199:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal436=(Token)match(input,12,FOLLOW_12_in_oscarcj2246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal436_tree = (Object)adaptor.create(string_literal436);
            adaptor.addChild(root_0, string_literal436_tree);
            }
            TOKEN437=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN437_tree = (Object)adaptor.create(TOKEN437);
            adaptor.addChild(root_0, TOKEN437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal438=null;
        Token TOKEN439=null;

        Object string_literal438_tree=null;
        Object TOKEN439_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:8: ( 'OSCAR-RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:200:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal438=(Token)match(input,13,FOLLOW_13_in_oscarrn2253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = (Object)adaptor.create(string_literal438);
            adaptor.addChild(root_0, string_literal438_tree);
            }
            TOKEN439=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN439_tree = (Object)adaptor.create(TOKEN439);
            adaptor.addChild(root_0, TOKEN439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal440=null;
        Token TOKEN441=null;

        Object string_literal440_tree=null;
        Object TOKEN441_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:9: ( 'OSCAR-CPR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:201:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal440=(Token)match(input,14,FOLLOW_14_in_oscarcpr2260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal440_tree = (Object)adaptor.create(string_literal440);
            adaptor.addChild(root_0, string_literal440_tree);
            }
            TOKEN441=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN441_tree = (Object)adaptor.create(TOKEN441);
            adaptor.addChild(root_0, TOKEN441_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal442=null;
        Token TOKEN443=null;

        Object string_literal442_tree=null;
        Object TOKEN443_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:9: ( 'OSCAR-ONT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:202:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal442=(Token)match(input,15,FOLLOW_15_in_oscaront2268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal442_tree = (Object)adaptor.create(string_literal442);
            adaptor.addChild(root_0, string_literal442_tree);
            }
            TOKEN443=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN443_tree = (Object)adaptor.create(TOKEN443);
            adaptor.addChild(root_0, TOKEN443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal444=null;
        Token TOKEN445=null;

        Object string_literal444_tree=null;
        Object TOKEN445_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:10: ( 'TM-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:203:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal444=(Token)match(input,16,FOLLOW_16_in_tmunicode2275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = (Object)adaptor.create(string_literal444);
            adaptor.addChild(root_0, string_literal444_tree);
            }
            TOKEN445=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN445_tree = (Object)adaptor.create(TOKEN445);
            adaptor.addChild(root_0, TOKEN445_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal446=null;
        Token TOKEN447=null;

        Object string_literal446_tree=null;
        Object TOKEN447_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:10: ( 'CD-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:204:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal446=(Token)match(input,17,FOLLOW_17_in_cdunicode2282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal446_tree = (Object)adaptor.create(string_literal446);
            adaptor.addChild(root_0, string_literal446_tree);
            }
            TOKEN447=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN447_tree = (Object)adaptor.create(TOKEN447);
            adaptor.addChild(root_0, TOKEN447_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal448=null;
        Token TOKEN449=null;

        Object string_literal448_tree=null;
        Object TOKEN449_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:5: ( 'IN-AS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:207:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal448=(Token)match(input,18,FOLLOW_18_in_inas2291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal448_tree = (Object)adaptor.create(string_literal448);
            adaptor.addChild(root_0, string_literal448_tree);
            }
            TOKEN449=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN449_tree = (Object)adaptor.create(TOKEN449);
            adaptor.addChild(root_0, TOKEN449_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal450=null;
        Token TOKEN451=null;

        Object string_literal450_tree=null;
        Object TOKEN451_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:9: ( 'IN-BEFORE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:208:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal450=(Token)match(input,19,FOLLOW_19_in_inbefore2298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal450_tree = (Object)adaptor.create(string_literal450);
            adaptor.addChild(root_0, string_literal450_tree);
            }
            TOKEN451=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN451_tree = (Object)adaptor.create(TOKEN451);
            adaptor.addChild(root_0, TOKEN451_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal452=null;
        Token TOKEN453=null;

        Object string_literal452_tree=null;
        Object TOKEN453_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:8: ( 'IN-AFTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:209:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal452=(Token)match(input,20,FOLLOW_20_in_inafter2305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal452_tree = (Object)adaptor.create(string_literal452);
            adaptor.addChild(root_0, string_literal452_tree);
            }
            TOKEN453=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN453_tree = (Object)adaptor.create(TOKEN453);
            adaptor.addChild(root_0, TOKEN453_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal454=null;
        Token TOKEN455=null;

        Object string_literal454_tree=null;
        Object TOKEN455_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:5: ( 'IN-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:210:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal454=(Token)match(input,21,FOLLOW_21_in_inin2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal454_tree = (Object)adaptor.create(string_literal454);
            adaptor.addChild(root_0, string_literal454_tree);
            }
            TOKEN455=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN455_tree = (Object)adaptor.create(TOKEN455);
            adaptor.addChild(root_0, TOKEN455_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal456=null;
        Token TOKEN457=null;

        Object string_literal456_tree=null;
        Object TOKEN457_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:7: ( 'IN-INTO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:211:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal456=(Token)match(input,22,FOLLOW_22_in_ininto2319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal456_tree = (Object)adaptor.create(string_literal456);
            adaptor.addChild(root_0, string_literal456_tree);
            }
            TOKEN457=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN457_tree = (Object)adaptor.create(TOKEN457);
            adaptor.addChild(root_0, TOKEN457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal458=null;
        Token TOKEN459=null;

        Object string_literal458_tree=null;
        Object TOKEN459_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:7: ( 'IN-WITH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:212:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal458=(Token)match(input,23,FOLLOW_23_in_inwith2326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal458_tree = (Object)adaptor.create(string_literal458);
            adaptor.addChild(root_0, string_literal458_tree);
            }
            TOKEN459=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN459_tree = (Object)adaptor.create(TOKEN459);
            adaptor.addChild(root_0, TOKEN459_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal460=null;
        Token TOKEN461=null;

        Object string_literal460_tree=null;
        Object TOKEN461_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:10: ( 'IN-WITHOUT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:213:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal460=(Token)match(input,24,FOLLOW_24_in_inwithout2333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal460_tree = (Object)adaptor.create(string_literal460);
            adaptor.addChild(root_0, string_literal460_tree);
            }
            TOKEN461=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN461_tree = (Object)adaptor.create(TOKEN461);
            adaptor.addChild(root_0, TOKEN461_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal462=null;
        Token TOKEN463=null;

        Object string_literal462_tree=null;
        Object TOKEN463_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:5: ( 'IN-BY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:214:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal462=(Token)match(input,25,FOLLOW_25_in_inby2340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal462_tree = (Object)adaptor.create(string_literal462);
            adaptor.addChild(root_0, string_literal462_tree);
            }
            TOKEN463=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN463_tree = (Object)adaptor.create(TOKEN463);
            adaptor.addChild(root_0, TOKEN463_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal464=null;
        Token TOKEN465=null;

        Object string_literal464_tree=null;
        Object TOKEN465_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:6: ( 'IN-VIA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:215:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal464=(Token)match(input,26,FOLLOW_26_in_invia2347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal464_tree = (Object)adaptor.create(string_literal464);
            adaptor.addChild(root_0, string_literal464_tree);
            }
            TOKEN465=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN465_tree = (Object)adaptor.create(TOKEN465);
            adaptor.addChild(root_0, TOKEN465_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal466=null;
        Token TOKEN467=null;

        Object string_literal466_tree=null;
        Object TOKEN467_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:5: ( 'IN-OF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:216:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal466=(Token)match(input,27,FOLLOW_27_in_inof2354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = (Object)adaptor.create(string_literal466);
            adaptor.addChild(root_0, string_literal466_tree);
            }
            TOKEN467=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN467_tree = (Object)adaptor.create(TOKEN467);
            adaptor.addChild(root_0, TOKEN467_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal468=null;
        Token TOKEN469=null;

        Object string_literal468_tree=null;
        Object TOKEN469_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:5: ( 'IN-ON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:217:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal468=(Token)match(input,28,FOLLOW_28_in_inon2361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal468_tree = (Object)adaptor.create(string_literal468);
            adaptor.addChild(root_0, string_literal468_tree);
            }
            TOKEN469=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN469_tree = (Object)adaptor.create(TOKEN469);
            adaptor.addChild(root_0, TOKEN469_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal470=null;
        Token TOKEN471=null;

        Object string_literal470_tree=null;
        Object TOKEN471_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:6: ( 'IN-FOR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:218:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal470=(Token)match(input,29,FOLLOW_29_in_infor2368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal470_tree = (Object)adaptor.create(string_literal470);
            adaptor.addChild(root_0, string_literal470_tree);
            }
            TOKEN471=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor2370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN471_tree = (Object)adaptor.create(TOKEN471);
            adaptor.addChild(root_0, TOKEN471_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal472=null;
        Token TOKEN473=null;

        Object string_literal472_tree=null;
        Object TOKEN473_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:7: ( 'IN-FROM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:219:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal472=(Token)match(input,30,FOLLOW_30_in_infrom2375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal472_tree = (Object)adaptor.create(string_literal472);
            adaptor.addChild(root_0, string_literal472_tree);
            }
            TOKEN473=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom2377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN473_tree = (Object)adaptor.create(TOKEN473);
            adaptor.addChild(root_0, TOKEN473_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal474=null;
        Token TOKEN475=null;

        Object string_literal474_tree=null;
        Object TOKEN475_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:8: ( 'IN-UNDER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:220:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal474=(Token)match(input,31,FOLLOW_31_in_inunder2382); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = (Object)adaptor.create(string_literal474);
            adaptor.addChild(root_0, string_literal474_tree);
            }
            TOKEN475=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder2384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN475_tree = (Object)adaptor.create(TOKEN475);
            adaptor.addChild(root_0, TOKEN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal476=null;
        Token TOKEN477=null;

        Object string_literal476_tree=null;
        Object TOKEN477_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:7: ( 'IN-OVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:221:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal476=(Token)match(input,32,FOLLOW_32_in_inover2389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal476_tree = (Object)adaptor.create(string_literal476);
            adaptor.addChild(root_0, string_literal476_tree);
            }
            TOKEN477=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover2391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN477_tree = (Object)adaptor.create(TOKEN477);
            adaptor.addChild(root_0, TOKEN477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal478=null;
        Token TOKEN479=null;

        Object string_literal478_tree=null;
        Object TOKEN479_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:6: ( 'IN-OFF' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:222:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal478=(Token)match(input,33,FOLLOW_33_in_inoff2396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal478_tree = (Object)adaptor.create(string_literal478);
            adaptor.addChild(root_0, string_literal478_tree);
            }
            TOKEN479=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff2398); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN479_tree = (Object)adaptor.create(TOKEN479);
            adaptor.addChild(root_0, TOKEN479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal480=null;
        Token TOKEN481=null;

        Object string_literal480_tree=null;
        Object TOKEN481_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:10: ( 'NN-EXAMPLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:225:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal480=(Token)match(input,34,FOLLOW_34_in_nnexample2405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (Object)adaptor.create(string_literal480);
            adaptor.addChild(root_0, string_literal480_tree);
            }
            TOKEN481=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample2407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN481_tree = (Object)adaptor.create(TOKEN481);
            adaptor.addChild(root_0, TOKEN481_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal482=null;
        Token TOKEN483=null;

        Object string_literal482_tree=null;
        Object TOKEN483_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:8: ( 'NN-STATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:226:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal482=(Token)match(input,35,FOLLOW_35_in_nnstate2412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal482_tree = (Object)adaptor.create(string_literal482);
            adaptor.addChild(root_0, string_literal482_tree);
            }
            TOKEN483=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate2414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN483_tree = (Object)adaptor.create(TOKEN483);
            adaptor.addChild(root_0, TOKEN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal484=null;
        Token TOKEN485=null;

        Object string_literal484_tree=null;
        Object TOKEN485_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:7: ( 'NN-TIME' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:227:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal484=(Token)match(input,36,FOLLOW_36_in_nntime2419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal484_tree = (Object)adaptor.create(string_literal484);
            adaptor.addChild(root_0, string_literal484_tree);
            }
            TOKEN485=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime2421); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN485_tree = (Object)adaptor.create(TOKEN485);
            adaptor.addChild(root_0, TOKEN485_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal486=null;
        Token TOKEN487=null;

        Object string_literal486_tree=null;
        Object TOKEN487_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:7: ( 'NN-MASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:228:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal486=(Token)match(input,37,FOLLOW_37_in_nnmass2426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal486_tree = (Object)adaptor.create(string_literal486);
            adaptor.addChild(root_0, string_literal486_tree);
            }
            TOKEN487=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass2428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN487_tree = (Object)adaptor.create(TOKEN487);
            adaptor.addChild(root_0, TOKEN487_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal488=null;
        Token TOKEN489=null;

        Object string_literal488_tree=null;
        Object TOKEN489_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:8: ( 'NN-MOLAR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:229:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal488=(Token)match(input,38,FOLLOW_38_in_nnmolar2434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal488_tree = (Object)adaptor.create(string_literal488);
            adaptor.addChild(root_0, string_literal488_tree);
            }
            TOKEN489=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar2437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN489_tree = (Object)adaptor.create(TOKEN489);
            adaptor.addChild(root_0, TOKEN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal490=null;
        Token TOKEN491=null;

        Object string_literal490_tree=null;
        Object TOKEN491_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:9: ( 'NN-AMOUNT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:230:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal490=(Token)match(input,39,FOLLOW_39_in_nnamount2442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal490_tree = (Object)adaptor.create(string_literal490);
            adaptor.addChild(root_0, string_literal490_tree);
            }
            TOKEN491=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount2444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN491_tree = (Object)adaptor.create(TOKEN491);
            adaptor.addChild(root_0, TOKEN491_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal492=null;
        Token TOKEN493=null;

        Object string_literal492_tree=null;
        Object TOKEN493_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:13: ( 'NN-ATMOSPHERE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:231:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal492=(Token)match(input,40,FOLLOW_40_in_nnatmosphere2449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal492_tree = (Object)adaptor.create(string_literal492);
            adaptor.addChild(root_0, string_literal492_tree);
            }
            TOKEN493=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere2451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN493_tree = (Object)adaptor.create(TOKEN493);
            adaptor.addChild(root_0, TOKEN493_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal494=null;
        Token TOKEN495=null;

        Object string_literal494_tree=null;
        Object TOKEN495_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:5: ( 'NN-EQ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:232:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal494=(Token)match(input,41,FOLLOW_41_in_nneq2456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal494_tree = (Object)adaptor.create(string_literal494);
            adaptor.addChild(root_0, string_literal494_tree);
            }
            TOKEN495=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq2458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN495_tree = (Object)adaptor.create(TOKEN495);
            adaptor.addChild(root_0, TOKEN495_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal496=null;
        Token TOKEN497=null;

        Object string_literal496_tree=null;
        Object TOKEN497_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:6: ( 'NN-VOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:233:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal496=(Token)match(input,42,FOLLOW_42_in_nnvol2463); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal496_tree = (Object)adaptor.create(string_literal496);
            adaptor.addChild(root_0, string_literal496_tree);
            }
            TOKEN497=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol2465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN497_tree = (Object)adaptor.create(TOKEN497);
            adaptor.addChild(root_0, TOKEN497_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal498=null;
        Token TOKEN499=null;

        Object string_literal498_tree=null;
        Object TOKEN499_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:13: ( 'NN-CHEMENTITY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:234:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal498=(Token)match(input,43,FOLLOW_43_in_nnchementity2470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal498_tree = (Object)adaptor.create(string_literal498);
            adaptor.addChild(root_0, string_literal498_tree);
            }
            TOKEN499=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity2472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN499_tree = (Object)adaptor.create(TOKEN499);
            adaptor.addChild(root_0, TOKEN499_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal500=null;
        Token TOKEN501=null;

        Object string_literal500_tree=null;
        Object TOKEN501_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:7: ( 'NN-TEMP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:235:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal500=(Token)match(input,44,FOLLOW_44_in_nntemp2477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal500_tree = (Object)adaptor.create(string_literal500);
            adaptor.addChild(root_0, string_literal500_tree);
            }
            TOKEN501=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp2479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN501_tree = (Object)adaptor.create(TOKEN501);
            adaptor.addChild(root_0, TOKEN501_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal502=null;
        Token TOKEN503=null;

        Object string_literal502_tree=null;
        Object TOKEN503_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:8: ( 'NN-FLASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:236:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal502=(Token)match(input,45,FOLLOW_45_in_nnflash2484); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal502_tree = (Object)adaptor.create(string_literal502);
            adaptor.addChild(root_0, string_literal502_tree);
            }
            TOKEN503=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash2486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN503_tree = (Object)adaptor.create(TOKEN503);
            adaptor.addChild(root_0, TOKEN503_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal504=null;
        Token TOKEN505=null;

        Object string_literal504_tree=null;
        Object TOKEN505_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:10: ( 'NN-GENERAL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:237:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal504=(Token)match(input,46,FOLLOW_46_in_nngeneral2491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal504_tree = (Object)adaptor.create(string_literal504);
            adaptor.addChild(root_0, string_literal504_tree);
            }
            TOKEN505=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral2493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN505_tree = (Object)adaptor.create(TOKEN505);
            adaptor.addChild(root_0, TOKEN505_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal506=null;
        Token TOKEN507=null;

        Object string_literal506_tree=null;
        Object TOKEN507_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:9: ( 'NN-METHOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:238:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal506=(Token)match(input,47,FOLLOW_47_in_nnmethod2498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal506_tree = (Object)adaptor.create(string_literal506);
            adaptor.addChild(root_0, string_literal506_tree);
            }
            TOKEN507=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod2500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN507_tree = (Object)adaptor.create(TOKEN507);
            adaptor.addChild(root_0, TOKEN507_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal508=null;
        Token TOKEN509=null;

        Object string_literal508_tree=null;
        Object TOKEN509_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:11: ( 'NN-PRESSURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:240:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal508=(Token)match(input,48,FOLLOW_48_in_nnpressure2506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal508_tree = (Object)adaptor.create(string_literal508);
            adaptor.addChild(root_0, string_literal508_tree);
            }
            TOKEN509=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure2508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN509_tree = (Object)adaptor.create(TOKEN509);
            adaptor.addChild(root_0, TOKEN509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal510=null;
        Token TOKEN511=null;

        Object string_literal510_tree=null;
        Object TOKEN511_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:9: ( 'NN-COLUMN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:241:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal510=(Token)match(input,49,FOLLOW_49_in_nncolumn2513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal510_tree = (Object)adaptor.create(string_literal510);
            adaptor.addChild(root_0, string_literal510_tree);
            }
            TOKEN511=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn2515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN511_tree = (Object)adaptor.create(TOKEN511);
            adaptor.addChild(root_0, TOKEN511_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal512=null;
        Token TOKEN513=null;

        Object string_literal512_tree=null;
        Object TOKEN513_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:242:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal512=(Token)match(input,50,FOLLOW_50_in_nnchromatography2520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal512_tree = (Object)adaptor.create(string_literal512);
            adaptor.addChild(root_0, string_literal512_tree);
            }
            TOKEN513=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography2522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN513_tree = (Object)adaptor.create(TOKEN513);
            adaptor.addChild(root_0, TOKEN513_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal514=null;
        Token TOKEN515=null;

        Object string_literal514_tree=null;
        Object TOKEN515_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:9: ( 'NN-VACUUM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:243:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal514=(Token)match(input,51,FOLLOW_51_in_nnvacuum2527); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal514_tree = (Object)adaptor.create(string_literal514);
            adaptor.addChild(root_0, string_literal514_tree);
            }
            TOKEN515=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum2529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN515_tree = (Object)adaptor.create(TOKEN515);
            adaptor.addChild(root_0, TOKEN515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal516=null;
        Token TOKEN517=null;

        Object string_literal516_tree=null;
        Object TOKEN517_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:8: ( 'NN-CYCLE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:244:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal516=(Token)match(input,52,FOLLOW_52_in_nncycle2534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal516_tree = (Object)adaptor.create(string_literal516);
            adaptor.addChild(root_0, string_literal516_tree);
            }
            TOKEN517=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle2536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN517_tree = (Object)adaptor.create(TOKEN517);
            adaptor.addChild(root_0, TOKEN517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal518=null;
        Token TOKEN519=null;

        Object string_literal518_tree=null;
        Object TOKEN519_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:8: ( 'NN-TIMES' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:245:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal518=(Token)match(input,53,FOLLOW_53_in_nntimes2541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal518_tree = (Object)adaptor.create(string_literal518);
            adaptor.addChild(root_0, string_literal518_tree);
            }
            TOKEN519=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes2543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN519_tree = (Object)adaptor.create(TOKEN519);
            adaptor.addChild(root_0, TOKEN519_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal520=null;
        Token TOKEN521=null;

        Object string_literal520_tree=null;
        Object TOKEN521_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:8: ( 'OSCAR-CM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:248:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal520=(Token)match(input,54,FOLLOW_54_in_oscarcm2550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal520_tree = (Object)adaptor.create(string_literal520);
            adaptor.addChild(root_0, string_literal520_tree);
            }
            TOKEN521=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm2552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN521_tree = (Object)adaptor.create(TOKEN521);
            adaptor.addChild(root_0, TOKEN521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal522=null;
        Token TOKEN523=null;

        Object string_literal522_tree=null;
        Object TOKEN523_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:6: ( 'VB-USE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:251:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal522=(Token)match(input,55,FOLLOW_55_in_vbuse2559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = (Object)adaptor.create(string_literal522);
            adaptor.addChild(root_0, string_literal522_tree);
            }
            TOKEN523=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse2561); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN523_tree = (Object)adaptor.create(TOKEN523);
            adaptor.addChild(root_0, TOKEN523_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal524=null;
        Token TOKEN525=null;

        Object string_literal524_tree=null;
        Object TOKEN525_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:9: ( 'VB-CHANGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:252:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal524=(Token)match(input,56,FOLLOW_56_in_vbchange2566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal524_tree = (Object)adaptor.create(string_literal524);
            adaptor.addChild(root_0, string_literal524_tree);
            }
            TOKEN525=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange2568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN525_tree = (Object)adaptor.create(TOKEN525);
            adaptor.addChild(root_0, TOKEN525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal526=null;
        Token TOKEN527=null;

        Object string_literal526_tree=null;
        Object TOKEN527_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:11: ( 'VB-SUBMERGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:253:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal526=(Token)match(input,57,FOLLOW_57_in_vbsubmerge2573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal526_tree = (Object)adaptor.create(string_literal526);
            adaptor.addChild(root_0, string_literal526_tree);
            }
            TOKEN527=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge2575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN527_tree = (Object)adaptor.create(TOKEN527);
            adaptor.addChild(root_0, TOKEN527_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal528=null;
        Token TOKEN529=null;

        Object string_literal528_tree=null;
        Object TOKEN529_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:10: ( 'VB-SUBJECT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:254:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal528=(Token)match(input,58,FOLLOW_58_in_vbsubject2580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal528_tree = (Object)adaptor.create(string_literal528);
            adaptor.addChild(root_0, string_literal528_tree);
            }
            TOKEN529=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject2582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN529_tree = (Object)adaptor.create(TOKEN529);
            adaptor.addChild(root_0, TOKEN529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal530=null;
        Token TOKEN531=null;

        Object string_literal530_tree=null;
        Object TOKEN531_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:6: ( 'NN-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:257:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal530=(Token)match(input,59,FOLLOW_59_in_nnadd2589); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal530_tree = (Object)adaptor.create(string_literal530);
            adaptor.addChild(root_0, string_literal530_tree);
            }
            TOKEN531=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd2591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN531_tree = (Object)adaptor.create(TOKEN531);
            adaptor.addChild(root_0, TOKEN531_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal532=null;
        Token TOKEN533=null;

        Object string_literal532_tree=null;
        Object TOKEN533_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:10: ( 'NN-MIXTURE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:258:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal532=(Token)match(input,60,FOLLOW_60_in_nnmixture2596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal532_tree = (Object)adaptor.create(string_literal532);
            adaptor.addChild(root_0, string_literal532_tree);
            }
            TOKEN533=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture2598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN533_tree = (Object)adaptor.create(TOKEN533);
            adaptor.addChild(root_0, TOKEN533_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal534=null;
        Token TOKEN535=null;

        Object string_literal534_tree=null;
        Object TOKEN535_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:6: ( 'VB-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:259:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal534=(Token)match(input,61,FOLLOW_61_in_vbadd2603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal534_tree = (Object)adaptor.create(string_literal534);
            adaptor.addChild(root_0, string_literal534_tree);
            }
            TOKEN535=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd2605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN535_tree = (Object)adaptor.create(TOKEN535);
            adaptor.addChild(root_0, TOKEN535_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal536=null;
        Token TOKEN537=null;

        Object string_literal536_tree=null;
        Object TOKEN537_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:9: ( 'VB-CHARGE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:260:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal536=(Token)match(input,62,FOLLOW_62_in_vbcharge2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = (Object)adaptor.create(string_literal536);
            adaptor.addChild(root_0, string_literal536_tree);
            }
            TOKEN537=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge2612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN537_tree = (Object)adaptor.create(TOKEN537);
            adaptor.addChild(root_0, TOKEN537_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal538=null;
        Token TOKEN539=null;

        Object string_literal538_tree=null;
        Object TOKEN539_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:10: ( 'VB-CONTAIN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:261:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal538=(Token)match(input,63,FOLLOW_63_in_vbcontain2617); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal538_tree = (Object)adaptor.create(string_literal538);
            adaptor.addChild(root_0, string_literal538_tree);
            }
            TOKEN539=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain2619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN539_tree = (Object)adaptor.create(TOKEN539);
            adaptor.addChild(root_0, TOKEN539_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal540=null;
        Token TOKEN541=null;

        Object string_literal540_tree=null;
        Object TOKEN541_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:7: ( 'VB-DROP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:262:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal540=(Token)match(input,64,FOLLOW_64_in_vbdrop2624); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal540_tree = (Object)adaptor.create(string_literal540);
            adaptor.addChild(root_0, string_literal540_tree);
            }
            TOKEN541=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop2626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN541_tree = (Object)adaptor.create(TOKEN541);
            adaptor.addChild(root_0, TOKEN541_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal542=null;
        Token TOKEN543=null;

        Object string_literal542_tree=null;
        Object TOKEN543_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:7: ( 'VB-FILL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:263:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal542=(Token)match(input,65,FOLLOW_65_in_vbfill2631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal542_tree = (Object)adaptor.create(string_literal542);
            adaptor.addChild(root_0, string_literal542_tree);
            }
            TOKEN543=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill2633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN543_tree = (Object)adaptor.create(TOKEN543);
            adaptor.addChild(root_0, TOKEN543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal544=null;
        Token TOKEN545=null;

        Object string_literal544_tree=null;
        Object TOKEN545_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:10: ( 'VB-SUSPEND' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:264:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal544=(Token)match(input,66,FOLLOW_66_in_vbsuspend2638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal544_tree = (Object)adaptor.create(string_literal544);
            adaptor.addChild(root_0, string_literal544_tree);
            }
            TOKEN545=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend2640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN545_tree = (Object)adaptor.create(TOKEN545);
            adaptor.addChild(root_0, TOKEN545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal546=null;
        Token TOKEN547=null;

        Object string_literal546_tree=null;
        Object TOKEN547_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:8: ( 'VB-TREAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:265:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal546=(Token)match(input,67,FOLLOW_67_in_vbtreat2645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = (Object)adaptor.create(string_literal546);
            adaptor.addChild(root_0, string_literal546_tree);
            }
            TOKEN547=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat2647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN547_tree = (Object)adaptor.create(TOKEN547);
            adaptor.addChild(root_0, TOKEN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal548=null;
        Token TOKEN549=null;

        Object string_literal548_tree=null;
        Object TOKEN549_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:12: ( 'VB-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:268:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal548=(Token)match(input,68,FOLLOW_68_in_vbapparatus2654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal548_tree = (Object)adaptor.create(string_literal548);
            adaptor.addChild(root_0, string_literal548_tree);
            }
            TOKEN549=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus2656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN549_tree = (Object)adaptor.create(TOKEN549);
            adaptor.addChild(root_0, TOKEN549_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal550=null;
        Token TOKEN551=null;

        Object string_literal550_tree=null;
        Object TOKEN551_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:12: ( 'NN-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:269:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal550=(Token)match(input,69,FOLLOW_69_in_nnapparatus2661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal550_tree = (Object)adaptor.create(string_literal550);
            adaptor.addChild(root_0, string_literal550_tree);
            }
            TOKEN551=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus2663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN551_tree = (Object)adaptor.create(TOKEN551);
            adaptor.addChild(root_0, TOKEN551_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal552=null;
        Token TOKEN553=null;

        Object string_literal552_tree=null;
        Object TOKEN553_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:14: ( 'VB-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:272:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal552=(Token)match(input,70,FOLLOW_70_in_vbconcentrate2670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal552_tree = (Object)adaptor.create(string_literal552);
            adaptor.addChild(root_0, string_literal552_tree);
            }
            TOKEN553=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate2672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN553_tree = (Object)adaptor.create(TOKEN553);
            adaptor.addChild(root_0, TOKEN553_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal554=null;
        Token TOKEN555=null;

        Object string_literal554_tree=null;
        Object TOKEN555_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:14: ( 'NN-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:273:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal554=(Token)match(input,71,FOLLOW_71_in_nnconcentrate2677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal554_tree = (Object)adaptor.create(string_literal554);
            adaptor.addChild(root_0, string_literal554_tree);
            }
            TOKEN555=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate2679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN555_tree = (Object)adaptor.create(TOKEN555);
            adaptor.addChild(root_0, TOKEN555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal556=null;
        Token TOKEN557=null;

        Object string_literal556_tree=null;
        Object TOKEN557_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:7: ( 'VB-COOL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:276:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal556=(Token)match(input,72,FOLLOW_72_in_vbcool2686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal556_tree = (Object)adaptor.create(string_literal556);
            adaptor.addChild(root_0, string_literal556_tree);
            }
            TOKEN557=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool2688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN557_tree = (Object)adaptor.create(TOKEN557);
            adaptor.addChild(root_0, TOKEN557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal558=null;
        Token TOKEN559=null;

        Object string_literal558_tree=null;
        Object TOKEN559_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:9: ( 'VB-DEGASS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:279:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal558=(Token)match(input,73,FOLLOW_73_in_vbdegass2695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal558_tree = (Object)adaptor.create(string_literal558);
            adaptor.addChild(root_0, string_literal558_tree);
            }
            TOKEN559=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass2697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN559_tree = (Object)adaptor.create(TOKEN559);
            adaptor.addChild(root_0, TOKEN559_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal560=null;
        Token TOKEN561=null;

        Object string_literal560_tree=null;
        Object TOKEN561_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:11: ( 'VB-DISSOLVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:282:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal560=(Token)match(input,74,FOLLOW_74_in_vbdissolve2704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal560_tree = (Object)adaptor.create(string_literal560);
            adaptor.addChild(root_0, string_literal560_tree);
            }
            TOKEN561=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve2706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN561_tree = (Object)adaptor.create(TOKEN561);
            adaptor.addChild(root_0, TOKEN561_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal562=null;
        Token TOKEN563=null;

        Object string_literal562_tree=null;
        Object TOKEN563_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:6: ( 'VB-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:285:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal562=(Token)match(input,75,FOLLOW_75_in_vbdry2713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = (Object)adaptor.create(string_literal562);
            adaptor.addChild(root_0, string_literal562_tree);
            }
            TOKEN563=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry2715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN563_tree = (Object)adaptor.create(TOKEN563);
            adaptor.addChild(root_0, TOKEN563_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal564=null;
        Token TOKEN565=null;

        Object string_literal564_tree=null;
        Object TOKEN565_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:6: ( 'NN-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:286:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal564=(Token)match(input,76,FOLLOW_76_in_nndry2720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (Object)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            TOKEN565=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry2722); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN565_tree = (Object)adaptor.create(TOKEN565);
            adaptor.addChild(root_0, TOKEN565_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal566=null;
        Token TOKEN567=null;

        Object string_literal566_tree=null;
        Object TOKEN567_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:10: ( 'VB-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:289:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal566=(Token)match(input,77,FOLLOW_77_in_vbextract2729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal566_tree = (Object)adaptor.create(string_literal566);
            adaptor.addChild(root_0, string_literal566_tree);
            }
            TOKEN567=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract2731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN567_tree = (Object)adaptor.create(TOKEN567);
            adaptor.addChild(root_0, TOKEN567_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal568=null;
        Token TOKEN569=null;

        Object string_literal568_tree=null;
        Object TOKEN569_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:10: ( 'NN-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:290:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal568=(Token)match(input,78,FOLLOW_78_in_nnextract2736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal568_tree = (Object)adaptor.create(string_literal568);
            adaptor.addChild(root_0, string_literal568_tree);
            }
            TOKEN569=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract2738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN569_tree = (Object)adaptor.create(TOKEN569);
            adaptor.addChild(root_0, TOKEN569_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal570=null;
        Token TOKEN571=null;

        Object string_literal570_tree=null;
        Object TOKEN571_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:9: ( 'VB-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:293:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal570=(Token)match(input,79,FOLLOW_79_in_vbfilter2745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal570_tree = (Object)adaptor.create(string_literal570);
            adaptor.addChild(root_0, string_literal570_tree);
            }
            TOKEN571=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter2747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN571_tree = (Object)adaptor.create(TOKEN571);
            adaptor.addChild(root_0, TOKEN571_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal572=null;
        Token TOKEN573=null;

        Object string_literal572_tree=null;
        Object TOKEN573_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:9: ( 'NN-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:294:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal572=(Token)match(input,80,FOLLOW_80_in_nnfilter2752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal572_tree = (Object)adaptor.create(string_literal572);
            adaptor.addChild(root_0, string_literal572_tree);
            }
            TOKEN573=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter2754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN573_tree = (Object)adaptor.create(TOKEN573);
            adaptor.addChild(root_0, TOKEN573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:297:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal574=null;
        Token TOKEN575=null;

        Object string_literal574_tree=null;
        Object TOKEN575_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:297:7: ( 'VB-HEAT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:297:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal574=(Token)match(input,81,FOLLOW_81_in_vbheat2761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (Object)adaptor.create(string_literal574);
            adaptor.addChild(root_0, string_literal574_tree);
            }
            TOKEN575=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat2763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN575_tree = (Object)adaptor.create(TOKEN575);
            adaptor.addChild(root_0, TOKEN575_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal576=null;
        Token TOKEN577=null;

        Object string_literal576_tree=null;
        Object TOKEN577_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:11: ( 'VB-INCREASE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:298:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal576=(Token)match(input,82,FOLLOW_82_in_vbincrease2768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal576_tree = (Object)adaptor.create(string_literal576);
            adaptor.addChild(root_0, string_literal576_tree);
            }
            TOKEN577=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease2770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN577_tree = (Object)adaptor.create(TOKEN577);
            adaptor.addChild(root_0, TOKEN577_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal578=null;
        Token TOKEN579=null;

        Object string_literal578_tree=null;
        Object TOKEN579_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:12: ( 'VB-PARTITION' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:301:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal578=(Token)match(input,83,FOLLOW_83_in_vbpartition2777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (Object)adaptor.create(string_literal578);
            adaptor.addChild(root_0, string_literal578_tree);
            }
            TOKEN579=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition2779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN579_tree = (Object)adaptor.create(TOKEN579);
            adaptor.addChild(root_0, TOKEN579_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal580=null;
        Token TOKEN581=null;

        Object string_literal580_tree=null;
        Object TOKEN581_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:14: ( 'VB-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:304:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal580=(Token)match(input,84,FOLLOW_84_in_vbprecipitate2786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            TOKEN581=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate2788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN581_tree = (Object)adaptor.create(TOKEN581);
            adaptor.addChild(root_0, TOKEN581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal582=null;
        Token TOKEN583=null;

        Object string_literal582_tree=null;
        Object TOKEN583_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:14: ( 'NN-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:305:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal582=(Token)match(input,85,FOLLOW_85_in_nnprecipitate2793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal582_tree = (Object)adaptor.create(string_literal582);
            adaptor.addChild(root_0, string_literal582_tree);
            }
            TOKEN583=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate2795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN583_tree = (Object)adaptor.create(TOKEN583);
            adaptor.addChild(root_0, TOKEN583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal584=null;
        Token TOKEN585=null;

        Object string_literal584_tree=null;
        Object TOKEN585_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:9: ( 'VB-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:308:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal584=(Token)match(input,86,FOLLOW_86_in_vbpurify2802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal584_tree = (Object)adaptor.create(string_literal584);
            adaptor.addChild(root_0, string_literal584_tree);
            }
            TOKEN585=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify2804); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN585_tree = (Object)adaptor.create(TOKEN585);
            adaptor.addChild(root_0, TOKEN585_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal586=null;
        Token TOKEN587=null;

        Object string_literal586_tree=null;
        Object TOKEN587_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:9: ( 'NN-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:309:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal586=(Token)match(input,87,FOLLOW_87_in_nnpurify2809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal586_tree = (Object)adaptor.create(string_literal586);
            adaptor.addChild(root_0, string_literal586_tree);
            }
            TOKEN587=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify2811); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN587_tree = (Object)adaptor.create(TOKEN587);
            adaptor.addChild(root_0, TOKEN587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal588=null;
        Token TOKEN589=null;

        Object string_literal588_tree=null;
        Object TOKEN589_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:9: ( 'VB-QUENCH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:312:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal588=(Token)match(input,88,FOLLOW_88_in_vbquench2818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal588_tree = (Object)adaptor.create(string_literal588);
            adaptor.addChild(root_0, string_literal588_tree);
            }
            TOKEN589=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench2820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN589_tree = (Object)adaptor.create(TOKEN589);
            adaptor.addChild(root_0, TOKEN589_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal590=null;
        Token TOKEN591=null;

        Object string_literal590_tree=null;
        Object TOKEN591_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:10: ( 'VB-RECOVER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:315:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal590=(Token)match(input,89,FOLLOW_89_in_vbrecover2827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal590_tree = (Object)adaptor.create(string_literal590);
            adaptor.addChild(root_0, string_literal590_tree);
            }
            TOKEN591=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover2829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN591_tree = (Object)adaptor.create(TOKEN591);
            adaptor.addChild(root_0, TOKEN591_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal592=null;
        Token TOKEN593=null;

        Object string_literal592_tree=null;
        Object TOKEN593_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:9: ( 'VB-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:318:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal592=(Token)match(input,90,FOLLOW_90_in_vbremove2836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            TOKEN593=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove2838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN593_tree = (Object)adaptor.create(TOKEN593);
            adaptor.addChild(root_0, TOKEN593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal594=null;
        Token TOKEN595=null;

        Object string_literal594_tree=null;
        Object TOKEN595_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:9: ( 'NN-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:319:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal594=(Token)match(input,91,FOLLOW_91_in_nnremove2843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal594_tree = (Object)adaptor.create(string_literal594);
            adaptor.addChild(root_0, string_literal594_tree);
            }
            TOKEN595=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove2845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN595_tree = (Object)adaptor.create(TOKEN595);
            adaptor.addChild(root_0, TOKEN595_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal596=null;
        Token TOKEN597=null;

        Object string_literal596_tree=null;
        Object TOKEN597_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:7: ( 'VB-STIR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:322:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal596=(Token)match(input,92,FOLLOW_92_in_vbstir2852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (Object)adaptor.create(string_literal596);
            adaptor.addChild(root_0, string_literal596_tree);
            }
            TOKEN597=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir2854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN597_tree = (Object)adaptor.create(TOKEN597);
            adaptor.addChild(root_0, TOKEN597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:13: ( 'VB-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:325:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal598=(Token)match(input,93,FOLLOW_93_in_vbsynthesize2861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize2863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:13: ( 'NN-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:326:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal600=(Token)match(input,94,FOLLOW_94_in_nnsynthesize2868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize2870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:7: ( 'VB-WAIT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:329:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal602=(Token)match(input,95,FOLLOW_95_in_vbwait2877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait2879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:7: ( 'VB-WASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:332:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal604=(Token)match(input,96,FOLLOW_96_in_vbwash2886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash2888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:8: ( 'VB-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:335:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal606=(Token)match(input,97,FOLLOW_97_in_vbyield2895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield2897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:6: ( 'COLON' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:338:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal608=(Token)match(input,98,FOLLOW_98_in_colon2904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon2906); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:6: ( 'COMMA' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:339:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal610=(Token)match(input,99,FOLLOW_99_in_comma2911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma2913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal612=null;
        Token TOKEN613=null;

        Object string_literal612_tree=null;
        Object TOKEN613_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:6: ( 'APOST' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:340:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal612=(Token)match(input,100,FOLLOW_100_in_apost2918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            TOKEN613=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost2920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN613_tree = (Object)adaptor.create(TOKEN613);
            adaptor.addChild(root_0, TOKEN613_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal614=null;
        Token TOKEN615=null;

        Object string_literal614_tree=null;
        Object TOKEN615_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:4: ( 'NEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:341:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal614=(Token)match(input,101,FOLLOW_101_in_neg2925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal614_tree = (Object)adaptor.create(string_literal614);
            adaptor.addChild(root_0, string_literal614_tree);
            }
            TOKEN615=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg2927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN615_tree = (Object)adaptor.create(TOKEN615);
            adaptor.addChild(root_0, TOKEN615_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal616=null;
        Token TOKEN617=null;

        Object string_literal616_tree=null;
        Object TOKEN617_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:5: ( 'DASH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:342:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal616=(Token)match(input,102,FOLLOW_102_in_dash2932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = (Object)adaptor.create(string_literal616);
            adaptor.addChild(root_0, string_literal616_tree);
            }
            TOKEN617=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash2934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN617_tree = (Object)adaptor.create(TOKEN617);
            adaptor.addChild(root_0, TOKEN617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal618=null;
        Token TOKEN619=null;

        Object string_literal618_tree=null;
        Object TOKEN619_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:5: ( 'STOP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:343:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal618=(Token)match(input,103,FOLLOW_103_in_stop2939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal618_tree = (Object)adaptor.create(string_literal618);
            adaptor.addChild(root_0, string_literal618_tree);
            }
            TOKEN619=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop2941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN619_tree = (Object)adaptor.create(TOKEN619);
            adaptor.addChild(root_0, TOKEN619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal620=null;
        Token TOKEN621=null;

        Object string_literal620_tree=null;
        Object TOKEN621_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:10: ( 'NN-PERCENT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:344:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal620=(Token)match(input,104,FOLLOW_104_in_nnpercent2946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal620_tree = (Object)adaptor.create(string_literal620);
            adaptor.addChild(root_0, string_literal620_tree);
            }
            TOKEN621=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent2948); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN621_tree = (Object)adaptor.create(TOKEN621);
            adaptor.addChild(root_0, TOKEN621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:345:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:345:5: ( 'LSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:345:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal622=(Token)match(input,105,FOLLOW_105_in_lsqb2953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal622_tree = (Object)adaptor.create(string_literal622);
            adaptor.addChild(root_0, string_literal622_tree);
            }
            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb2955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN623_tree = (Object)adaptor.create(TOKEN623);
            adaptor.addChild(root_0, TOKEN623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:5: ( 'RSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:346:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal624=(Token)match(input,106,FOLLOW_106_in_rsqb2960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = (Object)adaptor.create(string_literal624);
            adaptor.addChild(root_0, string_literal624_tree);
            }
            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb2962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN625_tree = (Object)adaptor.create(TOKEN625);
            adaptor.addChild(root_0, TOKEN625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:348:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:348:4: ( '-LRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:348:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal626=(Token)match(input,107,FOLLOW_107_in_lrb2968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (Object)adaptor.create(string_literal626);
            adaptor.addChild(root_0, string_literal626_tree);
            }
            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb2970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN627_tree = (Object)adaptor.create(TOKEN627);
            adaptor.addChild(root_0, TOKEN627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:4: ( '-RRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:349:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal628=(Token)match(input,108,FOLLOW_108_in_rrb2975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal628_tree = (Object)adaptor.create(string_literal628);
            adaptor.addChild(root_0, string_literal628_tree);
            }
            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb2977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN629_tree = (Object)adaptor.create(TOKEN629);
            adaptor.addChild(root_0, TOKEN629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:354:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:354:4: ( 'ABL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:354:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal630=(Token)match(input,109,FOLLOW_109_in_abl2986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (Object)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl2988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN631_tree = (Object)adaptor.create(TOKEN631);
            adaptor.addChild(root_0, TOKEN631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:357:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:357:4: ( 'ABN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:357:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal632=(Token)match(input,110,FOLLOW_110_in_abn2995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal632_tree = (Object)adaptor.create(string_literal632);
            adaptor.addChild(root_0, string_literal632_tree);
            }
            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn2997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN633_tree = (Object)adaptor.create(TOKEN633);
            adaptor.addChild(root_0, TOKEN633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:360:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:360:4: ( 'ABX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:360:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal634=(Token)match(input,111,FOLLOW_111_in_abx3004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal634_tree = (Object)adaptor.create(string_literal634);
            adaptor.addChild(root_0, string_literal634_tree);
            }
            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx3006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN635_tree = (Object)adaptor.create(TOKEN635);
            adaptor.addChild(root_0, TOKEN635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:363:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:363:3: ( 'AP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:363:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal636=(Token)match(input,112,FOLLOW_112_in_ap3013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal636_tree = (Object)adaptor.create(string_literal636);
            adaptor.addChild(root_0, string_literal636_tree);
            }
            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap3015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN637_tree = (Object)adaptor.create(TOKEN637);
            adaptor.addChild(root_0, TOKEN637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:366:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:366:3: ( 'AT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:366:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal638=(Token)match(input,113,FOLLOW_113_in_at3022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = (Object)adaptor.create(string_literal638);
            adaptor.addChild(root_0, string_literal638_tree);
            }
            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at3024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN639_tree = (Object)adaptor.create(TOKEN639);
            adaptor.addChild(root_0, TOKEN639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:369:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:369:3: ( 'BE' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:369:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal640=(Token)match(input,114,FOLLOW_114_in_be3031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be3033); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN641_tree = (Object)adaptor.create(TOKEN641);
            adaptor.addChild(root_0, TOKEN641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:372:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:372:4: ( 'BED' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:372:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal642=(Token)match(input,115,FOLLOW_115_in_bed3040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal642_tree = (Object)adaptor.create(string_literal642);
            adaptor.addChild(root_0, string_literal642_tree);
            }
            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed3042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN643_tree = (Object)adaptor.create(TOKEN643);
            adaptor.addChild(root_0, TOKEN643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:375:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:375:5: ( 'BEDZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:375:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal644=(Token)match(input,116,FOLLOW_116_in_bedz3049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal644_tree = (Object)adaptor.create(string_literal644);
            adaptor.addChild(root_0, string_literal644_tree);
            }
            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz3051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN645_tree = (Object)adaptor.create(TOKEN645);
            adaptor.addChild(root_0, TOKEN645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:378:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:378:4: ( 'BEG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:378:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal646=(Token)match(input,117,FOLLOW_117_in_beg3058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            adaptor.addChild(root_0, string_literal646_tree);
            }
            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg3060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN647_tree = (Object)adaptor.create(TOKEN647);
            adaptor.addChild(root_0, TOKEN647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:381:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:381:4: ( 'BEM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:381:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal648=(Token)match(input,118,FOLLOW_118_in_bem3067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal648_tree = (Object)adaptor.create(string_literal648);
            adaptor.addChild(root_0, string_literal648_tree);
            }
            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem3069); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN649_tree = (Object)adaptor.create(TOKEN649);
            adaptor.addChild(root_0, TOKEN649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:384:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:384:4: ( 'BEN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:384:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal650=(Token)match(input,119,FOLLOW_119_in_ben3076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal650_tree = (Object)adaptor.create(string_literal650);
            adaptor.addChild(root_0, string_literal650_tree);
            }
            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben3078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN651_tree = (Object)adaptor.create(TOKEN651);
            adaptor.addChild(root_0, TOKEN651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:387:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:387:4: ( 'BER' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:387:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal652=(Token)match(input,120,FOLLOW_120_in_ber3085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = (Object)adaptor.create(string_literal652);
            adaptor.addChild(root_0, string_literal652_tree);
            }
            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber3087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN653_tree = (Object)adaptor.create(TOKEN653);
            adaptor.addChild(root_0, TOKEN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:390:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:390:4: ( 'BEZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:390:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal654=(Token)match(input,121,FOLLOW_121_in_bez3094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal654_tree = (Object)adaptor.create(string_literal654);
            adaptor.addChild(root_0, string_literal654_tree);
            }
            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez3096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN655_tree = (Object)adaptor.create(TOKEN655);
            adaptor.addChild(root_0, TOKEN655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:393:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:393:3: ( 'CC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:393:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal656=(Token)match(input,122,FOLLOW_122_in_cc3103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal656_tree = (Object)adaptor.create(string_literal656);
            adaptor.addChild(root_0, string_literal656_tree);
            }
            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc3105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN657_tree = (Object)adaptor.create(TOKEN657);
            adaptor.addChild(root_0, TOKEN657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:396:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:396:3: ( 'CD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:396:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal658=(Token)match(input,123,FOLLOW_123_in_cd3112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal658_tree = (Object)adaptor.create(string_literal658);
            adaptor.addChild(root_0, string_literal658_tree);
            }
            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd3114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN659_tree = (Object)adaptor.create(TOKEN659);
            adaptor.addChild(root_0, TOKEN659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:399:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:399:3: ( 'CS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:399:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal660=(Token)match(input,124,FOLLOW_124_in_cs3121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal660_tree = (Object)adaptor.create(string_literal660);
            adaptor.addChild(root_0, string_literal660_tree);
            }
            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs3123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN661_tree = (Object)adaptor.create(TOKEN661);
            adaptor.addChild(root_0, TOKEN661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:402:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:402:7: ( 'DO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:402:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal662=(Token)match(input,125,FOLLOW_125_in_dotok3131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok3133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN663_tree = (Object)adaptor.create(TOKEN663);
            adaptor.addChild(root_0, TOKEN663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:4: ( 'DOD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:405:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal664=(Token)match(input,126,FOLLOW_126_in_dod3140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal664_tree = (Object)adaptor.create(string_literal664);
            adaptor.addChild(root_0, string_literal664_tree);
            }
            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod3142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN665_tree = (Object)adaptor.create(TOKEN665);
            adaptor.addChild(root_0, TOKEN665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:408:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:408:4: ( 'DOZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:408:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal666=(Token)match(input,127,FOLLOW_127_in_doz3149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }
            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz3151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN667_tree = (Object)adaptor.create(TOKEN667);
            adaptor.addChild(root_0, TOKEN667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:411:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:411:3: ( 'DT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:411:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal668=(Token)match(input,128,FOLLOW_128_in_dt3158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = (Object)adaptor.create(string_literal668);
            adaptor.addChild(root_0, string_literal668_tree);
            }
            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt3160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN669_tree = (Object)adaptor.create(TOKEN669);
            adaptor.addChild(root_0, TOKEN669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:414:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:414:4: ( 'DTI' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:414:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal670=(Token)match(input,129,FOLLOW_129_in_dti3167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = (Object)adaptor.create(string_literal670);
            adaptor.addChild(root_0, string_literal670_tree);
            }
            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti3169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN671_tree = (Object)adaptor.create(TOKEN671);
            adaptor.addChild(root_0, TOKEN671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:417:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:417:4: ( 'DTS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:417:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal672=(Token)match(input,130,FOLLOW_130_in_dts3176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = (Object)adaptor.create(string_literal672);
            adaptor.addChild(root_0, string_literal672_tree);
            }
            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts3178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN673_tree = (Object)adaptor.create(TOKEN673);
            adaptor.addChild(root_0, TOKEN673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:4: ( 'DTX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:420:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal674=(Token)match(input,131,FOLLOW_131_in_dtx3185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal674_tree = (Object)adaptor.create(string_literal674);
            adaptor.addChild(root_0, string_literal674_tree);
            }
            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN675_tree = (Object)adaptor.create(TOKEN675);
            adaptor.addChild(root_0, TOKEN675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:423:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:423:3: ( 'EX' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:423:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal676=(Token)match(input,132,FOLLOW_132_in_ex3194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal676_tree = (Object)adaptor.create(string_literal676);
            adaptor.addChild(root_0, string_literal676_tree);
            }
            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN677_tree = (Object)adaptor.create(TOKEN677);
            adaptor.addChild(root_0, TOKEN677_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:426:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:426:3: ( 'FW' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:426:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal678=(Token)match(input,133,FOLLOW_133_in_fw3203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal678_tree = (Object)adaptor.create(string_literal678);
            adaptor.addChild(root_0, string_literal678_tree);
            }
            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN679_tree = (Object)adaptor.create(TOKEN679);
            adaptor.addChild(root_0, TOKEN679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:429:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:429:5: ( 'FW-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:429:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal680=(Token)match(input,134,FOLLOW_134_in_fwin3212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal680_tree = (Object)adaptor.create(string_literal680);
            adaptor.addChild(root_0, string_literal680_tree);
            }
            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN681_tree = (Object)adaptor.create(TOKEN681);
            adaptor.addChild(root_0, TOKEN681_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:432:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:432:3: ( 'HV' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:432:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal682=(Token)match(input,135,FOLLOW_135_in_hv3221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal682_tree = (Object)adaptor.create(string_literal682);
            adaptor.addChild(root_0, string_literal682_tree);
            }
            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN683_tree = (Object)adaptor.create(TOKEN683);
            adaptor.addChild(root_0, TOKEN683_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:435:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:435:4: ( 'HVD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:435:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal684=(Token)match(input,136,FOLLOW_136_in_hvd3230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal684_tree = (Object)adaptor.create(string_literal684);
            adaptor.addChild(root_0, string_literal684_tree);
            }
            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3232); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN685_tree = (Object)adaptor.create(TOKEN685);
            adaptor.addChild(root_0, TOKEN685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:438:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:438:4: ( 'HVG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:438:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal686=(Token)match(input,137,FOLLOW_137_in_hvg3239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal686_tree = (Object)adaptor.create(string_literal686);
            adaptor.addChild(root_0, string_literal686_tree);
            }
            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN687_tree = (Object)adaptor.create(TOKEN687);
            adaptor.addChild(root_0, TOKEN687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:4: ( 'HVN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:441:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal688=(Token)match(input,138,FOLLOW_138_in_hvn3248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (Object)adaptor.create(string_literal688);
            adaptor.addChild(root_0, string_literal688_tree);
            }
            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3250); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN689_tree = (Object)adaptor.create(TOKEN689);
            adaptor.addChild(root_0, TOKEN689_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:3: ( 'IN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:444:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal690=(Token)match(input,139,FOLLOW_139_in_in3257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal690_tree = (Object)adaptor.create(string_literal690);
            adaptor.addChild(root_0, string_literal690_tree);
            }
            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN691_tree = (Object)adaptor.create(TOKEN691);
            adaptor.addChild(root_0, TOKEN691_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:3: ( 'JJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:447:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal692=(Token)match(input,140,FOLLOW_140_in_jj3266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = (Object)adaptor.create(string_literal692);
            adaptor.addChild(root_0, string_literal692_tree);
            }
            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN693_tree = (Object)adaptor.create(TOKEN693);
            adaptor.addChild(root_0, TOKEN693_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:4: ( 'JJR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:450:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal694=(Token)match(input,141,FOLLOW_141_in_jjr3275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal694_tree = (Object)adaptor.create(string_literal694);
            adaptor.addChild(root_0, string_literal694_tree);
            }
            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN695_tree = (Object)adaptor.create(TOKEN695);
            adaptor.addChild(root_0, TOKEN695_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:4: ( 'JJS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:453:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal696=(Token)match(input,142,FOLLOW_142_in_jjs3284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal696_tree = (Object)adaptor.create(string_literal696);
            adaptor.addChild(root_0, string_literal696_tree);
            }
            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3286); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN697_tree = (Object)adaptor.create(TOKEN697);
            adaptor.addChild(root_0, TOKEN697_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:4: ( 'JJT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:456:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal698=(Token)match(input,143,FOLLOW_143_in_jjt3293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal698_tree = (Object)adaptor.create(string_literal698);
            adaptor.addChild(root_0, string_literal698_tree);
            }
            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3295); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN699_tree = (Object)adaptor.create(TOKEN699);
            adaptor.addChild(root_0, TOKEN699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:3: ( 'MD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:459:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal700=(Token)match(input,144,FOLLOW_144_in_md3302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal700_tree = (Object)adaptor.create(string_literal700);
            adaptor.addChild(root_0, string_literal700_tree);
            }
            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN701_tree = (Object)adaptor.create(TOKEN701);
            adaptor.addChild(root_0, TOKEN701_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:3: ( 'NC' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:462:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal702=(Token)match(input,145,FOLLOW_145_in_nc3311); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal702_tree = (Object)adaptor.create(string_literal702);
            adaptor.addChild(root_0, string_literal702_tree);
            }
            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN703_tree = (Object)adaptor.create(TOKEN703);
            adaptor.addChild(root_0, TOKEN703_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:3: ( 'NN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:465:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal704=(Token)match(input,146,FOLLOW_146_in_nn3320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal704_tree = (Object)adaptor.create(string_literal704);
            adaptor.addChild(root_0, string_literal704_tree);
            }
            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN705_tree = (Object)adaptor.create(TOKEN705);
            adaptor.addChild(root_0, TOKEN705_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:8: ( 'NN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:468:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal706=(Token)match(input,147,FOLLOW_147_in_nn_poss3329); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal706_tree = (Object)adaptor.create(string_literal706);
            adaptor.addChild(root_0, string_literal706_tree);
            }
            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN707_tree = (Object)adaptor.create(TOKEN707);
            adaptor.addChild(root_0, TOKEN707_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:4: ( 'NNS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:471:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal708=(Token)match(input,148,FOLLOW_148_in_nns3338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal708_tree = (Object)adaptor.create(string_literal708);
            adaptor.addChild(root_0, string_literal708_tree);
            }
            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns3340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN709_tree = (Object)adaptor.create(TOKEN709);
            adaptor.addChild(root_0, TOKEN709_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:9: ( 'NNS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:474:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal710=(Token)match(input,149,FOLLOW_149_in_nns_poss3347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal710_tree = (Object)adaptor.create(string_literal710);
            adaptor.addChild(root_0, string_literal710_tree);
            }
            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss3349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN711_tree = (Object)adaptor.create(TOKEN711);
            adaptor.addChild(root_0, TOKEN711_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:3: ( 'NP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:477:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal712=(Token)match(input,150,FOLLOW_150_in_np3356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal712_tree = (Object)adaptor.create(string_literal712);
            adaptor.addChild(root_0, string_literal712_tree);
            }
            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np3358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN713_tree = (Object)adaptor.create(TOKEN713);
            adaptor.addChild(root_0, TOKEN713_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:4: ( 'NNP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:481:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal714=(Token)match(input,151,FOLLOW_151_in_nnp3366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal714_tree = (Object)adaptor.create(string_literal714);
            adaptor.addChild(root_0, string_literal714_tree);
            }
            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp3368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN715_tree = (Object)adaptor.create(TOKEN715);
            adaptor.addChild(root_0, TOKEN715_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:485:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:485:8: ( 'NP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:485:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal716=(Token)match(input,152,FOLLOW_152_in_np_poss3376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal716_tree = (Object)adaptor.create(string_literal716);
            adaptor.addChild(root_0, string_literal716_tree);
            }
            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss3378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN717_tree = (Object)adaptor.create(TOKEN717);
            adaptor.addChild(root_0, TOKEN717_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:488:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:488:4: ( 'NPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:488:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal718=(Token)match(input,153,FOLLOW_153_in_nps3385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal718_tree = (Object)adaptor.create(string_literal718);
            adaptor.addChild(root_0, string_literal718_tree);
            }
            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps3387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN719_tree = (Object)adaptor.create(TOKEN719);
            adaptor.addChild(root_0, TOKEN719_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:9: ( 'NPS$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:491:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal720=(Token)match(input,154,FOLLOW_154_in_nps_poss3394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal720_tree = (Object)adaptor.create(string_literal720);
            adaptor.addChild(root_0, string_literal720_tree);
            }
            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss3396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN721_tree = (Object)adaptor.create(TOKEN721);
            adaptor.addChild(root_0, TOKEN721_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:3: ( 'NR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:494:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal722=(Token)match(input,155,FOLLOW_155_in_nr3403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal722_tree = (Object)adaptor.create(string_literal722);
            adaptor.addChild(root_0, string_literal722_tree);
            }
            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr3405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN723_tree = (Object)adaptor.create(TOKEN723);
            adaptor.addChild(root_0, TOKEN723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:497:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:497:3: ( 'OD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:497:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal724=(Token)match(input,156,FOLLOW_156_in_od3412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal724_tree = (Object)adaptor.create(string_literal724);
            adaptor.addChild(root_0, string_literal724_tree);
            }
            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od3414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN725_tree = (Object)adaptor.create(TOKEN725);
            adaptor.addChild(root_0, TOKEN725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:500:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:500:3: ( 'PN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:500:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal726=(Token)match(input,157,FOLLOW_157_in_pn3421); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal726_tree = (Object)adaptor.create(string_literal726);
            adaptor.addChild(root_0, string_literal726_tree);
            }
            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn3423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN727_tree = (Object)adaptor.create(TOKEN727);
            adaptor.addChild(root_0, TOKEN727_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:503:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:503:8: ( 'PN$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:503:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal728=(Token)match(input,158,FOLLOW_158_in_pn_poss3430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal728_tree = (Object)adaptor.create(string_literal728);
            adaptor.addChild(root_0, string_literal728_tree);
            }
            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss3432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN729_tree = (Object)adaptor.create(TOKEN729);
            adaptor.addChild(root_0, TOKEN729_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:8: ( 'PP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:506:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal730=(Token)match(input,159,FOLLOW_159_in_pp_poss3439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal730_tree = (Object)adaptor.create(string_literal730);
            adaptor.addChild(root_0, string_literal730_tree);
            }
            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss3441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN731_tree = (Object)adaptor.create(TOKEN731);
            adaptor.addChild(root_0, TOKEN731_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:509:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:509:13: ( 'PP$$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:509:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal732=(Token)match(input,160,FOLLOW_160_in_pp_poss_poss3448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal732_tree = (Object)adaptor.create(string_literal732);
            adaptor.addChild(root_0, string_literal732_tree);
            }
            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss3450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN733_tree = (Object)adaptor.create(TOKEN733);
            adaptor.addChild(root_0, TOKEN733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:4: ( 'PPL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:512:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal734=(Token)match(input,161,FOLLOW_161_in_ppl3457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = (Object)adaptor.create(string_literal734);
            adaptor.addChild(root_0, string_literal734_tree);
            }
            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl3459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN735_tree = (Object)adaptor.create(TOKEN735);
            adaptor.addChild(root_0, TOKEN735_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:5: ( 'PPLS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:515:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal736=(Token)match(input,162,FOLLOW_162_in_ppls3466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal736_tree = (Object)adaptor.create(string_literal736);
            adaptor.addChild(root_0, string_literal736_tree);
            }
            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls3468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN737_tree = (Object)adaptor.create(TOKEN737);
            adaptor.addChild(root_0, TOKEN737_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:5: ( 'PRP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:517:7: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal738=(Token)match(input,163,FOLLOW_163_in_prp3476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal738_tree = (Object)adaptor.create(string_literal738);
            adaptor.addChild(root_0, string_literal738_tree);
            }
            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp3479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN739_tree = (Object)adaptor.create(TOKEN739);
            adaptor.addChild(root_0, TOKEN739_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:4: ( 'PPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:520:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal740=(Token)match(input,164,FOLLOW_164_in_ppo3486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal740_tree = (Object)adaptor.create(string_literal740);
            adaptor.addChild(root_0, string_literal740_tree);
            }
            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo3488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN741_tree = (Object)adaptor.create(TOKEN741);
            adaptor.addChild(root_0, TOKEN741_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:4: ( 'PPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:523:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal742=(Token)match(input,165,FOLLOW_165_in_pps3495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal742_tree = (Object)adaptor.create(string_literal742);
            adaptor.addChild(root_0, string_literal742_tree);
            }
            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps3497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN743_tree = (Object)adaptor.create(TOKEN743);
            adaptor.addChild(root_0, TOKEN743_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:5: ( 'PPSS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:526:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal744=(Token)match(input,166,FOLLOW_166_in_ppss3504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal744_tree = (Object)adaptor.create(string_literal744);
            adaptor.addChild(root_0, string_literal744_tree);
            }
            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss3506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN745_tree = (Object)adaptor.create(TOKEN745);
            adaptor.addChild(root_0, TOKEN745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:529:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:529:3: ( 'QL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:529:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal746=(Token)match(input,167,FOLLOW_167_in_ql3513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal746_tree = (Object)adaptor.create(string_literal746);
            adaptor.addChild(root_0, string_literal746_tree);
            }
            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN747_tree = (Object)adaptor.create(TOKEN747);
            adaptor.addChild(root_0, TOKEN747_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:532:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:532:4: ( 'QLP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:532:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal748=(Token)match(input,168,FOLLOW_168_in_qlp3522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (Object)adaptor.create(string_literal748);
            adaptor.addChild(root_0, string_literal748_tree);
            }
            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp3524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN749_tree = (Object)adaptor.create(TOKEN749);
            adaptor.addChild(root_0, TOKEN749_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:535:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:535:3: ( 'RB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:535:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal750=(Token)match(input,169,FOLLOW_169_in_rb3531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal750_tree = (Object)adaptor.create(string_literal750);
            adaptor.addChild(root_0, string_literal750_tree);
            }
            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb3533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN751_tree = (Object)adaptor.create(TOKEN751);
            adaptor.addChild(root_0, TOKEN751_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:538:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:538:4: ( 'RBR' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:538:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal752=(Token)match(input,170,FOLLOW_170_in_rbr3540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal752_tree = (Object)adaptor.create(string_literal752);
            adaptor.addChild(root_0, string_literal752_tree);
            }
            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr3542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN753_tree = (Object)adaptor.create(TOKEN753);
            adaptor.addChild(root_0, TOKEN753_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:541:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:541:8: ( 'RB-CONJ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:541:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal754=(Token)match(input,171,FOLLOW_171_in_rbconj3551); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal754_tree = (Object)adaptor.create(string_literal754);
            adaptor.addChild(root_0, string_literal754_tree);
            }
            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj3554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN755_tree = (Object)adaptor.create(TOKEN755);
            adaptor.addChild(root_0, TOKEN755_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:544:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:544:4: ( 'RBT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:544:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal756=(Token)match(input,172,FOLLOW_172_in_rbt3562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal756_tree = (Object)adaptor.create(string_literal756);
            adaptor.addChild(root_0, string_literal756_tree);
            }
            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt3564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN757_tree = (Object)adaptor.create(TOKEN757);
            adaptor.addChild(root_0, TOKEN757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:547:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:547:4: ( 'RBS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:547:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal758=(Token)match(input,173,FOLLOW_173_in_rbs3571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal758_tree = (Object)adaptor.create(string_literal758);
            adaptor.addChild(root_0, string_literal758_tree);
            }
            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs3573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN759_tree = (Object)adaptor.create(TOKEN759);
            adaptor.addChild(root_0, TOKEN759_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:551:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:551:3: ( 'RN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:551:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal760=(Token)match(input,174,FOLLOW_174_in_rn3581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal760_tree = (Object)adaptor.create(string_literal760);
            adaptor.addChild(root_0, string_literal760_tree);
            }
            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn3583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN761_tree = (Object)adaptor.create(TOKEN761);
            adaptor.addChild(root_0, TOKEN761_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:554:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:554:3: ( 'RP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:554:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal762=(Token)match(input,175,FOLLOW_175_in_rp3590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal762_tree = (Object)adaptor.create(string_literal762);
            adaptor.addChild(root_0, string_literal762_tree);
            }
            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp3592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN763_tree = (Object)adaptor.create(TOKEN763);
            adaptor.addChild(root_0, TOKEN763_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:557:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:557:5: ( 'SYM' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:557:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal764=(Token)match(input,176,FOLLOW_176_in_sym3601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal764_tree = (Object)adaptor.create(string_literal764);
            adaptor.addChild(root_0, string_literal764_tree);
            }
            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym3603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN765_tree = (Object)adaptor.create(TOKEN765);
            adaptor.addChild(root_0, TOKEN765_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:3: ( 'TO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:560:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal766=(Token)match(input,177,FOLLOW_177_in_to3610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal766_tree = (Object)adaptor.create(string_literal766);
            adaptor.addChild(root_0, string_literal766_tree);
            }
            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to3612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN767_tree = (Object)adaptor.create(TOKEN767);
            adaptor.addChild(root_0, TOKEN767_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:3: ( 'UH' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:563:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal768=(Token)match(input,178,FOLLOW_178_in_uh3619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal768_tree = (Object)adaptor.create(string_literal768);
            adaptor.addChild(root_0, string_literal768_tree);
            }
            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh3621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN769_tree = (Object)adaptor.create(TOKEN769);
            adaptor.addChild(root_0, TOKEN769_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:3: ( 'VB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:566:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal770=(Token)match(input,179,FOLLOW_179_in_vb3628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal770_tree = (Object)adaptor.create(string_literal770);
            adaptor.addChild(root_0, string_literal770_tree);
            }
            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb3630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN771_tree = (Object)adaptor.create(TOKEN771);
            adaptor.addChild(root_0, TOKEN771_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:568:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:568:5: ( 'VBP' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:568:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal772=(Token)match(input,180,FOLLOW_180_in_vbp3638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal772_tree = (Object)adaptor.create(string_literal772);
            adaptor.addChild(root_0, string_literal772_tree);
            }
            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp3640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN773_tree = (Object)adaptor.create(TOKEN773);
            adaptor.addChild(root_0, TOKEN773_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:4: ( 'VBD' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:572:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal774=(Token)match(input,181,FOLLOW_181_in_vbd3649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal774_tree = (Object)adaptor.create(string_literal774);
            adaptor.addChild(root_0, string_literal774_tree);
            }
            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd3651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN775_tree = (Object)adaptor.create(TOKEN775);
            adaptor.addChild(root_0, TOKEN775_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:4: ( 'VBG' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:575:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal776=(Token)match(input,182,FOLLOW_182_in_vbg3658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal776_tree = (Object)adaptor.create(string_literal776);
            adaptor.addChild(root_0, string_literal776_tree);
            }
            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg3660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN777_tree = (Object)adaptor.create(TOKEN777);
            adaptor.addChild(root_0, TOKEN777_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:4: ( 'VBN' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:578:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal778=(Token)match(input,183,FOLLOW_183_in_vbn3667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal778_tree = (Object)adaptor.create(string_literal778);
            adaptor.addChild(root_0, string_literal778_tree);
            }
            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn3669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN779_tree = (Object)adaptor.create(TOKEN779);
            adaptor.addChild(root_0, TOKEN779_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:581:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:581:4: ( 'VBZ' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:581:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal780=(Token)match(input,184,FOLLOW_184_in_vbz3676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal780_tree = (Object)adaptor.create(string_literal780);
            adaptor.addChild(root_0, string_literal780_tree);
            }
            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz3678); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN781_tree = (Object)adaptor.create(TOKEN781);
            adaptor.addChild(root_0, TOKEN781_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:584:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:584:4: ( 'WDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:584:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal782=(Token)match(input,185,FOLLOW_185_in_wdt3685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal782_tree = (Object)adaptor.create(string_literal782);
            adaptor.addChild(root_0, string_literal782_tree);
            }
            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt3687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN783_tree = (Object)adaptor.create(TOKEN783);
            adaptor.addChild(root_0, TOKEN783_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:587:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:587:8: ( 'WP$' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:587:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal784=(Token)match(input,186,FOLLOW_186_in_wp_poss3694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal784_tree = (Object)adaptor.create(string_literal784);
            adaptor.addChild(root_0, string_literal784_tree);
            }
            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss3696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN785_tree = (Object)adaptor.create(TOKEN785);
            adaptor.addChild(root_0, TOKEN785_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:591:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:591:4: ( 'WPO' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:591:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal786=(Token)match(input,187,FOLLOW_187_in_wpo3704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal786_tree = (Object)adaptor.create(string_literal786);
            adaptor.addChild(root_0, string_literal786_tree);
            }
            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo3706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN787_tree = (Object)adaptor.create(TOKEN787);
            adaptor.addChild(root_0, TOKEN787_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:4: ( 'WPS' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:594:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal788=(Token)match(input,188,FOLLOW_188_in_wps3713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal788_tree = (Object)adaptor.create(string_literal788);
            adaptor.addChild(root_0, string_literal788_tree);
            }
            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps3715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN789_tree = (Object)adaptor.create(TOKEN789);
            adaptor.addChild(root_0, TOKEN789_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:598:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:598:4: ( 'WQL' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:598:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal790=(Token)match(input,189,FOLLOW_189_in_wql3723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal790_tree = (Object)adaptor.create(string_literal790);
            adaptor.addChild(root_0, string_literal790_tree);
            }
            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql3725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN791_tree = (Object)adaptor.create(TOKEN791);
            adaptor.addChild(root_0, TOKEN791_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:601:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:601:4: ( 'WRB' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:601:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal792=(Token)match(input,190,FOLLOW_190_in_wrb3732); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal792_tree = (Object)adaptor.create(string_literal792);
            adaptor.addChild(root_0, string_literal792_tree);
            }
            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb3734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN793_tree = (Object)adaptor.create(TOKEN793);
            adaptor.addChild(root_0, TOKEN793_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:6: ( 'PDT' TOKEN )
            // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:603:8: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal794=(Token)match(input,191,FOLLOW_191_in_pdt3743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal794_tree = (Object)adaptor.create(string_literal794);
            adaptor.addChild(root_0, string_literal794_tree);
            }
            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt3745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN795_tree = (Object)adaptor.create(TOKEN795);
            adaptor.addChild(root_0, TOKEN795_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: ( sentence )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker230);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:36:45: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker240);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: ( nounphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker253);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: ( verbphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker255);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: ( prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker257);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:49: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker262);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: ( colon )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:56: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker264);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:38:65: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker269);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred12_ChemicalChunker302);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred13_ChemicalChunker304);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:13: verb
        {
        pushFollow(FOLLOW_verb_in_synpred14_ChemicalChunker306);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred16_ChemicalChunker
    public final void synpred16_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:24: dt
        {
        pushFollow(FOLLOW_dt_in_synpred16_ChemicalChunker310);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_ChemicalChunker

    // $ANTLR start synpred17_ChemicalChunker
    public final void synpred17_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: ( oscarcd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:27: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred17_ChemicalChunker312);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:35: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred18_ChemicalChunker314);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred19_ChemicalChunker
    public final void synpred19_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: ( oscarrn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:43: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred19_ChemicalChunker316);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: ( oscaront )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:51: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred20_ChemicalChunker318);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: ( brackets )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:60: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred21_ChemicalChunker320);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:69: sym
        {
        pushFollow(FOLLOW_sym_in_synpred22_ChemicalChunker322);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred26_ChemicalChunker
    public final void synpred26_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:86: number
        {
        pushFollow(FOLLOW_number_in_synpred26_ChemicalChunker330);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_ChemicalChunker

    // $ANTLR start synpred27_ChemicalChunker
    public final void synpred27_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:45:93: comma
        {
        pushFollow(FOLLOW_comma_in_synpred27_ChemicalChunker332);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_ChemicalChunker

    // $ANTLR start synpred28_ChemicalChunker
    public final void synpred28_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:23: dt
        {
        pushFollow(FOLLOW_dt_in_synpred28_ChemicalChunker365);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:27: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:27: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred29_ChemicalChunker368);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:37: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:37: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred30_ChemicalChunker373);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:52: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:52: noun
        {
        pushFollow(FOLLOW_noun_in_synpred31_ChemicalChunker375);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred32_ChemicalChunker
    public final void synpred32_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:57: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:57: number
        {
        pushFollow(FOLLOW_number_in_synpred32_ChemicalChunker377);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:64: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:64: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred33_ChemicalChunker379);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred34_ChemicalChunker
    public final void synpred34_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( conjunction )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred34_ChemicalChunker387);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:89: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:89: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred35_ChemicalChunker390);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( ( conjunction )* ( advAdj )* noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( conjunction )* ( advAdj )* noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:76: ( conjunction )*
        loop112:
        do {
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred36_ChemicalChunker387);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop112;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:89: ( advAdj )*
        loop113:
        do {
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred36_ChemicalChunker390);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop113;
            }
        } while (true);

        pushFollow(FOLLOW_noun_in_synpred36_ChemicalChunker394);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:103: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:103: number
        {
        pushFollow(FOLLOW_number_in_synpred37_ChemicalChunker396);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:110: ( ratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:110: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred38_ChemicalChunker398);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:122: ( prepphraseOf )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:122: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred39_ChemicalChunker406);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:149: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:149: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred40_ChemicalChunker411);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:136: ( prepphraseIN ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:136: prepphraseIN ( dissolvePhrase )?
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred41_ChemicalChunker409);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:50:149: ( dissolvePhrase )?
        int alt114=2;
        switch ( input.LA(1) ) {
            case 38:
            case 54:
            case 99:
            case 107:
            case 123:
                {
                alt114=1;
                }
                break;
        }

        switch (alt114) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred41_ChemicalChunker411);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: ( dissolveStructure1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:52:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred42_ChemicalChunker426);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred44_ChemicalChunker
    public final void synpred44_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:14: ( inin molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:57:14: inin molecule
        {
        pushFollow(FOLLOW_inin_in_synpred44_ChemicalChunker475);
        inin();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred44_ChemicalChunker477);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_ChemicalChunker

    // $ANTLR start synpred46_ChemicalChunker
    public final void synpred46_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: ( to )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:24: to
        {
        pushFollow(FOLLOW_to_in_synpred46_ChemicalChunker523);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_ChemicalChunker

    // $ANTLR start synpred47_ChemicalChunker
    public final void synpred47_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:28: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:28: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred47_ChemicalChunker526);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_ChemicalChunker

    // $ANTLR start synpred52_ChemicalChunker
    public final void synpred52_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: verb
        {
        pushFollow(FOLLOW_verb_in_synpred52_ChemicalChunker542);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_ChemicalChunker

    // $ANTLR start synpred53_ChemicalChunker
    public final void synpred53_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: ( md )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: md
        {
        pushFollow(FOLLOW_md_in_synpred53_ChemicalChunker545);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_ChemicalChunker

    // $ANTLR start synpred54_ChemicalChunker
    public final void synpred54_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: ( adv )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: adv
        {
        pushFollow(FOLLOW_adv_in_synpred54_ChemicalChunker548);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_ChemicalChunker

    // $ANTLR start synpred55_ChemicalChunker
    public final void synpred55_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: adj
        {
        pushFollow(FOLLOW_adj_in_synpred55_ChemicalChunker551);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_ChemicalChunker

    // $ANTLR start synpred56_ChemicalChunker
    public final void synpred56_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: ( neg )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: neg
        {
        pushFollow(FOLLOW_neg_in_synpred56_ChemicalChunker554);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_ChemicalChunker

    // $ANTLR start synpred57_ChemicalChunker
    public final void synpred57_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:45: ( md )*
        loop115:
        do {
            int alt115=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt115=1;
                }
                break;

            }

            switch (alt115) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred57_ChemicalChunker533);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop115;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:49: ( adv )*
        loop116:
        do {
            int alt116=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt116=1;
                }
                break;

            }

            switch (alt116) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred57_ChemicalChunker536);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop116;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:54: ( adj )?
        int alt117=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt117=1;
                }
                break;
        }

        switch (alt117) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred57_ChemicalChunker539);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:59: ( verb )+
        int cnt118=0;
        loop118:
        do {
            int alt118=2;
            switch ( input.LA(1) ) {
            case 55:
            case 56:
            case 57:
            case 58:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 72:
            case 73:
            case 74:
            case 75:
            case 77:
            case 79:
            case 81:
            case 82:
            case 83:
            case 84:
            case 86:
            case 88:
            case 89:
            case 90:
            case 92:
            case 93:
            case 95:
            case 96:
            case 97:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
                {
                alt118=1;
                }
                break;

            }

            switch (alt118) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred57_ChemicalChunker542);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt118 >= 1 ) break loop118;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(118, input);
                    throw eee;
            }
            cnt118++;
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:65: ( md )*
        loop119:
        do {
            int alt119=2;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt119=1;
                }
                break;

            }

            switch (alt119) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred57_ChemicalChunker545);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop119;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:69: ( adv )*
        loop120:
        do {
            int alt120=2;
            switch ( input.LA(1) ) {
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 175:
                {
                alt120=1;
                }
                break;

            }

            switch (alt120) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred57_ChemicalChunker548);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop120;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:74: ( adj )?
        int alt121=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 140:
            case 141:
            case 142:
            case 143:
                {
                alt121=1;
                }
                break;
        }

        switch (alt121) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred57_ChemicalChunker551);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:79: ( neg )?
        int alt122=2;
        switch ( input.LA(1) ) {
            case 101:
                {
                alt122=1;
                }
                break;
        }

        switch (alt122) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred57_ChemicalChunker554);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred57_ChemicalChunker

    // $ANTLR start synpred58_ChemicalChunker
    public final void synpred58_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:87: ( inoff )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:87: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred58_ChemicalChunker560);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_ChemicalChunker

    // $ANTLR start synpred61_ChemicalChunker
    public final void synpred61_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:95: ( cc )?
        int alt123=2;
        switch ( input.LA(1) ) {
            case 122:
                {
                alt123=1;
                }
                break;
        }

        switch (alt123) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred61_ChemicalChunker564);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:66:99: ( comma )?
        int alt124=2;
        switch ( input.LA(1) ) {
            case 99:
                {
                alt124=1;
                }
                break;
        }

        switch (alt124) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred61_ChemicalChunker567);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred61_ChemicalChunker570);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred102_ChemicalChunker679);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:26: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:70:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred103_ChemicalChunker681);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:13: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:13: citation
        {
        pushFollow(FOLLOW_citation_in_synpred109_ChemicalChunker701);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:22: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:22: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker703);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:31: ( apparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:31: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred111_ChemicalChunker705);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred112_ChemicalChunker
    public final void synpred112_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:41: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred112_ChemicalChunker707);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:57: ( nnstate )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:57: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred113_ChemicalChunker709);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: ( nn )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:65: nn
        {
        pushFollow(FOLLOW_nn_in_synpred114_ChemicalChunker711);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:76: ( nnadd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:76: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred117_ChemicalChunker717);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: ( range )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:119: range
        {
        pushFollow(FOLLOW_range_in_synpred121_ChemicalChunker725);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: ( amount )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:125: amount
        {
        pushFollow(FOLLOW_amount_in_synpred122_ChemicalChunker727);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:132: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:132: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred123_ChemicalChunker729);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred127_ChemicalChunker
    public final void synpred127_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:165: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:165: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred127_ChemicalChunker737);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_ChemicalChunker

    // $ANTLR start synpred128_ChemicalChunker
    public final void synpred128_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:174: ( nnchementity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:174: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred128_ChemicalChunker739);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:187: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:187: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred129_ChemicalChunker741);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred135_ChemicalChunker
    public final void synpred135_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:243: ( nnpressure )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:243: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred135_ChemicalChunker753);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_ChemicalChunker

    // $ANTLR start synpred144_ChemicalChunker
    public final void synpred144_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:334: ( wdt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:334: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred144_ChemicalChunker771);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_ChemicalChunker

    // $ANTLR start synpred145_ChemicalChunker
    public final void synpred145_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:338: ( wp_poss )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:338: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred145_ChemicalChunker773);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_ChemicalChunker

    // $ANTLR start synpred146_ChemicalChunker
    public final void synpred146_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:346: ( wpo )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:346: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred146_ChemicalChunker775);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_ChemicalChunker

    // $ANTLR start synpred147_ChemicalChunker
    public final void synpred147_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:350: ( wps )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:350: wps
        {
        pushFollow(FOLLOW_wps_in_synpred147_ChemicalChunker777);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:386: ( number )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:386: number
        {
        pushFollow(FOLLOW_number_in_synpred151_ChemicalChunker785);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:393: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:71:393: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred152_ChemicalChunker787);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred160_ChemicalChunker
    public final void synpred160_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:74:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred160_ChemicalChunker822);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_ChemicalChunker

    // $ANTLR start synpred161_ChemicalChunker
    public final void synpred161_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: ( colon cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:75:20: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred161_ChemicalChunker851);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred161_ChemicalChunker853);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred161_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:77:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred162_ChemicalChunker870);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred162_ChemicalChunker872);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:20: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred172_ChemicalChunker1016);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:23: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred173_ChemicalChunker1018);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:28: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred174_ChemicalChunker1020);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:44: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:44: stop
        {
        pushFollow(FOLLOW_stop_in_synpred176_ChemicalChunker1024);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:49: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:49: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred177_ChemicalChunker1026);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:63: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:63: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred178_ChemicalChunker1028);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred179_ChemicalChunker
    public final void synpred179_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:72: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:72: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred179_ChemicalChunker1030);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:93: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:93: sym
        {
        pushFollow(FOLLOW_sym_in_synpred181_ChemicalChunker1034);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:97: cd
        {
        pushFollow(FOLLOW_cd_in_synpred182_ChemicalChunker1036);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred183_ChemicalChunker
    public final void synpred183_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:100: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:100: noun
        {
        pushFollow(FOLLOW_noun_in_synpred183_ChemicalChunker1038);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_ChemicalChunker

    // $ANTLR start synpred184_ChemicalChunker
    public final void synpred184_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:105: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:105: inof
        {
        pushFollow(FOLLOW_inof_in_synpred184_ChemicalChunker1040);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred184_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:110: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:110: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred185_ChemicalChunker1042);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:116: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:116: cd
        {
        pushFollow(FOLLOW_cd_in_synpred186_ChemicalChunker1044);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:119: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:119: comma
        {
        pushFollow(FOLLOW_comma_in_synpred187_ChemicalChunker1046);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:125: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:125: adj
        {
        pushFollow(FOLLOW_adj_in_synpred188_ChemicalChunker1048);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:142: ( fw )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:142: fw
        {
        pushFollow(FOLLOW_fw_in_synpred190_ChemicalChunker1056);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:145: ( verb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:145: verb
        {
        pushFollow(FOLLOW_verb_in_synpred191_ChemicalChunker1058);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:150: ( measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:150: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred192_ChemicalChunker1060);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:166: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:166: stop
        {
        pushFollow(FOLLOW_stop_in_synpred194_ChemicalChunker1064);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred195_ChemicalChunker
    public final void synpred195_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:171: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:171: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred195_ChemicalChunker1066);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:185: ( molecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:185: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred196_ChemicalChunker1068);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred197_ChemicalChunker
    public final void synpred197_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:194: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:194: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred197_ChemicalChunker1070);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:215: ( sym )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:215: sym
        {
        pushFollow(FOLLOW_sym_in_synpred199_ChemicalChunker1074);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred200_ChemicalChunker
    public final void synpred200_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:219: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:219: cd
        {
        pushFollow(FOLLOW_cd_in_synpred200_ChemicalChunker1076);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred200_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:222: ( noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:222: noun
        {
        pushFollow(FOLLOW_noun_in_synpred201_ChemicalChunker1078);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred202_ChemicalChunker
    public final void synpred202_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:227: ( inof )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:227: inof
        {
        pushFollow(FOLLOW_inof_in_synpred202_ChemicalChunker1080);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_ChemicalChunker

    // $ANTLR start synpred203_ChemicalChunker
    public final void synpred203_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:232: ( inAll )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:232: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred203_ChemicalChunker1082);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_ChemicalChunker

    // $ANTLR start synpred204_ChemicalChunker
    public final void synpred204_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:238: ( cd )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:238: cd
        {
        pushFollow(FOLLOW_cd_in_synpred204_ChemicalChunker1084);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_ChemicalChunker

    // $ANTLR start synpred205_ChemicalChunker
    public final void synpred205_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:241: ( comma )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:241: comma
        {
        pushFollow(FOLLOW_comma_in_synpred205_ChemicalChunker1086);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_ChemicalChunker

    // $ANTLR start synpred206_ChemicalChunker
    public final void synpred206_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:247: ( adj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:247: adj
        {
        pushFollow(FOLLOW_adj_in_synpred206_ChemicalChunker1088);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_ChemicalChunker

    // $ANTLR start synpred208_ChemicalChunker
    public final void synpred208_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:257: ( stop )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:89:257: stop
        {
        pushFollow(FOLLOW_stop_in_synpred208_ChemicalChunker1092);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_ChemicalChunker

    // $ANTLR start synpred220_ChemicalChunker
    public final void synpred220_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred220_ChemicalChunker1147);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred221_ChemicalChunker1149);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred222_ChemicalChunker1151);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:97:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred223_ChemicalChunker1153);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred227_ChemicalChunker1257);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:35: ( nntime )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:109:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred232_ChemicalChunker1273);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:117:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred235_ChemicalChunker1342);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred253_ChemicalChunker1417);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:124:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred258_ChemicalChunker1432);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:18: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:136:18: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred266_ChemicalChunker1601);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:41: ( dt )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:141:41: dt
        {
        pushFollow(FOLLOW_dt_in_synpred276_ChemicalChunker1665);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:25: ( measurementtypes )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:142:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred277_ChemicalChunker1677);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:19: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:19: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred282_ChemicalChunker1726);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:34: ( oscarCompound2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:34: oscarCompound2
        {
        pushFollow(FOLLOW_oscarCompound2_in_synpred283_ChemicalChunker1728);
        oscarCompound2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:64: ( oscarCompound4 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:147:64: oscarCompound4
        {
        pushFollow(FOLLOW_oscarCompound4_in_synpred285_ChemicalChunker1732);
        oscarCompound4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:27: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:150:27: dash
        {
        pushFollow(FOLLOW_dash_in_synpred287_ChemicalChunker1776);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:27: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:27: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred289_ChemicalChunker1808);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred289_ChemicalChunker1810);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:42: ( dash )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:151:42: dash
        {
        pushFollow(FOLLOW_dash_in_synpred290_ChemicalChunker1814);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:152:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred291_ChemicalChunker1844);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred292_ChemicalChunker1893);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:157:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred293_ChemicalChunker1895);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:4: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred294_ChemicalChunker1911);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:13: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred295_ChemicalChunker1913);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred296_ChemicalChunker1917);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:40: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred297_ChemicalChunker1922);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:49: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred298_ChemicalChunker1924);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:58: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:160:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred299_ChemicalChunker1926);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:18: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:161:18: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred300_ChemicalChunker1937);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:24: ( citation )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:24: citation
        {
        pushFollow(FOLLOW_citation_in_synpred304_ChemicalChunker2022);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:33: ( quantity )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:33: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred305_ChemicalChunker2024);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:42: ( mixture )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:172:42: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred306_ChemicalChunker2026);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: ( jj )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred307_ChemicalChunker2047);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:178:18: ( jj )?
        int alt127=2;
        switch ( input.LA(1) ) {
            case 140:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA127_3 = input.LA(3);

                        if ( (synpred307_ChemicalChunker()) ) {
                            alt127=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt127) {
            case 1 :
                // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred308_ChemicalChunker2047);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred308_ChemicalChunker2050);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:3: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:3: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred309_ChemicalChunker2061);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:28: ( unnamedmoleculeamount2 )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:181:28: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred310_ChemicalChunker2065);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:191:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred315_ChemicalChunker2173);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred315_ChemicalChunker2176);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred320_ChemicalChunker
    public final void synpred320_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:9: ( lrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred320_ChemicalChunker2225);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_ChemicalChunker

    // $ANTLR start synpred321_ChemicalChunker
    public final void synpred321_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:13: ( rrb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred321_ChemicalChunker2227);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_ChemicalChunker

    // $ANTLR start synpred322_ChemicalChunker
    public final void synpred322_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred322_ChemicalChunker2229);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_ChemicalChunker

    // $ANTLR start synpred323_ChemicalChunker
    public final void synpred323_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/chemicaltagger/ChemicalChunker.g:196:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred323_ChemicalChunker2231);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA113 dfa113 = new DFA113(this);
    static final String DFA2_eotS =
        "\u0082\uffff";
    static final String DFA2_eofS =
        "\1\2\u0081\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\175\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00bf\1\0\1\uffff\175\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\175\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\20\1\uffff\1\27\1\166\1\122\1\33\1\147\1\74\1\47\1\3"+
        "\1\174\1\54\1\151\1\24\1\15\1\25\1\71\1\171\1\41\1\107\1\35\1\55"+
        "\1\167\1\57\1\6\1\145\1\2\1\143\1\106\1\1\1\23\1\164\1\13\1\52\1"+
        "\76\1\132\1\144\1\161\1\114\1\125\1\46\1\73\1\4\1\17\1\44\1\40\1"+
        "\0\1\112\1\103\1\31\1\45\1\131\1\130\1\154\1\66\1\157\1\43\1\142"+
        "\1\170\1\175\1\64\1\34\1\53\1\56\1\113\1\104\1\101\1\173\1\137\1"+
        "\62\1\146\1\117\1\162\1\134\1\63\1\105\1\77\1\16\1\32\1\67\1\7\1"+
        "\136\1\42\1\153\1\60\1\51\1\100\1\11\1\110\1\36\1\14\1\10\1\141"+
        "\1\155\1\121\1\127\1\140\1\72\1\102\1\111\1\5\1\30\1\133\1\115\1"+
        "\172\1\163\1\150\1\22\1\12\1\65\1\61\1\124\1\116\1\160\1\156\1\21"+
        "\1\37\1\75\1\70\1\120\1\135\1\26\1\165\1\50\1\126\1\123\1\152\2"+
        "\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\33\1\16\1\17\1\40\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\37\1\31\1\41\1\uffff\1\22\1\50\1\42\1\43\1\57\1"+
            "\30\1\44\1\45\1\46\1\47\1\26\1\51\1\52\1\53\1\54\1\55\1\23\1"+
            "\134\1\172\1\135\1\136\1\27\1\66\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\32\1\147\1\56\1\150\1\151\1\152\1\153\1"+
            "\uffff\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1"+
            "\162\1\60\1\163\1\164\1\165\1\73\1\166\1\36\1\65\1\167\1\170"+
            "\1\171\1\177\1\1\1\uffff\1\173\1\uffff\1\2\1\uffff\1\175\1\176"+
            "\1\20\1\174\16\uffff\1\21\4\uffff\1\3\3\uffff\1\101\1\74\1\75"+
            "\4\uffff\1\104\1\12\1\13\1\14\1\15\1\125\1\uffff\1\25\1\uffff"+
            "\1\34\2\uffff\1\35\13\uffff\1\24\5\uffff\1\4\1\5\1\11\1\6\1"+
            "\10\1\uffff\1\7\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130\1"+
            "\133\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 36:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 129;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\177\uffff";
    static final String DFA4_eofS =
        "\1\15\176\uffff";
    static final String DFA4_minS =
        "\1\13\14\0\1\uffff\156\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00bf\14\0\1\uffff\156\0\3\uffff";
    static final String DFA4_acceptS =
        "\15\uffff\1\4\156\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\157\1\62\1\101\1\34\1\35\1\160\1\141\1\22\1\120\1\147"+
        "\1\103\1\126\1\uffff\1\76\1\114\1\117\1\7\1\1\1\77\1\146\1\105\1"+
        "\15\1\156\1\65\1\151\1\57\1\44\1\11\1\102\1\6\1\131\1\64\1\31\1"+
        "\127\1\43\1\36\1\116\1\163\1\17\1\110\1\61\1\50\1\115\1\166\1\140"+
        "\1\27\1\54\1\113\1\52\1\5\1\165\1\71\1\111\1\3\1\145\1\32\1\134"+
        "\1\23\1\21\1\13\1\30\1\20\1\2\1\60\1\153\1\122\1\132\1\74\1\112"+
        "\1\45\1\72\1\33\1\12\1\124\1\136\1\135\1\107\1\4\1\51\1\25\1\75"+
        "\1\142\1\100\1\37\1\143\1\40\1\16\1\144\1\14\1\171\1\150\1\106\1"+
        "\137\1\162\1\0\1\70\1\47\1\42\1\123\1\104\1\170\1\155\1\26\1\55"+
        "\1\66\1\46\1\121\1\161\1\154\1\67\1\53\1\10\1\24\1\167\1\73\1\130"+
        "\1\41\1\63\1\133\1\152\1\164\1\125\1\56\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\33\1\13\1\14\1\40\1\67\2\uffff\1\106\1\107\1\105\1\113\1"+
            "\114\1\123\1\124\1\110\1\122\1\115\1\117\1\111\1\112\1\121\1"+
            "\120\1\116\1\37\1\31\1\41\1\uffff\1\22\1\50\1\42\1\43\1\57\1"+
            "\30\1\44\1\45\1\46\1\47\1\26\1\51\1\52\1\53\1\54\1\55\1\23\1"+
            "\134\1\172\1\135\1\136\1\27\1\66\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\32\1\147\1\56\1\150\1\151\1\152\1\153\1"+
            "\uffff\1\154\1\70\1\155\1\71\1\156\1\157\1\160\1\161\1\72\1"+
            "\162\1\60\1\163\1\164\1\165\1\73\1\166\1\36\1\65\1\167\1\170"+
            "\1\171\1\15\1\16\1\uffff\1\173\1\uffff\1\15\1\uffff\2\15\1\20"+
            "\1\15\15\uffff\1\15\1\21\4\uffff\1\17\3\uffff\1\101\1\74\1\75"+
            "\4\uffff\1\104\1\7\1\10\1\11\1\12\1\125\1\uffff\1\25\1\uffff"+
            "\1\34\2\uffff\1\35\13\uffff\1\24\5\uffff\1\1\1\2\1\6\1\3\1\5"+
            "\1\uffff\1\4\1\76\1\103\1\uffff\1\126\1\127\1\131\1\130\1\133"+
            "\1\132\1\61\1\62\1\63\1\64\1\77\1\100\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 38:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 126;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\36\uffff";
    static final String DFA5_eofS =
        "\1\1\35\uffff";
    static final String DFA5_minS =
        "\1\13\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00bf\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\32\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\17\uffff\1\5\1\13\1\6\1\4\1\11\1\1\1\12\1\14\1\3\1\7\1\2\1\0\1"+
        "\10\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\14\1\15\2\1\2\uffff\23\1\1\uffff\46\1\1\uffff\25\1\1"+
            "\16\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff"+
            "\1\1\3\uffff\3\1\4\uffff\1\1\1\10\1\11\1\12\1\13\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\1\2\1\3\1"+
            "\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 38:48: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u0088\uffff";
    static final String DFA7_eofS =
        "\u0088\uffff";
    static final String DFA7_minS =
        "\1\13\1\0\1\uffff\3\0\1\uffff\2\0\2\uffff\6\0\4\uffff\1\0\2\uffff"+
        "\1\0\30\uffff\1\0\5\uffff\1\0\120\uffff";
    static final String DFA7_maxS =
        "\1\u00bf\1\0\1\uffff\3\0\1\uffff\2\0\2\uffff\6\0\4\uffff\1\0\2\uffff"+
        "\1\0\30\uffff\1\0\5\uffff\1\0\120\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\71\uffff\1\3\44\uffff\1\4\21\uffff\1\12\2\uffff\1\14"+
        "\1\15\1\16\1\21\5\uffff\1\1\1\20\1\17\1\7\1\5\1\10\1\6\1\11\1\13";
    static final String DFA7_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\2\uffff\1\6\1\7"+
        "\1\10\1\11\1\12\1\13\4\uffff\1\14\2\uffff\1\15\30\uffff\1\16\5\uffff"+
        "\1\17\120\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\25\1\17\1\20\1\2\1\61\2\uffff\20\141\3\2\1\uffff\20\2\1\7"+
            "\4\74\2\2\10\74\1\2\1\74\1\2\4\74\1\uffff\1\74\1\2\1\74\1\2"+
            "\4\74\1\2\1\74\1\2\3\74\1\2\1\74\1\30\1\2\3\74\1\166\1\4\1\uffff"+
            "\1\170\3\uffff\2\163\1\3\1\163\16\uffff\1\5\4\uffff\1\10\3\uffff"+
            "\1\2\1\1\1\2\4\uffff\1\141\1\13\1\14\1\15\1\16\1\167\1\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\171\1\uffff"+
            "\1\171\1\67\1\141\1\uffff\6\74\7\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "45:4: ( fw | noun | verb | inAll | dt | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_3 = input.LA(1);

                         
                        int index7_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 115;}

                         
                        input.seek(index7_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred27_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred18_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred16_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_16 = input.LA(1);

                         
                        int index7_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred19_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 121;}

                         
                        input.seek(index7_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_21 = input.LA(1);

                         
                        int index7_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred17_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred26_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_24 = input.LA(1);

                         
                        int index7_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 60;}

                         
                        input.seek(index7_24);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_49 = input.LA(1);

                         
                        int index7_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index7_49);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_55 = input.LA(1);

                         
                        int index7_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 135;}

                         
                        input.seek(index7_55);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\17\uffff";
    static final String DFA9_eofS =
        "\17\uffff";
    static final String DFA9_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA9_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA9_specialS =
        "\11\uffff\1\2\1\1\1\4\1\3\1\0\1\5}>";
    static final String[] DFA9_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff"+
            "\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:27: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA10_eotS =
        "\101\uffff";
    static final String DFA10_eofS =
        "\1\1\100\uffff";
    static final String DFA10_minS =
        "\1\13\1\uffff\73\0\4\uffff";
    static final String DFA10_maxS =
        "\1\u00bf\1\uffff\73\0\4\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\5\73\uffff\1\1\1\2\1\4\1\3";
    static final String DFA10_specialS =
        "\2\uffff\1\25\1\41\1\15\1\65\1\26\1\55\1\4\1\2\1\27\1\45\1\67\1"+
        "\1\1\21\1\23\1\53\1\12\1\47\1\24\1\60\1\10\1\34\1\3\1\42\1\22\1"+
        "\16\1\51\1\50\1\13\1\54\1\33\1\30\1\57\1\44\1\70\1\66\1\32\1\63"+
        "\1\5\1\71\1\43\1\31\1\14\1\72\1\37\1\6\1\56\1\35\1\52\1\7\1\40\1"+
        "\62\1\61\1\11\1\20\1\64\1\17\1\36\1\0\1\46\4\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\25\1\7\1\10\1\32\1\61\2\uffff\20\1\1\31\1\23\1\33\1\uffff"+
            "\1\14\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43"+
            "\1\44\1\45\1\46\1\47\1\15\4\1\1\21\1\60\10\1\1\24\1\1\1\50\4"+
            "\1\1\uffff\1\1\1\62\1\1\1\63\4\1\1\64\1\1\1\52\3\1\1\65\1\1"+
            "\1\30\1\57\4\1\1\2\1\uffff\3\1\1\uffff\2\1\1\12\1\1\15\uffff"+
            "\1\1\1\13\4\uffff\1\16\3\uffff\1\73\1\66\1\67\4\uffff\1\1\1"+
            "\3\1\4\1\5\1\6\1\1\1\uffff\1\17\1\uffff\1\26\2\uffff\1\27\13"+
            "\uffff\1\11\5\uffff\5\1\1\uffff\1\1\1\70\1\1\1\uffff\6\1\1\53"+
            "\1\54\1\55\1\56\1\71\1\72\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()+ loopback of 50:36: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_59 = input.LA(1);

                         
                        int index10_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA10_13 = input.LA(1);

                         
                        int index10_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA10_9 = input.LA(1);

                         
                        int index10_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA10_23 = input.LA(1);

                         
                        int index10_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA10_8 = input.LA(1);

                         
                        int index10_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA10_39 = input.LA(1);

                         
                        int index10_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_39);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA10_46 = input.LA(1);

                         
                        int index10_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA10_50 = input.LA(1);

                         
                        int index10_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_50);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA10_21 = input.LA(1);

                         
                        int index10_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_21);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA10_54 = input.LA(1);

                         
                        int index10_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_54);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA10_17 = input.LA(1);

                         
                        int index10_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA10_29 = input.LA(1);

                         
                        int index10_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_29);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA10_43 = input.LA(1);

                         
                        int index10_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_43);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA10_4 = input.LA(1);

                         
                        int index10_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_4);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA10_26 = input.LA(1);

                         
                        int index10_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_26);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA10_57 = input.LA(1);

                         
                        int index10_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_57);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA10_55 = input.LA(1);

                         
                        int index10_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA10_14 = input.LA(1);

                         
                        int index10_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_14);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA10_25 = input.LA(1);

                         
                        int index10_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA10_15 = input.LA(1);

                         
                        int index10_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_15);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA10_19 = input.LA(1);

                         
                        int index10_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_19);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA10_2 = input.LA(1);

                         
                        int index10_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_2);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA10_6 = input.LA(1);

                         
                        int index10_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA10_10 = input.LA(1);

                         
                        int index10_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_10);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA10_32 = input.LA(1);

                         
                        int index10_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_32);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA10_42 = input.LA(1);

                         
                        int index10_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_42);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA10_37 = input.LA(1);

                         
                        int index10_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_37);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA10_31 = input.LA(1);

                         
                        int index10_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_31);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA10_22 = input.LA(1);

                         
                        int index10_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_22);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA10_48 = input.LA(1);

                         
                        int index10_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_48);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA10_58 = input.LA(1);

                         
                        int index10_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_58);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA10_45 = input.LA(1);

                         
                        int index10_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_45);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA10_51 = input.LA(1);

                         
                        int index10_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_51);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA10_3 = input.LA(1);

                         
                        int index10_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_3);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA10_24 = input.LA(1);

                         
                        int index10_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_24);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA10_41 = input.LA(1);

                         
                        int index10_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_41);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA10_34 = input.LA(1);

                         
                        int index10_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_34);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA10_11 = input.LA(1);

                         
                        int index10_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred32_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_11);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA10_60 = input.LA(1);

                         
                        int index10_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_60);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA10_18 = input.LA(1);

                         
                        int index10_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_18);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA10_28 = input.LA(1);

                         
                        int index10_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_28);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA10_27 = input.LA(1);

                         
                        int index10_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_27);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA10_49 = input.LA(1);

                         
                        int index10_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_49);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA10_16 = input.LA(1);

                         
                        int index10_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_16);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA10_30 = input.LA(1);

                         
                        int index10_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_30);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA10_7 = input.LA(1);

                         
                        int index10_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_7);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA10_47 = input.LA(1);

                         
                        int index10_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA10_33 = input.LA(1);

                         
                        int index10_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_33);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA10_20 = input.LA(1);

                         
                        int index10_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_20);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA10_53 = input.LA(1);

                         
                        int index10_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_53);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA10_52 = input.LA(1);

                         
                        int index10_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA10_38 = input.LA(1);

                         
                        int index10_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_38);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA10_56 = input.LA(1);

                         
                        int index10_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_56);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA10_5 = input.LA(1);

                         
                        int index10_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_5);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA10_36 = input.LA(1);

                         
                        int index10_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_36);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA10_12 = input.LA(1);

                         
                        int index10_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_12);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA10_35 = input.LA(1);

                         
                        int index10_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_35);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA10_40 = input.LA(1);

                         
                        int index10_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_40);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA10_44 = input.LA(1);

                         
                        int index10_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred33_ChemicalChunker()) ) {s = 63;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index10_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\107\uffff";
    static final String DFA13_eofS =
        "\1\1\106\uffff";
    static final String DFA13_minS =
        "\1\13\1\uffff\102\0\3\uffff";
    static final String DFA13_maxS =
        "\1\u00bf\1\uffff\102\0\3\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\4\102\uffff\1\1\1\3\1\2";
    static final String DFA13_specialS =
        "\2\uffff\1\4\1\55\1\76\1\16\1\10\1\100\1\64\1\70\1\60\1\61\1\62"+
        "\1\21\1\13\1\20\1\40\1\31\1\3\1\24\1\2\1\6\1\37\1\25\1\27\1\63\1"+
        "\35\1\44\1\56\1\7\1\11\1\46\1\77\1\66\1\54\1\75\1\17\1\53\1\34\1"+
        "\67\1\42\1\23\1\72\1\41\1\32\1\73\1\15\1\71\1\50\1\30\1\26\1\5\1"+
        "\51\1\74\1\22\1\14\1\36\1\101\1\1\1\45\1\43\1\12\1\65\1\47\1\0\1"+
        "\57\1\33\1\52\3\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\34\1\14\1\15\1\41\1\70\2\uffff\20\1\1\40\1\32\1\42\1\uffff"+
            "\1\23\1\51\1\43\1\44\1\60\1\31\1\45\1\46\1\47\1\50\1\27\1\52"+
            "\1\53\1\54\1\55\1\56\1\24\4\1\1\30\1\67\10\1\1\33\1\1\1\57\4"+
            "\1\1\uffff\1\1\1\71\1\1\1\72\4\1\1\73\1\1\1\61\3\1\1\74\1\1"+
            "\1\37\1\66\4\1\1\17\1\uffff\3\1\1\uffff\2\1\1\21\1\1\15\uffff"+
            "\1\16\1\22\4\uffff\1\20\3\uffff\1\102\1\75\1\76\4\uffff\1\1"+
            "\1\10\1\11\1\12\1\13\1\1\1\uffff\1\26\1\uffff\1\35\2\uffff\1"+
            "\36\13\uffff\1\25\5\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1"+
            "\77\1\1\1\uffff\6\1\1\62\1\63\1\64\1\65\1\100\1\101\1\103",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:75: ( ( conjunction )* ( advAdj )* noun | number | ratio )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_64 = input.LA(1);

                         
                        int index13_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_64);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_58 = input.LA(1);

                         
                        int index13_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_58);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_20 = input.LA(1);

                         
                        int index13_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_18 = input.LA(1);

                         
                        int index13_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_51 = input.LA(1);

                         
                        int index13_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_51);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_21 = input.LA(1);

                         
                        int index13_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_21);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_29 = input.LA(1);

                         
                        int index13_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_29);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA13_30 = input.LA(1);

                         
                        int index13_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_30);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA13_61 = input.LA(1);

                         
                        int index13_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_61);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA13_14 = input.LA(1);

                         
                        int index13_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA13_55 = input.LA(1);

                         
                        int index13_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA13_46 = input.LA(1);

                         
                        int index13_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA13_36 = input.LA(1);

                         
                        int index13_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_36);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA13_15 = input.LA(1);

                         
                        int index13_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_15);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA13_13 = input.LA(1);

                         
                        int index13_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_13);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA13_54 = input.LA(1);

                         
                        int index13_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_54);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA13_41 = input.LA(1);

                         
                        int index13_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_41);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA13_19 = input.LA(1);

                         
                        int index13_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_19);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA13_23 = input.LA(1);

                         
                        int index13_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA13_50 = input.LA(1);

                         
                        int index13_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA13_24 = input.LA(1);

                         
                        int index13_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA13_49 = input.LA(1);

                         
                        int index13_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_49);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA13_17 = input.LA(1);

                         
                        int index13_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_17);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA13_44 = input.LA(1);

                         
                        int index13_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_44);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA13_66 = input.LA(1);

                         
                        int index13_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA13_38 = input.LA(1);

                         
                        int index13_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_38);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA13_26 = input.LA(1);

                         
                        int index13_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_26);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA13_56 = input.LA(1);

                         
                        int index13_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_56);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA13_22 = input.LA(1);

                         
                        int index13_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_22);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA13_43 = input.LA(1);

                         
                        int index13_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_43);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA13_40 = input.LA(1);

                         
                        int index13_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA13_60 = input.LA(1);

                         
                        int index13_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_60);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA13_27 = input.LA(1);

                         
                        int index13_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_27);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA13_59 = input.LA(1);

                         
                        int index13_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_59);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA13_31 = input.LA(1);

                         
                        int index13_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_31);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA13_63 = input.LA(1);

                         
                        int index13_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_63);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA13_48 = input.LA(1);

                         
                        int index13_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_48);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA13_52 = input.LA(1);

                         
                        int index13_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_52);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA13_67 = input.LA(1);

                         
                        int index13_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_67);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA13_37 = input.LA(1);

                         
                        int index13_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_37);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA13_34 = input.LA(1);

                         
                        int index13_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_34);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA13_28 = input.LA(1);

                         
                        int index13_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred37_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_28);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA13_65 = input.LA(1);

                         
                        int index13_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_65);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA13_12 = input.LA(1);

                         
                        int index13_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_12);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA13_25 = input.LA(1);

                         
                        int index13_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_25);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA13_62 = input.LA(1);

                         
                        int index13_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_62);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA13_33 = input.LA(1);

                         
                        int index13_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_33);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA13_39 = input.LA(1);

                         
                        int index13_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_39);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA13_47 = input.LA(1);

                         
                        int index13_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_47);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA13_42 = input.LA(1);

                         
                        int index13_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_42);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA13_45 = input.LA(1);

                         
                        int index13_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_45);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA13_53 = input.LA(1);

                         
                        int index13_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_53);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA13_35 = input.LA(1);

                         
                        int index13_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_35);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA13_32 = input.LA(1);

                         
                        int index13_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_32);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA13_57 = input.LA(1);

                         
                        int index13_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\103\uffff";
    static final String DFA11_eofS =
        "\103\uffff";
    static final String DFA11_minS =
        "\1\13\16\uffff\1\0\63\uffff";
    static final String DFA11_maxS =
        "\1\u00bf\16\uffff\1\0\63\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA11_specialS =
        "\17\uffff\1\0\63\uffff}>";
    static final String[] DFA11_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\17\7\uffff\1\1\16\uffff\1\102\1\1"+
            "\4\uffff\1\1\3\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:76: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\17\uffff";
    static final String DFA12_eofS =
        "\17\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA12_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA12_specialS =
        "\11\uffff\1\3\1\1\1\4\1\0\1\5\1\2}>";
    static final String[] DFA12_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff"+
            "\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:89: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\u0084\uffff";
    static final String DFA14_eofS =
        "\1\6\u0083\uffff";
    static final String DFA14_minS =
        "\1\13\5\0\176\uffff";
    static final String DFA14_maxS =
        "\1\u00bf\5\0\176\uffff";
    static final String DFA14_acceptS =
        "\6\uffff\1\2\174\uffff\1\1";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\176\uffff}>";
    static final String[] DFA14_transitionS = {
            "\5\6\2\uffff\23\6\1\uffff\1\3\17\6\1\5\25\6\1\uffff\26\6\1\4"+
            "\1\uffff\3\6\1\uffff\2\6\1\1\1\6\15\uffff\1\6\1\2\4\uffff\1"+
            "\6\3\uffff\3\6\4\uffff\6\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1"+
            "\6\13\uffff\1\6\5\uffff\5\6\1\uffff\3\6\1\uffff\15\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "50:149: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\u0084\uffff";
    static final String DFA18_eofS =
        "\1\1\u0083\uffff";
    static final String DFA18_minS =
        "\1\13\103\uffff\1\0\77\uffff";
    static final String DFA18_maxS =
        "\1\u00bf\103\uffff\1\0\77\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\1\2\u0081\uffff\1\1";
    static final String DFA18_specialS =
        "\104\uffff\1\0\77\uffff}>";
    static final String[] DFA18_transitionS = {
            "\5\1\2\uffff\3\1\1\104\17\1\1\uffff\46\1\1\uffff\27\1\1\uffff"+
            "\3\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "()+ loopback of 57:13: ( inin molecule )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_68 = input.LA(1);

                         
                        int index18_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 131;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index18_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA31_eotS =
        "\66\uffff";
    static final String DFA31_eofS =
        "\1\1\65\uffff";
    static final String DFA31_minS =
        "\1\13\1\uffff\63\0\1\uffff";
    static final String DFA31_maxS =
        "\1\u00bf\1\uffff\63\0\1\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\63\uffff\1\1";
    static final String DFA31_specialS =
        "\2\uffff\1\3\1\62\1\30\1\43\1\14\1\42\1\15\1\51\1\21\1\22\1\52\1"+
        "\1\1\44\1\45\1\56\1\32\1\2\1\17\1\41\1\54\1\60\1\20\1\12\1\31\1"+
        "\26\1\13\1\55\1\36\1\24\1\11\1\46\1\5\1\33\1\53\1\7\1\23\1\27\1"+
        "\10\1\34\1\57\1\6\1\16\1\47\1\37\1\25\1\4\1\50\1\0\1\61\1\40\1\35"+
        "\1\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\1\1\14\1\15\2\1\2\uffff\23\1\1\uffff\21\1\1\26\1\64\1\27"+
            "\1\30\2\1\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\1\1\41\1"+
            "\1\1\42\1\43\1\44\1\45\1\uffff\1\46\1\1\1\47\1\1\1\50\1\51\1"+
            "\52\1\53\1\1\1\54\1\1\1\55\1\56\1\57\1\1\1\60\1\16\1\1\1\61"+
            "\1\62\1\63\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff\1\1\1\10\1\11\1\12\1\13"+
            "\1\17\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1\20\1\21\1\23"+
            "\1\22\1\25\1\24\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()+ loopback of 66:44: ( ( md )* ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_49 = input.LA(1);

                         
                        int index31_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_49);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_47 = input.LA(1);

                         
                        int index31_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_33 = input.LA(1);

                         
                        int index31_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_33);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_42 = input.LA(1);

                         
                        int index31_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_42);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_36 = input.LA(1);

                         
                        int index31_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_36);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_39 = input.LA(1);

                         
                        int index31_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_39);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_31 = input.LA(1);

                         
                        int index31_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_31);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_24 = input.LA(1);

                         
                        int index31_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_24);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_27 = input.LA(1);

                         
                        int index31_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_43 = input.LA(1);

                         
                        int index31_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_43);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_23 = input.LA(1);

                         
                        int index31_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_37 = input.LA(1);

                         
                        int index31_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA31_30 = input.LA(1);

                         
                        int index31_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA31_46 = input.LA(1);

                         
                        int index31_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_46);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA31_26 = input.LA(1);

                         
                        int index31_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_26);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA31_38 = input.LA(1);

                         
                        int index31_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_38);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA31_25 = input.LA(1);

                         
                        int index31_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA31_34 = input.LA(1);

                         
                        int index31_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_34);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA31_40 = input.LA(1);

                         
                        int index31_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_40);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA31_52 = input.LA(1);

                         
                        int index31_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_52);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA31_29 = input.LA(1);

                         
                        int index31_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_29);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA31_45 = input.LA(1);

                         
                        int index31_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_45);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA31_51 = input.LA(1);

                         
                        int index31_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_51);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA31_32 = input.LA(1);

                         
                        int index31_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_32);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA31_44 = input.LA(1);

                         
                        int index31_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA31_48 = input.LA(1);

                         
                        int index31_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_48);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA31_35 = input.LA(1);

                         
                        int index31_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_35);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA31_28 = input.LA(1);

                         
                        int index31_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_28);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA31_41 = input.LA(1);

                         
                        int index31_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_41);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA31_22 = input.LA(1);

                         
                        int index31_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_22);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA31_50 = input.LA(1);

                         
                        int index31_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_ChemicalChunker()) ) {s = 53;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA26_eotS =
        "\51\uffff";
    static final String DFA26_eofS =
        "\1\1\50\uffff";
    static final String DFA26_minS =
        "\1\13\1\uffff\46\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u00bf\1\uffff\46\0\1\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\46\uffff\1\1";
    static final String DFA26_specialS =
        "\2\uffff\1\27\1\24\1\23\1\34\1\7\1\21\1\45\1\41\1\43\1\14\1\26\1"+
        "\0\1\10\1\33\1\6\1\20\1\42\1\16\1\2\1\12\1\40\1\13\1\36\1\35\1\44"+
        "\1\37\1\1\1\32\1\3\1\17\1\31\1\5\1\25\1\11\1\22\1\4\1\30\1\15\1"+
        "\uffff}>";
    static final String[] DFA26_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\21\1\1\11\1\47\1\12\1\13\2\1\1\14"+
            "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\1\1\24\1\1\1\25\1\26\1"+
            "\27\1\30\1\uffff\1\31\1\1\1\32\1\1\1\33\1\34\1\35\1\36\1\1\1"+
            "\37\1\1\1\40\1\41\1\42\1\1\1\43\1\2\1\1\1\44\1\45\1\46\2\1\1"+
            "\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1"+
            "\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1\6\1"+
            "\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()+ loopback of 66:59: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_28 = input.LA(1);

                         
                        int index26_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_30 = input.LA(1);

                         
                        int index26_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_30);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_37 = input.LA(1);

                         
                        int index26_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_33 = input.LA(1);

                         
                        int index26_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_33);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_14 = input.LA(1);

                         
                        int index26_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_35 = input.LA(1);

                         
                        int index26_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_35);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_39 = input.LA(1);

                         
                        int index26_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_39);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_31 = input.LA(1);

                         
                        int index26_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA26_36 = input.LA(1);

                         
                        int index26_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_36);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA26_34 = input.LA(1);

                         
                        int index26_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_34);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA26_38 = input.LA(1);

                         
                        int index26_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_38);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA26_32 = input.LA(1);

                         
                        int index26_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_32);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA26_29 = input.LA(1);

                         
                        int index26_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA26_15 = input.LA(1);

                         
                        int index26_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_15);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA26_25 = input.LA(1);

                         
                        int index26_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_25);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA26_24 = input.LA(1);

                         
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA26_27 = input.LA(1);

                         
                        int index26_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_27);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA26_26 = input.LA(1);

                         
                        int index26_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_26);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 40;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA28_eotS =
        "\17\uffff";
    static final String DFA28_eofS =
        "\1\1\16\uffff";
    static final String DFA28_minS =
        "\1\13\1\uffff\6\12\6\0\1\uffff";
    static final String DFA28_maxS =
        "\1\u00bf\1\uffff\6\12\6\0\1\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA28_specialS =
        "\10\uffff\1\1\1\0\1\2\1\3\1\4\1\5\1\uffff}>";
    static final String[] DFA28_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\46\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\1\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff"+
            "\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "()* loopback of 66:69: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_9 = input.LA(1);

                         
                        int index28_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_8 = input.LA(1);

                         
                        int index28_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA28_10 = input.LA(1);

                         
                        int index28_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA28_11 = input.LA(1);

                         
                        int index28_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA28_12 = input.LA(1);

                         
                        int index28_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA28_13 = input.LA(1);

                         
                        int index28_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA29_eotS =
        "\17\uffff";
    static final String DFA29_eofS =
        "\1\7\16\uffff";
    static final String DFA29_minS =
        "\1\13\6\12\1\uffff\6\0\1\uffff";
    static final String DFA29_maxS =
        "\1\u00bf\6\12\1\uffff\6\0\1\uffff";
    static final String DFA29_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\10\uffff\1\2\1\5\1\1\1\0\1\4\1\3\1\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\7\1\5\1\6\2\7\2\uffff\23\7\1\uffff\46\7\1\uffff\27\7\1\uffff"+
            "\1\7\1\uffff\1\7\1\uffff\4\7\15\uffff\2\7\4\uffff\1\7\3\uffff"+
            "\3\7\4\uffff\1\7\1\1\1\2\1\3\1\4\1\7\1\uffff\1\7\1\uffff\1\7"+
            "\2\uffff\1\7\13\uffff\1\7\5\uffff\5\7\1\uffff\3\7\1\uffff\15"+
            "\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "66:74: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_12 = input.LA(1);

                         
                        int index29_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_9 = input.LA(1);

                         
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\u0083\uffff";
    static final String DFA35_eofS =
        "\1\15\u0082\uffff";
    static final String DFA35_minS =
        "\1\13\14\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\17\uffff\1\0\2\uffff"+
        "\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA35_maxS =
        "\1\u00bf\14\0\1\uffff\2\0\2\uffff\1\0\1\uffff\1\0\17\uffff\1\0\2"+
        "\uffff\1\0\36\uffff\22\0\46\uffff\1\0\4\uffff";
    static final String DFA35_acceptS =
        "\15\uffff\1\2\164\uffff\1\1";
    static final String DFA35_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\14\1\15\2\uffff\1\16\1\uffff\1\17\17\uffff\1\20\2\uffff\1\21"+
        "\36\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\46\uffff\1\44\4\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\15\1\13\1\14\2\15\2\uffff\1\111\1\112\1\110\1\116\1\117\1"+
            "\126\1\127\1\113\1\125\1\120\1\122\1\114\1\115\1\124\1\123\1"+
            "\121\2\15\1\44\1\uffff\6\15\1\47\37\15\1\uffff\26\15\1\17\1"+
            "\uffff\1\176\1\uffff\1\15\1\uffff\4\15\15\uffff\1\16\1\24\4"+
            "\uffff\1\22\3\uffff\3\15\4\uffff\1\107\1\7\1\10\1\11\1\12\1"+
            "\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\13\uffff\1\15\5\uffff"+
            "\1\1\1\2\1\6\1\3\1\5\1\uffff\1\4\1\15\1\106\1\uffff\15\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "()* loopback of 66:94: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_1 = input.LA(1);

                         
                        int index35_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA35_10 = input.LA(1);

                         
                        int index35_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA35_12 = input.LA(1);

                         
                        int index35_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA35_14 = input.LA(1);

                         
                        int index35_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA35_18 = input.LA(1);

                         
                        int index35_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA35_20 = input.LA(1);

                         
                        int index35_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA35_36 = input.LA(1);

                         
                        int index35_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_36);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA35_39 = input.LA(1);

                         
                        int index35_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_39);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA35_70 = input.LA(1);

                         
                        int index35_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_70);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA35_71 = input.LA(1);

                         
                        int index35_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_71);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA35_72 = input.LA(1);

                         
                        int index35_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_72);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA35_73 = input.LA(1);

                         
                        int index35_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_73);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA35_74 = input.LA(1);

                         
                        int index35_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_74);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA35_75 = input.LA(1);

                         
                        int index35_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_75);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA35_76 = input.LA(1);

                         
                        int index35_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_76);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA35_77 = input.LA(1);

                         
                        int index35_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_77);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA35_78 = input.LA(1);

                         
                        int index35_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_78);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA35_79 = input.LA(1);

                         
                        int index35_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_79);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA35_80 = input.LA(1);

                         
                        int index35_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_80);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA35_81 = input.LA(1);

                         
                        int index35_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_81);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA35_82 = input.LA(1);

                         
                        int index35_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_82);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA35_83 = input.LA(1);

                         
                        int index35_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_83);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA35_84 = input.LA(1);

                         
                        int index35_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_84);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA35_85 = input.LA(1);

                         
                        int index35_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_85);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA35_86 = input.LA(1);

                         
                        int index35_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_86);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA35_87 = input.LA(1);

                         
                        int index35_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_87);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA35_126 = input.LA(1);

                         
                        int index35_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 130;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index35_126);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\14\uffff";
    static final String DFA38_eofS =
        "\14\uffff";
    static final String DFA38_minS =
        "\1\u0084\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA38_maxS =
        "\1\u00bf\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA38_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\7\64\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "70:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_9 = input.LA(1);

                         
                        int index38_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred103_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index38_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA39_eotS =
        "\117\uffff";
    static final String DFA39_eofS =
        "\117\uffff";
    static final String DFA39_minS =
        "\1\13\1\uffff\5\0\1\uffff\2\0\6\uffff\3\0\1\uffff\1\0\25\uffff\4"+
        "\0\41\uffff";
    static final String DFA39_maxS =
        "\1\u00bf\1\uffff\5\0\1\uffff\2\0\6\uffff\3\0\1\uffff\1\0\25\uffff"+
        "\4\0\41\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\1\5\uffff\1\4\15\uffff\1\10\1\11\1\13\1\14\1\15\1\21"+
        "\1\22\1\23\1\27\1\30\1\31\1\32\1\33\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\4\uffff\1\51\1\52\1\53\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\3\uffff\1\2\1\3\1\5\1\20\1\24\1\55\1\16\1\17\1\26\1\54"+
        "\1\7\1\34\1\12\1\25\1\6\1\45\1\46\1\47\1\50";
    static final String DFA39_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\6\uffff\1\7\1\10\1"+
        "\11\1\uffff\1\12\25\uffff\1\13\1\14\1\15\1\16\41\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\24\2\7\1\31\1\60\22\uffff\1\30\1\22\1\32\1\uffff\1\5\1\41"+
            "\1\33\1\34\1\50\1\21\1\35\1\36\1\37\1\40\1\11\1\42\1\43\1\44"+
            "\1\45\1\46\1\6\4\uffff\1\20\1\57\10\uffff\1\7\1\uffff\1\47\6"+
            "\uffff\1\61\1\uffff\1\62\4\uffff\1\63\1\uffff\1\51\3\uffff\1"+
            "\64\1\uffff\1\27\1\56\4\uffff\1\3\7\uffff\1\2\17\uffff\1\4\4"+
            "\uffff\1\7\3\uffff\1\70\1\65\1\66\5\uffff\4\7\2\uffff\1\10\1"+
            "\uffff\1\25\2\uffff\1\26\13\uffff\1\1\14\uffff\1\67\10\uffff"+
            "\1\52\1\53\1\54\1\55\3\70",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "71:1: noun : ( prp | citation | molecule | apparatus | unnamedmolecule | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | mixture | nntime | nnatmosphere | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | oscaront | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred110_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred123_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 60;}

                        else if ( (synpred110_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred123_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred121_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred122_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred112_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred127_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred129_ChemicalChunker()) ) {s = 68;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 61;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred114_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred135_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred117_ChemicalChunker()) ) {s = 72;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred128_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred113_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred151_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_42 = input.LA(1);

                         
                        int index39_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_ChemicalChunker()) ) {s = 75;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_42);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_43 = input.LA(1);

                         
                        int index39_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_ChemicalChunker()) ) {s = 76;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_43);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_44 = input.LA(1);

                         
                        int index39_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_ChemicalChunker()) ) {s = 77;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_45 = input.LA(1);

                         
                        int index39_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_ChemicalChunker()) ) {s = 78;}

                        else if ( (true) ) {s = 56;}

                         
                        input.seek(index39_45);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA47_eotS =
        "\u0084\uffff";
    static final String DFA47_eofS =
        "\u0084\uffff";
    static final String DFA47_minS =
        "\1\13\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1\0\4\uffff"+
        "\6\0\50\uffff\1\0\37\uffff";
    static final String DFA47_maxS =
        "\1\u00bf\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1\0\4"+
        "\uffff\6\0\50\uffff\1\0\37\uffff";
    static final String DFA47_acceptS =
        "\2\uffff\1\2\47\uffff\1\4\5\uffff\1\11\1\uffff\1\14\62\uffff\1\16"+
        "\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23\1\6\1\20\1\12"+
        "\1\21\1\15";
    static final String DFA47_specialS =
        "\1\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\uffff\1\11\4\uffff\1\12\1\13\1\14\1\15\1\16\1\17\50\uffff"+
        "\1\20\37\uffff}>";
    static final String[] DFA47_transitionS = {
            "\1\57\1\72\1\73\2\62\2\uffff\11\145\1\144\6\145\3\62\1\uffff"+
            "\1\51\17\62\1\54\4\2\2\62\10\2\1\62\1\2\1\62\4\2\1\uffff\1\2"+
            "\1\62\1\2\1\62\4\2\1\62\1\2\1\62\3\2\1\62\1\2\1\43\1\62\3\2"+
            "\1\166\1\56\2\uffff\1\60\1\53\3\uffff\1\55\17\uffff\1\50\4\uffff"+
            "\1\62\3\uffff\1\62\1\1\1\62\4\uffff\1\145\1\66\1\67\1\70\1\71"+
            "\1\52\1\uffff\1\62\1\uffff\1\62\2\uffff\1\62\13\uffff\1\62\14"+
            "\uffff\1\61\1\145\1\uffff\6\2\7\62",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "89:19: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_1 = input.LA(1);

                         
                        int index47_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred172_ChemicalChunker()) ) {s = 119;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA47_35 = input.LA(1);

                         
                        int index47_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA47_40 = input.LA(1);

                         
                        int index47_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 124;}

                         
                        input.seek(index47_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA47_41 = input.LA(1);

                         
                        int index47_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA47_43 = input.LA(1);

                         
                        int index47_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 125;}

                        else if ( (true) ) {s = 126;}

                         
                        input.seek(index47_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA47_44 = input.LA(1);

                         
                        int index47_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA47_45 = input.LA(1);

                         
                        int index47_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_ChemicalChunker()) ) {s = 127;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred179_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA47_46 = input.LA(1);

                         
                        int index47_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 128;}

                         
                        input.seek(index47_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA47_47 = input.LA(1);

                         
                        int index47_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA47_49 = input.LA(1);

                         
                        int index47_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                         
                        input.seek(index47_49);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA47_54 = input.LA(1);

                         
                        int index47_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_54);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA47_55 = input.LA(1);

                         
                        int index47_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_55);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA47_56 = input.LA(1);

                         
                        int index47_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_56);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA47_57 = input.LA(1);

                         
                        int index47_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_57);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA47_58 = input.LA(1);

                         
                        int index47_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_58);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA47_59 = input.LA(1);

                         
                        int index47_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_ChemicalChunker()) ) {s = 50;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 130;}

                         
                        input.seek(index47_59);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA47_100 = input.LA(1);

                         
                        int index47_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred185_ChemicalChunker()) ) {s = 101;}

                         
                        input.seek(index47_100);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\u0085\uffff";
    static final String DFA48_eofS =
        "\u0085\uffff";
    static final String DFA48_minS =
        "\1\13\1\uffff\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff\1"+
        "\0\4\uffff\6\0\50\uffff\1\0\37\uffff";
    static final String DFA48_maxS =
        "\1\u00bf\1\uffff\1\0\41\uffff\1\0\4\uffff\2\0\1\uffff\5\0\1\uffff"+
        "\1\0\4\uffff\6\0\50\uffff\1\0\37\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\24\1\uffff\1\2\47\uffff\1\4\5\uffff\1\11\1\uffff\1\14"+
        "\62\uffff\1\16\20\uffff\1\22\1\1\1\3\1\7\1\10\1\13\1\17\1\5\1\23"+
        "\1\6\1\20\1\12\1\21\1\15";
    static final String DFA48_specialS =
        "\2\uffff\1\0\41\uffff\1\1\4\uffff\1\2\1\3\1\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\uffff\1\11\4\uffff\1\12\1\13\1\14\1\15\1\16\1\17\50\uffff"+
        "\1\20\37\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\60\1\73\1\74\2\63\2\uffff\11\146\1\145\6\146\3\63\1\uffff"+
            "\1\52\17\63\1\55\4\3\2\63\10\3\1\63\1\3\1\63\4\3\1\uffff\1\3"+
            "\1\63\1\3\1\63\4\3\1\63\1\3\1\63\3\3\1\63\1\3\1\44\1\63\3\3"+
            "\1\167\1\57\2\uffff\1\61\1\54\3\uffff\1\56\1\1\16\uffff\1\51"+
            "\4\uffff\1\63\3\uffff\1\63\1\2\1\63\4\uffff\1\146\1\67\1\70"+
            "\1\71\1\72\1\53\1\uffff\1\63\1\uffff\1\63\2\uffff\1\63\13\uffff"+
            "\1\63\14\uffff\1\62\1\146\1\uffff\6\3\7\63",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()+ loopback of 89:141: ( fw | verb | measurements | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_ChemicalChunker()) ) {s = 120;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_36 = input.LA(1);

                         
                        int index48_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_36);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_41 = input.LA(1);

                         
                        int index48_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred200_ChemicalChunker()) ) {s = 124;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred204_ChemicalChunker()) ) {s = 125;}

                         
                        input.seek(index48_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_42 = input.LA(1);

                         
                        int index48_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_ChemicalChunker()) ) {s = 121;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_44 = input.LA(1);

                         
                        int index48_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_ChemicalChunker()) ) {s = 126;}

                        else if ( (synpred208_ChemicalChunker()) ) {s = 127;}

                         
                        input.seek(index48_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_45 = input.LA(1);

                         
                        int index48_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_46 = input.LA(1);

                         
                        int index48_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred197_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_47 = input.LA(1);

                         
                        int index48_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_ChemicalChunker()) ) {s = 122;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred205_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index48_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_48 = input.LA(1);

                         
                        int index48_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred197_ChemicalChunker()) ) {s = 123;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_50 = input.LA(1);

                         
                        int index48_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred199_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                         
                        input.seek(index48_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_55 = input.LA(1);

                         
                        int index48_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_55);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_56 = input.LA(1);

                         
                        int index48_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_56);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA48_57 = input.LA(1);

                         
                        int index48_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_57);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA48_58 = input.LA(1);

                         
                        int index48_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_58);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA48_59 = input.LA(1);

                         
                        int index48_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_59);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA48_60 = input.LA(1);

                         
                        int index48_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_ChemicalChunker()) ) {s = 51;}

                        else if ( (synpred206_ChemicalChunker()) ) {s = 131;}

                         
                        input.seek(index48_60);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA48_101 = input.LA(1);

                         
                        int index48_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred203_ChemicalChunker()) ) {s = 102;}

                         
                        input.seek(index48_101);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\46\uffff";
    static final String DFA52_eofS =
        "\46\uffff";
    static final String DFA52_minS =
        "\1\14\40\0\5\uffff";
    static final String DFA52_maxS =
        "\1\u00b1\40\0\5\uffff";
    static final String DFA52_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\5\1\4";
    static final String DFA52_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\5\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\14\1\15\4\uffff\1\20\1\21\1\17\1\25\1\26\1\34\1\35\1\22\1"+
            "\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff\1\41\7\uffff\1"+
            "\42\116\uffff\1\40\4\uffff\1\37\12\uffff\1\16\1\10\1\11\1\12"+
            "\1\13\31\uffff\1\2\1\3\1\7\1\4\1\6\1\uffff\1\5\1\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "97:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_1 = input.LA(1);

                         
                        int index52_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_2 = input.LA(1);

                         
                        int index52_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_4 = input.LA(1);

                         
                        int index52_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_5 = input.LA(1);

                         
                        int index52_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_7 = input.LA(1);

                         
                        int index52_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA52_19 = input.LA(1);

                         
                        int index52_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA52_21 = input.LA(1);

                         
                        int index52_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA52_22 = input.LA(1);

                         
                        int index52_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA52_23 = input.LA(1);

                         
                        int index52_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA52_24 = input.LA(1);

                         
                        int index52_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA52_25 = input.LA(1);

                         
                        int index52_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA52_26 = input.LA(1);

                         
                        int index52_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA52_28 = input.LA(1);

                         
                        int index52_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA52_29 = input.LA(1);

                         
                        int index52_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA52_30 = input.LA(1);

                         
                        int index52_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index52_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA52_31 = input.LA(1);

                         
                        int index52_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index52_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA52_32 = input.LA(1);

                         
                        int index52_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index52_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\33\uffff";
    static final String DFA56_eofS =
        "\33\uffff";
    static final String DFA56_minS =
        "\1\14\1\uffff\14\12\14\0\1\uffff";
    static final String DFA56_maxS =
        "\1\u00b1\1\uffff\14\12\14\0\1\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\30\uffff\1\1";
    static final String DFA56_specialS =
        "\16\uffff\1\5\1\1\1\4\1\7\1\10\1\2\1\0\1\3\1\11\1\12\1\6\1\13\1"+
        "\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\14\1\15\4\uffff\20\1\2\uffff\1\1\126\uffff\1\1\4\uffff\1"+
            "\1\12\uffff\1\1\1\10\1\11\1\12\1\13\31\uffff\1\2\1\3\1\7\1\4"+
            "\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 109:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_25 = input.LA(1);

                         
                        int index56_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\33\uffff";
    static final String DFA66_eofS =
        "\33\uffff";
    static final String DFA66_minS =
        "\1\14\14\12\1\uffff\14\0\1\uffff";
    static final String DFA66_maxS =
        "\1\u00b1\14\12\1\uffff\14\0\1\uffff";
    static final String DFA66_acceptS =
        "\15\uffff\1\2\14\uffff\1\1";
    static final String DFA66_specialS =
        "\16\uffff\1\5\1\10\1\3\1\0\1\11\1\2\1\6\1\1\1\4\1\12\1\7\1\13\1"+
        "\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\13\1\14\4\uffff\20\15\12\uffff\1\15\116\uffff\1\15\4\uffff"+
            "\1\15\12\uffff\1\15\1\7\1\10\1\11\1\12\31\uffff\1\1\1\2\1\6"+
            "\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "124:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_17 = input.LA(1);

                         
                        int index66_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA66_21 = input.LA(1);

                         
                        int index66_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA66_19 = input.LA(1);

                         
                        int index66_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA66_16 = input.LA(1);

                         
                        int index66_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA66_22 = input.LA(1);

                         
                        int index66_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA66_14 = input.LA(1);

                         
                        int index66_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA66_20 = input.LA(1);

                         
                        int index66_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA66_24 = input.LA(1);

                         
                        int index66_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA66_15 = input.LA(1);

                         
                        int index66_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA66_18 = input.LA(1);

                         
                        int index66_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA66_23 = input.LA(1);

                         
                        int index66_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA66_25 = input.LA(1);

                         
                        int index66_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index66_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA85_eotS =
        "\33\uffff";
    static final String DFA85_eofS =
        "\1\3\3\uffff\1\3\12\uffff\2\3\12\uffff";
    static final String DFA85_minS =
        "\1\13\2\12\1\uffff\1\13\1\0\7\12\1\uffff\1\0\2\13\4\0\3\12\3\0";
    static final String DFA85_maxS =
        "\1\u00bf\2\12\1\uffff\1\u00bf\1\0\7\12\1\uffff\1\0\2\u00bf\4\0\3"+
        "\12\3\0";
    static final String DFA85_acceptS =
        "\3\uffff\1\2\11\uffff\1\1\15\uffff";
    static final String DFA85_specialS =
        "\5\uffff\1\5\10\uffff\1\0\2\uffff\1\2\1\3\1\4\1\6\3\uffff\1\10\1"+
        "\1\1\7}>";
    static final String[] DFA85_transitionS = {
            "\5\3\2\uffff\23\3\1\uffff\1\2\45\3\1\uffff\27\3\1\uffff\3\3"+
            "\1\uffff\4\3\15\uffff\1\3\1\1\4\uffff\1\3\3\uffff\3\3\4\uffff"+
            "\6\3\1\uffff\1\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff"+
            "\5\3\1\uffff\3\3\1\uffff\15\3",
            "\1\4",
            "\1\5",
            "",
            "\5\3\1\uffff\24\3\1\11\1\6\1\13\2\3\1\12\41\3\1\uffff\27\3"+
            "\1\uffff\3\3\1\14\4\3\15\uffff\1\3\1\7\4\uffff\1\3\3\uffff\3"+
            "\3\4\uffff\6\3\1\uffff\1\10\1\uffff\1\3\2\uffff\1\3\13\uffff"+
            "\1\3\5\uffff\5\3\1\uffff\3\3\1\uffff\15\3",
            "\1\uffff",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "",
            "\1\uffff",
            "\5\3\1\uffff\24\3\1\25\1\6\1\27\2\3\1\26\41\3\1\uffff\27\3"+
            "\1\uffff\10\3\15\uffff\1\3\1\7\4\uffff\1\3\3\uffff\3\3\4\uffff"+
            "\6\3\1\uffff\1\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff"+
            "\5\3\1\uffff\3\3\1\uffff\15\3",
            "\5\3\2\uffff\23\3\1\uffff\46\3\1\uffff\27\3\1\uffff\3\3\1\14"+
            "\4\3\15\uffff\2\3\4\uffff\1\3\3\uffff\3\3\4\uffff\6\3\1\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\1\3\13\uffff\1\3\5\uffff\5\3\1\uffff"+
            "\3\3\1\uffff\15\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "142:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_14 = input.LA(1);

                         
                        int index85_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA85_25 = input.LA(1);

                         
                        int index85_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_25);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA85_17 = input.LA(1);

                         
                        int index85_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_17);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA85_18 = input.LA(1);

                         
                        int index85_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA85_19 = input.LA(1);

                         
                        int index85_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA85_5 = input.LA(1);

                         
                        int index85_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA85_20 = input.LA(1);

                         
                        int index85_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA85_26 = input.LA(1);

                         
                        int index85_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_26);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA85_24 = input.LA(1);

                         
                        int index85_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA86_eotS =
        "\12\uffff";
    static final String DFA86_eofS =
        "\12\uffff";
    static final String DFA86_minS =
        "\1\46\1\12\1\uffff\1\45\2\uffff\1\12\2\uffff\1\45";
    static final String DFA86_maxS =
        "\1\173\1\12\1\uffff\1\u0092\2\uffff\1\12\2\uffff\1\173";
    static final String DFA86_acceptS =
        "\2\uffff\1\1\1\uffff\1\4\1\2\1\uffff\1\5\1\3\1\uffff";
    static final String DFA86_specialS =
        "\12\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\2\124\uffff\1\1",
            "\1\3",
            "",
            "\1\10\1\2\1\5\2\uffff\1\7\75\uffff\1\4\22\uffff\1\6\26\uffff"+
            "\1\4",
            "",
            "",
            "\1\11",
            "",
            "",
            "\1\10\1\2\1\5\2\uffff\1\7\120\uffff\1\6"
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "143:1: measurementtypes : ( molar | amount | mass | percent | volume );";
        }
    }
    static final String DFA87_eotS =
        "\21\uffff";
    static final String DFA87_eofS =
        "\3\uffff\1\5\6\uffff\1\5\6\uffff";
    static final String DFA87_minS =
        "\1\66\1\12\1\uffff\1\13\1\12\1\uffff\2\12\1\uffff\1\66\1\13\1\0"+
        "\1\uffff\1\12\1\uffff\1\0\1\uffff";
    static final String DFA87_maxS =
        "\1\153\1\12\1\uffff\1\u00bf\1\12\1\uffff\2\12\1\uffff\1\66\1\u00bf"+
        "\1\0\1\uffff\1\12\1\uffff\1\0\1\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\5\2\uffff\1\6\2\uffff\1\4\3\uffff\1\3\1\uffff\1\2\1\uffff"+
        "\1\1";
    static final String DFA87_specialS =
        "\11\uffff\1\2\1\uffff\1\1\3\uffff\1\0\1\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\1\64\uffff\1\2",
            "\1\3",
            "",
            "\5\5\2\uffff\23\5\1\uffff\20\5\1\7\25\5\1\uffff\27\5\1\10\1"+
            "\5\1\4\1\5\1\uffff\4\5\15\uffff\2\5\4\uffff\1\5\3\uffff\3\5"+
            "\4\uffff\1\5\1\6\4\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\5\13"+
            "\uffff\1\5\5\uffff\5\5\1\uffff\3\5\1\uffff\15\5",
            "\1\11",
            "",
            "\1\12",
            "\1\13",
            "",
            "\1\14",
            "\5\5\2\uffff\23\5\1\uffff\20\5\1\15\25\5\1\uffff\27\5\1\uffff"+
            "\3\5\1\uffff\4\5\15\uffff\2\5\4\uffff\1\5\3\uffff\3\5\4\uffff"+
            "\6\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\5\13\uffff\1\5\5\uffff"+
            "\5\5\1\uffff\3\5\1\uffff\15\5",
            "\1\uffff",
            "",
            "\1\17",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "147:18: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarCompound5 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_15 = input.LA(1);

                         
                        int index87_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index87_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_11 = input.LA(1);

                         
                        int index87_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index87_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA87_9 = input.LA(1);

                         
                        int index87_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA87_9==54) ) {s = 12;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index87_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA95_eotS =
        "\u0086\uffff";
    static final String DFA95_eofS =
        "\1\1\u0085\uffff";
    static final String DFA95_minS =
        "\1\13\3\uffff\1\0\15\uffff\3\0\161\uffff";
    static final String DFA95_maxS =
        "\1\u00bf\3\uffff\1\0\15\uffff\3\0\161\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\4\u0081\uffff\1\1\1\3\1\2";
    static final String DFA95_specialS =
        "\4\uffff\1\0\15\uffff\1\1\1\2\1\3\161\uffff}>";
    static final String[] DFA95_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\1\24\45\1\1\uffff\26\1\1\4\1\uffff"+
            "\3\1\1\uffff\2\1\1\22\1\1\15\uffff\1\1\1\23\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "()* loopback of 160:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_4 = input.LA(1);

                         
                        int index95_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred299_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA95_18 = input.LA(1);

                         
                        int index95_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred298_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred299_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA95_19 = input.LA(1);

                         
                        int index95_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA95_20 = input.LA(1);

                         
                        int index95_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index95_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\u0086\uffff";
    static final String DFA99_eofS =
        "\1\2\u0085\uffff";
    static final String DFA99_minS =
        "\1\13\1\0\17\uffff\3\0\162\uffff";
    static final String DFA99_maxS =
        "\1\u00bf\1\0\17\uffff\3\0\162\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\4\u0080\uffff\1\1\1\3\1\2";
    static final String DFA99_specialS =
        "\1\uffff\1\0\17\uffff\1\1\1\2\1\3\162\uffff}>";
    static final String[] DFA99_transitionS = {
            "\5\2\2\uffff\23\2\1\uffff\1\23\45\2\1\uffff\26\2\1\1\1\uffff"+
            "\3\2\1\uffff\2\2\1\21\1\2\15\uffff\1\2\1\22\4\uffff\1\2\3\uffff"+
            "\3\2\4\uffff\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff"+
            "\1\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 172:23: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA99_17 = input.LA(1);

                         
                        int index99_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred306_ChemicalChunker()) ) {s = 132;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA99_18 = input.LA(1);

                         
                        int index99_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA99_19 = input.LA(1);

                         
                        int index99_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA102_eotS =
        "\76\uffff";
    static final String DFA102_eofS =
        "\1\2\75\uffff";
    static final String DFA102_minS =
        "\1\13\1\0\1\uffff\72\0\1\uffff";
    static final String DFA102_maxS =
        "\1\u00bf\1\0\1\uffff\72\0\1\uffff";
    static final String DFA102_acceptS =
        "\2\uffff\1\2\72\uffff\1\1";
    static final String DFA102_specialS =
        "\1\uffff\1\13\1\uffff\1\35\1\63\1\37\1\64\1\0\1\1\1\47\1\34\1\54"+
        "\1\15\1\52\1\61\1\57\1\65\1\14\1\25\1\20\1\10\1\50\1\53\1\23\1\36"+
        "\1\45\1\11\1\31\1\56\1\24\1\70\1\55\1\6\1\71\1\27\1\51\1\40\1\7"+
        "\1\41\1\43\1\26\1\46\1\30\1\60\1\72\1\22\1\2\1\66\1\67\1\33\1\4"+
        "\1\5\1\17\1\62\1\44\1\3\1\21\1\42\1\12\1\16\1\32\1\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\25\1\10\1\11\1\32\1\61\2\uffff\20\2\1\31\1\23\1\33\1\uffff"+
            "\1\14\1\42\1\34\1\35\1\51\1\22\1\36\1\37\1\40\1\41\1\20\1\43"+
            "\1\44\1\45\1\46\1\47\1\15\4\2\1\21\1\60\10\2\1\24\1\2\1\50\4"+
            "\2\1\uffff\1\2\1\62\1\2\1\63\4\2\1\64\1\2\1\52\3\2\1\65\1\2"+
            "\1\30\1\57\4\2\1\1\1\uffff\3\2\1\uffff\2\2\1\12\1\2\15\uffff"+
            "\1\2\1\13\4\uffff\1\3\3\uffff\1\73\1\66\1\67\4\uffff\1\2\1\4"+
            "\1\5\1\6\1\7\1\2\1\uffff\1\17\1\uffff\1\26\2\uffff\1\27\13\uffff"+
            "\1\16\5\uffff\5\2\1\uffff\1\2\1\70\1\2\1\uffff\6\2\1\53\1\54"+
            "\1\55\1\56\1\71\1\72\1\74",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "()+ loopback of 178:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_7 = input.LA(1);

                         
                        int index102_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA102_8 = input.LA(1);

                         
                        int index102_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA102_46 = input.LA(1);

                         
                        int index102_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_46);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA102_55 = input.LA(1);

                         
                        int index102_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_55);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA102_50 = input.LA(1);

                         
                        int index102_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_50);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA102_51 = input.LA(1);

                         
                        int index102_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_51);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA102_32 = input.LA(1);

                         
                        int index102_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA102_37 = input.LA(1);

                         
                        int index102_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_37);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA102_20 = input.LA(1);

                         
                        int index102_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA102_26 = input.LA(1);

                         
                        int index102_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_26);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA102_58 = input.LA(1);

                         
                        int index102_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_58);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA102_1 = input.LA(1);

                         
                        int index102_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_1);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA102_17 = input.LA(1);

                         
                        int index102_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA102_12 = input.LA(1);

                         
                        int index102_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_12);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA102_59 = input.LA(1);

                         
                        int index102_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_59);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA102_52 = input.LA(1);

                         
                        int index102_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA102_19 = input.LA(1);

                         
                        int index102_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA102_56 = input.LA(1);

                         
                        int index102_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA102_45 = input.LA(1);

                         
                        int index102_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_45);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA102_23 = input.LA(1);

                         
                        int index102_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_23);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA102_29 = input.LA(1);

                         
                        int index102_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA102_18 = input.LA(1);

                         
                        int index102_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_18);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA102_40 = input.LA(1);

                         
                        int index102_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA102_34 = input.LA(1);

                         
                        int index102_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA102_42 = input.LA(1);

                         
                        int index102_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_42);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA102_27 = input.LA(1);

                         
                        int index102_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA102_60 = input.LA(1);

                         
                        int index102_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_60);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA102_49 = input.LA(1);

                         
                        int index102_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_49);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA102_10 = input.LA(1);

                         
                        int index102_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_10);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA102_3 = input.LA(1);

                         
                        int index102_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_3);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA102_24 = input.LA(1);

                         
                        int index102_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_24);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA102_5 = input.LA(1);

                         
                        int index102_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_5);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA102_36 = input.LA(1);

                         
                        int index102_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_36);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA102_38 = input.LA(1);

                         
                        int index102_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_38);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA102_57 = input.LA(1);

                         
                        int index102_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_57);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA102_39 = input.LA(1);

                         
                        int index102_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_39);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA102_54 = input.LA(1);

                         
                        int index102_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_54);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA102_25 = input.LA(1);

                         
                        int index102_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_25);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA102_41 = input.LA(1);

                         
                        int index102_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA102_9 = input.LA(1);

                         
                        int index102_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_9);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA102_21 = input.LA(1);

                         
                        int index102_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_21);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA102_35 = input.LA(1);

                         
                        int index102_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_35);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA102_13 = input.LA(1);

                         
                        int index102_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_13);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA102_22 = input.LA(1);

                         
                        int index102_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_22);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA102_11 = input.LA(1);

                         
                        int index102_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_11);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA102_31 = input.LA(1);

                         
                        int index102_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_31);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA102_28 = input.LA(1);

                         
                        int index102_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_28);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA102_15 = input.LA(1);

                         
                        int index102_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_15);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA102_43 = input.LA(1);

                         
                        int index102_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_43);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA102_14 = input.LA(1);

                         
                        int index102_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_14);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA102_53 = input.LA(1);

                         
                        int index102_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA102_4 = input.LA(1);

                         
                        int index102_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_4);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA102_6 = input.LA(1);

                         
                        int index102_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_6);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA102_16 = input.LA(1);

                         
                        int index102_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_16);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA102_47 = input.LA(1);

                         
                        int index102_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_47);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA102_48 = input.LA(1);

                         
                        int index102_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_48);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA102_30 = input.LA(1);

                         
                        int index102_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_30);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA102_33 = input.LA(1);

                         
                        int index102_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_33);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA102_44 = input.LA(1);

                         
                        int index102_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA108_eotS =
        "\55\uffff";
    static final String DFA108_eofS =
        "\1\2\2\uffff\1\2\2\uffff\1\2\13\uffff\2\2\14\uffff\1\2\3\uffff\1"+
        "\2\10\uffff";
    static final String DFA108_minS =
        "\1\13\1\12\1\uffff\1\13\2\12\1\13\1\0\10\12\1\uffff\1\0\2\13\5\0"+
        "\6\12\1\0\1\13\3\0\1\13\4\12\4\0";
    static final String DFA108_maxS =
        "\1\u00bf\1\12\1\uffff\1\u00bf\2\12\1\u00bf\1\0\10\12\1\uffff\1\0"+
        "\2\u00bf\5\0\6\12\1\0\1\u00bf\3\0\1\u00bf\4\12\4\0";
    static final String DFA108_acceptS =
        "\2\uffff\1\2\15\uffff\1\1\34\uffff";
    static final String DFA108_specialS =
        "\7\uffff\1\0\11\uffff\1\15\2\uffff\1\14\1\4\1\2\1\3\1\11\6\uffff"+
        "\1\1\1\uffff\1\5\1\12\1\6\5\uffff\1\10\1\16\1\13\1\7}>";
    static final String[] DFA108_transitionS = {
            "\5\2\2\uffff\23\2\1\uffff\46\2\1\uffff\26\2\1\1\1\uffff\3\2"+
            "\1\uffff\4\2\15\uffff\2\2\4\uffff\1\2\3\uffff\3\2\4\uffff\6"+
            "\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\3",
            "",
            "\5\2\2\uffff\23\2\1\uffff\1\5\45\2\1\uffff\27\2\1\uffff\3\2"+
            "\1\uffff\4\2\15\uffff\1\2\1\4\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\6",
            "\1\7",
            "\5\2\1\uffff\1\16\23\2\1\13\1\14\1\10\2\2\1\15\41\2\1\uffff"+
            "\27\2\1\uffff\3\2\1\17\4\2\15\uffff\1\2\1\11\4\uffff\1\2\3\uffff"+
            "\3\2\4\uffff\6\2\1\uffff\1\12\1\uffff\1\2\2\uffff\1\2\13\uffff"+
            "\1\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\uffff",
            "\5\2\1\uffff\24\2\1\33\1\31\1\35\2\2\1\34\41\2\1\uffff\27\2"+
            "\1\uffff\10\2\15\uffff\1\2\1\32\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\5\2\2\uffff\23\2\1\uffff\46\2\1\uffff\27\2\1\uffff\3\2\1\17"+
            "\4\2\15\uffff\1\2\1\36\4\uffff\1\2\3\uffff\3\2\4\uffff\6\2\1"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\2"+
            "\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\42",
            "\1\43",
            "\1\44",
            "\1\uffff",
            "\5\2\1\uffff\24\2\1\45\1\31\1\47\2\2\1\46\41\2\1\uffff\27\2"+
            "\1\uffff\10\2\15\uffff\1\2\1\32\4\uffff\1\2\3\uffff\3\2\4\uffff"+
            "\6\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\5\uffff"+
            "\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\5\2\1\uffff\1\50\72\2\1\uffff\27\2\1\uffff\10\2\15\uffff\2"+
            "\2\4\uffff\1\2\3\uffff\3\2\4\uffff\6\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\1\2\13\uffff\1\2\5\uffff\5\2\1\uffff\3\2\1\uffff"+
            "\15\2",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "()* loopback of 191:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_7 = input.LA(1);

                         
                        int index108_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA108_31 = input.LA(1);

                         
                        int index108_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_31);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA108_22 = input.LA(1);

                         
                        int index108_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA108_23 = input.LA(1);

                         
                        int index108_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA108_21 = input.LA(1);

                         
                        int index108_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA108_33 = input.LA(1);

                         
                        int index108_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_33);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA108_35 = input.LA(1);

                         
                        int index108_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_35);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA108_44 = input.LA(1);

                         
                        int index108_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA108_41 = input.LA(1);

                         
                        int index108_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA108_24 = input.LA(1);

                         
                        int index108_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_24);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA108_34 = input.LA(1);

                         
                        int index108_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_34);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA108_43 = input.LA(1);

                         
                        int index108_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_43);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA108_20 = input.LA(1);

                         
                        int index108_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_20);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA108_17 = input.LA(1);

                         
                        int index108_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA108_42 = input.LA(1);

                         
                        int index108_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index108_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\12\uffff";
    static final String DFA111_eofS =
        "\1\1\11\uffff";
    static final String DFA111_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA111_maxS =
        "\1\u00bf\1\uffff\4\0\4\uffff";
    static final String DFA111_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\2\1\3\1\4";
    static final String DFA111_specialS =
        "\2\uffff\1\2\1\3\1\1\1\0\4\uffff}>";
    static final String[] DFA111_transitionS = {
            "\5\1\2\uffff\23\1\1\uffff\46\1\1\uffff\27\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\4\1\5\1\2\1\3\16\uffff\1\1\4\uffff\1\1\3\uffff"+
            "\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\1\1\5\uffff\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()+ loopback of 196:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred323_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred322_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred320_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\103\uffff";
    static final String DFA112_eofS =
        "\103\uffff";
    static final String DFA112_minS =
        "\1\13\16\uffff\1\0\63\uffff";
    static final String DFA112_maxS =
        "\1\u00bf\16\uffff\1\0\63\uffff";
    static final String DFA112_acceptS =
        "\1\uffff\1\2\100\uffff\1\1";
    static final String DFA112_specialS =
        "\17\uffff\1\0\63\uffff}>";
    static final String[] DFA112_transitionS = {
            "\5\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\17\7\uffff\1\1\16\uffff\1\102\1\1"+
            "\4\uffff\1\1\3\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\1\1\5\uffff\5\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:76: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred34_ChemicalChunker()) ) {s = 66;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index112_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA113_eotS =
        "\17\uffff";
    static final String DFA113_eofS =
        "\17\uffff";
    static final String DFA113_minS =
        "\1\13\1\uffff\6\12\1\uffff\6\0";
    static final String DFA113_maxS =
        "\1\u00bf\1\uffff\6\12\1\uffff\6\0";
    static final String DFA113_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA113_specialS =
        "\11\uffff\1\3\1\1\1\0\1\4\1\5\1\2}>";
    static final String[] DFA113_transitionS = {
            "\1\1\1\6\1\7\2\1\22\uffff\3\1\1\uffff\21\1\4\uffff\2\1\10\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\1\1\7\uffff\1\1\17\uffff"+
            "\1\1\4\uffff\1\1\3\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\1\1\5\uffff\5\10\1\uffff"+
            "\1\10\1\1\10\uffff\7\1",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()* loopback of 50:89: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_11 = input.LA(1);

                         
                        int index113_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA113_10 = input.LA(1);

                         
                        int index113_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA113_14 = input.LA(1);

                         
                        int index113_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA113_9 = input.LA(1);

                         
                        int index113_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA113_12 = input.LA(1);

                         
                        int index113_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA113_13 = input.LA(1);

                         
                        int index113_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document208 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001E2FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sentence_in_sentences230 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences232 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x08001EAFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_sentences240 = new BitSet(new long[]{0x0000000000000002L,0x0000008800000000L});
    public static final BitSet FOLLOW_stop_in_sentences242 = new BitSet(new long[]{0x0000000000000002L,0x0000008800000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence253 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verbphrase_in_sentence255 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_sentence257 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082FFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_advAdj_in_sentence262 = new BitSet(new long[]{0x0000000000003002L,0x0400000C00000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_colon_in_sentence264 = new BitSet(new long[]{0x0000000000003002L,0x0400000C00000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_conjunction_in_sentence269 = new BitSet(new long[]{0x0000000000000002L,0x0400000800000000L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure365 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure368 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure373 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure375 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure377 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure379 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure387 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure390 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure394 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_number_in_nounphraseStructure396 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure398 = new BitSet(new long[]{0x187FFFDC0820F802L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure406 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure409 = new BitSet(new long[]{0x0040004008200002L,0x0800080800000000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure411 = new BitSet(new long[]{0x0000000008200002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1452 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1454 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure1457 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1459 = new BitSet(new long[]{0x0000000000200000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2472 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure2475 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2477 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_cc_in_conjunction492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure523 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure526 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure529 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure533 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure536 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure539 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure542 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure545 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure548 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure551 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure554 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure560 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure564 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure567 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure570 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x0C00082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_vb_in_verb582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_in_noun699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_noun701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_noun703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_noun705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_noun707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_noun709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_noun711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_noun713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_noun715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_noun717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_noun719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_noun721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_noun723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_noun725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_noun727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_noun729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_noun731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_noun733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_noun735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_noun737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_noun739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_noun741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_noun743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_noun745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_noun747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_noun749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_noun751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_noun753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_noun755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_noun757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_noun759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_noun761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_noun763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_noun765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_noun767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_noun769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_noun771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_noun773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_noun775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_noun777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_noun779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_noun781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_noun783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_noun785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_noun787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_noun789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_noun791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_noun793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_noun795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_noun797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_noun799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_noun801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_noun803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_range809 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_range811 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_range813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_ratio822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio848 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_numberratio851 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio853 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_noun_in_nounratio866 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_colon_in_nounratio870 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_nounratio872 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_citationStructure1_in_citation885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure2_in_citation887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_citationStructure1910 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure1912 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure1914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure2920 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_lrb_in_citationStructure2922 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure2924 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure2926 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_citationStructure2928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent937 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_fw_in_citationContent939 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_cd_in_citationContent941 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_conjunction_in_citationContent943 = new BitSet(new long[]{0x0000000000000000L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_nnp_in_citationContent947 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_fw_in_citationContent949 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_cd_in_citationContent951 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_conjunction_in_citationContent953 = new BitSet(new long[]{0x0000000000000002L,0x0C00000800000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2988 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure2990 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure2992 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure2994 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure2996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11003 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11005 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1016 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1018 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1020 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_mixtureContent1022 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1024 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1026 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1028 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1030 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1032 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1034 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1036 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1038 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1040 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1042 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1044 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1046 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1048 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1050 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1052 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1056 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_verb_in_mixtureContent1058 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1060 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_md_in_mixtureContent1062 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1064 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1066 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1068 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1070 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_dash_in_mixtureContent1072 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_sym_in_mixtureContent1074 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1076 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_noun_in_mixtureContent1078 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inof_in_mixtureContent1080 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1082 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_cd_in_mixtureContent1084 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_mixtureContent1086 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_adj_in_mixtureContent1088 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_colon_in_mixtureContent1090 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_stop_in_mixtureContent1092 = new BitSet(new long[]{0xFFFFFFDFFFFCF802L,0x080008CFFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_jj_in_adj1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj1105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_adv1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1143 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1180 = new BitSet(new long[]{0x00000003FFFC3000L,0x0000000000000000L,0x0002BE000000F800L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1183 = new BitSet(new long[]{0x187FFFDFFFFCF800L,0x0800080868A140A0L,0xFE03BE080094F871L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1214 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1257 = new BitSet(new long[]{0x00000013FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1260 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1264 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1267 = new BitSet(new long[]{0x0000001000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1270 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1273 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1285 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1331 = new BitSet(new long[]{0x0040004000003000L,0x0800080800000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1334 = new BitSet(new long[]{0x0040004000003000L,0x0800080800000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1337 = new BitSet(new long[]{0x0040004000003000L,0x0800080800000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1340 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1417 = new BitSet(new long[]{0x00001003FFFC3000L,0x0800000000000000L,0x0002BE000000F801L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1420 = new BitSet(new long[]{0x0000100000003000L,0x0800000000000000L,0x0000BE000000F001L});
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1423 = new BitSet(new long[]{0x0000100000003000L,0x0800000000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1426 = new BitSet(new long[]{0x0000100000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1429 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1432 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_cd_in_amount1447 = new BitSet(new long[]{0x0000008000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1472 = new BitSet(new long[]{0x0000002000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass1475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_percent1497 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_percent1499 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nnpercent_in_percent1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume1526 = new BitSet(new long[]{0x0000040000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar1551 = new BitSet(new long[]{0x0000004000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1578 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase1580 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1583 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus1598 = new BitSet(new long[]{0x0801084800003000L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_nnapparatus_in_apparatus1601 = new BitSet(new long[]{0x0801084800003002L,0x0800080000000020L,0x0000BE000004F001L});
    public static final BitSet FOLLOW_dt_in_preapparatus1627 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_quantity_in_preapparatus1631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_preapparatus1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_preapparatus1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus1643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_measurements1652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_nn_in_measurements1654 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_multiple_in_measurements1658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements1660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_dt_in_measurements1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_multiple1673 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_cdunicode_in_multiple1675 = new BitSet(new long[]{0x0000004000000002L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurementtypes_in_multiple1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes1705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes1707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound1726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound1728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound1730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound5_in_oscarCompound1734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound51746 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound51748 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound51750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound41773 = new BitSet(new long[]{0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound41776 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound41778 = new BitSet(new long[]{0x0000000000000002L,0x0000005000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31805 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31808 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound31810 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound31814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21842 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound21844 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_jj_in_oscarCompound11867 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound11869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount11893 = new BitSet(new long[]{0x0000004008000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount11895 = new BitSet(new long[]{0x0000004008000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount11899 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21911 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21913 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21917 = new BitSet(new long[]{0x0040004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_citation_in_moleculeamount21922 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount21924 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount21926 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule1962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarcdType1985 = new BitSet(new long[]{0x0000000000000800L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_oscarcdType1988 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_cd_in_oscarcdType1990 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarcdType1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12002 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12004 = new BitSet(new long[]{0x0000000000000800L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount12007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount22017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcdType_in_unnamedmoleculeamount22019 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22022 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22024 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22026 = new BitSet(new long[]{0x0000004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32042 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32044 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32047 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32050 = new BitSet(new long[]{0x187FFFDC0000F802L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity12132 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12134 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity12137 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12140 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_comma_in_quantity12145 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12147 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_stop_in_quantity12152 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12154 = new BitSet(new long[]{0x0000000000000000L,0x0000108800000000L});
    public static final BitSet FOLLOW_rrb_in_quantity12159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22170 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_comma_in_quantity22173 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity22176 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2192 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nn_in_method2194 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2198 = new BitSet(new long[]{0x0000000000000802L,0x0800000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2225 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2227 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2229 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2231 = new BitSet(new long[]{0x0000000000000002L,0x00001E0000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2239 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2246 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2253 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2260 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2268 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2275 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2282 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_inas2291 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inbefore2298 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inafter2305 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inin2312 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ininto2319 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_inwith2326 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwithout2333 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inby2340 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_invia2347 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_inof2354 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inon2361 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_infor2368 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor2370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infrom2375 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom2377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_inunder2382 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder2384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inover2389 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inoff2396 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff2398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_nnexample2405 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample2407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnstate2412 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nntime2419 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime2421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nnmass2426 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmolar2434 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnamount2442 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnatmosphere2449 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nneq2456 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nnvol2463 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnchementity2470 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity2472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nntemp2477 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp2479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nnflash2484 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nngeneral2491 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nnmethod2498 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnpressure2506 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nncolumn2513 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn2515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nnchromatography2520 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnvacuum2527 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nncycle2534 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle2536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nntimes2541 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_oscarcm2550 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm2552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_vbuse2559 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbchange2566 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange2568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbsubmerge2573 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge2575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubject2580 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject2582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_nnadd2589 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnmixture2596 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_vbadd2603 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbcharge2610 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbcontain2617 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain2619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbdrop2624 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbfill2631 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill2633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbsuspend2638 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbtreat2645 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat2647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbapparatus2654 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus2656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_nnapparatus2661 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus2663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbconcentrate2670 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnconcentrate2677 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate2679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbcool2686 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_vbdegass2695 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbdissolve2704 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdry2713 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_nndry2720 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry2722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbextract2729 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nnextract2736 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract2738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbfilter2745 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter2747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnfilter2752 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbheat2761 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_vbincrease2768 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbpartition2777 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbprecipitate2786 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate2788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_nnprecipitate2793 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbpurify2802 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify2804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_nnpurify2809 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_vbquench2818 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench2820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbrecover2827 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover2829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_vbremove2836 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove2838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_nnremove2843 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbstir2852 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbsynthesize2861 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_nnsynthesize2868 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbwait2877 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbwash2886 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash2888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_vbyield2895 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield2897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_colon2904 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon2906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_comma2911 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_apost2918 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_neg2925 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_dash2932 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash2934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_stop2939 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_nnpercent2946 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_lsqb2953 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_rsqb2960 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_lrb2968 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_rrb2975 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb2977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_abl2986 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_abn2995 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_abx3004 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_ap3013 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_at3022 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_be3031 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_bed3040 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed3042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_bedz3049 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_beg3058 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg3060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_bem3067 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem3069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ben3076 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_ber3085 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_bez3094 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez3096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_cc3103 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_cd3112 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cs3121 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs3123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_dotok3131 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok3133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_dod3140 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_doz3149 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_dt3158 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dti3167 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti3169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dts3176 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts3178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_dtx3185 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_ex3194 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_fw3203 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_fwin3212 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_hv3221 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_hvd3230 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_hvg3239 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_hvn3248 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_in3257 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_jj3266 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_jjr3275 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_jjs3284 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_jjt3293 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_md3302 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_nc3311 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_nn3320 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_nn_poss3329 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_nns3338 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_nns_poss3347 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_np3356 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np3358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nnp3366 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_np_poss3376 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss3378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nps3385 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps3387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nps_poss3394 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss3396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_nr3403 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr3405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_od3412 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od3414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_pn3421 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_pn_poss3430 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_pp_poss3439 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_pp_poss_poss3448 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ppl3457 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl3459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ppls3466 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls3468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_prp3476 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp3479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ppo3486 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo3488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_pps3495 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ppss3504 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss3506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ql3513 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql3515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_qlp3522 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp3524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_rb3531 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_rbr3540 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr3542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_rbconj3551 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj3554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_rbt3562 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_rbs3571 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_rn3581 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn3583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rp3590 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp3592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_sym3601 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_to3610 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to3612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_uh3619 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh3621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_vb3628 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb3630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_vbp3638 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp3640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_vbd3649 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd3651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_vbg3658 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg3660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_vbn3667 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn3669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_vbz3676 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_wdt3685 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt3687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_wp_poss3694 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss3696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_wpo3704 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_wps3713 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps3715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_wql3723 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql3725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_wrb3732 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_pdt3743 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt3745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred12_ChemicalChunker302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred13_ChemicalChunker304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred14_ChemicalChunker306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred16_ChemicalChunker310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred17_ChemicalChunker312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred18_ChemicalChunker314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred19_ChemicalChunker316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred20_ChemicalChunker318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred21_ChemicalChunker320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred22_ChemicalChunker322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred26_ChemicalChunker330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred27_ChemicalChunker332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred28_ChemicalChunker365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred29_ChemicalChunker368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred30_ChemicalChunker373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred31_ChemicalChunker375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred32_ChemicalChunker377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred33_ChemicalChunker379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred34_ChemicalChunker387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred35_ChemicalChunker390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred36_ChemicalChunker387 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0C00080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_advAdj_in_synpred36_ChemicalChunker390 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_synpred36_ChemicalChunker394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred37_ChemicalChunker396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred38_ChemicalChunker398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred39_ChemicalChunker406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred40_ChemicalChunker411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred41_ChemicalChunker409 = new BitSet(new long[]{0x0040004000000002L,0x0800080800000000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred41_ChemicalChunker411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred42_ChemicalChunker426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred44_ChemicalChunker475 = new BitSet(new long[]{0x0040004000000000L,0x0800080800000000L});
    public static final BitSet FOLLOW_molecule_in_synpred44_ChemicalChunker477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_synpred46_ChemicalChunker523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred47_ChemicalChunker526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred52_ChemicalChunker542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred53_ChemicalChunker545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred54_ChemicalChunker548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred55_ChemicalChunker551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred56_ChemicalChunker554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred57_ChemicalChunker533 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adv_in_synpred57_ChemicalChunker536 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_adj_in_synpred57_ChemicalChunker539 = new BitSet(new long[]{0xE7800003FFFC3000L,0x00000003B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_verb_in_synpred57_ChemicalChunker542 = new BitSet(new long[]{0xE7800003FFFC3002L,0x00000023B75EAF5FL,0x01FABE000001F800L});
    public static final BitSet FOLLOW_md_in_synpred57_ChemicalChunker545 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000001F000L});
    public static final BitSet FOLLOW_adv_in_synpred57_ChemicalChunker548 = new BitSet(new long[]{0x0000000000003002L,0x0000002000000000L,0x0000BE000000F000L});
    public static final BitSet FOLLOW_adj_in_synpred57_ChemicalChunker551 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_neg_in_synpred57_ChemicalChunker554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred58_ChemicalChunker560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred61_ChemicalChunker564 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_comma_in_synpred61_ChemicalChunker567 = new BitSet(new long[]{0xFFFFFFDFFFFCF800L,0x0800082BFFFFEFFFL,0xFFFBBE080095F871L});
    public static final BitSet FOLLOW_prepphrase_in_synpred61_ChemicalChunker570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred102_ChemicalChunker679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred103_ChemicalChunker681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred109_ChemicalChunker701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred111_ChemicalChunker705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred112_ChemicalChunker707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred113_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred114_ChemicalChunker711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred117_ChemicalChunker717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred121_ChemicalChunker725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred122_ChemicalChunker727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred123_ChemicalChunker729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred127_ChemicalChunker737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred128_ChemicalChunker739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred129_ChemicalChunker741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred135_ChemicalChunker753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred144_ChemicalChunker771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred145_ChemicalChunker773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred146_ChemicalChunker775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred147_ChemicalChunker777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred151_ChemicalChunker785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred152_ChemicalChunker787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred160_ChemicalChunker822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred161_ChemicalChunker851 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_cd_in_synpred161_ChemicalChunker853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred162_ChemicalChunker870 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_synpred162_ChemicalChunker872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred172_ChemicalChunker1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred173_ChemicalChunker1018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred174_ChemicalChunker1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred176_ChemicalChunker1024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred177_ChemicalChunker1026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred178_ChemicalChunker1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred179_ChemicalChunker1030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred181_ChemicalChunker1034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred182_ChemicalChunker1036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred183_ChemicalChunker1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred184_ChemicalChunker1040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred185_ChemicalChunker1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred186_ChemicalChunker1044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred187_ChemicalChunker1046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred188_ChemicalChunker1048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred190_ChemicalChunker1056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred191_ChemicalChunker1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred192_ChemicalChunker1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred194_ChemicalChunker1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred195_ChemicalChunker1066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred196_ChemicalChunker1068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred197_ChemicalChunker1070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred199_ChemicalChunker1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred200_ChemicalChunker1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred201_ChemicalChunker1078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred202_ChemicalChunker1080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred203_ChemicalChunker1082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred204_ChemicalChunker1084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred205_ChemicalChunker1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred206_ChemicalChunker1088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred208_ChemicalChunker1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred220_ChemicalChunker1147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred221_ChemicalChunker1149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred222_ChemicalChunker1151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred223_ChemicalChunker1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred227_ChemicalChunker1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred232_ChemicalChunker1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred235_ChemicalChunker1342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred253_ChemicalChunker1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred258_ChemicalChunker1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred266_ChemicalChunker1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred276_ChemicalChunker1665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurementtypes_in_synpred277_ChemicalChunker1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred282_ChemicalChunker1726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2_in_synpred283_ChemicalChunker1728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound4_in_synpred285_ChemicalChunker1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred287_ChemicalChunker1776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred289_ChemicalChunker1808 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred289_ChemicalChunker1810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred290_ChemicalChunker1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred291_ChemicalChunker1844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred292_ChemicalChunker1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred293_ChemicalChunker1895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred294_ChemicalChunker1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred295_ChemicalChunker1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred296_ChemicalChunker1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred297_ChemicalChunker1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred298_ChemicalChunker1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred299_ChemicalChunker1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred300_ChemicalChunker1937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred304_ChemicalChunker2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred305_ChemicalChunker2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred306_ChemicalChunker2026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred307_ChemicalChunker2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred308_ChemicalChunker2047 = new BitSet(new long[]{0x187FFFDC0000F800L,0x0800080868A140A0L,0xFE01BE080094F071L});
    public static final BitSet FOLLOW_noun_in_synpred308_ChemicalChunker2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred309_ChemicalChunker2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred310_ChemicalChunker2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred315_ChemicalChunker2173 = new BitSet(new long[]{0x0000004000000000L,0x0800080000000000L});
    public static final BitSet FOLLOW_measurements_in_synpred315_ChemicalChunker2176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred320_ChemicalChunker2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred321_ChemicalChunker2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred322_ChemicalChunker2229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred323_ChemicalChunker2231 = new BitSet(new long[]{0x0000000000000002L});

}